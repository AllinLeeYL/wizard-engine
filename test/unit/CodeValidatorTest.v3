// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT(_, CodeValidatorTester.new, _);
def X = [
	T("validator/local0", test_local0),
	T("validator/ret0", test_ret0),
	T("validator/ret1", test_ret1),
	T("validator/br_table0", test_br_table0),
	()
];

class CodeValidatorTester(t: Tester) extends ModuleBuilder {
	def valid(raw: Array<byte>) {
		code(raw);
		var v = CodeValidator.new(module);
		match (v.validate(func)) {
			Ok => ;
			Error(pc, msg) => t.fail2("expected success, got error @+%d: %s", pc, msg);
		}
	}
	def invalid(raw: Array<byte>, error_pc: int) {
		code(raw);
		var v = CodeValidator.new(module);
		var ok = v.validate(func);
		match (v.validate(func)) {
			Ok => t.fail1("expected error @+%d, got success", error_pc);
			Error(pc, msg) => if (pc != error_pc) {
				t.fail3("expected error @+%d, got error @+%d: %s", error_pc, pc, msg);
			}
		}
	}
}

def test_local0(t: CodeValidatorTester) {
	t.invalid([Opcode.LOCAL_GET.code, 0], 1);
	t.sig(SigCache.i_i);
	t.valid([Opcode.LOCAL_GET.code, 0]);
}

def test_ret0(t: CodeValidatorTester) {
	t.sig(SigCache.v_v);
	t.valid([]);
	t.valid([Opcode.RETURN.code]);
	
	t.invalid([Opcode.I32_CONST.code, 0], 3);
	t.invalid([Opcode.I64_CONST.code, 0], 3);
	t.invalid([Opcode.F32_CONST.code, 0, 0, 0, 0], 6);
	t.invalid([Opcode.F64_CONST.code, 0, 0, 0, 0, 0, 0, 0, 0], 10);
}

def test_ret1(t: CodeValidatorTester) {
	t.sig(SigCache.v_i);
	t.invalid([], 1);
	t.invalid([Opcode.RETURN.code], 1);
	
	t.valid([Opcode.I32_CONST.code, 0]);
	t.invalid([Opcode.I64_CONST.code, 0], 3);
	t.invalid([Opcode.F32_CONST.code, 0, 0, 0, 0], 6);
	t.invalid([Opcode.F64_CONST.code, 0, 0, 0, 0, 0, 0, 0, 0], 10);
}

def test_br_table0(t: CodeValidatorTester) {
	t.sig(SigCache.i_i);
	t.valid([Opcode.I32_CONST.code, 7,
		Opcode.LOCAL_GET.code, 0,
		Opcode.BR_TABLE.code, 2,
		0, 0, 0]);
	// TODO: more br_table tests
}