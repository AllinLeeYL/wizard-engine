// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT(_, BinParserTester.new, _);
def X: Array<Value>;

def Z = [
	T("bin/empty", test_empty),
	T("bin/magic", test_magic),
	T("bin/version", test_version),
	T("bin/buf_offset", test_buf_offset),
	()
];

class BinParserTester(t: Tester) {
	def invalid(expected: WasmError, mod: Array<byte>) {
		var m = mp();
		m.push(mod, 0, mod.length);
		assert_invalid(expected, m.finish());
	}
	def assert_invalid(expected: WasmError, r: BinParserResult) {
		match (r) {
			Ok(module) => t.fail1("expected error %s, but passed", expected.name);
			Error(code, filename, error_pos, error_msg) => {
				if (code == expected) return;
				var buf = StringBuffer.new();
				buf.put2("expected error %s, but got %s: ", expected.name, code.name);
				buf.put2("@+%d %s", error_pos, error_msg);
				t.fail(buf.extract());
			}
		}
	}
	def assert_valid(r: BinParserResult) {
		match (r) {
			Ok(module) => ;
			Error(code, filename, error_pos, error_msg) => {
				var buf = StringBuffer.new();
				buf.put1("expected success, but got %s: ", code.name);
				buf.put2("@+%d %s", error_pos, error_msg);
				t.fail(buf.extract());
			}
		}
	}
	def mp() -> ModuleParser {
		var v = if (wizeng.verbose, Verbosity.VERBOSE, Verbosity.SILENT);
		return ModuleParser.new(v, "test");
	}
}

def TINY_MODULE: Array<byte> = [
	0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00
];

def test_empty(t: BinParserTester) {
	for (i = 1; i <= 1; i++) {
		var mod = Arrays.range(TINY_MODULE, 0, i);
		t.invalid(WasmError.INVALID_HEADER, mod);
	}
}

def test_magic(t: BinParserTester) {
	def template = Arrays.range(TINY_MODULE, 0, TINY_MODULE.length);
	for (i < 4) {
		var prev = template[i];
		template[i] = 0xFF;
		t.invalid(WasmError.INVALID_HEADER, template);
		template[i] = prev;
	}
}

def test_version(t: BinParserTester) {
	def template = Arrays.range(TINY_MODULE, 0, TINY_MODULE.length);
	for (i = 4; i < 8; i++) {
		var prev = template[i];
		template[i] = 0xFF;
		t.invalid(WasmError.INVALID_HEADER, template);
		template[i] = prev;
	}
}

def test_buf_offset(t: BinParserTester) {
	def len = TINY_MODULE.length;
	var buffer = Array<byte>.new(3 * len);
	for (i < (len * 2) + 1) {
		Arrays.copyInto(buffer, i, TINY_MODULE, 0, len);
		var m = t.mp();
		m.push(buffer, i, len);
		t.assert_valid(m.finish());
	}
}
