// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class ModuleBuilder {
	def module = Module.new();
	var func: FunctionDecl;
	def locals = Vector<(ValueType, u32)>.new();
	var num_locals: int;
	new() {
		var sig = SigCache.v_i;
		module.types.declared.add(sig);
		func = FunctionDecl.new(false, 0, sig);
		module.functions.declared.add(func);
	}
	def sig(sig: TypeDecl.Function) -> this {
		module.types.declared[0] = sig;
		func = FunctionDecl.new(false, 0, sig);
		module.functions.declared[0] = func;
	}
	def code(raw: Array<byte>) -> this {
		var body = makeBody(raw, this.locals);
		func.code = FunctionCode.new(body);
		func.code.num_locals = num_locals;
	}
	def validate() -> bool {
		var v = CodeValidator.new(module);
		return CodeValidatorResult.Ok.?(v.validate(func));
	}
	private def makeBody(raw: Array<byte>, locals: Vector<(ValueType, u32)>) -> Array<byte> {
		var copy = Vector<byte>.new();
		BinEncoder.append_u32leb(copy, u32.!(locals.size()));
		for (i < locals.size()) {
			var e = locals[i];
			BinEncoder.append_u32leb(copy, u32.!(e.1));
			BinEncoder.append_ValueType(copy, e.0);
		}
		copy.addv(raw);
		copy.add(WasmOpcode.END.code);
		return copy.extract();
	}
	def addGlobal(typ: ValueType, init: InitExpr) -> int {
		var index = module.globals.size();
		module.globals.declared.add(GlobalDecl.new(false, typ, true, init));
		return index;
	}
	def addLocal(typ: ValueType) -> int {
		var size = locals.size();
		if (size > 0) {
			var last = locals[size-1];
			if (last.0 == typ) {
				locals[size-1] = (last.0, last.1+1);
				return func.sig.params.length + num_locals++;
			}
		}
		locals.add((typ, 1));
		return func.sig.params.length + num_locals++;
	}
	def addFunction(sig: TypeDecl.Function, raw: Array<byte>) -> (int, FunctionDecl) {
		var sig_index = module.types.size();
		module.types.declared.add(sig);
		var func = FunctionDecl.new(false, sig_index, sig);
		module.functions.declared.add(func);
		func.code = FunctionCode.new(makeBody(raw, Vector.new()));
		return (module.functions.size() - 1, func);
	}
	def addTable(length: int, offset: int, indices: Array<int>) -> this {
		var table = TableDecl.new(false, ElemType.FuncRef, length, length);
		module.tables.declared.add(table);
		var details = ElemDetails.FuncRefs(indices);
		var elem = ElemDecl.new(0, InitExpr.I32(offset), details, true);
		module.elems.add(elem);
	}
}