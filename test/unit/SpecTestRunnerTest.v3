// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT(_, SpecTestRunnerTester.new, _);
def X = [
	T("st_run:i32", test_i32_const),
	T("st_run:i64", test_i64_const),
	T("st_run:f32", test_f32_const),
	T("st_run:f64", test_f64_const),
	()
];

class SpecTestRunnerTester(t: Tester) {
	def parseCommand(str: string) -> SpecTestCommand {
		var p = SpecTestParser.new("SpecTestRunnerTest.v3", str);
		return p.parseOneCommand();
	}
	def assertI32(str: string, expected: int) {
		assertConstant(str, Value.I32(u32.!(expected)));
	}
	def assertConstant(str: string, expected: Value) {
		var v = parseCommand(str);
		if (StCommand.Constant.?(v.cmd)) {
			var got = StCommand.Constant.!(v.cmd).val;
			if (got != expected) {
				t.fail2("expected %q, got %q",
					Values.render(_, expected), Values.render(_, got));
			}
		} else {
			t.fail1("expected constant, got %s", v.cmd.name);
		}
	}
}

def test_i32_const(t: SpecTestRunnerTester) {
	t.assertI32("(i32.const 0)", 0);
	t.assertI32("(i32.const 23)", 23);
	t.assertI32("(i32.const -32)", -32);
	t.assertI32("(i32.const 0xABCDEF01)", 0xABCDEF01);
	t.assertI32("(i32.const 0x12345678)", 0x12345678);
	t.assertI32("(i32.const -0x97531)", 0-0x97531);
	t.assertI32("(i32.const 1469788397)", 1469788397);
	t.assertI32("(i32.const 1469837011)", 1469837011);
	t.assertI32("(i32.const 1469837011)", 1469837011);
	t.assertI32("(i32.const 1989852383)", 1989852383);
	t.assertI32("(i32.const 1989852383)", 1989852383);
	t.assertI32("(i32.const 2147483647)", 2147483647);
	t.assertI32("(i32.const 2147483648)", int.!(2147483648));
	t.assertI32("(i32.const -2147483647)", -2147483647);
	t.assertI32("(i32.const -2147483648)", -2147483648);
	t.assertI32("(i32.const 2147483661)", int.!(2147483661));
	t.assertI32("(i32.const 2882377846)", int.!(2882377846));
	t.assertI32("(i32.const 2965492451)", int.!(2965492451));
	t.assertI32("(i32.const 3758997519)", int.!(3758997519));
	t.assertI32("(i32.const 406477942)", int.!(406477942));
	t.assertI32("(i32.const 4261469184)", int.!(4261469184));
	t.assertI32("(i32.const 4294967277)", int.!(4294967277));
	t.assertI32("(i32.const 4294967295)", int.!(4294967295));
	t.assertI32("(i32.const 0x80000000)", 0x80000000);
	t.assertI32("(i32.const 0xffffffff)", 0xffffffff);
	t.assertI32("(i32.const 0x7fffffff)", 0x7fffffff);
	t.assertI32("(i32.const -0x80000000)", 0-0x80000000);
	t.assertI32("(i32.const -0xffffffff)", 0-0xffffffff);
	t.assertI32("(i32.const -0x7fffffff)", 0-0x7fffffff);
}

def test_i64_const(t: SpecTestRunnerTester) {
	// TODO
}

def test_f32_const(t: SpecTestRunnerTester) {
	// TODO
}

def test_f64_const(t: SpecTestRunnerTester) {
	// TODO
}
