// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.register;
def X = [
	T("utf8:ok", test_ok),
	T("utf8:overlong", test_overlong),
	T("utf8:err1", test_err1),
	T("utf8:err2", test_err2),
	T("utf8:err3", test_err3),
	T("utf8:illegal", test_illegal),
	()
];

def assert_utf8(ok: bool, t: Tester, str: string) {
	var err = Utf8.findError(str);
	var got = err < 0;
	if (got == ok) return;
	if (ok) t.fail1("expected valid UTF-8, got error @+%d", err);
	else t.fail("expected invalid UTF-8, but passed");
}

def test_ok(t: Tester) {
	def p = assert_utf8(true, t, _);

	p([0xed, 0x9f, 0xbf]);
	p([0xee, 0x80, 0x80]);
	p([0xef, 0xbf, 0xbd]);
	p([0xf4, 0x8f, 0xbf, 0xbf]);
}

def test_overlong(t: Tester) {
	def n = assert_utf8(false, t, _);

	n([0xc0]);
	n([0xc1]);

	n([0xc0, 0xaf]);
	n([0xe0, 0x80, 0xaf]);
	n([0xf0, 0x80, 0x80, 0xaf]);
	n([0xf8, 0x80, 0x80, 0x80, 0xaf]);
	n([0xfc, 0x80, 0x80, 0x80, 0x80, 0xaf]);

	n([0xc1, 0xbf]);
	n([0xe0, 0x9f, 0xbf]);
	n([0xf0, 0x8f, 0xbf, 0xbf]);
	n([0xf8, 0x87, 0xbf, 0xbf, 0xbf]);
	n([0xfc, 0x83, 0xbf, 0xbf, 0xbf, 0xbf]);

	n([0xc0, 0x80]);
	n([0xe0, 0x80, 0x80]);
	n([0xf0, 0x80, 0x80, 0x80]);
	n([0xf8, 0x80, 0x80, 0x80, 0x80]);
	n([0xfc, 0x80, 0x80, 0x80, 0x80, 0x80]);
}

def test_err1(t: Tester) {
	def n = assert_utf8(false, t, _);
	n([0xfe]);
	n([0xff]);
	n([0xfe, 0xfe, 0xff, 0xff]);
}

def test_err2(t: Tester) {
	def n = assert_utf8(false, t, _);

	n([0xed, 0xa0, 0x80]);
	n([0xed, 0xad, 0xbf]);
	n([0xed, 0xae, 0x80]);
	n([0xed, 0xaf, 0xbf]);
	n([0xed, 0xb0, 0x80]);
	n([0xed, 0xbe, 0x80]);
	n([0xed, 0xbf, 0xbf]);
}

def test_err3(t: Tester) {
	def n = assert_utf8(false, t, _);

	n([0xed, 0xa0, 0x80, 0xed, 0xb0, 0x80]);
	n([0xed, 0xa0, 0x80, 0xed, 0xbf, 0xbf]);
	n([0xed, 0xad, 0xbf, 0xed, 0xb0, 0x80]);
	n([0xed, 0xad, 0xbf, 0xed, 0xbf, 0xbf]);
	n([0xed, 0xae, 0x80, 0xed, 0xb0, 0x80]);
	n([0xed, 0xae, 0x80, 0xed, 0xbf, 0xbf]);
	n([0xed, 0xaf, 0xbf, 0xed, 0xb0, 0x80]);
	n([0xed, 0xaf, 0xbf, 0xed, 0xbf, 0xbf]);
}

def test_illegal(t: Tester) {
	def n = assert_utf8(false, t, _);

	n([0xf5]);
	n([0xf6]);
	n([0xf7]);
	n([0xf8]);
	n([0xf9]);
	n([0xfa]);
	n([0xfb]);
	n([0xfc]);
	n([0xfd]);
	n([0xfe]);
	n([0xff]);
	n([0xef, 0xbf, 0xbe]);
	n([0xef, 0xbf, 0xbf]);
	n([0xf4, 0x90, 0x80, 0x80]);
}
