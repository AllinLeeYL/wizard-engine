// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.register;
def X = [
	T("decoder:append", test_append),
	T("decoder:append_err", test_append_err),
	T("decoder:divest", test_divest),
	()
];

def test_append(t: Tester) {
	// initial buffer = []
	def T = t.asserti;
	def D = t.asserteq<Array<byte>>;
	def B = t.assertb;
	var x1: Array<byte> = [];
	var d = Decoder.new(x1, ErrorGen.new());
	T(0, d.pos);
	T(0, d.limit);
	T(0, d.skipped);

	// first append of [0x99]
	var x2: Array<byte> = [0x99];
	d.append(0, x2, 0, x2.length);
	T(0, d.pos);
	T(1, d.limit);
	T(0, d.skipped);
	D(x2, d.data);

	// append [0x88, 0x99], should copy into new buffer
	var x3: Array<byte> = [0x88, 0x77];
	d.append(0, x3, 0, x3.length);
	T(0, d.pos);
	T(3, d.limit);
	T(0, d.skipped);
	t.assertne(x1, d.data);
	t.assertne(x2, d.data);
	t.assertne(x3, d.data);
	var d3 = d.data;
	B([0x99, 0x88, 0x77], d3);

	// [0x99, 0x88, 0x77] append [0x33, 0x44]
	//  ^pos  ^limit
	d.limit = 1;
	var x4: Array<byte> = [0x33, 0x44];
	d.append(0, x4, 0, x4.length);
	T(0, d.pos);
	T(3, d.limit);
	T(0, d.skipped);
	D(d3, d.data);
	B([0x99, 0x33, 0x44], d.data);

	// [0x99, 0x33, 0x44]
	//        ^pos,     ^limit
	d.pos = 1;
	var x5: Array<byte> = [0xaa, 0x11, 0x22, 0xbb];
	d.append(7, x5, 1, 2);
	T(0, d.pos);
	T(4, d.limit);
	T(1, d.skipped);
	T(7, d.data.length); // hint should be utilized
	B([0x33, 0x44, 0x11, 0x22, 0, 0, 0], d.data);

	// [x, x, x, x, x, x, x]
	//                     ^pos==limit
	d.pos = 7;
	d.limit = 7;
	var x6: Array<byte> = [0, 0, 0, 0xcc];
	d.append(0, x6, 3, 1);
	T(3, d.pos);
	T(4, d.limit);
	T(5, d.skipped);
	D(x6, d.data);
}

def test_append_err(t: Tester) {
	def T = t.asserti;
	var x1: Array<byte> = [0x33, 0x44, 0x11, 0x22, 0, 0, 0];
	var err = ErrorGen.new();
	var d = Decoder.new(x1, err);
	d.pos = 2;
	d.limit = 6;
	err.error_pos = 1;

	d.append(0, [0x77, 0x66], 0, 2);
	T(0, d.pos);
	T(6, d.limit);
	T(2, d.skipped);
	T(1, err.error_pos);

	err.error_pos = 4;
	d.append(0, [0x33], 0, 1);
}

def test_divest(t: Tester) {
	def T = t.asserti;
	var x1: Array<byte> = [0x33, 0x44];
	var d = Decoder.new(x1, ErrorGen.new());

	d.divest(0, x1);
	var d1 = d.data;
	t.assertne(x1, d1);
	t.assertb(x1, d1);

	d.divest(0, x1);
	t.asserteq(d1, d.data);

	d.divest(7, d1);
	var d2 = d.data;
	t.assertne(d1, d2);
	T(7, d2.length);
	T(0, d.pos);
	T(0, d.skipped);
	T(2, d.limit);
	t.assertb([0x33, 0x44, 0, 0, 0, 0, 0], d2);

	d.pos = 3;
	d.limit = 5;
	d.divest(0, d2);
	T(0, d.pos);
	T(3, d.skipped);
	T(2, d.limit);
	var d3 = d.data;
	t.assertb([0, 0], d3);
}
