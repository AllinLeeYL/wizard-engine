// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.register("strtest:collide", test_collide);

// Some sets of hash collisions are useful for stressing any hash-based
// data structure.
component StringHashCollisions {
	def SETS = [
	["bar2",
		"\x65\x05\x54\x13",
		"\x64\x24\x54\x13",
		"\x63\x43\x54\x13",
		"\x62\x62\x54\x13",
		"\x61\x81\x54\x13",
		"\x60\xa0\x54\x13",
		"\x5f\xbf\x54\x13",
		"\x5e\xde\x54\x13",
		"\x5d\xfd\x54\x13",
		"\x65\x04\x73\x13",
		"\x64\x23\x73\x13",
		"\x63\x42\x73\x13",
		"\x62\x61\x73\x13",
		"\x61\x80\x73\x13",
		"\x60\x9f\x73\x13",
		"\x5f\xbe\x73\x13",
		"\x5e\xdd\x73\x13",
		"\x5d\xfc\x73\x13",
		"\x65\x03\x92\x13"],

	["tent",
		"\x77\x0b\x14\x17",
		"\x76\x2a\x14\x17",
		"\x75\x49\x14\x17",
		"\x74\x68\x14\x17",
		"\x73\x87\x14\x17",
		"\x72\xa6\x14\x17",
		"\x71\xc5\x14\x17",
		"\x70\xe4\x14\x17",
		"\x77\x0a\x33\x17",
		"\x76\x29\x33\x17",
		"\x75\x48\x33\x17",
		"\x74\x67\x33\x17",
		"\x73\x86\x33\x17"],

	["qux4",
		"\x6e\xd2\x79\x15",
		"\x6d\xf1\x79\x15",
		"\x74\x17\x98\x15",
		"\x73\x36\x98\x15",
		"\x72\x55\x98\x15",
		"\x71\x74\x98\x15",
		"\x70\x93\x98\x15",
		"\x6f\xb2\x98\x15",
		"\x6e\xd1\x98\x15",
		"\x6d\xf0\x98\x15",
		"\x74\x16\xb7\x15",
		"\x73\x35\xb7\x15"]
	];
}

// Check the strings actually collide! They are useless otherwise.
// Will fail happily if/when {Strings.hash} changes.
def test_collide(t: Tester) {
	for (r in StringHashCollisions.SETS) {
		var first = r[0];
		var hashcode = Strings.hash(first);
		for (i = 1; i < r.length; i++) {
			var got = Strings.hash(r[i]);
			if (hashcode != got) {
				System.puti(hashcode);
				System.puts(" ");
				System.puti(got);
				System.ln();
				t.fail2("\"%s\"[%d] does not collide", first, i);
			}
		}
	}
}
