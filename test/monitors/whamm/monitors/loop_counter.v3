def MAX_ENTRIES = 10000;
var entries: Array<int>;
var last_entry = 0;

export "wasm:opcode:loop($alloc_loop(fid,pc))" def counter(p: Pointer) {
	p.store<int>(p.load<int>() + 1);
}

export "$alloc_loop" def alloc_loop(fid: int, pc: int) -> Pointer {
	if (entries == null) entries = Array<int>.new(MAX_ENTRIES * 3);
	var e = entries[last_entry ..+ 3];
	e[0] = fid;
	e[1] = pc;
	last_entry += 3;
	return Pointer.atElement(e, 2);
}

export "wasm:exit" def report() {
	def name_buffer = Array<byte>.new(128);
	var last_fid = -1;
	for (i = 0; i < last_entry; i += 3) {
		var e = entries[i ..+ 3];
		var fid = e[0];
		if (fid != last_fid) {
			var name = WhammCoModule.read_function_name(name_buffer, u32.!(fid)).0;
			if (name.length > 0) {
				Wizeng.puts("func \"");
				Wizeng.putr(name);
				Wizeng.puts("\"");
			} else {
				Wizeng.puts("func #");
				Wizeng.puti(fid);
			}
			Wizeng.puts(":\n");
			last_fid = fid;
		}
		Wizeng.puts("   +");
		Wizeng.puti(e[1]);
		Wizeng.puts(" loop: ");
		Wizeng.puti(e[2]);
		Wizeng.ln();
	}
}
