// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses and runs binary WebAssembly spec tests (.bin.wast).
component spectest {
	def trace = TraceBuilder.new();
	var skip_actions = false;
	def main(args: Array<string>) -> int {
		var count = 0;
		var engine = Engine.new();
		filterOptions(args, TraceOptions.parse);
		filterOptions(args, engine.parseOption);
		for (i < args.length) {
			var a = args[i];
			if (a == null) continue;
			if (Strings.equal(a, "--skip-actions")) {
				skip_actions = true;
				args[i] = null;
				continue;
			}
			if (Strings.endsWith(a, ".wast")) count++;
		}
		if (count == 0) {
			System.puts("spectest: no input files\n");
			return 3;
		}
		if (count > 1) {
			trace.puts("##>");
			trace.putd(count);
		}
		for (a in args) {
			if (a == null) continue;
			if (Strings.endsWith(a, ".wast")) runTest(engine, a);
		}

		return 0;
	}
	def runTest(engine: Engine, filename: string) {
		trace.puts("##+");
		trace.puts(filename);
		trace.outln();
		var input = System.fileLoad(filename);
		if (input == null) {
			trace.puts("##-fail: could not load file").outln();
			return;
		}
		var p = SpecTestParser.new(filename, input, makeExternRef(Vector.new(), _));
		p.parseFile();
		if (p.ok) {
			var ip = SpecTestInterpreter.new(engine, filename, trace);
			ip.skip_actions = skip_actions;
			if (ip.run(p.commands)) trace.puts("##-ok").outln();
		} else {
			trace.put1("##-fail: %s ", filename);
			trace.put3("%d:%d %s", p.error_loc.0, p.error_loc.1, p.error_msg).outln();
			return;
		}
	}
	def makeExternRef(cache: Vector<HostObject>, i: int) -> HostObject {
		if (i >= cache.length || cache[i] == null) {
			cache.set(i, NumberedObject.new(i));
		}
		return cache[i];
	}
	def renderBinaryModule(data: Array<byte>, pos: int, length: int) {
		trace.puts("(module binary");
		for (i < length) {
			if (i % 16 == 0) {
				if (i > 0) trace.puts("\"");
				trace.puts("\n  \"");
			}
			trace.put1("\\%x", data[pos + i]);
		}
		trace.puts("\")").outln();
	}
	def filterOptions(args: Array<string>, func: string -> bool) {
		for (i < args.length) {
			if (func(args[i])) args[i] = null;
		}
	}
}
class NumberedObject(num: int) extends HostObject {
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.put1("#%d", num);
	}
}