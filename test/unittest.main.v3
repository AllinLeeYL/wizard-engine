// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component unittest {
	def expected = Strings.newMap<bool>(); // contains expected failures

	// Main entrypoint for running unit tests.
	def main(args: Array<string>) -> int {
		var matchers = Vector<GlobMatcher>.new();
		// Parse options first
		for (i < args.length) {
			var arg = args[i];
			if (TraceOptions.parse(arg)) {
				args[i] = null;
			} else if (arg.length > 0 && arg[0] == '-') {
				if (Strings.startsWith(arg, "-expected=")) {
					TestUtil.loadExpectedFile(expected, Arrays.range(arg, "-expected=".length, arg.length));
				} else {
					System.puts("Unknown option: ");
					System.puts(arg);
					System.ln();
					return 1;
				}
			} else {
				matchers.put(GlobMatcher.new(arg));
			}

		}
		UnitTests.fatal |= Trace.fatal;
		// Filter the registered tests with matchers
		var count = 0, r: List<UnitTest>;
		for (l = UnitTests.list; l != null; l = l.tail) { // count and reverse list
			var t = l.head;
			if (matchers.length > 0) {
				var skip = true;
				for (i < matchers.length) {
					if (skip) skip = !matchers[i].matches(t.name);
				}
				if (skip) continue;
			}
			r = List.new(l.head, r);
			count++;
		}
		// Run tests
		System.puts("##>");
		System.puti(count);
		System.puts(" unit tests\n");
		var fail = false;
		for (l = r; l != null; l = l.tail) {
			var u = l.head;
			var t = Tester.new(u.name);
			System.puts("##+");
			System.puts(u.name);
			System.ln();
			var before = System.ticksUs();
			u.fun(t);
			if (Trace.test) {
				var diff = System.ticksUs() - before;
				System.puts("##@");
				System.puts(u.name);
				System.puts(" : ");
				System.puti(diff);
				System.puts(" us\n");
			}
			if (t.ok) {
				System.puts("##-ok\n");
			} else if (expected[u.name]) {
				System.puts("##-ok (ignored failure: ");
				System.puts(t.msg);
				System.puts(")\n");
			} else {
				fail = true;
				System.puts("##-fail (");
				System.puts(t.msg);
				System.puts(")\n");
			}
		}
		return if(fail, 1, 0);
	}
}
