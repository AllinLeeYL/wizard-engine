// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("heap:", _, HeapTypeTester.new, _);
def Z = [
	T("cache", test_cache),
	T("canon_sig0", test_canon_sig0),
	T("canon_sig1", test_canon_sig1),
	T("canon_sig_i_i", test_canon_sig_i_i),
	T("canon_struct0", test_canon_struct0),
	T("canon_struct1", test_canon_struct1),
	T("canon_struct2", test_canon_struct2),
	T("canon_struct_super1", test_canon_struct_super1),
	T("canon_struct_super2", test_canon_struct_super2),
	T("canon_struct_rec1", test_canon_struct_rec1),
	T("canon_array0", test_canon_array0),
	T("canon_array1", test_canon_array1),
	T("canon_mixed0", test_canon_mixed0),
	T("canon_mixed1", test_canon_mixed1),
	()
];

def newSig = SigDecl.new(ValueTypes.NO_HEAPTYPES, _, _);
def newStruct = StructDecl.new(ValueTypes.NO_HEAPTYPES, _);
def newArray = ArrayDecl.new(ValueTypes.NO_HEAPTYPES, _);

class HeapTypeTester(t: Tester) {
	def test_id_cached(a: Array<HeapTypeDecl>) {
		var cache = HeapTypeCache.new();
		var canon = IsoRecCanonicalizer.new(cache);
		var vec = Vector<HeapTypeDecl>.new();

		vec.puta(a);

		for (i < vec.length) {
			canon.doGroup(vec, i, 1);

			for (j < vec.length) {
				t.asserteq(a[j], vec[j]);
			}
		}
		t.asserti(a.length, cache.count);
	}
	def test_group_cached(first: Array<HeapTypeDecl>) {
		def N = 3;
		var cache = HeapTypeCache.new();
		var vec = Vector<HeapTypeDecl>.new();
		// init vector with {N} groups
		put_group(vec, first);
		for (i < (N - 1)) put_group(vec, Arrays.map(first, dupHeapTypeDecl));
		// run the comparator canonicalization
		var cmp = IsoRecCanonicalizer.new(cache);
		for (i < N) {
			cmp.doGroup(vec, i * first.length, first.length);
		}
		// check that all {N} groups are ref-equal to the first array
		t.asserti(first.length, cache.count);
		for (i < N) {
			var j = i * first.length;
			for (k < first.length) {
				t.asserteq(first[k], vec[j + k]);
			}
		}
	}
	def put_group(vec: Vector<HeapTypeDecl>, array: Array<HeapTypeDecl>) {
		for (i < array.length) {
			var d = array[i];
			d.recgrp_index = i;
			match (d) {
				x: SigDecl => x.sig_index = vec.length;
				x: StructDecl => x.struct_index = vec.length;
				x: ArrayDecl => x.array_index = vec.length;
			}
			vec.put(d);
		}
	}
}

def test_cache(t: HeapTypeTester) {
	var cache = HeapTypeCache.new();
	for (sig in [SigCache.i_i, SigCache.v_i]) {
		cache.insert(sig);
	}
	var s = newStruct([StorageType(ValueType.I32, Packedness.UNPACKED, true)]);
	cache.insert(s);
	var a = newArray([StorageType(ValueType.I32, Packedness.UNPACKED, true)]);
	cache.insert(a);
	t.t.asserti(4, cache.count);
}

def test_canon_sig0(t: HeapTypeTester) {
	t.test_id_cached([
		SigCache.i_i,
		SigCache.v_i,
		SigCache.i_v,
		SigCache.ff_f,
		SigCache.dd_d
	]);
}

def test_canon_sig1(t: HeapTypeTester) {
	t.test_group_cached([
		newSig(SigCache.arr_i, SigCache.arr_i),
		newSig(SigCache.arr_v, SigCache.arr_i),
		newSig(SigCache.arr_ff, SigCache.arr_i)
	]);
}

def test_canon_sig_i_i(t: HeapTypeTester) {
	var cache = HeapTypeCache.new();
	var canon = IsoRecCanonicalizer.new(cache);
	var vec = Vector<HeapTypeDecl>.new();

	vec.put(SigCache.i_i);
	for (i < 4) {
		vec.put(newSig(SigCache.arr_i, SigCache.arr_i));
	}

	for (i < vec.length) {
		canon.doGroup(vec, i, 1);
	}

	for (j < vec.length) {
		t.t.asserteq(SigCache.i_i, vec[j]);
	}
	t.t.asserti(1, cache.count);
}

def test_canon_struct0(t: HeapTypeTester) {
	t.test_id_cached([
		newStruct([]),
		newStruct([StorageType(ValueType.I32, Packedness.UNPACKED, true)]),
		newStruct([StorageType(ValueType.I32, Packedness.UNPACKED, false), StorageType(ValueType.V128, Packedness.UNPACKED, true)])
	]);
}

def test_canon_struct1(t: HeapTypeTester) {
	t.test_group_cached([
		newStruct([]),
		newStruct([StorageType(ValueType.I32, Packedness.UNPACKED, true)]),
		newStruct([StorageType(ValueType.I32, Packedness.UNPACKED, false), StorageType(ValueType.V128, Packedness.UNPACKED, true)])
	]);
}

def test_canon_struct2(t: HeapTypeTester) {
	var cache = HeapTypeCache.new();
	var canon = IsoRecCanonicalizer.new(cache);
	var heaptypes = Vector<HeapTypeDecl>.new();

	var s0 = newStruct([]);
	var s1 = newStruct([]);
	var s2 = newStruct([StorageType(ValueType.Ref(true, HeapType.Struct(s1)), Packedness.UNPACKED, true)]);

	t.put_group(heaptypes, [s0]);
	canon.doGroup(heaptypes, 0, 1);
	t.t.asserti(1, cache.count);

	t.put_group(heaptypes, [s1, s2]);
	canon.doGroup(heaptypes, 1, 2);
	t.t.asserti(2, cache.count);
	t.t.asserteq(s0, heaptypes[1]);
	t.t.asserteq(s2, heaptypes[2]);

	var ft = s2.field_types[0];
	t.t.asserteq(Packedness.UNPACKED, ft.packing);
	t.t.asserteq(true, ft.mutable);
	t.t.asserteq(ValueType.Ref(true, HeapType.Struct(s0)), ft.valtype);
}

def test_canon_struct_super1(t: HeapTypeTester) {
	var cache = HeapTypeCache.new();
	var canon = IsoRecCanonicalizer.new(cache);
	var heaptypes = Vector<HeapTypeDecl>.new();

	var s0 = newStruct([]);
	var s1 = newStruct([]);
	var s2 = StructDecl.new([HeapType.Struct(s1)], [StorageType(ValueType.Ref(true, HeapType.Struct(s1)), Packedness.UNPACKED, true)]);
	t.t.asserteq(HeapType.Struct(s1), s2.supertypes[0]);

	t.put_group(heaptypes, [s0]);
	canon.doGroup(heaptypes, 0, 1);
	t.t.asserti(1, cache.count);

	t.put_group(heaptypes, [s1, s2]);
	canon.doGroup(heaptypes, 1, 2);
	t.t.asserti(2, cache.count);
	t.t.asserteq(s0, heaptypes[1]);
	t.t.asserteq(s2, heaptypes[2]);

	var ft = s2.field_types[0];
	t.t.asserteq(Packedness.UNPACKED, ft.packing);
	t.t.asserteq(true, ft.mutable);
	t.t.asserteq(ValueType.Ref(true, HeapType.Struct(s0)), ft.valtype);
	t.t.asserteq(HeapType.Struct(s0), s2.supertypes[0]);
}

def test_canon_struct_super2(t: HeapTypeTester) {
	var cache = HeapTypeCache.new();
	var canon = IsoRecCanonicalizer.new(cache);
	var heaptypes = Vector<HeapTypeDecl>.new();

	var s0 = newStruct([StorageType(ValueType.I32, Packedness.UNPACKED, true)]);
	var st = StorageType(ValueType.Ref(true, HeapType.Struct(s0)), Packedness.UNPACKED, true);
	var s1 = StructDecl.new([HeapType.Struct(s0)], [st]);
	var s2 = newStruct([StorageType(ValueType.F32, Packedness.UNPACKED, true)]);
	var s3 = StructDecl.new([HeapType.Struct(s2)], [st]);

	t.put_group(heaptypes, [s0, s1]);
	canon.doGroup(heaptypes, 0, 2);
	t.t.asserti(2, cache.count);

	t.put_group(heaptypes, [s2, s3]);
	canon.doGroup(heaptypes, 2, 2);
	t.t.asserti(4, cache.count);

	t.t.asserteq(s0, heaptypes[0]);
	t.t.asserteq(s1, heaptypes[1]);
	t.t.asserteq(s2, heaptypes[2]);
	t.t.asserteq(s3, heaptypes[3]);
}

def test_canon_struct_rec1(t: HeapTypeTester) {
	var pre = StorageType(ValueType.I32, Packedness.UNPACKED, true);
	var s0 = newStruct([pre]);
	var s1 = newStruct([pre]);
	var s2 = newStruct([pre]);

	s0.field_types[0] = StorageType(ValueType.Ref(false, HeapType.Struct(s0)), pre.packing, pre.mutable); // self-recursive
	s1.field_types[0] = StorageType(ValueType.Ref(false, HeapType.Struct(s2)), pre.packing, pre.mutable); // mutually-recursive
	s2.field_types[0] = StorageType(ValueType.Ref(false, HeapType.Struct(s1)), pre.packing, pre.mutable); // mutually-recursive

	t.test_group_cached([s0, s1, s2]);
}

def test_canon_array0(t: HeapTypeTester) {
	t.test_id_cached([
		newArray([]),
		newArray([StorageType(ValueType.I32, Packedness.UNPACKED, true)]),
		newArray([StorageType(ValueType.I32, Packedness.UNPACKED, false)])
	]);
}

def test_canon_array1(t: HeapTypeTester) {
	t.test_group_cached([
		newArray([]),
		newArray([StorageType(ValueType.I32, Packedness.UNPACKED, true)]),
		newArray([StorageType(ValueType.I32, Packedness.UNPACKED, false)])
	]);
}

def test_canon_mixed0(t: HeapTypeTester) {
	t.test_id_cached([
		SigCache.i_i,
		SigCache.ff_f,
		newStruct([]),
		newStruct([StorageType(ValueType.I32, Packedness.UNPACKED, true)]),
		newArray([]),
		newArray([StorageType(ValueType.I32, Packedness.UNPACKED, true)]),
		newArray([StorageType(ValueType.I32, Packedness.UNPACKED, false)])
	]);
}

def test_canon_mixed1(t: HeapTypeTester) {
	t.test_group_cached([
		SigCache.i_i,
		SigCache.ff_f,
		newStruct([]),
		newStruct([StorageType(ValueType.I32, Packedness.UNPACKED, true)]),
		newArray([]),
		newArray([StorageType(ValueType.I32, Packedness.UNPACKED, true)]),
		newArray([StorageType(ValueType.I32, Packedness.UNPACKED, false)])
	]);
}

def dupHeapTypeDecl(decl: HeapTypeDecl) -> HeapTypeDecl {
	match (decl) {
		x: SigDecl => return newSig(x.params, x.results);
		x: StructDecl => return newStruct(x.field_types);
		x: ArrayDecl => return newArray(x.elem_types);
	}
	return null;
}
// TODO: complex sigs, structs, arrays
// TODO: recursive sigs, structs, arrays
