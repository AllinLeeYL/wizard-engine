// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("heap:", _, HeapTypeTester.new, _);
def Z = [
	T("cache", test_cache),
	T("canon_sig0", test_canon_sig0),
	T("canon_sig1", test_canon_sig1),
	T("canon_sig_i_i", test_canon_sig_i_i),
	T("canon_struct0", test_canon_struct0),
	T("canon_struct1", test_canon_struct1),
	T("canon_array0", test_canon_array0),
	T("canon_array1", test_canon_array1),
	T("canon_mixed0", test_canon_mixed0),
	T("canon_mixed1", test_canon_mixed1),
	()
];

class HeapTypeTester(t: Tester) {
	def test_id_cached(a: Array<HeapTypeDecl>) {
		var cache = HeapTypeCache.new();
		var comp = HeapTypeComparator.new(cache);
		var vec = Vector<HeapTypeDecl>.new();

		vec.puta(a);

		for (i < vec.length) {
			comp.reset(vec, i, 1);
			comp.canon();

			for (j < vec.length) {
				t.asserteq(a[j], vec[j]);
			}
		}
		t.asserti(a.length, cache.count);
	}
	def test_group_cached(first: Array<HeapTypeDecl>) {
		def N = 3;
		var cache = HeapTypeCache.new();
		var vec = Vector<HeapTypeDecl>.new();
		// init vector with {N} groups
		put_group(vec, first);
		for (i < (N - 1)) put_group(vec, Arrays.map(first, dupHeapTypeDecl));
		// run the comparator canonicalization
		var cmp = HeapTypeComparator.new(cache);
		for (i < N) {
			cmp.reset(vec, i * first.length, first.length);
			cmp.canon();
		}
		// check that all {N} groups are ref-equal to the first array
		t.asserti(first.length, cache.count);
		for (i < N) {
			var j = i * first.length;
			for (k < first.length) {
				t.asserteq(first[k], vec[j + k]);
			}
		}
	}
	def put_group(vec: Vector<HeapTypeDecl>, array: Array<HeapTypeDecl>) {
		for (i < array.length) {
			var d = array[i];
			d.recgrp_index = i;
			match (d) {
				x: SigDecl => x.sig_index = vec.length;
				x: StructDecl => x.struct_index = vec.length;
				x: ArrayDecl => x.array_index = vec.length;
			}
			vec.put(d);
		}
	}
}

def test_cache(t: HeapTypeTester) {
	var cache = HeapTypeCache.new();
	for (sig in [SigCache.i_i, SigCache.v_i]) {
		cache.insert(sig);
	}
	var s = StructDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, true)]);
	cache.insert(s);
	var a = ArrayDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, true)]);
	cache.insert(a);
	t.t.asserti(4, cache.count);
}

def test_canon_sig0(t: HeapTypeTester) {
	t.test_id_cached([
		SigCache.i_i,
		SigCache.v_i,
		SigCache.i_v,
		SigCache.ff_f,
		SigCache.dd_d
	]);
}

def test_canon_sig1(t: HeapTypeTester) {
	t.test_group_cached([
		SigDecl.new(SigCache.arr_i, SigCache.arr_i),
		SigDecl.new(SigCache.arr_v, SigCache.arr_i),
		SigDecl.new(SigCache.arr_ff, SigCache.arr_i)
	]);
}

def test_canon_sig_i_i(t: HeapTypeTester) {
	var cache = HeapTypeCache.new();
	var comp = HeapTypeComparator.new(cache);
	var vec = Vector<HeapTypeDecl>.new();

	vec.put(SigCache.i_i);
	for (i < 4) {
		vec.put(SigDecl.new(SigCache.arr_i, SigCache.arr_i));
	}

	for (i < vec.length) {
		comp.reset(vec, i, 1);
		comp.canon();
	}

	for (j < vec.length) {
		t.t.asserteq(SigCache.i_i, vec[j]);
	}
	t.t.asserti(1, cache.count);
}

def test_canon_struct0(t: HeapTypeTester) {
	t.test_id_cached([
		StructDecl.new([]),
		StructDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, true)]),
		StructDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, false), StorageType.new(ValueType.V128, Packedness.UNPACKED, true)])
	]);
}

def test_canon_struct1(t: HeapTypeTester) {
	t.test_group_cached([
		StructDecl.new([]),
		StructDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, true)]),
		StructDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, false), StorageType.new(ValueType.V128, Packedness.UNPACKED, true)])
	]);
}

def test_canon_array0(t: HeapTypeTester) {
	t.test_id_cached([
		ArrayDecl.new([]),
		ArrayDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, true)]),
		ArrayDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, false)])
	]);
}

def test_canon_array1(t: HeapTypeTester) {
	t.test_group_cached([
		ArrayDecl.new([]),
		ArrayDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, true)]),
		ArrayDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, false)])
	]);
}

def test_canon_mixed0(t: HeapTypeTester) {
	t.test_id_cached([
		SigCache.i_i,
		SigCache.ff_f,
		StructDecl.new([]),
		StructDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, true)]),
		ArrayDecl.new([]),
		ArrayDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, true)]),
		ArrayDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, false)])
	]);
}

def test_canon_mixed1(t: HeapTypeTester) {
	t.test_group_cached([
		SigCache.i_i,
		SigCache.ff_f,
		StructDecl.new([]),
		StructDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, true)]),
		ArrayDecl.new([]),
		ArrayDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, true)]),
		ArrayDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, false)])
	]);
}

def dupHeapTypeDecl(decl: HeapTypeDecl) -> HeapTypeDecl {
	match (decl) {
		x: SigDecl => return SigDecl.new(x.params, x.results);
		x: StructDecl => return StructDecl.new(x.field_types);
		x: ArrayDecl => return ArrayDecl.new(x.elem_types);
	}
	return null;
}
// TODO: complex sigs, structs, arrays
// TODO: recursive sigs, structs, arrays
