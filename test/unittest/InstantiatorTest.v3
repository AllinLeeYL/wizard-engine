// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT(_, InstantiatorTester.new, _);
def X = [
	T("inst:func1", test_func1),
	T("inst:table1", test_table1),
	T("inst:mem1", test_mem1),
	T("inst:mem2", test_mem2),
	T("inst:global1", test_global1),
	T("inst:global2", test_global2),
	()
];

class InstantiatorTester(t: Tester) extends ModuleBuilder {
	def assert_fail(bindings: Array<Exportable>) {
		var error = WasmErrorGen.new("InstantiatorTest.v3");
		var instance = Instantiator.new(extensions, module, bindings, error).run();
		if (instance != null) return t.fail("expected instantiation fail, but passed (non-null instance)");
		if (error.ok()) return t.fail("expected instantiation fail, but passed (no error)");
	}
	def assert_pass(bindings: Array<Exportable>) -> Instance {
		var error = WasmErrorGen.new("InstantiatorTest.v3");
		var instance = Instantiator.new(extensions, module, bindings, error).run();
		if (error.error()) t.fail1("instantiation failed, got %s", error.error_msg);
		if (instance == null) t.fail("instantiation failed, got null");
		return instance;
	}
}

def FUNC = HostFunction.new(SigCache.v_v, null);
def TABLE = Table.new(TableDecl.new(ValueType.EXTERNREF, 0, Max.None));
def MEMORY = Memory.new(MemoryDecl.new(0, Max.Set(0), false));
def GLOBAL = Global.new(GlobalDecl.new(ValueType.I32, false, InitExpr.I32(0)));
def TYPE = HostType.new();

def test_func1(t: InstantiatorTester) {
	var sig_decl = SigDecl.new(SigCache.v_v);
	t.module.addDef(sig_decl);
	t.module.addImport("I", "f", FuncDecl.new(sig_decl));

	t.assert_fail([]);
	t.assert_fail([null]);
	t.assert_fail([TABLE]);
	t.assert_fail([MEMORY]);
	t.assert_fail([GLOBAL]);
	t.assert_fail([TYPE]);
	t.assert_fail([HostFunction.new(SigCache.v_i, null)]);
	t.assert_fail([HostFunction.new(SigCache.i_i, null)]);

	t.assert_pass([HostFunction.new(SigCache.v_v, null)]);
}

def test_table1(t: InstantiatorTester) {
	t.module.addImport("M", "t", TableDecl.new(ValueType.EXTERNREF, 1, Max.Set(3)));

	t.assert_fail([]);
	t.assert_fail([null]);
	t.assert_fail([FUNC]);
	t.assert_fail([MEMORY]);
	t.assert_fail([GLOBAL]);
	t.assert_fail([TYPE]);

	t.assert_fail([Table.new(TableDecl.new(ValueType.FUNCREF, 1, Max.Set(3)))]);
	t.assert_fail([Table.new(TableDecl.new(ValueType.I32, 1, Max.Set(3)))]);
	t.assert_fail([Table.new(TableDecl.new(ValueType.EXTERNREF, 0, Max.Set(3)))]);
	t.assert_fail([Table.new(TableDecl.new(ValueType.EXTERNREF, 1, Max.Set(4)))]);
	t.assert_fail([Table.new(TableDecl.new(ValueType.EXTERNREF, 1, Max.None))]);

	t.assert_pass([Table.new(TableDecl.new(ValueType.EXTERNREF, 1, Max.Set(3)))]);
	t.assert_pass([Table.new(TableDecl.new(ValueType.EXTERNREF, 2, Max.Set(3)))]);
	t.assert_pass([Table.new(TableDecl.new(ValueType.EXTERNREF, 1, Max.Set(2)))]);
}

def test_mem1(t: InstantiatorTester) {
	t.module.addImport("N", "m", MemoryDecl.new(1, Max.Set(3), false));

	t.assert_fail([]);
	t.assert_fail([null]);
	t.assert_fail([FUNC]);
	t.assert_fail([TABLE]);
	t.assert_fail([GLOBAL]);
	t.assert_fail([TYPE]);

	t.assert_fail([Memory.new(MemoryDecl.new(0, Max.Set(3), false))]);
	t.assert_fail([Memory.new(MemoryDecl.new(1, Max.Set(4), false))]);
	t.assert_fail([Memory.new(MemoryDecl.new(1, Max.None, false))]);
	t.assert_fail([Memory.new(MemoryDecl.new(1, Max.Set(3), true))]);

	t.assert_pass([Memory.new(MemoryDecl.new(1, Max.Set(3), false))]);
	t.assert_pass([Memory.new(MemoryDecl.new(1, Max.Set(2), false))]);
}

def test_mem2(t: InstantiatorTester) {
	t.module.addImport("N", "m", MemoryDecl.new(1, Max.Set(3), true));

	t.assert_fail([Memory.new(MemoryDecl.new(1, Max.Set(3), false))]);

	t.assert_pass([Memory.new(MemoryDecl.new(1, Max.Set(3), true))]);
	t.assert_pass([Memory.new(MemoryDecl.new(1, Max.Set(2), true))]);
}

def test_global1(t: InstantiatorTester) {
	t.module.addImport("H", "g", GlobalDecl.new(ValueType.I64, false, InitExpr.I64(5)));

	t.assert_fail([]);
	t.assert_fail([null]);
	t.assert_fail([FUNC]);
	t.assert_fail([TABLE]);
	t.assert_fail([MEMORY]);
	t.assert_fail([TYPE]);

	t.assert_fail([Global.new(GlobalDecl.new(ValueType.I32, false, InitExpr.I32(55)))]);
	t.assert_fail([Global.new(GlobalDecl.new(ValueType.I64, true, InitExpr.I64(55)))]);

	t.assert_pass([Global.new(GlobalDecl.new(ValueType.I64, false, InitExpr.I64(55)))]);
}

def test_global2(t: InstantiatorTester) {
	t.module.addImport("H", "g", GlobalDecl.new(ValueType.F64, true, InitExpr.F64(5)));

	t.assert_fail([Global.new(GlobalDecl.new(ValueType.I32, false, InitExpr.I32(55)))]);
	t.assert_fail([Global.new(GlobalDecl.new(ValueType.F64, false, InitExpr.I64(55)))]);

	t.assert_pass([Global.new(GlobalDecl.new(ValueType.F64, true, InitExpr.I64(55)))]);
}

// TODO: more tests for imported function sig compatibility
// TODO: more tests for table elemtype compatibility
// TODO: more tests for global valtype compatibility