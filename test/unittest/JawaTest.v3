// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT(_, JawaTester.new, _);
def X = [
	T("jawa:strhash", test_strhash),
	T("jawa:importcl1", test_importcl1),
	T("jawa:importi1", test_importi1),
	T("jawa:bytearr1", test_bytearr1),
	T("jawa:primarr1", test_primarr1),
	()
];

class JawaTester(t: Tester) extends ModuleBuilder {
	def err = WasmErrorGen.new("<JawaTest>");
	def env = JawaEnvironment.new(null);
	def asm = JawaAsm.new();
	def hash(s: string) -> int {
		return int.view(JawaStrings.of(s).hashCode());
	}
	def addImport(modname: string, fldname: string, details: ImportDetails) {
		module.imports.put(ImportDecl.new(modname, fldname, details));
	}
	def importClass(name: string) {
		asm.reset();
		asm.putc(JawaTypeOpcode.EXT_CLASS.code);
		asm.put_jstr(JawaStrings.of(name));
		var clcmd = asm.extract();
		var details = ImportDetails.Type(TypeDecl.Imported(0, ImportedType.new([])));
		module.imports.put(ImportDecl.new("jawa", clcmd, details));
	}
	def addClass(s: string, sup: JawaClass) -> JawaClass {
		var cl = JawaClass.new(JawaStrings.of(s), sup, JawaClasses.NO_INTERFACES);
		env.add(cl);
		return cl;
	}
	def importInterface(name: string) {
		asm.reset();
		asm.putc(JawaTypeOpcode.EXT_INTERFACE.code);
		asm.put_jstr(JawaStrings.of(name));
		var clcmd = asm.extract();
		var details = ImportDetails.Type(TypeDecl.Imported(0, ImportedType.new([])));
		module.imports.put(ImportDecl.new("jawa", clcmd, details));
	}
	def addInterface(s: string) -> JawaInterface {
		var cl = JawaInterface.new(JawaStrings.of(s), JawaClasses.NO_INTERFACES);
		env.add(cl);
		return cl;
	}
	def process() -> Array<Exportable> {
		var result = Array<Exportable>.new(module.imports.length);
		var jip = JawaImportProcessor.new(err, env, module, result);
		jip.process();
		if (err.error()) {
			t.fail(Strings.format1("expected success, got %s", err.error_msg));
		}
		return result;
	}
	def assertIsJawaType(jt: JawaType, e: Exportable) {
		match (e) {
			r: JawaExportedType => {
				if (r.t.t != jt) t.fail(Strings.format2("expected Jawa type %q, got %q", jt.render, r.t.t.render));
			}
			_ => {
				t.fail("expected ExportedType");
			}
		}
	}
}

class JawaAsm extends StringBuilder {
	def put_jstr(j: JawaString) {
		put_jawa_i2(j.chars.length);
		for (c in j.chars) pututf8(c);
	}
	def put_jawa_i2(v: int) {
		for (j < 2) {
			putc(u7.view(v));
			v = v >> 7;
		}
	}
	def put_jawa_i4(v: int) {
		for (j < 2) {
			putc(u7.view(v));
			v = v >> 7;
		}
	}
}

def test_strhash(t: JawaTester) {
	t.t.asserti(97, t.hash("a"));
	t.t.asserti(2027435274, t.hash("agzAFZ09"));
	t.t.asserti(1998497278, t.hash("!@#$%^&*()"));
}

def test_importcl1(t: JawaTester) {
	var d = t.addClass("Fred", null);
	t.importClass("Fred");
	var r = t.process();
	t.assertIsJawaType(JawaType.Class(d), r[0]);
}

def test_importi1(t: JawaTester) {
	var d = t.addInterface("Fred");
	t.importInterface("Fred");
	var r = t.process();
	t.assertIsJawaType(JawaType.Interface(d), r[0]);
}

def test_bytearr1(t: JawaTester) {
	t.addImport("jawa", [JawaTypeOpcode.BYTE_ARRAY.code], ImportDetails.Type(TypeDecl.Imported(0, ImportedType.new([]))));
	var r = t.process();
	t.assertIsJawaType(JawaType.Array(JawaType.BYTE), r[0]);
}

def test_primarr1(t: JawaTester) {
	def cases = [
		(JawaTypeOpcode.BYTE_ARRAY, JawaType.BYTE),
		(JawaTypeOpcode.BOOL_ARRAY, JawaType.BOOL),
		(JawaTypeOpcode.CHAR_ARRAY, JawaType.CHAR),
		(JawaTypeOpcode.SHORT_ARRAY, JawaType.SHORT),
		(JawaTypeOpcode.INT_ARRAY, JawaType.INT),
		(JawaTypeOpcode.LONG_ARRAY, JawaType.LONG),
		(JawaTypeOpcode.FLOAT_ARRAY, JawaType.FLOAT),
		(JawaTypeOpcode.DOUBLE_ARRAY, JawaType.DOUBLE)
	];
	var details = ImportDetails.Type(TypeDecl.Imported(0, ImportedType.new([])));
	for (c in cases) {
		var n = JawaTester.new(t.t);
		n.addImport("jawa", [c.0.code], details);
		var r = n.process();
		n.assertIsJawaType(JawaType.Array(c.1), r[0]);
	}
}
