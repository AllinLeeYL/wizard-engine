// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = JawaTests.registerRtTest("base", _, _);
def X = [
	T("strhash", test_strhash),
	T("importcl1", test_importcl1),
	T("importi1", test_importi1),
	T("env1", test_env1),
	T("env2", test_env2),
	T("t_bytearray1", test_t_bytearray1),
	T("t_primarray1", test_t_primarray1),
	T("t_refarray1", test_t_refarray1),
	T("t_refarrayN", test_t_refarrayN),
	T("t_primarrayN", test_t_primarrayN),
	T("f_baload", test_f_baload),
	T("f_xaload", test_f_xaload),
	T("f_bastore", test_f_bastore),
	T("f_xastore", test_f_xastore),
	T("f_bnewarray", test_f_bnewarray),
	T("f_xnewarray", test_f_xnewarray),
	T("f_arraylength1", test_f_arraylength1),
	T("f_arraylength2", test_f_arraylength2),
	T("f_multianewarrayN", test_f_multianewarrayN),
	T("f_invokeinterface", test_f_invokeinterface),
	T("f_invokespecial", test_f_invokespecial),
	T("f_invokestatic", test_f_invokestatic),
	T("f_invokevirtual", test_f_invokevirtual),
	T("f_getfield", test_f_getfield),
	T("g_string", test_g_string),
	T("g_class", test_g_class),
	T("g_interface", test_g_interface),
	T("sys_puti", test_sys_puti),
	T("sys_puts", test_sys_puts),
	T("sys_millis", test_sys_millis),
	T("sys_micros", test_sys_micros),
	T("sys_random", test_sys_random),
	()
];

def NO_METHOD_ATTRS: JawaMethodAttr.set;
def NO_CLASS_ATTRS: JawaClassAttr.set;

def strhash(s: string) -> int {
	return int.view(JawaStrings.of(s).hashCode());
}

def test_strhash(t: JawaTester) {
	// Test Jawa hash matches standardized string hashing algorithm
	t.t.asserti(97, strhash("a"));
	t.t.asserti(2027435274, strhash("agzAFZ09"));
	t.t.asserti(1998497278, strhash("!@#$%^&*()"));
}

def test_importcl1(t: JawaTester) {
	var d = t.env.declareClass(JawaStrings.of("Foo"), t.NO_CLASS_ATTRS, null, []);
	t.importClass("Foo");
	var r = t.process();
	t.assertIsJawaClassType(d, r[0]);
}

def test_importi1(t: JawaTester) {
	var d = t.env.declareInterface(JawaStrings.of("Graz"), []);
	t.importInterface("Graz");
	var r = t.process();
	t.assertIsJawaInterfaceType(d, r[0]);
}

def test_t_bytearray1(t: JawaTester) {
	t.addTypeImport(t.strCode(JawaTypeOpcode.BYTE_ARRAY.code), ValueTypes.NONE);
	var r = t.process();
	t.assertIsJawaArrayType(JawaTypes.BYTE, r[0]);
}

def test_t_primarray1(t: JawaTester) {
	for (c in JawaPrimArrayOpcodes) {
		var n = t.dup();
		n.importPrimArray(c);
		var r = n.process();
		n.assertIsJawaArrayType(c.arrayType.elem, r[0]);
	}
}

def test_env1(t: JawaTester) {
	var obj = JawaLang.OBJECT;
	var str = JawaLang.STRING;
	t.env.add(obj);
	t.env.add(str);
	t.importClass("jawa/lang/Object");
	t.importClass("jawa/lang/String");
	var r = t.process();
	t.assertIsJawaClassType(JawaLang.OBJECT, r[0]);
	t.assertIsJawaClassType(JawaLang.STRING, r[1]);
}

def test_env2(t: JawaTester) {
	JawaLang.install(t.env);
	t.importClass("jawa/lang/Object");
	t.importClass("jawa/lang/String");
	var r = t.process();
	t.assertIsJawaClassType(JawaLang.OBJECT, r[0]);
	t.assertIsJawaClassType(JawaLang.STRING, r[1]);
}

def test_t_refarray1(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	t.importArrayOf(jlo);
	var r = t.process();
	var elem = t.assertIsJawaClassType(JawaLang.OBJECT, r[0]);
	t.assertIsJawaArrayType(elem, r[1]);
}

def test_arrayN(t: JawaTester, et: AbsTypeDecl, dims: int) {
	t.importMultiArrayOf(et, dims);

	var r = t.process();
	if (r == null) return;

	var xt = r[et.imp.import_index];
	if (ExportedValueType.?(xt)) xt = ExportedValueType.!(xt).src;
	if (!JawaType.?(xt)) return t.t.fail1("expected jawa type, got %q", xt.render);
	var lastT = JawaType.!(xt);
	for (i < dims) {
		if (lastT == null) return;
		lastT = t.assertIsJawaArrayType(lastT, r[et.imp.import_index + i + 1]);
	}
}

def test_t_refarrayN(t: JawaTester) {
	for (i < 7) {
		var n = t.dup();
		var et = n.importJawaLangObject();
		test_arrayN(n, et, i);
	}
}

def test_t_primarrayN(t: JawaTester) {
	for (c in JawaPrimArrayOpcodes) {
		for (i < 4) {
			var n = t.dup();
			var at = n.importPrimArray(c);
			test_arrayN(n, at, i);
		}
	}
}

def test_f_baload(t: JawaTester) {
	var bt = t.addTypeImport(t.strCode(JawaTypeOpcode.BYTE_ARRAY.code), ValueTypes.NONE);
	var sig = t.sig_xi_y(t.toWasmType(JawaTypes.BYTE_ARRAY), ValueType.I32);
	t.addFuncImport(t.strCode(JawaFuncOpcode.BALOAD.code), sig);
	var r = t.process();
	if (r == null) return;
	t.assertIsJawaArrayType(JawaTypes.BYTE, r[0]);
	t.assertIsFunction(sig, r[1]);
}

def test_f_xaload(t: JawaTester) {
	for (c in JawaPrimArrayOpcodes) {
		if (c == JawaPrimArrayOpcodes.BOOL) continue;
		var n = t.dup();
		var bt = n.importPrimArray(c);
		var sig = t.sig_xi_y(t.toWasmType(c.arrayType), c.map.valueType);
		n.addFuncImport(n.strCode(c.xaload.code), sig);
		var r = n.process();
		if (r == null) return;
		n.assertIsJawaArrayType(c.arrayType.elem, r[0]);
		t.assertIsFunction(sig, r[1]);
	}
}

def test_f_bastore(t: JawaTester) {
	var bt = t.addTypeImport(t.strCode(JawaTypeOpcode.BYTE_ARRAY.code), ValueTypes.NONE);
	var sig = t.sig_xiy_v(t.toWasmType(JawaTypes.BYTE_ARRAY), ValueType.I32);
	t.addFuncImport(t.strCode(JawaFuncOpcode.BASTORE.code), sig);
	var r = t.process();
	if (r == null) return;
	t.assertIsJawaArrayType(JawaTypes.BYTE, r[0]);
	t.assertIsFunction(sig, r[1]);
}

def test_f_xastore(t: JawaTester) {
	for (c in JawaPrimArrayOpcodes) {
		if (c == JawaPrimArrayOpcodes.BOOL) continue;
		var n = t.dup();
		var bt = n.importPrimArray(c);
		var sig = t.sig_xiy_v(t.toWasmType(c.arrayType), c.map.valueType);
		n.addFuncImport(t.strCode(c.xastore.code), sig);
		var r = n.process();
		if (r == null) return;
		n.assertIsJawaArrayType(c.arrayType.elem, r[0]);
		t.assertIsFunction(sig, r[1]);
	}
}

def test_f_bnewarray(t: JawaTester) {
	var bt = t.addTypeImport(t.strCode(JawaTypeOpcode.BYTE_ARRAY.code), ValueTypes.NONE);
	var vt = t.toWasmType(JawaTypes.BYTE_ARRAY);
	var sig = SigDecl.new(SigCache.arr_i, [vt]);
	def asm = t.strCodeType(JawaFuncOpcode.NEWARRAY.code, bt);
	t.addFuncImport(asm, sig);
	var r = t.process();
	if (r == null) return;
	t.assertIsJawaArrayType(JawaTypes.BYTE, r[0]);
	t.assertIsFunction(sig, r[1]);
}

def test_f_xnewarray(t: JawaTester) {
	for (c in JawaPrimArrayOpcodes) {
		var n = t.dup();
		var bt = n.importPrimArray(c);
		var vt = t.toWasmType(c.arrayType);
		var sig = SigDecl.new(SigCache.arr_i, [vt]);
		def asm = t.strCodeType(JawaFuncOpcode.NEWARRAY.code, bt);
		n.addFuncImport(asm, sig);
		var r = n.process();
		if (r == null) return;
		n.assertIsJawaArrayType(c.arrayType.elem, r[0]);
		t.assertIsFunction(sig, r[1]);
	}
}

def test_f_arraylength1(t: JawaTester) {
	for (c in JawaPrimArrayOpcodes) {
		var n = t.dup();
		var bt = n.importPrimArray(c);
		var vt = t.toWasmType(c.arrayType);
		var sig = t.sig_x_i(vt);
		def asm = t.strCodeType(JawaFuncOpcode.ARRAYLENGTH.code, bt);
		n.addFuncImport(asm, sig);
		var r = n.process();
		if (r == null) return;
		n.assertIsJawaArrayType(c.arrayType.elem, r[0]);
		t.assertIsFunction(sig, r[1]);
	}
}

def test_f_arraylength2(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	var ajlo = t.importArrayOf(jlo);

	var sig = t.sig_x_i(ValueType.Abstract(ajlo));
	def asm = t.strCodeType(JawaFuncOpcode.ARRAYLENGTH.code, ajlo);
	t.addFuncImport(asm, sig);
	var r = t.process();
	if (r == null) return;

	var elem = t.assertIsJawaClassType(JawaLang.OBJECT, r[0]);
	var at = t.assertIsJawaArrayType(elem, r[1]);
	var expected_sig = t.sig_x_i(t.toWasmType(at));
	t.assertIsFunction(expected_sig, r[2]);
}

def test_f_multianewarrayN(t: JawaTester) {
	for (rank in [1, 2, 3, 7]) {
		for (dims = 1; dims <= rank; dims++) {
			var n = t.dup();
			var jlo = n.importJawaLangObject();
			var it = n.importMultiArrayOf(jlo, rank);
			var pair = n.make_multianewarray(it, dims);
			if (pair.0 == null) return;
			if (pair.1 == null) return;
		}
	}
}

def test_f_invokeinterface(t: JawaTester) {
	var intfName = "MyIntf", jintfName = JawaStrings.of(intfName);
	var methodName = "m6", jmethodName = JawaStrings.of(methodName);
	var it = JawaInterfaceType.new(jintfName, []);

	t.env.add(it);

	var pt: Array<JawaType> = [JawaTypes.SHORT];
	var rt = JawaTypes.DOUBLE;
	it.instanceMethods = [JawaMethod.new(jmethodName, NO_METHOD_ATTRS, JawaMethodSig.new(pt, rt), null)];
	it.instanceMethods[0].itable_index = 0;

	var sig = SigDecl.new([t.toWasmType(it), ValueType.I32], SigCache.arr_d);

	var it1 = t.importInterface(intfName);
	var str1 = t.strCodeTypeJawaNameSig(JawaFuncOpcode.INVOKEINTERFACE.code, it1, jmethodName,
		JawaSigRef.new([JawaTypeRef.Prim(JawaTypes.SHORT)], JawaTypeRef.Prim(JawaTypes.DOUBLE)));

	var fi = t.addFuncImport(str1, sig);

	var r = t.process();
	if (r == null) return;
	t.assertIsJawaInterfaceType(it, r[it1.imp.import_index]);
	var f = t.assertIsFunction(sig, r[fi.imp.import_index]);
}

def test_f_invokespecial(t: JawaTester) {
	var className = "MyCf4", jclassName = JawaStrings.of(className);
	var methodName = "yy", jmethodName = JawaStrings.of(methodName);
	var ct = JawaClassType.new(jclassName, NO_CLASS_ATTRS, null, []);
	ct.boilerplate = [];
	ct.instanceFields = [];


	t.env.add(ct);

	var pt: Array<JawaType> = [JawaTypes.BYTE, JawaTypes.FLOAT];
	var rt = JawaTypes.FLOAT;
	var sig = SigDecl.new([t.toWasmType(ct), ValueType.I32, ValueType.F32], SigCache.arr_f);
	ct.instanceMethods = [JawaMethod.new(jmethodName, NO_METHOD_ATTRS, JawaMethodSig.new(pt, rt), null)];

	var it = t.importClass(className);
	var str1 = t.strCodeTypeJawaNameSig(JawaFuncOpcode.INVOKESPECIAL.code, it, jmethodName,
		JawaSigRef.new([JawaTypeRef.Prim(JawaTypes.BYTE), JawaTypeRef.Prim(JawaTypes.FLOAT)],
			 JawaTypeRef.Prim(JawaTypes.FLOAT)));

	var fi = t.addFuncImport(str1, sig);

	var r = t.process();
	if (r == null) return;
	t.assertIsJawaClassType(ct, r[it.imp.import_index]);
	var f = t.assertIsFunction(sig, r[fi.imp.import_index]);
}

def test_f_invokestatic(t: JawaTester) {
	var className = "MyCg55", jclassName = JawaStrings.of(className);
	var methodName = "nnn", jmethodName = JawaStrings.of(methodName);
	var ct = JawaClassType.new(jclassName, NO_CLASS_ATTRS, null, []);
	ct.boilerplate = [];
	ct.instanceFields = [];

	var pts = [JawaTypes.BYTE, JawaTypes.INT, JawaTypes.FLOAT];
	var rts = [JawaTypes.BYTE, JawaTypes.INT, JawaTypes.FLOAT, JawaTypes.VOID];

	for (pt in pts) {
		for (rt in rts) {
			var n = t.dup();
			n.env.add(ct);
			var m = JawaMethod.new(jmethodName, NO_METHOD_ATTRS, JawaMethodSig.new([pt], rt), null);
			var sig = SigDecl.new([t.toWasmType(pt)], if(rt.kind == JawaKind.VOID, SigCache.arr_v, [t.toWasmType(rt)]));
			m.impl = HostFunction.new(sig, null);
			ct.staticMethods = [m];

			var it = n.importClass(className);
			var str1 = n.strCodeTypeJawaNameSig(JawaFuncOpcode.INVOKESTATIC.code, it, jmethodName,
				JawaSigRef.new([JawaTypeRef.Prim(pt)],
					if(JawaPrimType.?(rt), JawaTypeRef.Prim(JawaPrimType.!(rt)), JawaTypeRef.Void)));
			var fi = n.addFuncImport(str1, sig);

			var r = n.process();
			if (r == null) return;
			n.assertIsJawaClassType(ct, r[it.imp.import_index]);
			var f = n.assertIsFunction(sig, r[fi.imp.import_index]);
		}
	}
}

def test_f_invokevirtual(t: JawaTester) {
	var className = "Tyas", jclassName = JawaStrings.of(className);
	var methodName = "U8i", jmethodName = JawaStrings.of(methodName);

	var pts: Array<Array<JawaPrimType>> = [
		[],
		[JawaTypes.INT],
		[JawaTypes.FLOAT, JawaTypes.DOUBLE]
	];
	var rt = JawaTypes.LONG;

	for (pt in pts) {
		var n = t.dup();
		var ct = JawaClassType.new(jclassName, NO_CLASS_ATTRS, null, []);
		ct.boilerplate = [];
		ct.instanceFields = [];
		n.env.add(ct);
		var m = JawaMethod.new(jmethodName, NO_METHOD_ATTRS,
			JawaMethodSig.new(Arrays.map(pt, JawaType.!<JawaPrimType>), rt), null);
		ct.instanceMethods = [m];
		ct.vtable = [m];
		m.vtable_index = 0;

		var it = n.importClass(className);
		var str1 = n.strCodeTypeJawaNameSig(JawaFuncOpcode.INVOKEVIRTUAL.code, it, jmethodName,
			JawaSigRef.new(Arrays.map(pt, JawaTypeRef.Prim), JawaTypeRef.Prim(JawaTypes.LONG)));

		var sig = m.sig.sig(ct, t.toWasmType);
		var fi = n.addFuncImport(str1, sig);

		var r = n.process();
		if (r == null) return;
		n.assertIsJawaClassType(ct, r[it.imp.import_index]);
		var f = n.assertIsFunction(sig, r[fi.imp.import_index]);
	}
}

def test_f_getfield(t: JawaTester) {
	var className1 = "Cl1", jclassName1 = JawaStrings.of(className1);
	var fieldName = "f1", jfieldName = JawaStrings.of(fieldName);
	var ct1 = JawaClassType.new(jclassName1, t.NO_CLASS_ATTRS, null, []);
	ct1.boilerplate = [Values.I32_0];
	ct1.instanceFields = [JawaField.new(jfieldName, t.NO_FIELD_ATTRS, 0, JawaTypes.BYTE)];

	var className2 = "Cl2", jclassName2 = JawaStrings.of(className2);
	var ct2 = JawaClassType.new(jclassName2, t.NO_CLASS_ATTRS, ct1, []);
	ct2.instanceFields = ct1.instanceFields;
	t.env.add(ct1);
	t.env.add(ct2);

	var it1 = t.importClass(className1);
	var it2 = t.importClass(className2);
	var fi1 = t.addFuncImport(t.strCodeTypeJawaName(JawaFuncOpcode.GETFIELD.code, it1, jfieldName),
		t.sig_x_i(ValueType.Abstract(it1)));
	var fi2 = t.addFuncImport(t.strCodeTypeJawaName(JawaFuncOpcode.GETFIELD.code, it2, jfieldName),
		t.sig_x_i(ValueType.Abstract(it2)));

	var r = t.process();
	if (r == null) return;

	t.assertIsFunction(t.sig_x_i(t.toWasmType(ct1)), r[fi1.imp.import_index]);
	t.assertIsFunction(t.sig_x_i(t.toWasmType(ct2)), r[fi2.imp.import_index]);
}

def test_g_string(t: JawaTester) {
	var foo = JawaStrings.of("foo");
	var it = t.importJawaLangString();
	var ig1 = t.addGlobalImport(
		t.strCodeString(JawaGlobalOpcode.STRING_CONST.code, foo),
		ValueType.Abstract(it));
	var ig2 = t.addGlobalImport(
		t.strCodeString(JawaGlobalOpcode.STRING_CONST.code, foo),
		ValueType.Abstract(it));

	var r = t.process();
	if (r == null) return;

	var g1 = r[ig1.imp.import_index];
	var v1 = t.assertIsGlobal(t.toWasmType(JawaLang.STRING), g1);
	var str1 = t.rt.stringRep.fromWasm(v1);
	if (!foo.equals(str1)) t.t.fail2("expected string %q, got %q", foo.render, t.safeRender(str1));

	var g2 = r[ig2.imp.import_index];
	var v2 = t.assertIsGlobal(t.toWasmType(JawaLang.STRING), g2);
	var str2 = t.rt.stringRep.fromWasm(v2);
	if (v1 != v2) t.t.fail("expected equal strings");
}

def test_g_class(t: JawaTester) {
	for (cl in [JawaLang.OBJECT, JawaLang.CLASS, JawaLang.STRING]) {
		var n = t.dup();
		var cl = JawaLang.CLASS;
		var it = n.importJawaLangClass();
		var ig1 = n.addGlobalImport(
			n.strCodeType(JawaGlobalOpcode.CLASS_CONST.code, it),
			ValueType.Abstract(it));

		var r = n.process();
		if (r == null) return;

		var g1 = r[ig1.imp.import_index];
		var v1 = n.assertIsGlobal(t.toWasmType(JawaLang.CLASS), g1);
		var cl1 = n.rt.classRep.fromWasm(v1);
		if (cl != cl1) n.t.fail2("expected class %q, got %q", cl.name.render, t.safeRender(cl1));
	}
}

def test_g_interface(t: JawaTester) {
	var intfName = "MyAntf", jintfName = JawaStrings.of(intfName);
	var it = JawaInterfaceType.new(jintfName, []);
	t.env.add(it);

	var cl1 = t.importJawaLangClass();
	var it1 = t.importInterface(intfName);
	var ig1 = t.addGlobalImport(
			t.strCodeType(JawaGlobalOpcode.INTERFACE_CONST.code, it1),
			ValueType.Abstract(cl1));

	var r = t.process();

	t.assertIsJawaInterfaceType(it, r[it1.imp.import_index]);

	var g1 = r[ig1.imp.import_index];
	var v1 = t.assertIsGlobal(t.toWasmType(JawaLang.CLASS), g1);
	var itv1 = t.rt.classRep.fromWasm(v1);
	if (it != itv1) t.t.fail2("expected class %q, got %q", it.name.render, t.safeRender(itv1));
}

def test_sys_puti(t: JawaTester) {
	var f1 = t.addFuncImport(t.strCodeJawaName(JawaFuncOpcode.SYSCALL.code, JawaStrings.of("puti")), SigCache.i_v);
	var r = t.process();
	if (r == null) return;
	t.assertIsFunction(SigCache.i_v, r[f1.imp.import_index]);
}

def test_sys_puts(t: JawaTester) {
	var jls = t.importJawaLangString();
	var f1 = t.addFuncImport(t.strCodeJawaName(JawaFuncOpcode.SYSCALL.code, JawaStrings.of("puts")),
		SigDecl.new([ValueType.Abstract(jls)], SigCache.arr_v));
	var r = t.process();
	if (r == null) return;
	t.assertIsFunction(SigDecl.new([t.rt.toWasmType(JawaLang.STRING)], SigCache.arr_v), r[f1.imp.import_index]);
}

def test_sys_millis(t: JawaTester) {
	var f1 = t.addFuncImport(t.strCodeJawaName(JawaFuncOpcode.SYSCALL.code, JawaStrings.of("millis")), SigCache.v_i);
	var r = t.process();
	if (r == null) return;
	t.assertIsFunction(SigCache.v_i, r[f1.imp.import_index]);
}

def test_sys_micros(t: JawaTester) {
	var f1 = t.addFuncImport(t.strCodeJawaName(JawaFuncOpcode.SYSCALL.code, JawaStrings.of("micros")), SigCache.v_i);
	var r = t.process();
	if (r == null) return;
	t.assertIsFunction(SigCache.v_i, r[f1.imp.import_index]);
}

def test_sys_random(t: JawaTester) {
	var f1 = t.addFuncImport(t.strCodeJawaName(JawaFuncOpcode.SYSCALL.code, JawaStrings.of("random")), SigCache.v_l);
	var r = t.process();
	if (r == null) return;
	t.assertIsFunction(SigCache.v_l, r[f1.imp.import_index]);
}
