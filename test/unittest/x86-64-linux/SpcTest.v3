// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("spc:", _, SpcTester.new, _);
def X = [
	T("pool0", test_pool0),
	T("pool1", test_pool1),
	T("pool2", test_pool2),
	T("pool3", test_pool3),
	()
];

def RA = Reg(1);
def RB = Reg(2);
def RC = Reg(3);
def RD = Reg(4);
def RE = Reg(5);

def set = setupRegSet();

def setupRegSet() -> RegSet {
	var r = RegSet.new([RA, RD, RC, RB, RE], ["<invalid>", "%ra", "%rd", "%rc", "%rb", "%re"]);
	// TODO: map regs to pools?
	return r;
}

class SpcTester(t: Tester) {
	var pool = PriorityRegPool.new(set.regs, null);
	
	def assertFree(expected: bool, r: Reg) {
		var got = pool.isFree(r);
		if (got != expected) t.fail3("expected isFree(%s) == %z, got %z", set.names[r.index], expected, got);
	}
}

def test_pool0(t: SpcTester) {
	for (r in set.regs) {
		t.assertFree(true, r);
	}

	for (r in set.regs) {
		t.pool.free(r);
	}

	for (r in set.regs) {
		t.assertFree(true, r);
	}
}

def test_pool1(t: SpcTester) {
	// test registers are allocated in order
	for (r in set.regs) {
		t.assertFree(true, r);
		var g = t.pool.alloc();
		if (r != g) t.t.fail2("expected alloc = %s, got %s", set.getName(r), set.getName(g));
		t.assertFree(false, r);
	}
}

def test_pool2(t: SpcTester) {
	var p = t.pool;
	
	var r1 = p.alloc();
	var r2 = p.alloc();
	
	p.free(r2);
	var r3 = p.alloc();
	t.t.asserteq(r2, r3); // r2 has priority over r3

	p.free(r1);
	p.free(r2);
	var r4 = p.alloc();
	t.t.asserteq(r1, r4); // r1 has priority over r2

	p.clear();
	t.assertFree(true, RA);
	t.assertFree(true, RB);
	t.assertFree(true, RC);
}

def test_pool3(t: SpcTester) {
	var regs = Array<Reg>.new(32);
	for (i < regs.length) regs[i] = Reg(byte.view(1 + i));
	var p = t.pool = PriorityRegPool.new(regs, null);

	for (r in regs) {
		p.unfreeAll();
		for (j < regs.length) t.assertFree(false, regs[j]);
		p.free(r);
		t.assertFree(true, r);
		var g = p.alloc();
		if (r != g) t.t.fail2("expected alloc = %d, got %d", r.index, g.index);
	}
}
