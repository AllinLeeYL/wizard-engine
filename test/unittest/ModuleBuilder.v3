// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility class to build an in-memory {Module} object.
class ModuleBuilder {
	var extensions: Extension.set;
	def module = Module.new(null);
	var func: FuncDecl;
	def locals = Vector<(ValueType, u32)>.new();
	var num_locals: int;
	new() {
		var sig = SigCache.v_i.dup();
		func = FuncDecl.new(sig);
		module.addDecl(sig);
		module.addDecl(func);
	}
	def sig(sig: SigDecl) -> this {
		var ns = sig.dup();
		ns.sig_index = func.sig.sig_index;
		ns.decl_index = func.sig.decl_index;
		module.heaptypes[ns.sig_index] = ns;
		module.decls[ns.decl_index] = ns;

		var nf = FuncDecl.new(ns);
		nf.func_index = func.func_index;
		nf.decl_index = func.decl_index;
		module.functions[nf.func_index] = func = nf;
		module.decls[nf.decl_index] = nf;
	}
	def sig0(params: Array<ValueType>, results: Array<ValueType>) -> this {
		sig(SigDecl.new(params, results));
	}
	def addSig(sig: SigDecl) -> int {
		module.addDecl(sig);
		return sig.sig_index;
	}
	def newSig(params: Array<ValueType>, results: Array<ValueType>) -> SigDecl {
		var sig = SigDecl.new(params, results);
		module.addDecl(sig);
		return sig;
	}
	def newStruct(field_types: Array<StorageType>) -> StructDecl {
		var decl = StructDecl.new(field_types);
		module.addDecl(decl);
		return decl;
	}
	def newArray(elem_types: Array<StorageType>) -> ArrayDecl {
		var decl = ArrayDecl.new(elem_types);
		module.addDecl(decl);
		return decl;
	}
	def code(raw: Array<byte>) -> this {
		var body = makeBody(raw, this.locals);
		func.code = Code.new(body);
		func.code.num_locals = num_locals;
	}
	def code_op(opcode: Opcode) -> this {
		sig(opcode.sig);
		var b: Array<byte>;
		match (opcode.sig.params.length) {
			0 => b = if(opcode.prefix != 0,
				[opcode.prefix, opcode.code],
				[opcode.code]);
			1 => b = if(opcode.prefix != 0,
				[Opcode.LOCAL_GET.code, 0, opcode.prefix, opcode.code],
				[Opcode.LOCAL_GET.code, 0, opcode.code]);
			2 => b = if(opcode.prefix != 0,
				[Opcode.LOCAL_GET.code, 0, Opcode.LOCAL_GET.code, 1, opcode.prefix, opcode.code],
				[Opcode.LOCAL_GET.code, 0, Opcode.LOCAL_GET.code, 1, opcode.code]);
			_ => System.error("InterpreterTester", "too many params to opcode");
		}
		code(b);
	}
	def validate() -> bool {
		var v = CodeValidator.new(extensions,
			Limits.new().set(extensions), module,
			ErrorGen.new(module.filename));
		return CodeValidatorResult.Ok.?(v.validateFunc(func));
	}
	private def makeBody(raw: Array<byte>, locals: Vector<(ValueType, u32)>) -> Array<byte> {
		var copy = BinBuilder.new();
		copy.put_u32leb(u32.!(locals.length));
		for (i < locals.length) {
			var e = locals[i];
			copy.put_u32leb(u32.!(e.1));
			copy.put_ValueType(e.0);
		}
		copy.puta(raw);
		copy.put(Opcode.END.code);
		return copy.extract();
	}
	def newGlobal(valtype: ValueType, init: InitExpr) -> GlobalDecl {
		var decl = GlobalDecl.new(valtype, true, init);
		module.addDecl(decl);
		return decl;
	}
	def addLocal(typ: ValueType) -> int {
		return addLocals(1, typ);
	}
	def addLocals(count: int, typ: ValueType) -> int {
		var size = locals.length;
		if (size > 0) {
			var last = locals[size-1];
			if (last.0 == typ) {
				locals[size-1] = (last.0, last.1 + u32.!(count));
				var prev = num_locals;
				num_locals += count;
				return func.sig.params.length + prev;
			}
		}
		locals.put((typ, u32.!(count)));
		var prev = num_locals;
		num_locals += count;
		return func.sig.params.length + prev;
	}
	def newFunction(sig: SigDecl, raw: Array<byte>) -> FuncDecl {
		var sig_decl = sig.dup();
		module.addDecl(sig_decl);
		var func = FuncDecl.new(sig_decl);
		module.addDecl(func);
		func.code = Code.new(makeBody(raw, Vector.new()));
		return func;
	}
	def addTable(length: u32, offset: int, indices: Array<int>) -> this {
		var decl = TableDecl.new(ValueType.FUNCREF, length, Max.Set(length));
		module.addDecl(decl);
		if (indices != null) {
			var mode = SegmentMode.Active(decl.table_index, InitExpr.I32(offset));
			var details = ElemDetails.FuncRefs(indices);
			var elem = ElemDecl.new(ValueType.FUNCREF, mode, details);
			module.elems.put(elem);
		}
	}
	def addTableOfSize(initial: u32, maximum: Max) -> this {
		var decl = TableDecl.new(ValueType.FUNCREF, initial, maximum);
		module.addDecl(decl);
	}
	def addMemory(initial: u32, maximum: Max) -> this {
		var decl = MemoryDecl.new(initial, maximum, false);
		module.addDecl(decl);
	}
	def addData(offset: int, raw: Array<byte>) -> this {
		var mode = SegmentMode.Active(0, InitExpr.I32(offset));
		var data = DataDecl.new(mode, raw);
		module.data.put(data);
	}
	def addPassiveData(raw: Array<byte>) -> this {
		var data = DataDecl.new(SegmentMode.Passive, raw);
		module.data.put(data);
	}
	def addPassiveElems(indices: Array<int>) -> this {
		var details = ElemDetails.FuncRefs(indices);
		var elem = ElemDecl.new(ValueType.FUNCREF, SegmentMode.Passive, details);
		module.elems.put(elem);
	}
	def addCodeNV(func: FuncDecl, raw: Array<byte>) {
		var body = makeBody(raw, Vector.new());
		func.code = Code.new(body);
		func.code.num_locals = 0;
	}
	def addCodeV(func: FuncDecl, raw: Array<byte>) {
		return addCodeV_extra_raw(func, makeBody(raw, Vector.new()));
	}
	def addCodeV_extra_raw(func: FuncDecl, body: Array<byte>) {
		func.code = Code.new(body);
		var limits = Limits.new().set(extensions);
		var err = ErrorGen.new("ModuleBuilder.v3");
		var cv = CodeValidator.new(extensions, limits, module, err);
		cv.validate(func, DataReader.new(func.code.orig));
		if (err.error()) {
			System.error("ModuleBuilderError", Strings.format2("expected valid code, got error @%d %s", err.error_pos, err.error_msg));
		}
	}
}
