// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("jawa:exe:", _, JawaTester.new, _);
def X = [
	T("baload", test_exe_baload),
	T("caload", test_exe_caload),
	T("daload", test_exe_daload),
	T("faload", test_exe_faload),
	T("iaload", test_exe_iaload),
	T("laload", test_exe_laload),
	T("saload", test_exe_saload),
	T("bastore", test_exe_bastore),
	T("castore", test_exe_castore),
	T("dastore", test_exe_dastore),
	T("fastore", test_exe_fastore),
	T("iastore", test_exe_iastore),
	T("lastore", test_exe_lastore),
	T("sastore", test_exe_sastore),
	T("xnewarray", test_exe_xnewarray),
	T("arraylength1", test_exe_arraylength1),
	T("arraylength2", test_exe_arraylength2),
	T("acmpeq", test_exe_acmpeq),
	T("anewarray", test_exe_anewarray),
	T("aaload", test_exe_aaload),
	T("aastore", test_exe_aastore),
	T("isnull", test_exe_isnull),
	T("multianewarray1", test_exe_multianewarray1),
	T("multianewarray2", test_exe_multianewarray2),
	T("multianewarray3", test_exe_multianewarray3),
	T("multianewarrayP1", test_exe_multianewarrayP1),
	T("multianewarrayP2", test_exe_multianewarrayP2),
	T("new1", test_exe_new1),
	T("new2", test_exe_new2),
	T("getfield", test_exe_getfield),
	T("putfield", test_exe_putfield),
	T("getstatic", test_exe_getstatic),
	T("putstatic", test_exe_putstatic),
	T("instanceof", test_exe_instanceof),
	T("checkcast", test_exe_checkcast),
	T("monitorenter", test_exe_monitorenter),
	T("monitorexit", test_exe_monitorexit),
	T("invokestatic1", test_exe_invokestatic1),
	T("invokestatic2", test_exe_invokestatic2),
	T("invokestatic3", test_exe_invokestatic3),
	T("invokespecial", test_exe_invokespecial),
	T("invokevirtual", test_exe_invokevirtual),
	T("invokeinterface", test_exe_invokeinterface),
	T("object1", test_exe_object1),
	T("object2", test_exe_object2),
	T("object3", test_exe_object3),
	()
];

class ArgCatcher {
	var args: Array<Value>;
	var result: HostResult;
	var host: HostFunction;
	new(sig: FuncSig) {
		host = HostFunction.new(sig, invoke);
	}
	def invoke(args: Array<Value>) -> HostResult {
		this.args = Arrays.dup(args);
		return result;
	}
}

def NO_METHOD_ATTRS: JawaMethodAttr.set;
def NO_FIELD_ATTRS: JawaFieldAttr.set;
def NO_CLASS_ATTRS: JawaClassAttr.set;

def NPE = Result.Trap(TrapReason.ERROR); // TODO: more precise error checking
def AIOBE = Result.Trap(TrapReason.ERROR); // TODO: more precise error checking
def NASE = Result.Trap(TrapReason.ERROR); // TODO: more precise error checking
def CCE = Result.Trap(TrapReason.ERROR); // TODO: more precise error checking

// Value conversion helpers.
def i_v = Values.i_v;
def l_v = Values.l_v;
def d_v = Value.F64;
def f_v = Value.F32;

def t_r<T>(f: T -> Value, v: T) -> Result { // T -> Value -> Result
	return Result.Value([f(v)]);
}

def i_r = t_r(Values.i_v, _); // i32 -> Result
def d_r = t_r(Value.F64, _);  // double -> Result
def f_r = t_r(Value.F32, _);  // float -> Result
def l_r = t_r(Values.l_v, _); // long -> Result
def o_r = t_r(Value.ExternRef, _); // HostObject -> Result
def v_r(v: Value) -> Result { return Result.Value([v]); }

def vi_vv(v1: Value, v2: int) -> Array<Value> {
	return [v1, i_v(v2)];
}

def rNONE = Result.Value(Values.NONE);

def test_exe_baload(t: JawaTester) {
	var func = t.make_xaload(JawaPrimArrayOpcodes.BYTE);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = Value.ExternRef(JawaArrayObjectOf<i8>.new([
		8, 102, -116
	]));

	t.assert_r(NPE, run(vi_vv(Values.EXTERNREF_NULL, 0)));
	t.assert_r(AIOBE, run(vi_vv(array, -1)));
	t.assert_r(AIOBE, run(vi_vv(array, 3)));
	t.assert_r(AIOBE, run(vi_vv(array, 5)));
	t.assert_r(AIOBE, run(vi_vv(array, 999)));
	t.assert_r(AIOBE, run(vi_vv(array, int.max)));
	t.assert_r(AIOBE, run(vi_vv(array, int.min)));

	t.assert_r(i_r(8), run(vi_vv(array, 0)));
	t.assert_r(i_r(102), run(vi_vv(array, 1)));
	t.assert_r(i_r(-116), run(vi_vv(array, 2)));
}

def test_exe_caload(t: JawaTester) {
	var func = t.make_xaload(JawaPrimArrayOpcodes.CHAR);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = Value.ExternRef(JawaArrayObjectOf<u16>.new([
		7, 10000, 32767, u16.max
	]));

	t.assert_r(NPE, run(vi_vv(Values.EXTERNREF_NULL, 0)));
	t.assert_r(AIOBE, run(vi_vv(array, -1)));
	t.assert_r(AIOBE, run(vi_vv(array, 4)));
	t.assert_r(AIOBE, run(vi_vv(array, 5)));
	t.assert_r(AIOBE, run(vi_vv(array, 9991)));
	t.assert_r(AIOBE, run(vi_vv(array, int.max)));
	t.assert_r(AIOBE, run(vi_vv(array, int.min)));

	t.assert_r(i_r(7), run(vi_vv(array, 0)));
	t.assert_r(i_r(10000), run(vi_vv(array, 1)));
	t.assert_r(i_r(32767), run(vi_vv(array, 2)));
	t.assert_r(i_r(65535), run(vi_vv(array, 3)));
}

def test_exe_daload(t: JawaTester) {
	var func = t.make_xaload(JawaPrimArrayOpcodes.DOUBLE);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = Value.ExternRef(JawaArrayObjectOf<double>.new([
		double.view(0x4021cccccccccccd),
		double.view(0xc073000000000000),
		double.view(0x7ff8000000000000),
		double.view(0x7ff0000000000000)
	]));

	t.assert_r(NPE, run(vi_vv(Values.EXTERNREF_NULL, 0)));
	t.assert_r(AIOBE, run(vi_vv(array, -1)));
	t.assert_r(AIOBE, run(vi_vv(array, 4)));
	t.assert_r(AIOBE, run(vi_vv(array, 5)));
	t.assert_r(AIOBE, run(vi_vv(array, 9991)));
	t.assert_r(AIOBE, run(vi_vv(array, int.max)));
	t.assert_r(AIOBE, run(vi_vv(array, int.min)));

	t.assert_r(d_r(0x4021cccccccccccd), run(vi_vv(array, 0)));
	t.assert_r(d_r(0xc073000000000000), run(vi_vv(array, 1)));
	t.assert_r(d_r(0x7ff8000000000000), run(vi_vv(array, 2)));
	t.assert_r(d_r(0x7ff0000000000000), run(vi_vv(array, 3)));
}

def test_exe_faload(t: JawaTester) {
	var func = t.make_xaload(JawaPrimArrayOpcodes.FLOAT);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = Value.ExternRef(JawaArrayObjectOf<float>.new([
		float.view(0x410e6666),
		float.view(0xc3510000),
		float.view(0x7fc00000),
		float.view(0x7f800000)
	]));

	t.assert_r(NPE, run(vi_vv(Values.EXTERNREF_NULL, 0)));
	t.assert_r(AIOBE, run(vi_vv(array, -1)));
	t.assert_r(AIOBE, run(vi_vv(array, 4)));
	t.assert_r(AIOBE, run(vi_vv(array, 5)));
	t.assert_r(AIOBE, run(vi_vv(array, 9991)));
	t.assert_r(AIOBE, run(vi_vv(array, int.max)));
	t.assert_r(AIOBE, run(vi_vv(array, int.min)));

	t.assert_r(f_r(0x410e6666), run(vi_vv(array, 0)));
	t.assert_r(f_r(0xc3510000), run(vi_vv(array, 1)));
	t.assert_r(f_r(0x7fc00000), run(vi_vv(array, 2)));
	t.assert_r(f_r(0x7f800000), run(vi_vv(array, 3)));
}

def test_exe_iaload(t: JawaTester) {
	var func = t.make_xaload(JawaPrimArrayOpcodes.INT);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = Value.ExternRef(JawaArrayObjectOf<i32>.new([
		5, 10100, int.min, int.max
	]));

	t.assert_r(NPE, run(vi_vv(Values.EXTERNREF_NULL, 0)));
	t.assert_r(AIOBE, run(vi_vv(array, -1)));
	t.assert_r(AIOBE, run(vi_vv(array, 4)));
	t.assert_r(AIOBE, run(vi_vv(array, 5)));
	t.assert_r(AIOBE, run(vi_vv(array, 9191)));
	t.assert_r(AIOBE, run(vi_vv(array, int.max)));
	t.assert_r(AIOBE, run(vi_vv(array, int.min)));

	t.assert_r(i_r(5), run(vi_vv(array, 0)));
	t.assert_r(i_r(10100), run(vi_vv(array, 1)));
	t.assert_r(i_r(int.min), run(vi_vv(array, 2)));
	t.assert_r(i_r(int.max), run(vi_vv(array, 3)));
}

def test_exe_laload(t: JawaTester) {
	var func = t.make_xaload(JawaPrimArrayOpcodes.LONG);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = Value.ExternRef(JawaArrayObjectOf<i64>.new([
		5, 10100, int.min, int.max, long.min, long.max
	]));

	t.assert_r(NPE, run(vi_vv(Values.EXTERNREF_NULL, 0)));
	t.assert_r(AIOBE, run(vi_vv(array, -1)));
	t.assert_r(AIOBE, run(vi_vv(array, 6)));
	t.assert_r(AIOBE, run(vi_vv(array, 7)));
	t.assert_r(AIOBE, run(vi_vv(array, 9291)));
	t.assert_r(AIOBE, run(vi_vv(array, int.max)));
	t.assert_r(AIOBE, run(vi_vv(array, int.min)));

	t.assert_r(l_r(5), run(vi_vv(array, 0)));
	t.assert_r(l_r(10100), run(vi_vv(array, 1)));
	t.assert_r(l_r(int.min), run(vi_vv(array, 2)));
	t.assert_r(l_r(int.max), run(vi_vv(array, 3)));
	t.assert_r(l_r(long.min), run(vi_vv(array, 4)));
	t.assert_r(l_r(long.max), run(vi_vv(array, 5)));
}

def test_exe_saload(t: JawaTester) {
	var func = t.make_xaload(JawaPrimArrayOpcodes.SHORT);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = Value.ExternRef(JawaArrayObjectOf<i16>.new([
		6, 10103, -20004, i16.min, i16.max
	]));

	t.assert_r(NPE, run(vi_vv(Values.EXTERNREF_NULL, 0)));
	t.assert_r(AIOBE, run(vi_vv(array, -1)));
	t.assert_r(AIOBE, run(vi_vv(array, 5)));
	t.assert_r(AIOBE, run(vi_vv(array, 6)));
	t.assert_r(AIOBE, run(vi_vv(array, 9995)));
	t.assert_r(AIOBE, run(vi_vv(array, int.max)));
	t.assert_r(AIOBE, run(vi_vv(array, int.min)));

	t.assert_r(i_r(6), run(vi_vv(array, 0)));
	t.assert_r(i_r(10103), run(vi_vv(array, 1)));
	t.assert_r(i_r(-20004), run(vi_vv(array, 2)));
	t.assert_r(i_r(i16.min), run(vi_vv(array, 3)));
	t.assert_r(i_r(i16.max), run(vi_vv(array, 4)));
}

def test_exe_bastore(t: JawaTester) {
	var func = t.make_xastore(JawaPrimArrayOpcodes.BYTE);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = JawaArrayObjectOf<i8>.new([
		-1, 2, 11, 123, -109
	]);
	var ref = Value.ExternRef(array), zero = Values.I32_0;

	t.assert_r(NPE, run([Values.EXTERNREF_NULL, zero, zero]));
	t.assert_r(AIOBE, run([ref, i_v(-1), zero]));
	t.assert_r(AIOBE, run([ref, i_v(5), zero]));
	t.assert_r(AIOBE, run([ref, i_v(6), zero]));
	t.assert_r(AIOBE, run([ref, i_v(29995), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.max), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.min), zero]));

	t.assert_r(rNONE, run([ref, i_v(0), zero]));
	t.assert_a<i8>([0, 2, 11, 123, -109], array.elems);

	t.assert_r(rNONE, run([ref, i_v(1), i_v(99)]));
	t.assert_a<i8>([0, 99, 11, 123, -109], array.elems);

	t.assert_r(rNONE, run([ref, i_v(2), i_v(-5)]));
	t.assert_a<i8>([0, 99, -5, 123, -109], array.elems);

	t.assert_r(rNONE, run([ref, i_v(3), i_v(44)]));
	t.assert_a<i8>([0, 99, -5, 44, -109], array.elems);

	t.assert_r(rNONE, run([ref, i_v(4), i_v(i8.max)]));
	t.assert_a<i8>([0, 99, -5, 44, i8.max], array.elems);
}

def test_exe_castore(t: JawaTester) {
	var func = t.make_xastore(JawaPrimArrayOpcodes.CHAR);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = JawaArrayObjectOf<u16>.new([
		1, 2, 11, 12345, 65535
	]);
	var ref = Value.ExternRef(array), zero = Values.I32_0;

	t.assert_r(NPE, run([Values.EXTERNREF_NULL, zero, zero]));
	t.assert_r(AIOBE, run([ref, i_v(-1), zero]));
	t.assert_r(AIOBE, run([ref, i_v(5), zero]));
	t.assert_r(AIOBE, run([ref, i_v(6), zero]));
	t.assert_r(AIOBE, run([ref, i_v(29995), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.max), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.min), zero]));

	t.assert_r(rNONE, run([ref, i_v(0), zero]));
	t.assert_a<u16>([0, 2, 11, 12345, 65535], array.elems);

	t.assert_r(rNONE, run([ref, i_v(1), i_v(99)]));
	t.assert_a<u16>([0, 99, 11, 12345, 65535], array.elems);

	t.assert_r(rNONE, run([ref, i_v(4), i_v(555)]));
	t.assert_a<u16>([0, 99, 11, 12345, 555], array.elems);

	t.assert_r(rNONE, run([ref, i_v(2), i_v(u16.max)]));
	t.assert_a<u16>([0, 99, 65535, 12345, 555], array.elems);
}

def test_exe_dastore(t: JawaTester) {
	var func = t.make_xastore(JawaPrimArrayOpcodes.DOUBLE);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = JawaArrayObjectOf<double>.new([
		double.view(0x4021cccccccccccd),
		double.view(0xc073000000000000),
		double.view(0x7ff8000000000000),
		double.view(0x7ff0000000000000),
		double.view(0xc071000456789ABC)
	]);
	var ref = Value.ExternRef(array), zero = Values.F64_0;

	t.assert_r(NPE, run([Values.EXTERNREF_NULL, i_v(0), zero]));
	t.assert_r(AIOBE, run([ref, i_v(-1), zero]));
	t.assert_r(AIOBE, run([ref, i_v(5), zero]));
	t.assert_r(AIOBE, run([ref, i_v(6), zero]));
	t.assert_r(AIOBE, run([ref, i_v(129995), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.max), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.min), zero]));

	t.assert_r(rNONE, run([ref, i_v(0), zero]));
	t.assert_da([
		double.view(0x0000000000000000),
		double.view(0xc073000000000000),
		double.view(0x7ff8000000000000),
		double.view(0x7ff0000000000000),
		double.view(0xc071000456789ABC)], array.elems);

	t.assert_r(rNONE, run([ref, i_v(3), d_v(0x1111222233334444)]));
	t.assert_da([
		double.view(0x0000000000000000),
		double.view(0xc073000000000000),
		double.view(0x7ff8000000000000),
		double.view(0x1111222233334444),
		double.view(0xc071000456789ABC)], array.elems);
}

def test_exe_fastore(t: JawaTester) {
	var func = t.make_xastore(JawaPrimArrayOpcodes.FLOAT);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = JawaArrayObjectOf<float>.new([
		float.view(0x410e6666),
		float.view(0xc3510000),
		float.view(0x7fc00000),
		float.view(0x7f800000),
		float.view(0xd2110c43)
	]);
	var ref = Value.ExternRef(array), zero = Values.F32_0;

	t.assert_r(NPE, run([Values.EXTERNREF_NULL, i_v(0), zero]));
	t.assert_r(AIOBE, run([ref, i_v(-1), zero]));
	t.assert_r(AIOBE, run([ref, i_v(5), zero]));
	t.assert_r(AIOBE, run([ref, i_v(6), zero]));
	t.assert_r(AIOBE, run([ref, i_v(129995), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.max), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.min), zero]));

	t.assert_r(rNONE, run([ref, i_v(0), zero]));
	t.assert_fa([
		float.view(0x00000000),
		float.view(0xc3510000),
		float.view(0x7fc00000),
		float.view(0x7f800000),
		float.view(0xd2110c43)
	], array.elems);

	t.assert_r(rNONE, run([ref, i_v(3), f_v(0x11223344)]));
	t.assert_fa([
		float.view(0x00000000),
		float.view(0xc3510000),
		float.view(0x7fc00000),
		float.view(0x11223344),
		float.view(0xd2110c43)
	], array.elems);
}

def test_exe_iastore(t: JawaTester) {
	var func = t.make_xastore(JawaPrimArrayOpcodes.INT);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = JawaArrayObjectOf<i32>.new([
		1, 2, -13, 72345, 6553509
	]);
	var ref = Value.ExternRef(array), zero = Values.I32_0;

	t.assert_r(NPE, run([Values.EXTERNREF_NULL, zero, zero]));
	t.assert_r(AIOBE, run([ref, i_v(-1), zero]));
	t.assert_r(AIOBE, run([ref, i_v(5), zero]));
	t.assert_r(AIOBE, run([ref, i_v(6), zero]));
	t.assert_r(AIOBE, run([ref, i_v(39995), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.max), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.min), zero]));

	t.assert_r(rNONE, run([ref, i_v(0), i_v(555666777)]));
	t.assert_a<i32>([555666777, 2, -13, 72345, 6553509], array.elems);

	t.assert_r(rNONE, run([ref, i_v(1), i_v(997)]));
	t.assert_a<i32>([555666777, 997, -13, 72345, 6553509], array.elems);

	t.assert_r(rNONE, run([ref, i_v(4), i_v(-777888999)]));
	t.assert_a<i32>([555666777, 997, -13, 72345, -777888999], array.elems);

	t.assert_r(rNONE, run([ref, i_v(2), i_v(u16.max)]));
	t.assert_a<i32>([555666777, 997, 65535, 72345, -777888999], array.elems);
}

def test_exe_lastore(t: JawaTester) {
	var func = t.make_xastore(JawaPrimArrayOpcodes.LONG);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = JawaArrayObjectOf<i64>.new([
		1, 5, -13998744, 72345999888, 6553509998888
	]);
	var ref = Value.ExternRef(array), zero = Values.I64_0;

	t.assert_r(NPE, run([Values.EXTERNREF_NULL, i_v(0), zero]));
	t.assert_r(AIOBE, run([ref, i_v(-1), zero]));
	t.assert_r(AIOBE, run([ref, i_v(5), zero]));
	t.assert_r(AIOBE, run([ref, i_v(6), zero]));
	t.assert_r(AIOBE, run([ref, i_v(49995), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.max), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.min), zero]));

	t.assert_r(rNONE, run([ref, i_v(0), l_v(555666777888999)]));
	t.assert_a<i64>([555666777888999, 5, -13998744, 72345999888, 6553509998888], array.elems);

	t.assert_r(rNONE, run([ref, i_v(1), l_v(-997)]));
	t.assert_a<i64>([555666777888999, -997, -13998744, 72345999888, 6553509998888], array.elems);

	t.assert_r(rNONE, run([ref, i_v(4), l_v(-777888999)]));
	t.assert_a<i64>([555666777888999, -997, -13998744, 72345999888, -777888999], array.elems);

	t.assert_r(rNONE, run([ref, i_v(2), l_v(u16.max)]));
	t.assert_a<i64>([555666777888999, -997, 65535, 72345999888, -777888999], array.elems);
}

def test_exe_sastore(t: JawaTester) {
	var func = t.make_xastore(JawaPrimArrayOpcodes.SHORT);
	if (func == null) return;
	def run = Interpreter.new().run(100, func, _);
	var array = JawaArrayObjectOf<i16>.new([
		-1, 2, 11, 12365, -10988
	]);
	var ref = Value.ExternRef(array), zero = Values.I32_0;

	t.assert_r(NPE, run([Values.EXTERNREF_NULL, zero, zero]));
	t.assert_r(AIOBE, run([ref, i_v(-1), zero]));
	t.assert_r(AIOBE, run([ref, i_v(5), zero]));
	t.assert_r(AIOBE, run([ref, i_v(6), zero]));
	t.assert_r(AIOBE, run([ref, i_v(99995), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.max), zero]));
	t.assert_r(AIOBE, run([ref, i_v(int.min), zero]));

	t.assert_r(rNONE, run([ref, i_v(0), zero]));
	t.assert_a<i16>([0, 2, 11, 12365, -10988], array.elems);

	t.assert_r(rNONE, run([ref, i_v(1), i_v(9937)]));
	t.assert_a<i16>([0, 9937, 11, 12365, -10988], array.elems);

	t.assert_r(rNONE, run([ref, i_v(2), i_v(-5)]));
	t.assert_a<i16>([0, 9937, -5, 12365, -10988], array.elems);

	t.assert_r(rNONE, run([ref, i_v(3), i_v(4444)]));
	t.assert_a<i16>([0, 9937, -5, 4444, -10988], array.elems);

	t.assert_r(rNONE, run([ref, i_v(4), i_v(i16.min)]));
	t.assert_a<i16>([0, 9937, -5, 4444, -32768], array.elems);
}

def test_exe_xnewarrayof<T>(t: JawaTester, c: JawaPrimArrayOpcodes) {
	// XXX(code size): reduce polymorphic duplication of this method
	var i = Interpreter.new();
	var f = t.make_xnewarray(c);
	if (f == null) return;

	t.assert_r(NASE, i.run(100, f, [i_v(-1)]));

	for (len in [0, 1, 5, 257]) {
		var r = i.run(100, f, [i_v(len)]);
		var obj = t.assertIsJawaObject(r);
		if (obj == null) return;
		var array = t.assertIsJawaArrayObjectOf<T>(obj);
		if (array == null) return;
		t.t.asserti(len, array.length());
		t.t.asserti(len, array.elems.length);
	}
}

def test_exe_xnewarray(t: JawaTester) {
	test_exe_xnewarrayof<i8>(t, JawaPrimArrayOpcodes.BYTE);
	test_exe_xnewarrayof<bool>(t, JawaPrimArrayOpcodes.BOOL);
	test_exe_xnewarrayof<u16>(t, JawaPrimArrayOpcodes.CHAR);
	test_exe_xnewarrayof<i16>(t, JawaPrimArrayOpcodes.SHORT);
	test_exe_xnewarrayof<i32>(t, JawaPrimArrayOpcodes.INT);
	test_exe_xnewarrayof<i64>(t, JawaPrimArrayOpcodes.LONG);
	test_exe_xnewarrayof<float>(t, JawaPrimArrayOpcodes.FLOAT);
	test_exe_xnewarrayof<double>(t, JawaPrimArrayOpcodes.DOUBLE);
}

def test_exe_arraylength1(t: JawaTester) {
	var i = Interpreter.new();
	for (c in JawaPrimArrayOpcodes) {
		var f = t.make_xarraylength(c);
		if (f == null) return;

		t.assert_r(NPE, i.run(100, f, [Values.EXTERNREF_NULL]));
		for (len in [0, 1, 258]) {
			var obj = c.map.newarray(len);
			t.assert_r(i_r(len), i.run(100, f, [Value.ExternRef(obj)]));
		}
	}
}

def test_exe_arraylength2(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	var ajlo = t.importArrayOf(jlo);

	var sig = FuncSig.new([ValueType.Abstract(ajlo)], SigCache.arr_i);
	def str = t.strCodeType(JawaFuncOpcode.ARRAYLENGTH.code, ajlo);
	t.addFuncImport(str, sig);
	var r = t.process();

	var elem = t.assertIsJawaClassType(JawaLang.OBJECT, r[0]);
	var at = t.assertIsJawaArrayType(elem, r[1]);
	var expected_sig = FuncSig.new([ValueType.Host(at)], SigCache.arr_i);
	var f = t.assertIsFunction(expected_sig, r[2]);
	if (f == null) return;

	var i = Interpreter.new();
	for (len in [0, 1, 259]) {
		var obj = JawaRefArrayObject.new(at, Array<JawaObject>.new(len));
		t.assert_r(i_r(len), i.run(100, f, [Value.ExternRef(obj)]));
	}
}

def test_exe_acmpeq(t: JawaTester) {
	var sig = FuncSig.new([ValueType.Host(JawaTypes.OBJECT), ValueType.Host(JawaTypes.OBJECT)], SigCache.arr_i);
	t.addFuncImport([JawaFuncOpcode.ACMPEQ.code], sig);
	var r = t.process();
	var f = t.assertIsFunction(sig, r[0]);
	if (f == null) return;

	def cases: Array<JawaObject> = [
		null,
		JawaArrayObjectOf<i8>.new(Array<i8>.new(2)),
		JawaArrayObjectOf<float>.new(Array<float>.new(2)),
		JawaObject.new()
	];
	var i = Interpreter.new(), TRUE = i_r(1), FALSE = i_r(0);
	for (x < cases.length) {
		var a = Value.ExternRef(cases[x]);
		for (y < cases.length) {
			var b = Value.ExternRef(cases[y]);
			t.assert_r(if(x == y, TRUE, FALSE), i.run(100, f, [a, b]));
		}
	}
}

def test_exe_anewarray(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	var ajlo = t.importArrayOf(jlo);

	var sig = FuncSig.new(SigCache.arr_i, [ValueType.Abstract(ajlo)]);
	var cmd = t.strCodeType(JawaFuncOpcode.ANEWARRAY.code, ajlo);
	t.addFuncImport(cmd, sig);
	var r = t.process();

	var elem = t.assertIsJawaClassType(JawaLang.OBJECT, r[0]);
	var at = t.assertIsJawaArrayType(elem, r[1]);
	var expected_sig = FuncSig.new(SigCache.arr_i, [ValueType.Host(at)]);
	var f = t.assertIsFunction(expected_sig, r[2]);
	if (f == null) return;

	var i = Interpreter.new();
	for (len in [0, 1, 7, 257]) {
		var r = i.run(100, f, [i_v(len)]);
		var obj = t.assertIsJawaObject(r);
		if (obj == null) return;
		var array = t.assertIsJawaRefArrayObject(obj);
		if (array == null) return;
		t.t.asserti(len, array.length());
		t.t.asserti(len, array.elems.length);
	}
}

def test_exe_aaload(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	var ajlo = t.importArrayOf(jlo);

	var sig = FuncSig.new([ValueType.Abstract(ajlo), ValueType.I32], [ValueType.Abstract(jlo)]);
	var cmd = t.strCodeType(JawaFuncOpcode.AALOAD.code, ajlo);
	t.addFuncImport(cmd, sig);
	var r = t.process();

	var elem = t.assertIsJawaClassType(JawaLang.OBJECT, r[0]);
	var at = t.assertIsJawaArrayType(elem, r[1]);
	if (at == null) return;
	var expected_sig = FuncSig.new([ValueType.Host(at), ValueType.I32], [ValueType.Host(at.elem)]);
	var f = t.assertIsFunction(expected_sig, r[2]);
	if (f == null) return;

	var i = Interpreter.new();
	var objs = [
		null,
		JawaObject.new(),
		JawaObject.new(),
		JawaObject.new()
	];
	var array = JawaRefArrayObject.new(at, objs), av = Value.ExternRef(array);
	def run = i.run(100, f, _);
	for (i < objs.length) {
		t.assert_r(o_r(objs[i]), run([av, i_v(i)]));
	}
	t.assert_r(NPE, run([Value.ExternRef(null), i_v(0)]));
	t.assert_r(AIOBE, run([av, i_v(-1)]));
	t.assert_r(AIOBE, run([av, i_v(objs.length)]));
	t.assert_r(AIOBE, run([av, i_v(65555)]));
	t.assert_r(AIOBE, run([av, i_v(int.max)]));
}

def test_exe_aastore(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	var ajlo = t.importArrayOf(jlo);

	var sig = FuncSig.new([ValueType.Abstract(ajlo), ValueType.I32, ValueType.Abstract(jlo)], SigCache.arr_v);
	var cmd = t.strCodeType(JawaFuncOpcode.AASTORE.code, ajlo);
	t.addFuncImport(cmd, sig);
	var r = t.process();

	var elem = t.assertIsJawaClassType(JawaLang.OBJECT, r[0]);
	var at = t.assertIsJawaArrayType(elem, r[1]);
	if (at == null) return;
	var expected_sig = FuncSig.new([ValueType.Host(at), ValueType.I32, ValueType.Host(at.elem)], SigCache.arr_v);
	var f = t.assertIsFunction(expected_sig, r[2]);
	if (f == null) return;

	var i = Interpreter.new();
	var obj1 = JawaObject.new(), obj2 = JawaObject.new(), obj3 = JawaObject.new();
	var array = JawaRefArrayObject.new(at, [null, obj1, obj2, obj3]);
	var av = Value.ExternRef(array), nv = Value.ExternRef(null);
	def run = i.run(100, f, _);

	t.assert_r(rNONE, run([av, i_v(0), nv]));
	t.assert_a([null, obj1, obj2, obj3], array.elems);

	t.assert_r(rNONE, run([av, i_v(0), Value.ExternRef(obj2)]));
	t.assert_a([obj2, obj1, obj2, obj3], array.elems);

	t.assert_r(rNONE, run([av, i_v(2), Value.ExternRef(obj3)]));
	t.assert_a([obj2, obj1, obj3, obj3], array.elems);

	t.assert_r(rNONE, run([av, i_v(3), nv]));
	t.assert_a([obj2, obj1, obj3, null], array.elems);

	t.assert_r(NPE, run([Value.ExternRef(null), i_v(0), nv]));
	t.assert_r(AIOBE, run([av, i_v(-1), nv]));
	t.assert_r(AIOBE, run([av, i_v(4), nv]));
	t.assert_r(AIOBE, run([av, i_v(65555), nv]));
	t.assert_r(AIOBE, run([av, i_v(int.max), nv]));
}

def test_exe_isnull(t: JawaTester) {
	var sig = FuncSig.new([ValueType.Host(JawaTypes.OBJECT)], SigCache.arr_i);
	t.addFuncImport([JawaFuncOpcode.ISNULL.code], sig);
	var r = t.process();
	var f = t.assertIsFunction(sig, r[0]);
	if (f == null) return;

	def cases: Array<JawaObject> = [
		null,
		JawaArrayObjectOf<u16>.new(Array<u16>.new(0)),
		JawaArrayObjectOf<double>.new(Array<double>.new(0)),
		JawaObject.new(),
		JawaObject.new()
	];
	var i = Interpreter.new(), TRUE = i_r(1), FALSE = i_r(0);
	for (x < cases.length) {
		var obj = cases[x];
		t.assert_r(if(obj == null, TRUE, FALSE), i.run(100, f, [Value.ExternRef(obj)]));
	}
}

def test_exe_multianewarray1(t: JawaTester) {
	def dims = 1;
	var jlo = t.importJawaLangObject();
	var ajlo = t.importArrayOf(jlo);

	var sig = FuncSig.new(SigCache.arr_i, [ValueType.Abstract(ajlo)]);
	var cmd = JawaAsm.new()
		.putc(JawaFuncOpcode.MULTIANEWARRAY.code)
		.put_ji4(dims)
		.put_ji4(ajlo.abstype_index)
		.extract();
	t.addFuncImport(cmd, sig);
	var r = t.process();

	var elem = t.assertIsJawaClassType(JawaLang.OBJECT, r[0]);
	var at = t.assertIsJawaArrayType(elem, r[1]);
	var expected_sig = FuncSig.new(SigCache.arr_i, [ValueType.Host(at)]);
	var f = t.assertIsFunction(expected_sig, r[2]);
	if (f == null) return;

	var i = Interpreter.new();
	for (len in [0, 1, 7, 257]) {
		var r = i.run(100, f, [i_v(len)]);
		var obj = t.assertIsJawaObject(r);
		if (obj == null) return;
		var array = t.assertIsJawaRefArrayObject(obj);
		if (array == null) return;
		t.t.asserti(len, array.length());
		t.t.asserti(len, array.elems.length);
	}
}

def test_exe_multianewarray2(t: JawaTester) {
	def dims = 1;
	var it = t.importMultiArrayOf(t.importJawaLangObject(), dims);
	var pair = t.make_multianewarray(it, dims), at = pair.0, f = pair.1;
	if (f == null) return;

	var i = Interpreter.new();
	for (len in [0, 1, 7, 257]) {
		var r = i.run(100, f, [i_v(len)]);
		var obj = t.assertIsJawaObject(r);
		if (obj == null) return;
		var array = t.assertIsJawaRefArrayObject(obj);
		if (array == null) return;
		t.t.asserti(len, array.length());
		t.t.asserti(len, array.elems.length);
	}
}

def test_exe_multianewarray3(t: JawaTester) {
	def dims = 2;
	var it = t.importMultiArrayOf(t.importJawaLangObject(), dims);
	var pair = t.make_multianewarray(it, dims), at = pair.0, f = pair.1;
	if (f == null) return;

	var i = Interpreter.new();
	for (d1 in [0, 1, 3]) {
		for (d2 in [0, 1, 3]) {
			var r = i.run(100, f, [i_v(d1), i_v(d2)]);
			var obj = t.assertIsJawaObject(r);
			if (obj == null) return;
			var array = t.assertIsJawaRefArrayObject(obj);
			if (array == null) return;
			t.t.asserti(d1, array.length());
			t.t.asserti(d1, array.elems.length);
			for (s in array.elems) {
				var sub = t.assertIsJawaRefArrayObject(s);
				if (sub == null) return;
				t.t.asserti(d2, sub.length());
				t.t.asserti(d2, sub.elems.length);
				for (x in sub.elems) {
					if (x != null) t.t.fail("expected null");
				}
			}
		}
	}
}

def test_exe_multianewarrayP1(t: JawaTester) {
	def dims = 1;
	for (c in JawaPrimArrayOpcodes) {
		var n = JawaTester.new(t.t);
		var it = n.importPrimArray(c);
		var pair = n.make_multianewarray(it, dims), at = pair.0, f = pair.1;
		if (f == null) return;

		var i = Interpreter.new();
		for (len in [0, 1, 7, 257]) {
			var r = i.run(100, f, [i_v(len)]);
			var obj = t.assertIsJawaObject(r);
			if (obj == null) return;
			var array = t.assertIsJawaArrayObject(obj);
			if (array == null) return;
			t.t.asserti(len, array.length());
		}
	}
}

def test_exe_multianewarrayP2(t: JawaTester) {
	def dims = 2;
	for (c in JawaPrimArrayOpcodes) {
		var n = JawaTester.new(t.t);
		var it = n.importArrayOf(n.importPrimArray(c));
		var pair = n.make_multianewarray(it, dims), at = pair.0, f = pair.1;
		if (f == null) return;

		var i = Interpreter.new();
		for (d1 in [0, 1, 3, 5]) {
			for (d2 in [0, 1, 3, 5]) {
				var r = i.run(100, f, [i_v(d1), i_v(d2)]);
				var obj = t.assertIsJawaObject(r);
				if (obj == null) return;
				var array = t.assertIsJawaRefArrayObject(obj);
				if (array == null) return;
				t.t.asserti(d1, array.length());
				t.t.asserti(d1, array.elems.length);
				for (s in array.elems) {
					var sub = t.assertIsJawaArrayObject(s);
					if (sub == null) return;
					t.t.asserti(d2, sub.length());
				}
			}
		}
	}
}

def test_exe_new1(t: JawaTester) {
	var name = "Hiz", jname = JawaStrings.of(name);
	// Manually created class
	var jt = t.env.declareClass(jname, JawaLang.OBJECT, []);
	jt.instanceFields = [];
	jt.boilerplate = [];
	var it = t.importClass(name);

	var str3 = t.strCodeType(JawaFuncOpcode.NEW.code, it);
	var fi = t.addFuncImport(str3, FuncSig.new([], [ValueType.Abstract(it)]));

	var r = t.process();
	var ct = t.assertIsJawaClassType(jt, r[it.imp.import_index]);
	if (ct == null) return;
	var f = t.assertIsFunction(FuncSig.new([], [ValueType.Host(ct)]), r[fi.imp.import_index]);
	if (f == null) return;

	var i = Interpreter.new();
	var got = i.run(100, f, []);
	var obj = t.assertIsJawaInstanceObject(ct, got);
	if (obj == null) return;
	if (obj.fields.length != 0) return t.t.fail("expected 0 fields");
}

def test_exe_new2(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	// Explicitly defined class
	var name = "Ion", jname = JawaStrings.of(name);
	var it1 = t.declareClass(name, jlo, []);
	var it2 = t.defineClass(it1, [], [], [], []);
	var str3 = t.strCodeType(JawaFuncOpcode.NEW.code, it1);
	var fi = t.addFuncImport(str3, FuncSig.new([], [ValueType.Abstract(it1)]));

	var r = t.process();
	var ct1 = t.assertIsJawaClassTypeWithName(jname, r[it1.imp.import_index]);
	if (ct1 == null) return;
	var f = t.assertIsFunction(FuncSig.new([], [ValueType.Host(ct1)]), r[fi.imp.import_index]);
	if (f == null) return;

	var i = Interpreter.new();
	var got = i.run(100, f, []);
	var obj = t.assertIsJawaInstanceObject(ct1, got);
	if (obj == null) return;
	if (obj.fields.length != 0) return t.t.fail("expected 0 fields");
}

def test_exe_getfield(t: JawaTester) {
	var className = "MyClass", jclassName = JawaStrings.of(className);
	var fieldName = "f1", jfieldName = JawaStrings.of(fieldName);
	var ct = JawaClassType.new(jclassName, NO_CLASS_ATTRS, null, []);
	ct.boilerplate = [Values.I32_0];
	ct.instanceFields = [JawaField.new(jfieldName, NO_FIELD_ATTRS, 0, JawaTypes.BYTE)];
	t.env.add(ct);
	var it = t.importClass(className);
	var str1 = t.strCodeTypeJawaName(JawaFuncOpcode.GETFIELD.code, it, jfieldName);
	var fi = t.addFuncImport(str1, FuncSig.new([ValueType.Abstract(it)], [ValueType.I32]));

	var r = t.process();
	t.assertIsJawaClassType(ct, r[it.imp.import_index]);
	var f = t.assertIsFunction(FuncSig.new([ValueType.Host(ct)], [ValueType.I32]), r[fi.imp.import_index]);
	if (f == null) return;

	var i = Interpreter.new();
	var obj = JawaInstanceObject.new(ct), ref = Value.ExternRef(obj);
	def run = i.run(100, f, _);

	t.assert_r(i_r(0), run([ref]));

	obj.fields[0] = i_v(33);
	t.assert_r(i_r(33), run([ref]));

	obj.fields[0] = i_v(77);
	t.assert_r(i_r(77), run([ref]));

	t.assert_r(NPE, run([Values.EXTERNREF_NULL]));
}

def test_exe_putfield(t: JawaTester) {
	var className = "MyClass", jclassName = JawaStrings.of(className);
	var fieldName = "f1", jfieldName = JawaStrings.of(fieldName);
	var ct = JawaClassType.new(jclassName, NO_CLASS_ATTRS, null, []);
	ct.boilerplate = [Values.I32_0];
	ct.instanceFields = [JawaField.new(jfieldName, NO_FIELD_ATTRS, 0, JawaTypes.INT)];
	t.env.add(ct);
	var it = t.importClass(className);
	var str1 = t.strCodeTypeJawaName(JawaFuncOpcode.PUTFIELD.code, it, jfieldName);
	var fi = t.addFuncImport(str1, FuncSig.new([ValueType.Abstract(it), ValueType.I32], SigCache.arr_v));

	var r = t.process();
	t.assertIsJawaClassType(ct, r[it.imp.import_index]);
	var f = t.assertIsFunction(FuncSig.new([ValueType.Host(ct), ValueType.I32], SigCache.arr_v), r[fi.imp.import_index]);
	if (f == null) return;

	var i = Interpreter.new();
	var obj = JawaInstanceObject.new(ct), ref = Value.ExternRef(obj);
	def run = i.run(100, f, _);

	t.assert_r(rNONE, run([ref, i_v(22)]));
	t.assert_r(i_r(22), v_r(obj.fields[0]));

	t.assert_r(rNONE, run([ref, i_v(-89)]));
	t.assert_r(i_r(-89), v_r(obj.fields[0]));

	t.assert_r(rNONE, run([ref, i_v(-99999999)]));
	t.assert_r(i_r(-99999999), v_r(obj.fields[0]));

	t.assert_r(NPE, run([Values.EXTERNREF_NULL, i_v(0)]));
}

def test_exe_getstatic(t: JawaTester) {
	var className = "MyClass", jclassName = JawaStrings.of(className);
	var fieldName = "f1", jfieldName = JawaStrings.of(fieldName);
	var ct = JawaClassType.new(jclassName, NO_CLASS_ATTRS, null, []);
	ct.fields = [Values.I32_0];
	ct.instanceFields = [];
	ct.staticFields = [JawaField.new(jfieldName, NO_FIELD_ATTRS, 0, JawaTypes.BYTE)];
	t.env.add(ct);
	var it = t.importClass(className);
	var str1 = t.strCodeTypeJawaName(JawaFuncOpcode.GETSTATIC.code, it, jfieldName);
	var fi = t.addFuncImport(str1, FuncSig.new(SigCache.arr_v, [ValueType.I32]));

	var r = t.process();
	t.assertIsJawaClassType(ct, r[it.imp.import_index]);
	var f = t.assertIsFunction(FuncSig.new(SigCache.arr_v, [ValueType.I32]), r[fi.imp.import_index]);
	if (f == null) return;

	var i = Interpreter.new();
	def run = i.run(100, f, _);

	t.assert_r(i_r(0), run([]));

	ct.fields[0] = i_v(33);
	t.assert_r(i_r(33), run([]));

	ct.fields[0] = i_v(77);
	t.assert_r(i_r(77), run([]));
}

def test_exe_putstatic(t: JawaTester) {
	var className = "MyClass", jclassName = JawaStrings.of(className);
	var fieldName = "f1", jfieldName = JawaStrings.of(fieldName);
	var ct = JawaClassType.new(jclassName, NO_CLASS_ATTRS, null, []);
	ct.boilerplate = [Values.I32_0];
	ct.instanceFields = [];
	ct.staticFields = [JawaField.new(jfieldName, NO_FIELD_ATTRS, 0, JawaTypes.INT)];
	ct.fields = [Values.I32_0];
	t.env.add(ct);
	var it = t.importClass(className);
	var str1 = t.strCodeTypeJawaName(JawaFuncOpcode.PUTSTATIC.code, it, jfieldName);
	var fi = t.addFuncImport(str1, FuncSig.new([ValueType.I32], SigCache.arr_v));

	var r = t.process();
	t.assertIsJawaClassType(ct, r[it.imp.import_index]);
	var f = t.assertIsFunction(FuncSig.new([ValueType.I32], SigCache.arr_v), r[fi.imp.import_index]);
	if (f == null) return;

	var i = Interpreter.new();
	def run = i.run(100, f, _);

	t.assert_r(rNONE, run([i_v(22)]));
	t.assert_r(i_r(22), v_r(ct.fields[0]));

	t.assert_r(rNONE, run([i_v(-89)]));
	t.assert_r(i_r(-89), v_r(ct.fields[0]));

	t.assert_r(rNONE, run([i_v(-99999999)]));
	t.assert_r(i_r(-99999999), v_r(ct.fields[0]));
}

def test_exe_instanceof(t: JawaTester) {
	var name = "Foof", jname = JawaStrings.of(name);
	var jlo = t.importJawaLangObject();
	var ict = t.declareClass(name, jlo, []);
	var xxx = t.defineClass(ict, [], [], [], []);
	var cmd = t.strCodeType(JawaFuncOpcode.INSTANCEOF.code, ict);
	var fi = t.addFuncImport(cmd, FuncSig.new([ValueType.Abstract(ict)], SigCache.arr_i));

	var r = t.process();
	var ct = t.assertIsJawaClassTypeWithName(jname, r[ict.imp.import_index]);
	if (ct == null) return;

	var f = t.assertIsFunction(FuncSig.new([ValueType.Host(JawaLang.OBJECT)], SigCache.arr_i), r[fi.imp.import_index]);
	def run = Interpreter.new().run(100, f, _);

	t.assert_r(i_r(0), run([Values.EXTERNREF_NULL]));
	t.assert_r(i_r(0), run([Value.ExternRef(JawaInstanceObject.new(JawaTypes.OBJECT))]));
	t.assert_r(i_r(0), run([Value.ExternRef(JawaArrayObjectOf<int>.new([]))]));
	t.assert_r(i_r(1), run([Value.ExternRef(JawaInstanceObject.new(ct))]));
}

def test_exe_checkcast(t: JawaTester) {
	var name = "Cce", jname = JawaStrings.of(name);
	var jlo = t.importJawaLangObject();
	var ict = t.declareClass(name, jlo, []);
	var xxx = t.defineClass(ict, [], [], [], []);
	var cmd = t.strCodeType(JawaFuncOpcode.CHECKCAST.code, ict);
	var fi = t.addFuncImport(cmd, FuncSig.new([ValueType.Abstract(jlo)], [ValueType.Abstract(ict)]));

	var r = t.process();
	var ct = t.assertIsJawaClassTypeWithName(jname, r[ict.imp.import_index]);
	if (ct == null) return;

	var f = t.assertIsFunction(FuncSig.new([ValueType.Host(JawaLang.OBJECT)], [ValueType.Host(ct)]), r[fi.imp.import_index]);
	def run = Interpreter.new().run(100, f, _);

	t.assert_r(Result.Value([Values.EXTERNREF_NULL]), run([Values.EXTERNREF_NULL]));
	t.assert_r(CCE, run([Value.ExternRef(JawaInstanceObject.new(JawaTypes.OBJECT))]));
	t.assert_r(CCE, run([Value.ExternRef(JawaArrayObjectOf<int>.new([]))]));
	var ref = Value.ExternRef(JawaInstanceObject.new(ct));
	t.assert_r(v_r(ref), run([ref]));
}

def test_exe_monitorenter(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	var fi = t.addFuncImport([JawaFuncOpcode.MONITORENTER.code], FuncSig.new([ValueType.Abstract(jlo)], SigCache.arr_v));

	var r = t.process();
	var f = t.assertIsFunction(FuncSig.new([ValueType.Host(JawaLang.OBJECT)], SigCache.arr_v), r[fi.imp.import_index]);
	if (f == null) return;

	var i = Interpreter.new();
	var ref = Value.ExternRef(JawaInstanceObject.new(JawaLang.OBJECT));
	t.assert_r(rNONE, i.run(100, f, [ref]));
	t.assert_r(NPE, i.run(100, f, [Values.EXTERNREF_NULL]));
}

def test_exe_monitorexit(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	var fi = t.addFuncImport([JawaFuncOpcode.MONITOREXIT.code], FuncSig.new([ValueType.Abstract(jlo)], SigCache.arr_v));

	var r = t.process();
	var f = t.assertIsFunction(FuncSig.new([ValueType.Host(JawaLang.OBJECT)], SigCache.arr_v), r[fi.imp.import_index]);
	if (f == null) return;

	var i = Interpreter.new();
	var ref = Value.ExternRef(JawaInstanceObject.new(JawaLang.OBJECT));
	t.assert_r(rNONE, i.run(100, f, [ref]));
	t.assert_r(NPE, i.run(100, f, [Values.EXTERNREF_NULL]));
}


def NO_INSTANCE_FIELDS: Array<(JawaString, JawaTypeRef)> = [];
def NO_STATIC_FIELDS = NO_INSTANCE_FIELDS;
def NO_INSTANCE_METHODS: Array<(JawaString, JawaSigRef, FuncDecl)> = [];
def NO_STATIC_METHODS = NO_INSTANCE_METHODS;

def test_exe_invokestatic1(t: JawaTester) {
	var className = "LoPan", jclassName = JawaStrings.of(className);
	var methodName = "m2", jmethodName = JawaStrings.of(methodName);
	var ct = JawaClassType.new(jclassName, NO_CLASS_ATTRS, null, []);
	var catcher = ArgCatcher.new(SigCache.v_v);
	ct.boilerplate = [];
	ct.instanceFields = [];
	ct.staticMethods = [JawaMethod.new(jmethodName, NO_METHOD_ATTRS, [], JawaTypes.INT, catcher.host)];
	t.env.add(ct);
	var it = t.importClass(className);
	var str1 = t.strCodeTypeJawaName(JawaFuncOpcode.INVOKESTATIC.code, it, jmethodName);
	var fi = t.addFuncImport(str1, FuncSig.new(SigCache.arr_v, SigCache.arr_i));

	var r = t.process();
	t.assertIsJawaClassType(ct, r[it.imp.import_index]);
	var f = t.assertIsFunction(FuncSig.new(SigCache.arr_v, SigCache.arr_i), r[fi.imp.import_index]);
	if (f == null) return;

	var i = Interpreter.new();
	def run = i.run(100, f, _);
	var args: Array<Value>;

	args = [];
	catcher.result = HostResult.Value([Value.I32(33)]);
	t.assert_r(i_r(33), run(args));
	t.assert_r(Result.Value(args), Result.Value(catcher.args));

	catcher.result = HostResult.Value([Value.I32(919)]);
	t.assert_r(i_r(919), run(args));
	t.assert_r(Result.Value(args), Result.Value(catcher.args));
}

def addInvokeStatic(t: JawaTester, jsig: JawaSigRef, sig: FuncSig, body: FuncDecl) -> FuncDecl {
	var name = [byte.view('C' + body.func_index)];
	var jname = JawaStrings.of(name);
	var m1 = "m", jm1 = JawaStrings.of(m1);
	var it = t.declareClass(name, null, []);

	t.defineClass(it,
		NO_INSTANCE_FIELDS, NO_INSTANCE_METHODS, NO_STATIC_FIELDS,
		[(jm1, jsig, body)]  // static methods
	);

	var str1 = t.strCodeTypeJawaName(JawaFuncOpcode.INVOKESTATIC.code, it, jm1);
	return t.addFuncImport(str1, SigCache.i_i);
}

def test_exe_invokestatic2(t: JawaTester) {
	var g1 = t.addGlobal(ValueType.I32, InitExpr.I32(42));
	var f1 = t.addFunction(SigCache.i_i, [
		Opcode.LOCAL_GET.code, 0,
		Opcode.GLOBAL_GET.code, byte.view(g1),
		Opcode.I32_SUB.code
	]);

	var fi = addInvokeStatic(t,
		JawaSigRef.new([JawaTypeRef.Prim(JawaTypes.INT)], JawaTypeRef.Prim(JawaTypes.INT)),
		SigCache.i_i,
		f1);

	var r = t.process();
	var f = t.assertIsFunction(SigCache.i_i, r[fi.imp.import_index]);
	if (f == null) return;

	var i = Interpreter.new();
	def run = i.run(100, f, _);

	t.assert_r(i_r(0), run([i_v(42)]));
	t.assert_r(i_r(42), run([i_v(84)]));
	t.assert_r(i_r(958), run([i_v(1000)]));
}

def test_exe_invokestatic3(t: JawaTester) {
	var g1 = t.addGlobal(ValueType.I32, InitExpr.I32(29));
	var f1 = t.addFunction(SigCache.i_i, [
		Opcode.LOCAL_GET.code, 0,
		Opcode.GLOBAL_GET.code, byte.view(g1),
		Opcode.I32_SUB.code
	]);

	var f2 = addInvokeStatic(t,
		JawaSigRef.new([JawaTypeRef.Prim(JawaTypes.INT)], JawaTypeRef.Prim(JawaTypes.INT)),
		SigCache.i_i,
		f1);

	var f3 = addInvokeStatic(t,
		JawaSigRef.new([JawaTypeRef.Prim(JawaTypes.INT)], JawaTypeRef.Prim(JawaTypes.INT)),
		SigCache.i_i,
		f2);

	var r = t.process();
	var f2i = t.assertIsFunction(SigCache.i_i, r[f2.imp.import_index]);
	var f3i = t.assertIsFunction(SigCache.i_i, r[f3.imp.import_index]);
	if (f2i == null) return;
	if (f3i == null) return;

	var i = Interpreter.new();

	t.assert_r(i_r(0), i.run(100, f2i, [i_v(29)]));
	t.assert_r(i_r(0), i.run(100, f3i, [i_v(29)]));

	t.assert_r(i_r(26), i.run(100, f2i, [i_v(55)]));
	t.assert_r(i_r(26), i.run(100, f3i, [i_v(55)]));

	t.assert_r(i_r(971), i.run(100, f2i, [i_v(1000)]));
	t.assert_r(i_r(971), i.run(100, f3i, [i_v(1000)]));
}

def test_exe_invokespecial(t: JawaTester) {
	var className = "Krug", jclassName = JawaStrings.of(className);
	var methodName = "far", jmethodName = JawaStrings.of(methodName);
	var ct = JawaClassType.new(jclassName, NO_CLASS_ATTRS, null, []);
	var catcher = ArgCatcher.new(SigCache.v_v);
	ct.boilerplate = [];
	ct.instanceFields = [];
	ct.instanceMethods = [JawaMethod.new(jmethodName, NO_METHOD_ATTRS, [], JawaTypes.INT, catcher.host)];
	ct.staticMethods = [];
	t.env.add(ct);
	var it = t.importClass(className);
	var str1 = t.strCodeTypeJawaName(JawaFuncOpcode.INVOKESPECIAL.code, it, jmethodName);
	var fi = t.addFuncImport(str1, FuncSig.new([ValueType.Abstract(it)], SigCache.arr_i));

	var r = t.process();
	t.assertIsJawaClassType(ct, r[it.imp.import_index]);
	var f = t.assertIsFunction(FuncSig.new([ValueType.Host(ct)], SigCache.arr_i), r[fi.imp.import_index]);
	if (f == null) return;

	var i = Interpreter.new();
	def run = i.run(100, f, _);
	var args: Array<Value>;

	var obj = JawaInstanceObject.new(ct), ref = Value.ExternRef(obj);
	args = [ref];
	catcher.result = HostResult.Value([Value.I32(77)]);
	t.assert_r(i_r(77), run(args));
	t.assert_r(Result.Value(args), Result.Value(catcher.args));

	args = [ref];
	catcher.result = HostResult.Value([Value.I32(99)]);
	t.assert_r(i_r(99), run(args));
	t.assert_r(Result.Value(args), Result.Value(catcher.args));
}

def test_exe_invokevirtual(t: JawaTester) {
	var methodName = "m", jmethodName = JawaStrings.of(methodName);

	var cnA = "A", jcnA = JawaStrings.of(cnA);
	var ctA = JawaClassType.new(jcnA, NO_CLASS_ATTRS, null, []);
	var catcherA = ArgCatcher.new(SigCache.v_i);
	ctA.boilerplate = [];
	ctA.instanceFields = [];
	ctA.instanceMethods = [JawaMethod.new(jmethodName, NO_METHOD_ATTRS, [], JawaTypes.INT, catcherA.host)];
	ctA.staticMethods = [];
	var err = ErrorGen.new();
	ctA.buildTables(err);
	t.t.assertz(true, err.ok());
	t.env.add(ctA);
	var itA = t.importClass(cnA);

	var cnB = "B", jcnB = JawaStrings.of(cnA);
	var ctB = JawaClassType.new(jcnB, NO_CLASS_ATTRS, null, []);
	var catcherB = ArgCatcher.new(SigCache.v_i);
	ctB.boilerplate = [];
	ctB.instanceFields = [];
	ctB.instanceMethods = [JawaMethod.new(jmethodName, NO_METHOD_ATTRS, [], JawaTypes.INT, catcherB.host)];
	ctB.staticMethods = [];
	ctB.buildTables(err);
	t.t.assertz(true, err.ok());

	var str1 = t.strCodeTypeJawaName(JawaFuncOpcode.INVOKEVIRTUAL.code, itA, jmethodName);
	var fi = t.addFuncImport(str1, FuncSig.new([ValueType.Abstract(itA)], SigCache.arr_i));

	var r = t.process();
	var f = t.assertIsFunction(FuncSig.new([ValueType.Host(ctA)], SigCache.arr_i), r[fi.imp.import_index]);
	if (f == null) return;

	var i = Interpreter.new();
	def run = i.run(100, f, _);
	var args: Array<Value>;

	{
		var obj = JawaInstanceObject.new(ctA), ref = Value.ExternRef(obj);
		args = [ref];
		catcherA.result = HostResult.Value([Value.I32(77)]);
		t.assert_r(i_r(77), run(args));
		t.assert_r(Result.Value(args), Result.Value(catcherA.args));

		args = [ref];
		catcherA.result = HostResult.Value([Value.I32(99)]);
		t.assert_r(i_r(99), run(args));
		t.assert_r(Result.Value(args), Result.Value(catcherA.args));
	}
	{
		var obj = JawaInstanceObject.new(ctB), ref = Value.ExternRef(obj);
		args = [ref];
		catcherA.result = HostResult.Value([Value.I32(55)]);
		catcherB.result = HostResult.Value([Value.I32(66)]);
		t.assert_r(i_r(66), run(args));
		t.assert_r(Result.Value(args), Result.Value(catcherB.args));

		args = [ref];
		catcherB.result = HostResult.Value([Value.I32(99)]);
		t.assert_r(i_r(99), run(args));
		t.assert_r(Result.Value(args), Result.Value(catcherB.args));
	}
}

def test_exe_invokeinterface(t: JawaTester) {
	var methodName = "m", jmethodName = JawaStrings.of(methodName);

	var inI = "I", jinI = JawaStrings.of(inI);
	var itI = JawaInterfaceType.new(jinI, []);
	itI.instanceMethods = [JawaMethod.new(jmethodName, NO_METHOD_ATTRS, [], JawaTypes.INT, null)];
	t.env.add(itI);

	var cnA = "A", jcnA = JawaStrings.of(cnA);
	var ctA = JawaClassType.new(jcnA, NO_CLASS_ATTRS, null, [itI]);
	var catcherA = ArgCatcher.new(SigCache.v_i);
	ctA.boilerplate = [];
	ctA.instanceFields = [];
	ctA.instanceMethods = [JawaMethod.new(jmethodName, NO_METHOD_ATTRS, [], JawaTypes.INT, catcherA.host)];
	ctA.staticMethods = [];
	var err = ErrorGen.new();
	ctA.buildTables(err);
	t.t.assertz(true, err.ok());
	t.env.add(ctA);
	var iitI = t.importInterface(inI);

	var str1 = t.strCodeTypeJawaName(JawaFuncOpcode.INVOKEINTERFACE.code, iitI, jmethodName);
	var fi = t.addFuncImport(str1, FuncSig.new([ValueType.Abstract(iitI)], SigCache.arr_i));

	var r = t.process();
	var f = t.assertIsFunction(FuncSig.new([ValueType.Host(itI)], SigCache.arr_i), r[fi.imp.import_index]);
	if (f == null) return;

	var i = Interpreter.new();
	def run = i.run(100, f, _);
	var args: Array<Value>;

	{
		var obj = JawaInstanceObject.new(ctA), ref = Value.ExternRef(obj);
		args = [ref];
		catcherA.result = HostResult.Value([Value.I32(77)]);
		t.assert_r(i_r(77), run(args));
		t.assert_r(Result.Value(args), Result.Value(catcherA.args));

		args = [ref];
		catcherA.result = HostResult.Value([Value.I32(99)]);
		t.assert_r(i_r(99), run(args));
		t.assert_r(Result.Value(args), Result.Value(catcherA.args));
	}
}

def test_exe_object1(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	var c = JawaClassBuilder.new(t, "C", jlo, []);

	var getF = t.addFunction(FuncSig.new([c.at], SigCache.arr_i), []);
	var setF = t.addFunction(FuncSig.new([c.at, ValueType.I32], SigCache.arr_v), []);

	c.addInstanceField("f", JawaTypeRef.Prim(JawaTypes.INT));
	c.addInstanceField("g", JawaTypeRef.Prim(JawaTypes.FLOAT));
	c.addInstanceMethod("getF", [JawaTypeRef.Abstract(c.it)], JawaTypeRef.Prim(JawaTypes.INT), getF);
	c.addInstanceMethod("setF", [JawaTypeRef.Abstract(c.it), JawaTypeRef.Prim(JawaTypes.INT)], JawaTypeRef.Void, setF);
	c.define();

	var new_c = c.NEW();
	var getfield_f = c.GETFIELD("f");
	var getfield_g = c.GETFIELD("g");
	var setfield_f = c.PUTFIELD("f");
	var setfield_g = c.PUTFIELD("g");

	t.addCodeV(setF, [
		Opcode.LOCAL_GET.code, 0,
		Opcode.LOCAL_GET.code, 1,
		Opcode.CALL.code, byte.view(setfield_f.func_index)
	]);
	t.addCodeV(getF, [
		Opcode.LOCAL_GET.code, 0,
		Opcode.CALL.code, byte.view(getfield_f.func_index)
	]);

	var run = t.addFunction(SigCache.ii_i, [
		Opcode.CALL.code, byte.view(new_c.func_index),
		Opcode.LOCAL_TEE.code, 1,
		Opcode.LOCAL_GET.code, 0,
		Opcode.CALL.code, byte.view(setF.func_index),
		Opcode.LOCAL_GET.code, 1,
		Opcode.CALL.code, byte.view(getF.func_index)
	]);

	var instance = t.instantiate();
	if (instance == null) return;

	var i = Interpreter.new();
	var f = instance.functions[run.func_index];

	t.assert_r(i_r(456), i.reset().run(100, f, [i_v(456), i_v(55)]));
	t.assert_r(i_r(778899), i.reset().run(100, f, [i_v(778899), i_v(34)]));
}

def test_exe_object2(t: JawaTester) {
	def methodName = "hmm";
	var jlo = t.importJawaLangObject();
	var c = JawaClassBuilder.new(t, "C", jlo, []);
	var cm1 = t.addFunction(FuncSig.new([c.at], SigCache.arr_i), [Opcode.I32_CONST.code, 33]);
	c.addInstanceMethod(methodName, [], JawaTypeRef.Prim(JawaTypes.INT), cm1);
	c.define();

	var d = JawaClassBuilder.new(t, "D", c.it, []);
	var dm1 = t.addFunction(FuncSig.new([d.at], SigCache.arr_i), [Opcode.I32_CONST.code, 44]);
	d.addInstanceMethod(methodName, [], JawaTypeRef.Prim(JawaTypes.INT), dm1);
	d.define();


	var new_c = c.NEW();
	var new_d = d.NEW();
	var invokevirtual_m1 = c.INVOKEVIRTUAL(methodName);

	var run = t.addFunction(SigCache.i_i, []);
	t.addCodeV(run, [
		Opcode.LOCAL_GET.code, 0,
		Opcode.IF.code, BpTypecon.AbstractT.code, byte.!(c.it.abstype_index),
		Opcode.CALL.code, byte.!(new_d.func_index),
		Opcode.ELSE.code,
		Opcode.CALL.code, byte.!(new_c.func_index),
		Opcode.END.code,
		Opcode.CALL.code, byte.!(invokevirtual_m1.func_index)
	]);

	var instance = t.instantiate();
	if (instance == null) return;

	var i = Interpreter.new();
	var f = instance.functions[run.func_index];

	t.assert_r(i_r(33), i.reset().run(100, f, [i_v(0)]));
	t.assert_r(i_r(44), i.reset().run(100, f, [i_v(1)]));
}

def test_exe_object3(t: JawaTester) {
	def methodName = "hJ", jmethodName = JawaStrings.of(methodName);

	var inI = "I", jinI = JawaStrings.of(inI);
	var itI = JawaInterfaceType.new(jinI, []);
	itI.instanceMethods = [JawaMethod.new(jmethodName, NO_METHOD_ATTRS, [], JawaTypes.INT, null)];
	t.env.add(itI);
	var iitI = t.importInterface(inI);

	var jlo = t.importJawaLangObject();
	var c = JawaClassBuilder.new(t, "C", jlo, [iitI]);
	var cm1 = t.addFunction(FuncSig.new([c.at], SigCache.arr_i), [Opcode.I32_CONST.code, 22]);
	c.addInstanceMethod(methodName, [], JawaTypeRef.Prim(JawaTypes.INT), cm1);
	c.define();

	var d = JawaClassBuilder.new(t, "D", c.it, []);
	var dm1 = t.addFunction(FuncSig.new([d.at], SigCache.arr_i), [Opcode.I32_CONST.code, 33]);
	d.addInstanceMethod(methodName, [], JawaTypeRef.Prim(JawaTypes.INT), dm1);
	d.define();


	var new_c = c.NEW();
	var new_d = d.NEW();
	var str1 = t.strCodeTypeJawaName(JawaFuncOpcode.INVOKEINTERFACE.code, iitI, jmethodName);
	var invokeinterface_m1 = t.addFuncImport(str1, FuncSig.new([ValueType.Abstract(iitI)], SigCache.arr_i));

	var run = t.addFunction(SigCache.i_i, []);
	t.addCodeV(run, [
		Opcode.LOCAL_GET.code, 0,
		Opcode.IF.code, BpTypecon.AbstractT.code, byte.!(c.it.abstype_index),
		Opcode.CALL.code, byte.!(new_d.func_index),
		Opcode.ELSE.code,
		Opcode.CALL.code, byte.!(new_c.func_index),
		Opcode.END.code,
		Opcode.CALL.code, byte.!(invokeinterface_m1.func_index)
	]);

	var instance = t.instantiate();
	if (instance == null) return;

	var i = Interpreter.new();
	var f = instance.functions[run.func_index];

	t.assert_r(i_r(22), i.reset().run(100, f, [i_v(0)]));
	t.assert_r(i_r(33), i.reset().run(100, f, [i_v(1)]));
}

// TODO	ATHROW
// TODO	DCMPG
// TODO	DCMPL
// TODO	DREM
// TODO	FCMPG
// TODO	FCMPL
// TODO	FREM
// TODO	INVOKEDYNAMIC
