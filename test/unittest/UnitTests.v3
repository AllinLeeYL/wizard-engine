// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Global unittest registry.
component UnitTests {
	var list: List<UnitTest>;
	var fatal: bool = false;
	private def buf = StringBuilder.new();
	def register(name: string, fun: Tester -> ()) {
		list = List.new(UnitTest.new(name, fun), list);
	}
	def registerT<T>(prefix: string, name: string, n: Tester -> T, f: T -> void) {
		if (prefix != null) name = buf.reset().puts(prefix).puts(name).extract();
		register(name, runNew<T>(_, n, f));
	}
	def runNew<T>(t: Tester, n: Tester -> T, f: T -> ()) {
		return f(n(t));
	}
}
// An individual unit test.
class UnitTest(name: string, fun: Tester -> ()) { }
// Tester that is capable of generating and recording errors.
class Tester(name: string) {
	var ok = true;
	var msg: string;
	def fail(msg: string) {
		if (!ok) return;
		this.ok = false;
		this.msg = msg;
		if (UnitTests.fatal) {
			System.error("UnitTestError", msg);
		}
	}
	def asserti(expected: int, got: int) -> this {
		if (expected != got) fail2("expected %d, got %d", expected, got);
	}
	def assertz(expected: bool, got: bool) -> this {
		if (expected != got) fail2("expected %z, got %z", expected, got);
	}
	def assertl(expected: long, got: long) -> this {
		if (expected != got) fail2("expected %d, got %d", expected, got);
	}
	def asserteq<T>(a: T, b: T) -> this {
		if (a != b) fail("expected equal");
	}
	def assertne<T>(a: T, b: T) -> this {
		if (a == b) fail("expected not equal");
	}
	def assertT<F, T>(v: F) -> this {
		if (!T.?(v)) fail("expected type");
	}
	def assertb(expected: Array<byte>, got: Array<byte>) -> this {
		asserta("data", expected, got, StringBuilder.putx<byte>);
	}
	def assert_string(expected: string, got: string) -> this {
		if (!Strings.equal(expected, got)) {
			var msg = StringBuilder.new().puts("expected ");
			msg.puts(if(expected == null, "null", expected));
			msg.puts(", got ");
			msg.puts(if(got == null, "null", got));
			fail(msg.extract());
		}
	}
	def asserta<T>(thing: string, expected: Array<T>, got: Array<T>, render: (StringBuilder, T) -> StringBuilder) {
		if (expected.length != got.length) {
			return fail3("expected %s.length == %d, got %d", thing, expected.length, got.length);
		}
		for (i < expected.length) {
			if (expected[i] != got[i]) {
				var msg = StringBuilder.new()
					.put2("expected %s[%d]", thing, i)
					.put2(" == %q, got %q", render(_, expected[i]), render(_, got[i]))
					.extract();
				return fail(msg);
			}
		}
	}
	def commute<A, B, R>(f: (A, B) -> R, t: (B, A)) -> R { // XXX: factor out to good location
		return f(t.1, t.0);
	}
	def assertar<T>(thing: string, expected: Array<T>, got: Array<T>, render: (T, StringBuilder) -> StringBuilder) {
		return asserta(thing, expected, got, commute(render, _));
	}
	def fail1<T>(msg: string, a: T) {
		fail(Strings.format1(msg, a));
	}
	def fail2<T, U>(msg: string, a: T, b: U) {
		fail(Strings.format2(msg, a, b));
	}
	def fail3<T, U, V>(msg: string, a: T, b: U, c: V) {
		fail(Strings.format3(msg, a, b, c));
	}
}
