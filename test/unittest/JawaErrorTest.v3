// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = JawaTests.registerRtTest("err", _, _);
def X = [
	T("simple", test_err_simple),
	T("noimm", test_err_noimm),
	T("class1", test_err_class1),
	T("class2", test_err_class2),
	T("intf1", test_err_intf1),
	T("sigR", test_err_sigR),
	T("sigP", test_err_sigP),
	()
];

def RETURN_TYPES = Arrays.prepend(JawaTypeRef.Void,
	Arrays.map<JawaPrimType, JawaTypeRef>(JawaTypes.PRIMITIVES, JawaTypeRef.Prim));

def test_simple_func(t: JawaTester, op: JawaFuncOpcode, sig: SigDecl) {
	{
		t = t.dup();
		var f = t.addFuncImport(t.strCode(op.code), sig);
		var r = t.process();
		if (r == null) return;
		t.assertIsFunction(sig, r[f.imp.import_index]);
	}
	{
		var other = if(sig.results.length > 0, SigDecl.new(sig.params, SigCache.arr_v), SigDecl.new(sig.params, SigCache.arr_i));
		t = t.dup();
		var f = t.addFuncImport(t.strCode(op.code), other); // wrong signature
		t.assertProcessFails();
	}
	if (false) { // TODO: fail on extraneous bytes
		t = t.dup();
		var f = t.addFuncImport(JawaAsm.new().putc(op.code).putc(0xFF), sig); // extraneous bytes
		t.assertProcessFails();
	}
	if (false) { // TODO: fail on extraneous import args
		t = t.dup();
		var asm = t.strCode(op.code);
		var jlo = t.importJawaLangObject();
		asm.args.put(jlo);
		var f = t.addFuncImport(asm, sig); // extraneous import arg
		t.assertProcessFails();
	}
}

def test_err_simple(t: JawaTester) {
	def T = test_simple_func(t, _, _);
	var o = t.toWasmType(JawaTypes.OBJECT);
	def wt = t.toWasmType;
	T(JawaFuncOpcode.ACMPEQ, t.sig_xx_i(o));
// TODO	T(JawaFuncOpcode.ATHROW, JawaSigCache.o_v);
	T(JawaFuncOpcode.BALOAD, t.sig_xi_y(wt(JawaTypes.BYTE_ARRAY), ValueType.I32));
	T(JawaFuncOpcode.BASTORE, t.sig_xiy_v(wt(JawaTypes.BYTE_ARRAY), ValueType.I32));
	T(JawaFuncOpcode.CALOAD, t.sig_xi_y(wt(JawaTypes.CHAR_ARRAY), ValueType.I32));
	T(JawaFuncOpcode.CASTORE, t.sig_xiy_v(wt(JawaTypes.CHAR_ARRAY), ValueType.I32));
	T(JawaFuncOpcode.DALOAD, t.sig_xi_y(wt(JawaTypes.DOUBLE_ARRAY), ValueType.F64));
	T(JawaFuncOpcode.DASTORE, t.sig_xiy_v(wt(JawaTypes.DOUBLE_ARRAY), ValueType.F64));
	T(JawaFuncOpcode.DCMPG, SigCache.dd_i);
	T(JawaFuncOpcode.DCMPL, SigCache.dd_i);
	T(JawaFuncOpcode.DREM, SigCache.dd_d);
	T(JawaFuncOpcode.FALOAD, t.sig_xi_y(wt(JawaTypes.FLOAT_ARRAY), ValueType.F32));
	T(JawaFuncOpcode.FASTORE, t.sig_xiy_v(wt(JawaTypes.FLOAT_ARRAY), ValueType.F32));
	T(JawaFuncOpcode.FCMPG, SigCache.ff_i);
	T(JawaFuncOpcode.FCMPL, SigCache.ff_i);
	T(JawaFuncOpcode.FREM, SigCache.ff_f);
	T(JawaFuncOpcode.IALOAD, t.sig_xi_y(wt(JawaTypes.INT_ARRAY), ValueType.I32));
	T(JawaFuncOpcode.IASTORE, t.sig_xiy_v(wt(JawaTypes.INT_ARRAY), ValueType.I32));
	T(JawaFuncOpcode.LALOAD, t.sig_xi_y(wt(JawaTypes.LONG_ARRAY), ValueType.I64));
	T(JawaFuncOpcode.LASTORE, t.sig_xiy_v(wt(JawaTypes.LONG_ARRAY), ValueType.I64));
	T(JawaFuncOpcode.MONITORENTER, t.sig_x_v(o));
	T(JawaFuncOpcode.MONITOREXIT, t.sig_x_v(o));
	T(JawaFuncOpcode.ISNULL, t.sig_x_i(o));
	T(JawaFuncOpcode.SALOAD, t.sig_xi_y(wt(JawaTypes.SHORT_ARRAY), ValueType.I32));
	T(JawaFuncOpcode.SASTORE, t.sig_xiy_v(wt(JawaTypes.SHORT_ARRAY), ValueType.I32));
}

def test_err_noimm(t: JawaTester) {
	for (op in JawaFuncOpcode) {
		if (op.imm == JawaImmKind.NONE) continue;
		var n = t.dup();
		var it = n.addFuncImport(t.strCode(op.code), SigCache.i_i); // sig doesn't matter
		n.assertProcessFails();
	}
	for (op in JawaTypeOpcode) {
		if (op.imm == JawaImmKind.NONE) continue;
		var n = t.dup();
		var it = n.addTypeImport(t.strCode(op.code), []); // constraints don't matter
		n.assertProcessFails();
	}
	for (op in JawaGlobalOpcode) {
		if (op.imm == JawaImmKind.NONE) continue;
		var n = t.dup();
		var it = n.addGlobalImport(t.strCode(op.code), ValueType.I32); // type doesn't matter
		n.assertProcessFails();
	}

}

def test_err_class1(t: JawaTester) {
	var name = "Zonk", jname = JawaStrings.of(name);
	var it1 = t.declareClass(name, t.NO_CLASS_ATTRS, null, []);
	var it2 = t.defineClass(it1,
		[], // instance fields
		[], // instance methods
		[], // static fields
		[]  // static methods
	);
	var it3 = t.defineClass(it1,
		[], // instance fields
		[], // instance methods
		[], // static fields
		[]  // static methods
	);

	t.assertProcessFails(); // error: redefinition

}

def test_err_class2(t: JawaTester) {
	var name = "Nek", jname = JawaStrings.of(name);
	var fieldName = "F", jfieldName = JawaStrings.of(fieldName);
	for (order in [[0, 1], [1, 0]]) {
		var n = t.dup();
		var it1 = n.declareClass(name, n.NO_CLASS_ATTRS, null, []);

		for (o in order) {
			if (o == 0) {
				var str1 = n.strCodeTypeJawaName(JawaFuncOpcode.GETSTATIC.code, it1, jfieldName);
				var fi = n.addFuncImport(str1, SigDecl.new(SigCache.arr_v, [ValueType.I32]));
			} else {
				var it2 = n.defineClass(it1,
					[], // instance fields
					[], // instance methods
					[(jfieldName, n.NO_FIELD_ATTRS, JawaTypeRef.Prim(JawaTypes.INT))], // static fields
					[]  // static methods
				);
			}
		}
		if (false/*TODO*/ && order[0] == 0) n.assertProcessFails();  // getstatic before class is defined
		else n.process();
	}
}

def test_err_intf1(t: JawaTester) {
	var name = "iKol", jname = JawaStrings.of(name);
	var it1 = t.declareInterface(name, []);
	var it2 = t.defineInterface(it1,
		[] // instance methods
	);
	var it3 = t.defineInterface(it1,
		[] // instance methods
	);

	t.assertProcessFails();
}

def test_err_sigR(t: JawaTester) {
	for (x in RETURN_TYPES) {
		for (y in RETURN_TYPES) {
			var n = t.dup();
			var name = "iYut", jname = JawaStrings.of(name);
			var m1 = "m1", jm1 = JawaStrings.of(m1);
			var it1 = n.declareClass(name, t.NO_CLASS_ATTRS, null, []);

			var rt = if(y != JawaTypeRef.Void, [t.toWasmType(JawaTypeRef.Prim.!(y).t)], SigCache.arr_v);
			var m1d = n.newFunction(SigDecl.new(SigCache.arr_v, rt), []);

			var it2 = n.defineClass(it1,
				[], // instance fields
				[], // instance methods
				[], // static fields
				[(jm1, n.NO_METHOD_ATTRS, JawaSigRef.new([], x), m1d)]  // static methods
			);

			var ok = x == y;
			match (x) {
				Prim(xt) => match (y) {
					Prim(yt) => ok = t.toWasmType(xt) == t.toWasmType(yt);
					_ => ;
				}
				_ => ;
			}
			if (ok) n.process();
			else n.assertProcessFails();
		}
	}
}

def test_err_sigP(t: JawaTester) {
	for (x in JawaTypes.PRIMITIVES) {
		for (y in JawaTypes.PRIMITIVES) {
			var n = t.dup();
			var name = "eWut", jname = JawaStrings.of(name);
			var m1 = "m1", jm1 = JawaStrings.of(m1);
			var it1 = n.declareClass(name, t.NO_CLASS_ATTRS, null, []);

			var m1d = n.newFunction(t.sig_x_v(t.toWasmType(y)), []);

			var it2 = n.defineClass(it1,
				[], // instance fields
				[], // instance methods
				[], // static fields
				[(jm1, n.NO_METHOD_ATTRS, JawaSigRef.new([JawaTypeRef.Prim(x)], JawaTypeRef.Void), m1d)]  // static methods
			);

			var ok = t.toWasmType(x) == t.toWasmType(y);
			if (ok) n.process();
			else n.assertProcessFails();
		}
	}
}

/*
TODO AALOAD
  - not a ref array
  - improper sig
TODO AASTORE
TODO ANEWARRAY
TODO ARRAYLENGTH
TODO CHECKCAST
TODO GETFIELD
TODO GETSTATIC
TODO INSTANCEOF
TODO INVOKEDYNAMIC
TODO INVOKEINTERFACE
TODO INVOKESPECIAL
TODO INVOKESTATIC
TODO INVOKEVIRTUAL
TODO MONITORENTER
TODO MONITOREXIT
TODO MULTIANEWARRAY
TODO NEW
TODO NEWARRAY
TODO PUTFIELD
TODO PUTSTATIC
*/
