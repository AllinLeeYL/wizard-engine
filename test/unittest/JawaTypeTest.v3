// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("jawa:type:", _, JawaTypeTester.new, _);
def X = [
	T("prim_array1", test_prim_array1),
	T("prim_array2", test_prim_array2),
	T("ref_array1", test_ref_array1),
	T("ref_array2", test_ref_array2),
	T("ref_array3", test_ref_array3),
	T("intf1", test_intf1),
	T("intf2", test_intf2),
	T("intf3", test_intf3),
	T("prim_vt1", test_prim_vt1),
	T("externref1", test_externref1),
	()
];

class JawaTypeTester(t: Tester) {
	def assert_assignable(expected: bool, from: JawaType, to: JawaType) {
		if (from.isAssignableToH(to) != expected) {
			t.fail3("expected (%q).isAssignableToH(%q) == %z", from.render, to.render, expected);
		}
		if (from.isAssignableTo(ValueType.Host(to)) != expected) {
			t.fail3("expected (%q).isAssignableTo(%q) == %z", from.render, to.render, expected);
		}
		if (ValueTypes.isAssignable(ValueType.Host(from), ValueType.Host(to)) != expected) {
			t.fail3("expected ValueTypes.isAssignable(%q, %q) == %z", from.render, to.render, expected);
		}
	}
	def assert_assignable_vt(expected: bool, from: JawaType, to: ValueType) {
		if (from.isAssignableTo(to) != expected) {
			t.fail3("expected (%q).isAssignableTo(%q) == %z", from.render, to.render, expected);
		}
		if (ValueTypes.isAssignable(ValueType.Host(from), to) != expected) {
			t.fail3("expected ValueTypes.isAssignable(%q, %q) == %z", from.render, to.render, expected);
		}
	}
}

def TERMS = [ValueType.I32, ValueType.I64, ValueType.F32, ValueType.F64, ValueType.VEC128, ValueType.FUNCREF, ValueType.EXTERNREF];

def test_prim_array1(t: JawaTypeTester) {
	for (x in JawaTypes.PRIMITIVES) {
		var ax = x.arrayOf();
		for (y in JawaTypes.PRIMITIVES) {
			var ay = y.arrayOf();
			t.assert_assignable(x == y, x, y);
			t.assert_assignable(x == y, ax, ay);
			t.assert_assignable(false, x, ay);
		}
	}
}

def test_prim_array2(t: JawaTypeTester) {
	for (x in JawaTypes.PRIMITIVES) {
		var ax = x.arrayOf();
		t.assert_assignable(true, ax, JawaTypes.OBJECT);
		t.assert_assignable(false, JawaTypes.OBJECT, ax);
		t.assert_assignable(false, ax, JawaTypes.STRING);
		t.assert_assignable(false, JawaTypes.STRING, ax);
	}
}

def test_ref_array1(t: JawaTypeTester) {
	var rt = JawaTypes.OBJECT.arrayOf();
	for (x in [JawaTypes.OBJECT, JawaTypes.STRING]) {
		var at = x.arrayOf();
		t.assert_assignable(true, at, JawaTypes.OBJECT);
		t.assert_assignable(false, JawaTypes.OBJECT, at);
		t.assert_assignable(true, at, rt);
	}
	t.assert_assignable(false, rt, JawaTypes.STRING.arrayOf());
}

def test_ref_array2(t: JawaTypeTester) {
	for (x in [JawaTypes.OBJECT, JawaTypes.STRING]) {
		var ax = x.arrayOf();
		for (y in JawaTypes.PRIMITIVES) {
			var ay = y.arrayOf();
			t.assert_assignable(false, ax, ay);
			t.assert_assignable(false, x, ay);
		}
	}
}

def test_ref_array3(t: JawaTypeTester) {
	var rt1 = JawaTypes.OBJECT.arrayOf(), rt2 = rt1.arrayOf();
	for (x in [JawaTypes.OBJECT, JawaTypes.STRING]) {
		var at = x.arrayOf().arrayOf();
		t.assert_assignable(true, at, JawaTypes.OBJECT);
		t.assert_assignable(false, JawaTypes.OBJECT, at);
		t.assert_assignable(true, at, rt1);
		t.assert_assignable(true, at, rt2);
	}
}

def IA = JawaStrings.of("IA"), IB = JawaStrings.of("IB"), IC = JawaStrings.of("IC"), ID = JawaStrings.of("ID");
def CX = JawaStrings.of("CX"), CY = JawaStrings.of("CY"), CZ = JawaStrings.of("CZ");

def test_intf1(t: JawaTypeTester) {
	var jlo = JawaLang.OBJECT;

	var ita = JawaInterfaceType.new(IA, JawaLang.NO_INTERFACES);
	var itb = JawaInterfaceType.new(IB, JawaLang.NO_INTERFACES);
	var ctx = JawaClassType.new(CX, JawaLang.NO_CLASS_ATTRS, jlo, [ita]);
	var cty = JawaClassType.new(CY, JawaLang.NO_CLASS_ATTRS, jlo, [itb]);
	var ctz = JawaClassType.new(CZ, JawaLang.NO_CLASS_ATTRS, jlo, [ita, itb]);

	t.assert_assignable(false, ita, itb);
	t.assert_assignable(false, itb, ita);

	t.assert_assignable(true, ita, jlo);
	t.assert_assignable(true, itb, jlo);

	t.assert_assignable(true, ctx, ita);
	t.assert_assignable(false, cty, ita);
	t.assert_assignable(true, ctz, ita);

	t.assert_assignable(false, ctx, itb);
	t.assert_assignable(true, cty, itb);
	t.assert_assignable(true, ctz, itb);

	t.assert_assignable(false, ita, ctx);
	t.assert_assignable(false, ita, cty);
	t.assert_assignable(false, ita, ctz);

	t.assert_assignable(false, itb, ctx);
	t.assert_assignable(false, itb, cty);
	t.assert_assignable(false, itb, ctz);
}

def test_intf2(t: JawaTypeTester) {
	var jlo = JawaLang.OBJECT;

	var ita = JawaInterfaceType.new(IA, JawaLang.NO_INTERFACES);
	var itb = JawaInterfaceType.new(IB, JawaLang.NO_INTERFACES);
	var itc = JawaInterfaceType.new(IC, [ita, itb]);

	t.assert_assignable(false, ita, itb);
	t.assert_assignable(false, itb, ita);

	t.assert_assignable(true, ita, jlo);
	t.assert_assignable(true, itb, jlo);
	t.assert_assignable(true, itc, jlo);

	t.assert_assignable(true, itc, ita);
	t.assert_assignable(true, itc, itb);
}

def test_intf3(t: JawaTypeTester) {
	var jlo = JawaLang.OBJECT;

	var ita = JawaInterfaceType.new(IA, JawaLang.NO_INTERFACES);
	var itb = JawaInterfaceType.new(IB, [ita]);
	var itc = JawaInterfaceType.new(IC, [ita]);
	var itd = JawaInterfaceType.new(ID, [itb, itc]);

	var ctx = JawaClassType.new(CX, JawaLang.NO_CLASS_ATTRS, jlo, [itd]);

	t.assert_assignable(true, itb, ita);
	t.assert_assignable(true, itc, ita);

	t.assert_assignable(true, itd, itb);
	t.assert_assignable(true, itd, itc);
	t.assert_assignable(true, itd, ita);
	t.assert_assignable(true, itd, itd);

	t.assert_assignable(true, ctx, itb);
	t.assert_assignable(true, ctx, itc);
	t.assert_assignable(true, ctx, ita);
	t.assert_assignable(true, ctx, itd);
}

def test_prim_vt1(t: JawaTypeTester) {
	var rft = ValueType.RefFunc(false, SigCache.v_v);
	var rnft = ValueType.RefFunc(true, SigCache.v_v);
	var at = ValueType.Abstract(AbsTypeDecl.new([]));

	for (x in JawaTypes.PRIMITIVES) {
		var vt = x.valueType();
		for (y in TERMS) {
			t.assert_assignable_vt(vt == y, x, y);
		}
		t.assert_assignable_vt(false, x, rft);
		t.assert_assignable_vt(false, x, rnft);
		t.assert_assignable_vt(false, x, at);
	}
}

def test_externref1(t: JawaTypeTester) {
	var rft = ValueType.RefFunc(false, SigCache.v_v);
	var rnft = ValueType.RefFunc(true, SigCache.v_v);
	var at = ValueType.Abstract(AbsTypeDecl.new([]));

	for (ot in [JawaTypes.OBJECT, JawaTypes.STRING, JawaInterfaceType.new(IA, [])]) {
		for (x in [ot, ot.arrayOf(), ot.arrayOf().arrayOf()]) {
			var vt = x.valueType();
			for (y in TERMS) {
				t.assert_assignable_vt(vt == y || y == ValueType.EXTERNREF, x, y);
			}
			t.assert_assignable_vt(false, x, rft);
			t.assert_assignable_vt(false, x, rnft);
			t.assert_assignable_vt(false, x, at);
		}
	}
}
