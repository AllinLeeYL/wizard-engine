// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("types:", _, ValueTypeTester.new, _);

def X = [
	T("prims", test_prims),
	T("nullable", test_nullable),
	T("combine", test_combine),
	T("funcs1", test_funcs1),
	T("funcs2", test_funcs2),
	T("funcs3", test_funcs3),
	T("nullfuncs1", test_nullfuncs1),
	T("nullfuncs2", test_nullfuncs2),
	T("abs0", test_abs0),
	T("abs1", test_abs1),
	T("abs2", test_abs2),
	T("abs3", test_abs3),
	T("abs4", test_abs4),
	T("absext", test_absext),
	T("func_var0", test_func_var0),
	T("func_var1", test_func_var1),
	T("func_var2", test_func_var2),
	T("lub1", test_lub1),
	T("lub2", test_lub2),
	T("func_lub1", test_func_lub1),
	T("func_lub2", test_func_lub2),
	T("func_lub3", test_func_lub3),
	T("rec_func1", test_rec_func1),
	T("rec_func2", test_rec_func2),
	T("rec_func3", test_rec_func3),
	T("array1", test_array1),
	T("array_sub1", test_array_sub1),
	T("struct1", test_struct1),
	T("struct_sub1", test_struct_sub1),
	T("struct_sub2", test_struct_sub2),
	T("ref0", test_ref0),
	T("ref1", test_ref1),
	T("extref_null1", test_extref_null1),
	T("packed1", test_packed1),
	T("packed2", test_packed2),
	T("rtt1", test_rtt1),
	T("i31ref", test_i31ref),
	()
];

class ValueTypeTester(t: Tester) {
	def assert_maybe(assignable: bool, from: ValueType, to: ValueType) {
		if (assignable != ValueTypes.isAssignable(from, to)) {
			return t.fail3("expected assignable=%z from=%q to=%q", assignable, from.render, to.render);
		}
	}
	def assert_assignable(from: ValueType, to: ValueType) {
		if (!ValueTypes.isAssignable(from, to)) {
			return t.fail2("expected assignable from=%q to=%q", from.render, to.render);
		}
	}
	def assert_compare(expected: TypeEquiv, from: ValueType, to: ValueType) {
		var eq = TypeComparator.new().compare(from, to);
		if (eq != expected) {
			var msg = StringBuilder.new()
				.put2("expected %s, got %s ", expected.name, eq.name)
				.put2("for from=%q to=%q", from.render, to.render)
				.extract();
			return t.fail(msg);
		}
	}
	def assert_equal(from: ValueType, to: ValueType) {
		assert_assignable(from, to);
		assert_compare(TypeEquiv.EQUAL, from, to);
		assert_compare(TypeEquiv.EQUAL, to, from);
	}
	def assert_subtype(from: ValueType, to: ValueType) {
		assert_assignable(from, to);
		var eq = TypeComparator.new().compare(from, to);
		if (eq != TypeEquiv.SUB) {
			return t.fail(Strings.format3("expected subtype from=%q to=%q, got %s", from.render, to.render, eq.name));
		}
		eq = TypeComparator.new().compare(to, from);
		if (eq != TypeEquiv.SUPER) {
			return t.fail(Strings.format3("expected supertype from=%q to=%q, got %s", from.render, to.render, eq.name));
		}
	}
	def assert_unrelated(from: ValueType, to: ValueType) {
		assert_maybe(false, from, to);
		assert_maybe(false, to, from);
		assert_compare(TypeEquiv.UNRELATED, from, to);
		assert_compare(TypeEquiv.UNRELATED, to, from);
	}
	def assert_lub(expected: ValueType, x: ValueType, y: ValueType) {
		for (p in [(x, y), (y, x)]) { // should be commutative
			var r = ValueTypes.leastUpperBound(p);
			if (!r.0) t.fail1("expected least upper bound %q, got none", expected.render);
			if (!ValueTypes.isEquivalent(expected, r.1)) {
				t.fail2("expected least upper bound %q, got %q", expected.render, r.1.render);
			}
		}
	}
	def assert_no_lub(x: ValueType, y: ValueType) {
		var r = ValueTypes.leastUpperBound(x, y);
		if (r.0) t.fail1("expected no least upper bound, got %q", r.1.render);
	}
	def assert_eq(expected: TypeEquiv, got: TypeEquiv) {
		if (expected != got) {
			return t.fail2("expected %s, got %s", expected.name, got.name);
		}
	}
}

def unpackedT = StorageType.new(_, Packedness.UNPACKED, _);

def PRIMS = [ValueType.I32, ValueType.I64, ValueType.F32, ValueType.F64, ValueType.VEC128];
def TERMS = [ValueType.I32, ValueType.I64, ValueType.F32, ValueType.F64, ValueType.VEC128,
	ValueType.ANYREF, ValueType.FUNCREF, ValueType.EXTERNREF];

def func_x_v(t: ValueType) -> ValueType.RefFunc {
	return ValueType.RefFunc(false, SigDecl.new([t], SigCache.arr_v));
}

def func_v_x(t: ValueType) -> ValueType.RefFunc {
	return ValueType.RefFunc(false, SigDecl.new(SigCache.arr_v, [t]));
}

def nullfunc_x_v(t: ValueType) -> ValueType.RefFunc {
	return ValueType.RefFunc(true, SigDecl.new([t], SigCache.arr_v));
}

def nullfunc_v_x(t: ValueType) -> ValueType.RefFunc {
	return ValueType.RefFunc(true, SigDecl.new(SigCache.arr_v, [t]));
}

def test_prims(t: ValueTypeTester) {
	for (i < PRIMS.length) {
		for (j < PRIMS.length) {
			t.t.assertz(i == j, ValueTypes.isAssignable(PRIMS[i], PRIMS[j]));
		}
	}
}

def test_nullable(t: ValueTypeTester) {
	var c = TypeComparator.new();

	t.assert_eq(TypeEquiv.EQUAL,	c.compareNullable(false, false));
	t.assert_eq(TypeEquiv.SUPER,	c.compareNullable(true, false));
	t.assert_eq(TypeEquiv.SUB,	c.compareNullable(false, true));
	t.assert_eq(TypeEquiv.EQUAL,	c.compareNullable(true, true));
}

def test_combine(t: ValueTypeTester) {
	var c = TypeComparator.new();

	t.assert_eq(TypeEquiv.UNRELATED,	c.combineEq(TypeEquiv.UNRELATED, TypeEquiv.UNRELATED));
	t.assert_eq(TypeEquiv.UNRELATED,	c.combineEq(TypeEquiv.UNRELATED, TypeEquiv.SUPER));
	t.assert_eq(TypeEquiv.UNRELATED,	c.combineEq(TypeEquiv.UNRELATED, TypeEquiv.EQUAL));
	t.assert_eq(TypeEquiv.UNRELATED,	c.combineEq(TypeEquiv.UNRELATED, TypeEquiv.SUB));

	t.assert_eq(TypeEquiv.UNRELATED,	c.combineEq(TypeEquiv.SUPER, TypeEquiv.UNRELATED));
	t.assert_eq(TypeEquiv.SUPER,		c.combineEq(TypeEquiv.SUPER, TypeEquiv.SUPER));
	t.assert_eq(TypeEquiv.SUPER,		c.combineEq(TypeEquiv.SUPER, TypeEquiv.EQUAL));
	t.assert_eq(TypeEquiv.UNRELATED,	c.combineEq(TypeEquiv.SUPER, TypeEquiv.SUB));

	t.assert_eq(TypeEquiv.UNRELATED,	c.combineEq(TypeEquiv.EQUAL, TypeEquiv.UNRELATED));
	t.assert_eq(TypeEquiv.SUPER,		c.combineEq(TypeEquiv.EQUAL, TypeEquiv.SUPER));
	t.assert_eq(TypeEquiv.EQUAL,		c.combineEq(TypeEquiv.EQUAL, TypeEquiv.EQUAL));
	t.assert_eq(TypeEquiv.SUB,		c.combineEq(TypeEquiv.EQUAL, TypeEquiv.SUB));

	t.assert_eq(TypeEquiv.UNRELATED,	c.combineEq(TypeEquiv.SUB, TypeEquiv.UNRELATED));
	t.assert_eq(TypeEquiv.UNRELATED,	c.combineEq(TypeEquiv.SUB, TypeEquiv.SUPER));
	t.assert_eq(TypeEquiv.SUB,		c.combineEq(TypeEquiv.SUB, TypeEquiv.EQUAL));
	t.assert_eq(TypeEquiv.SUB,		c.combineEq(TypeEquiv.SUB, TypeEquiv.SUB));
}

def test_funcs1(t: ValueTypeTester) {
	for (i < PRIMS.length) {
		for (j < PRIMS.length) {
			{
				var fi = func_x_v(PRIMS[i]);
				var fj = func_x_v(PRIMS[j]);
				t.assert_maybe(i == j, fi, fj);
			}

			{
				var fi = func_v_x(PRIMS[i]);
				var fj = func_v_x(PRIMS[j]);
				t.assert_maybe(i == j, fi, fj);
			}
		}
	}

}

def test_funcs2(t: ValueTypeTester) {
	for (x in TERMS) {
		for (f in [func_x_v, func_v_x]) {
			var fi = f(x);
			t.assert_subtype(fi, ValueType.FUNCREF);
			t.assert_unrelated(fi, ValueType.EXTERNREF);
			t.assert_maybe(false, ValueType.FUNCREF, fi);
			t.assert_unrelated(ValueType.EXTERNREF, fi);
		}
	}
}

def test_funcs3(t: ValueTypeTester) {
	for (x in TERMS) {
		var fi = func_x_v(x);
		var ok = x == ValueType.FUNCREF || x == ValueType.ANYREF;
		t.assert_maybe(ok, fi, x);
		t.assert_maybe(false, x, fi);
	}
}

def test_nullfuncs1(t: ValueTypeTester) {
	for (i < PRIMS.length) {
		for (j < PRIMS.length) {
			{
				var fi = func_x_v(PRIMS[i]);
				var fj = nullfunc_x_v(PRIMS[j]);
				t.assert_maybe(i == j, fi, fj);
			}

			{
				var fi = func_v_x(PRIMS[i]);
				var fj = nullfunc_v_x(PRIMS[j]);
				t.assert_maybe(i == j, fi, fj);
			}
		}
	}

}

def test_nullfuncs2(t: ValueTypeTester) {
	for (i < PRIMS.length) {
		for (j < PRIMS.length) {
			{
				var fi = nullfunc_x_v(PRIMS[i]);
				var fj = nullfunc_x_v(PRIMS[j]);
				t.assert_maybe(i == j, fi, fj);
			}

			{
				var fi = nullfunc_v_x(PRIMS[i]);
				var fj = nullfunc_v_x(PRIMS[j]);
				t.assert_maybe(i == j, fi, fj);
			}
		}
	}

}

def ABS_TYPE1 = AbsTypeDecl.new(false, false, []);
def ABS_TYPE2 = AbsTypeDecl.new(false, false, []);
def ABS_TYPE3 = AbsTypeDecl.new(false, false, [ValueType.Abstract(ABS_TYPE1)]);

def test_abs0(t: ValueTypeTester) {
	var t1 = ABS_TYPE1;
	var t2 = ABS_TYPE2;

	// Assignability between different abstract types
	var T = [t1, t2];
	for (i < T.length) {
		for (j < T.length) {
			t.t.assertz(i == j, T[i].isAssignableTo(ValueType.Abstract(T[j])));
		}
	}
	// Assignability between abstract type and primitives
	for (i < T.length) {
		for (j < PRIMS.length) {
			t.t.assertz(false, T[i].isAssignableTo(PRIMS[j]));
		}
	}
	// Assignability between abstract type and extern ref
	for (i < T.length) {
		t.t.assertz(false, T[i].isAssignableTo(ValueType.EXTERNREF));
		t.t.assertz(false, T[i].isAssignableTo(ValueType.FUNCREF));
	}
	for (i < T.length) {
		var ext = ValueType.Abstract(T[i]);
		t.assert_maybe(false, ValueType.EXTERNREF, ext);
		t.assert_maybe(false, ValueType.FUNCREF, ext);
		t.assert_maybe(false, ext, ValueType.EXTERNREF);
		t.assert_maybe(false, ext, ValueType.FUNCREF);
	}
}

def test_abs1(t: ValueTypeTester) {
	var t1 = ABS_TYPE1;
	var t2 = ABS_TYPE2;

	var T = [t1, t2];
	// Assignability between abstract type and functions of primitives
	for (ti in T) {
		for (tj in PRIMS) {
			var fj = func_x_v(tj);
			t.t.assertz(false, ti.isAssignableTo(fj));
			fj = func_v_x(tj);
			t.t.assertz(false, ti.isAssignableTo(fj));
		}
	}
	// Assignability between abstract type and functions of abstract type
	for (tj in T) {
		var fj = func_x_v(ValueType.Abstract(tj));
		t.t.assertz(false, tj.isAssignableTo(fj));
		fj = func_v_x(ValueType.Abstract(tj));
		t.t.assertz(false, tj.isAssignableTo(fj));
	}
}

def test_abs2(t: ValueTypeTester) {
	var t1 = ABS_TYPE1;
	var t2 = ABS_TYPE3;
	// Assignability between different abstract types
	var T = [t1, t2];
	for (i < T.length) {
		var ti = ValueType.Abstract(T[i]);
		for (j < T.length) {
			var ok = i >= j;
			var tj = ValueType.Abstract(T[j]);
			t.t.assertz(ok, T[i].isAssignableTo(tj));
			t.assert_maybe(ok, ti, tj);
		}
	}
}

def test_abs3(t: ValueTypeTester) {
	var t1 = ABS_TYPE1;
	var t2 = ABS_TYPE2;

	var T = [ValueType.Abstract(t1), ValueType.Abstract(t2)];
	for (ti in T) {
		for (tj in PRIMS) {
			t.assert_unrelated(ti, tj);
			t.assert_unrelated(tj, ti);
		}
	}
}

def test_abs4(t: ValueTypeTester) {
	for (ti in TERMS) {
		var at = ValueType.Abstract(AbsTypeDecl.new(false, false, [ti]));
		t.assert_subtype(at, ti);
		t.assert_maybe(false, ti, at);
	}
}

def test_absext(t: ValueTypeTester) {
	var at = ValueType.Abstract(AbsTypeDecl.new(false, true, []));
	t.assert_subtype(at, ValueType.EXTERNREF);
}

def check_variance(t: ValueTypeTester, a: ValueType, b: ValueType) {
	var ab = ValueTypes.isAssignable(a, b);
	var ba = ValueTypes.isAssignable(b, a);

	var f_a_v = func_x_v(a), f_b_v = func_x_v(b);
	var f_v_a = func_v_x(a), f_v_b = func_v_x(b);

	// covariance
	t.assert_maybe(ab, f_v_a, f_v_b);
	t.assert_maybe(ba, f_v_b, f_v_a);

	// contravariance
	t.assert_maybe(ba, f_a_v, f_b_v);
	t.assert_maybe(ab, f_b_v, f_a_v);

	// arity problems
	t.assert_unrelated(f_a_v, f_v_a);
	t.assert_unrelated(f_a_v, f_v_b);
	t.assert_unrelated(f_b_v, f_v_a);
	t.assert_unrelated(f_b_v, f_v_b);

	t.assert_unrelated(f_v_a, f_a_v);
	t.assert_unrelated(f_v_b, f_a_v);
	t.assert_unrelated(f_v_a, f_b_v);
	t.assert_unrelated(f_v_b, f_b_v);
}

def test_func_var0(t: ValueTypeTester) {
	for (a in TERMS) {
		for (b in TERMS) {
			check_variance(t, a, b);
		}
	}
}

def test_func_var1(t: ValueTypeTester) {
	var t1 = ABS_TYPE1;
	var t2 = ABS_TYPE3;
	var t3 = ABS_TYPE2;

	var T = [ValueType.Abstract(t1), ValueType.Abstract(t2), ValueType.Abstract(t3), ValueType.EXTERNREF, ValueType.FUNCREF];
	for (a in T) {
		for (b in T) {
			check_variance(t, a, b);
		}
	}
}

def test_func_var2(t: ValueTypeTester) {
	var f = func_x_v(ValueType.I32), nf = nullfunc_x_v(ValueType.I32);
	check_variance(t, f, nf);

	var t1 = ABS_TYPE1;
	var t2 = ABS_TYPE3;
	var T = [ValueType.Abstract(t1), ValueType.Abstract(t2)];
	for (a in T) {
		for (b in T) {
			var f = func_x_v(a), nf = nullfunc_x_v(b);
			check_variance(t, f, nf);
		}
	}
}

def test_lub1(t: ValueTypeTester) {
	for (x in TERMS) {
		for (y in TERMS) {
			if (x == y) t.assert_lub(x, x, y);
			else t.assert_no_lub(x, y);
		}
	}
}

def test_lub2(t: ValueTypeTester) {
	var FUNCS = [
		ValueType.RefFunc(false, SigCache.v_v),
		ValueType.RefFunc(true, SigCache.i_i)
	];
	for (f in FUNCS) {
		for (x in TERMS) {
			if (x == ValueType.FUNCREF) {
				t.assert_lub(x, x, f);
			} else {
				t.assert_no_lub(x, f);
				t.assert_no_lub(f, x);
			}
		}
	}
}

def test_func_lub1(t: ValueTypeTester) {
	for (x in TERMS) {
		var sig = SigDecl.new([x], SigCache.arr_v);
		var rft = ValueType.RefFunc(false, sig);
		var rnft = ValueType.RefFunc(true, sig);
		t.assert_lub(rnft, rnft, rnft);
		t.assert_lub(rnft, rnft, rft);
		t.assert_lub(rft, rft, rft);
	}
}

def test_func_lub2(t: ValueTypeTester) {
	var PT = [SigCache.arr_v, SigCache.arr_i, [ValueType.F32, ValueType.F64]];
	for (pt in PT) {
		for (rt in PT) {
			var sig = SigDecl.new(pt, rt);
			var rft = ValueType.RefFunc(false, sig);
			var rnft = ValueType.RefFunc(true, sig);
			t.assert_lub(rnft, rnft, rnft);
			t.assert_lub(rnft, rft, rnft);
			t.assert_lub(rft, rft, rft);
		}
	}
}

def check_func_lub(t: ValueTypeTester, a: ValueType, b: ValueType) {
	var r = ValueTypes.leastUpperBound(a, b);

	var rft_a = ValueType.RefFunc(false, SigDecl.new(SigCache.arr_v, [a]));
	var rft_b = ValueType.RefFunc(false, SigDecl.new(SigCache.arr_v, [b]));
	var rnft_a = ValueType.RefFunc(true, SigDecl.new(SigCache.arr_v, [a]));
	var rnft_b = ValueType.RefFunc(true, SigDecl.new(SigCache.arr_v, [b]));

	var rft_u: ValueType;
	var rnft_u: ValueType;

	if (r.0) {
		rft_u = ValueType.RefFunc(false, SigDecl.new(SigCache.arr_v, [r.1]));
		rnft_u = ValueType.RefFunc(true, SigDecl.new(SigCache.arr_v, [r.1]));
	} else {
		rft_u = ValueType.FUNCREF;
		rnft_u = ValueType.FUNCREF;
	}

	t.assert_lub(rft_u, rft_a, rft_b);
	t.assert_lub(rnft_u, rft_a, rnft_b);
	t.assert_lub(rnft_u, rnft_a, rnft_b);
}

def test_func_lub3(t: ValueTypeTester) {
	var rft = ValueType.RefFunc(false, SigCache.v_v);
	var rnft = ValueType.RefFunc(true, SigCache.v_v);

	check_func_lub(t, ValueType.I32, ValueType.I32);
	check_func_lub(t, ValueType.F32, ValueType.F64);
	check_func_lub(t, rft, rnft);
}

def test_rec_func1(t: ValueTypeTester) {
	var fts = Array<ValueType>.new(2);
	for (i < fts.length) {
		var sig = SigDecl.new(SigCache.arr_v, [ValueType.I32]);
		sig.results[0] = fts[i] = ValueType.RefFunc(false, sig);
	}
	for (ti in fts) {
		for (tj in fts) {
			t.assert_equal(ti, tj);
		}
	}
}

def test_rec_func2(t: ValueTypeTester) {
	var sigs = [
		SigDecl.new([ValueType.I32], [ValueType.I32]),
		SigDecl.new([ValueType.I32], [ValueType.I32])
	];
	for (nullable in [true, false]) {
		var fts = [
			ValueType.RefFunc(nullable, sigs[0]),
			ValueType.RefFunc(nullable, sigs[1])
		];
		// setup mutual recursion
		fts[0].sig.params[0] = fts[1];
		fts[1].sig.params[0] = fts[0];

		for (ti in fts) {
			for (tj in fts) {
				t.assert_equal(ti, tj);
			}
		}
	}
}

def test_rec_func3(t: ValueTypeTester) {
	var sigs = [
		SigDecl.new([ValueType.I32], [ValueType.I32]),
		SigDecl.new([ValueType.I32], [ValueType.I32])
	];
	var fts = [
		ValueType.RefFunc(false, sigs[0]),
		ValueType.RefFunc(false, sigs[1])
	];
	fts[0].sig.params[0] = fts[1];
	fts[1].sig.results[0] = fts[0];

	for (ti in fts) {
		for (tj in fts) {
			if (ti == tj) t.assert_equal(ti, tj);
			else t.assert_unrelated(ti, tj);
		}
	}
}

def test_array1(t: ValueTypeTester) {
	for (ti in TERMS) {
		for (mut in [true, false]) {
			var decl = ArrayDecl.new([unpackedT(ti, mut)]);
			var rat = ValueType.RefArray(false, decl);
			var rnat = ValueType.RefArray(true, decl);
			t.assert_equal(rat, rat);
			t.assert_subtype(rat, rnat);
			t.assert_equal(rnat, rnat);
			if (ti == ValueType.ANYREF) {
				t.assert_subtype(rat, ti);
				t.assert_subtype(rnat, ti);
			} else {
				t.assert_unrelated(ti, rat);
				t.assert_unrelated(ti, rnat);
			}
		}
	}
}

def test_array_sub1(t: ValueTypeTester) {
	for (mut in [false, true]) {
		var ra = ArrayDecl.new([unpackedT(ValueType.ANYREF, mut)]);
		ra.array_index = 5;
		var fa = ArrayDecl.new([unpackedT(ValueType.FUNCREF, mut)]);
		fa.array_index = 6;
		for (nullable in [false, true]) {
			var rat = ValueType.RefArray(nullable, ra);
			var fat = ValueType.RefArray(nullable, fa);
			t.assert_equal(rat, rat);
			t.assert_equal(fat, fat);
			if (mut) t.assert_unrelated(rat, fat);
			else t.assert_subtype(fat, rat);
		}
	}
}

def test_struct1(t: ValueTypeTester) {
	for (ti in TERMS) {
		for (mut in [true, false]) {
			var decl = StructDecl.new([unpackedT(ti, mut)]);
			var rst = ValueType.RefStruct(false, decl);
			var rnst = ValueType.RefStruct(true, decl);
			t.assert_equal(rst, rst);
			t.assert_subtype(rst, rnst);
			t.assert_equal(rnst, rnst);
			if (ti == ValueType.ANYREF) {
				t.assert_subtype(rst, ti);
				t.assert_subtype(rnst, ti);
			} else {
				t.assert_unrelated(ti, rst);
				t.assert_unrelated(ti, rnst);
			}
		}
	}
}

def test_struct_sub1(t: ValueTypeTester) {
	for (mut in [true, false]) {
		var ra = StructDecl.new([unpackedT(ValueType.ANYREF, mut)]);
		var fa = StructDecl.new([unpackedT(ValueType.FUNCREF, mut)]);
		for (nullable in [true, false]) {
			var rat = ValueType.RefStruct(nullable, ra);
			var fat = ValueType.RefStruct(nullable, fa);
			t.assert_equal(rat, rat);
			t.assert_equal(fat, fat);
			if (mut) t.assert_unrelated(rat, fat);
			else t.assert_subtype(fat, rat);
		}
	}
}

def test_struct_sub2(t: ValueTypeTester) {
	for (mut in [false, true]) {
		for (ti in TERMS) {
			for (tj in PRIMS) {
				var a = StructDecl.new([unpackedT(ti, mut)]);
				var b = StructDecl.new([unpackedT(ti, mut), unpackedT(tj, mut)]);
				var sa = ValueType.RefStruct(false, a);
				var sb = ValueType.RefStruct(false, b);
				t.assert_subtype(sb, sa);
			}
		}
	}
}

def test_ref0(t: ValueTypeTester) {
	t.assert_subtype(ValueType.FUNCREF, ValueType.ANYREF);
	t.assert_subtype(ValueType.EXTERNREF, ValueType.ANYREF);
}

def test_ref1(t: ValueTypeTester) {
	for (nullable in [true, false]) {
		var T = [
			ValueType.RefFunc(nullable, SigCache.v_v),
			ValueType.RefArray(nullable, ArrayDecl.new([unpackedT(ValueType.I32, false)])),
			ValueType.RefStruct(nullable, StructDecl.new([unpackedT(ValueType.I32, false)]))
		];
		for (ti in T) {
			t.assert_subtype(ti, ValueType.ANYREF);
			t.assert_maybe(ValueType.RefFunc.?(ti), ti, ValueType.FUNCREF);

			for (tj in T) {
				if (ti == tj) t.assert_equal(ti, tj);
				else t.assert_unrelated(ti, tj);
			}
		}
	}
}

// covariant type constructor functions
def id = ValueType.!<ValueType>;
def fr(vt: ValueType) -> ValueType {
	return ValueType.RefFunc(false, SigDecl.new(SigCache.arr_v, [vt]));
}
def frn(vt: ValueType) -> ValueType {
	return ValueType.RefFunc(true, SigDecl.new(SigCache.arr_v, [vt]));
}

def test_extref_null1(t: ValueTypeTester) {
	var abs = AbsTypeDecl.new(true, true, []), at = ValueType.Abstract(abs);
	for (f in [id, fr, frn]) {  // TODO: add covariant array and struct declarations
		t.assert_subtype(f(ValueType.EXTERNREF_NULL), f(ValueType.EXTERNREF));
		t.assert_subtype(f(ValueType.EXTERNREF_NULL), f(ValueType.ANYREF));
		t.assert_unrelated(f(ValueType.EXTERNREF_NULL), f(ValueType.FUNCREF));

		t.assert_subtype(f(ValueType.EXTERNREF_NULL), f(at));
		t.assert_subtype(f(at), f(ValueType.EXTERNREF));
	}
}

def test_packed1(t: ValueTypeTester) {
	for (pi in Packedness) {
		for (pj in Packedness) {
			var ai = ArrayDecl.new([StorageType.new(ValueType.I32, pi, false)]);
			var aj = ArrayDecl.new([StorageType.new(ValueType.I32, pj, false)]);
			var ati = ValueType.RefArray(false, ai);
			var atj = ValueType.RefArray(false, aj);
			if (pi == pj) {
				t.assert_equal(ati, atj);
				t.assert_subtype(
					ValueType.RefArray(false, ai),
					ValueType.RefArray(true, aj));
			} else {
				t.assert_unrelated(ati, atj);
			}
		}
	}
}

def test_packed2(t: ValueTypeTester) {
	var tx = unpackedT(ValueType.F32, false);
	for (pi in Packedness) {
		for (pj in Packedness) {
			var si = StructDecl.new([
				StorageType.new(ValueType.I32, pi, false),
				tx
			]);
			var sj = StructDecl.new([
				StorageType.new(ValueType.I32, pj, false),
				tx
			]);
			var sti = ValueType.RefStruct(false, si);
			var stj = ValueType.RefStruct(false, sj);
			if (pi == pj) {
				t.assert_equal(sti, stj);
				t.assert_subtype(
					ValueType.RefStruct(false, si),
					ValueType.RefStruct(true, sj));
			} else {
				t.assert_unrelated(sti, stj);
			}
		}
	}
}

def test_rtt1(t: ValueTypeTester) {
	var decls = [
		SigDecl.new([], []),
		StructDecl.new([]),
		ArrayDecl.new([])
	];
	for (di in decls) {
		t.assert_subtype(ValueType.Rtt(1, di), ValueType.ANYREF);
		for (dj in decls) {
			t.assert_unrelated(ValueType.Rtt(1, di), ValueType.Rtt(2, dj));
			if (di == dj) {
				t.assert_equal(ValueType.Rtt(1, di), ValueType.Rtt(1, dj));
			} else {
				t.assert_unrelated(ValueType.Rtt(1, di), ValueType.Rtt(1, dj));
			}
		}
	}
}

def test_i31ref(t: ValueTypeTester) {
	t.assert_subtype(ValueType.I31REF, ValueType.ANYREF);
	t.assert_unrelated(ValueType.I31REF, ValueType.FUNCREF);
	var decls = [
		SigDecl.new([], []),
		StructDecl.new([]),
		ArrayDecl.new([])
	];
	for (d in decls) {
		t.assert_unrelated(ValueType.I31REF, ValueTypes.ref(true, d));
		t.assert_unrelated(ValueType.I31REF, ValueTypes.ref(false, d));
	}
}

// TODO: check lub of subtyping in host types, abstract types
// TODO: check glb (contravariance) of function types
