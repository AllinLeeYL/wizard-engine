// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("debug:", _, DebugTester.new, _);
def X = [
	T("break0", test_break0),
	T("timeout0", test_timeout0),
	()
];

class DebugTester(t: Tester) extends ModuleBuilder {
	var instance: Instance;
	var f: Function;
	var i: Interpreter;
	def breaks = Vector<(int, WasmFunction, int)>.new();
	def timeouts = Vector<(int, WasmFunction, int)>.new();
	def breakAt(pc: int) {
		func.code.breakAt(pc);
	}
	def interp() -> Interpreter {
		if (i != null) return i;
		var instance = Instantiator.new(extensions, module, [],
					ErrorGen.new("DebugTest.v3")).run();
		f = instance.functions[0];
		i = Target.newInterpreter();
		i.handleBreak = recordBreak;
		i.handleTimeout = recordTimeout;
		return i;
	}
	def assert_break(count: int, args: Array<Value>, pc: int, expected: Result) {
		var got = interp().run(count, f, args);
		if (!expected.equals(got)) return t.fail2("expected result = %q, got %q", expected.render, got.render);
		for (i < breaks.length) {
			var t = breaks[i];
			if (t.2 == pc) return;
		}
		return t.fail1("expected break @ pc=%d", pc);
	}
	def assert_timeout(count: int, args: Array<Value>, pc: int, expected: Result) {
		var got = interp().run(count, f, args);
		if (!expected.equals(got)) return t.fail2("expected result = %q, got %q", expected.render, got.render);
		for (i < timeouts.length) {
			var t = timeouts[i];
			if (t.2 == pc) return;
		}
		return t.fail1("expected timeout @ pc=%d", pc);
	}
	def recordBreak() -> Resumption {
		breaks.put(i.step_count, i.frame.func, i.frame.pc);
		return Resumption.Continue(null);
	}
	def recordTimeout() -> Resumption {
		timeouts.put(i.step_count, i.frame.func, i.frame.pc);
		return Resumption.Continue(null);
	}
}

def test_break0(t: DebugTester) {
	t.code([
		Opcode.I32_CONST.code, 22,
		Opcode.I32_CONST.code, 33,
		Opcode.I32_SUB.code
	]);
	t.breakAt(3);
	t.assert_break(10, [], 3, Result.Value([Values.i_v(-11)]));
	t.breakAt(5);
	t.assert_break(10, [], 5, Result.Value([Values.i_v(-11)]));
}

def test_timeout0(t: DebugTester) {
	t.code([
		Opcode.I32_CONST.code, 22,
		Opcode.I32_CONST.code, 33,
		Opcode.I32_SUB.code
	]);
	t.assert_timeout(2, [], 5, Result.Value([Values.i_v(-11)]));
}
