// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("debug:", _, DebugTester.new, _);
def X = [
	T("break0", test_break0),
	()
];

class DebugTester(t: Tester) extends ModuleBuilder {
	var instance: Instance;
	var f: Function;
	var i: Interpreter;
	def breakAt(pc: int) {
		func.code.breakAt(pc);
	}
	def interp() -> Interpreter {
		if (i != null) return i;
		var instance = Instantiator.new(extensions, module, [],
					ErrorGen.new("DebugTest.v3")).run();
		f = instance.functions[0];
		return i = Target.newInterpreter();
	}
	def run(count: int, args: Array<Value>) -> Result {
		return interp().run(count, f, args);
	}
	def assert_v(v: Value, got: Result) {
		var expected = Result.Value([v]);
		if (!expected.equals(got)) return t.fail2("expected result = %q, got %q", expected.render, got.render);
	}
	def assert_break(f: Function, pc: int, got: Result) {
		if (!Result.Break.?(got)) return t.fail1("expected break result, got %q", got.render);
		if (i.state != ExecState.BREAKPOINT) return t.fail1("expected BREAKPOINT state, got %s", i.state.name);
		if (i.frame == null) return t.fail("expected frame");
		if (i.frame.pc != pc) return t.fail1("expected pc = %d", pc);
		if (i.frame.func != f) return t.fail("expected function");
	}
}

def test_break0(t: DebugTester) {
	if (true) return; // TODO: reenable DebugTest because of x86-64
	t.code([
		Opcode.I32_CONST.code, 22,
		Opcode.I32_CONST.code, 33,
		Opcode.I32_SUB.code
	]);
	t.breakAt(3);
	var r = t.run(10, []);
	t.assert_break(t.f, 3, r);
	t.t.asserti(2, t.i.step_count);

	r = t.i.resume(10);
	t.assert_v(Values.i_v(-11), r);
	t.t.asserti(6, t.i.step_count);
}
