// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("debug:", _, DebugTester.new, _);
def X = [
	T("break0", test_break0),
	T("timeout0", test_timeout0),
	()
];

class DebugBreak(t: DebugTester) extends Probe {
	def fire(func: WasmFunction, offset: int) -> Resumption {
		var frame = t.i.getTopFrame();
		t.breaks.put(t.i.step_count, frame.func, frame.pc);
		return Resumption.Continue;
	}
}
class DebugTester(t: Tester) extends ModuleBuilder {
	var instance: Instance;
	var f: Function;
	var i: Interpreter;
	def breaks = Vector<(int, WasmFunction, int)>.new();
	def breakAt(pc: int) {
		module.insertProbeAt(func.func_index, pc, DebugBreak.new(this));
	}
	def interp() -> Interpreter {
		if (i != null) return i;
		var instance = Instantiator.new(extensions, module, [],
					ErrorGen.new("DebugTest.v3")).run();
		f = instance.functions[0];
		i = Target.newInterpreter();
		return i;
	}
	def assert_break(args: Array<Value>, pc: int, expected: Result) {
		var got = interp().run(f, args);
		if (!expected.equals(got)) return t.fail2("expected result = %q, got %q", expected.render, got.render);
		for (i < breaks.length) {
			var t = breaks[i];
			if (t.2 == pc) return;
		}
		return t.fail1("expected break @ pc=%d", pc);
	}
	def assert_result(args: Array<Value>, expected: Result) {
		var got = interp().run(f, args);
		if (!expected.equals(got)) return t.fail2("expected result = %q, got %q", expected.render, got.render);
	}
}

def test_break0(t: DebugTester) {
	t.sig(SigCache.v_i);
	t.code([
		Opcode.I32_CONST.code, 22,
		Opcode.I32_CONST.code, 33,
		Opcode.I32_SUB.code
	]);
	t.breakAt(3);
	t.assert_break([], 3, Result.Value([Values.i_v(-11)]));
	t.breakAt(5);
	t.assert_break([], 5, Result.Value([Values.i_v(-11)]));
}

def test_timeout0(t: DebugTester) {
	t.sig(SigCache.v_i);
	t.code([
		Opcode.I32_CONST.code, 22,
		Opcode.I32_CONST.code, 33,
		Opcode.I32_SUB.code
	]);
	var p = TimeoutProbe.new(2);
	var i = t.interp();
	i.probes.add(p);
	var got = i.run(t.f, []);
	var expected = Result.Trap(TrapReason.TIMEOUT);
	if (!expected.equals(got)) return t.t.fail2("expected result = %q, got %q", expected.render, got.render);
}

