// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("canon:", _, CanonTester.new, _);
def X = [
	T("sig1", test_sig1),
	T("sig2", test_sig2),
	T("sig3", test_sig3),
	T("sig_struct1", test_sig_struct1),
	T("sig_struct2", test_sig_struct2),
	T("sig_func1", test_sig_func1),
	T("sig_func2", test_sig_func2),
	()
];

class CanonTester(t: Tester) {
	def assertSigId(sig: SigDecl) {
		var id1 = Canon.sigId(sig);
		var id2 = Canon.sigId(sig);

		t.asserteq(id1, id2);

		var sig2 = SigDecl.new(sig.params, sig.results);
		var id3 = Canon.sigId(sig);

		t.asserteq(id1, id3);

		var sig3 = SigDecl.new(Arrays.dup(sig.params), Arrays.dup(sig.results));
		var id4 = Canon.sigId(sig);

		t.asserteq(id1, id4);
	}
}

def test_sig1(t: CanonTester) {
	for (sig in [
		SigCache.v_v, SigCache.i_v, SigCache.l_v, SigCache.v_i,
		SigCache.v_l, SigCache.v_f, SigCache.v_d, SigCache.i_i,
		SigCache.i_l, SigCache.i_f, SigCache.i_d, SigCache.ii_i,
		SigCache.iii_i, SigCache.iii_v, SigCache.iiii_v, SigCache.ii_v,
		SigCache.il_v, SigCache.if_v, SigCache.id_v, SigCache.ili_i,
		SigCache.il_l, SigCache.ill_l, SigCache.l_l, SigCache.l_i,
		SigCache.l_f, SigCache.l_d, SigCache.ll_l, SigCache.ll_i
	]) {
		t.assertSigId(sig);
	}
}

def test_sig2(t: CanonTester) {
	var ats: Array<Array<ValueType>> = [SigCache.arr_i, SigCache.arr_f, SigCache.arr_v];
	for (pt1 in ats) {
		for (rt1 in ats) {	
			var sig1 = SigDecl.new(pt1, rt1);
			for (pt2 in ats) {
				for (rt2 in ats) {
					var sig2 = SigDecl.new(pt2, rt2);
					var id1 = Canon.sigId(sig1);
					var id2 = Canon.sigId(sig2);
					if (pt1 == pt2 && rt1 == rt2) t.t.asserteq(id1, id2);
					else t.t.assertne(id1, id2);
				}
			}
		}
	}
}

def test_sig3(t: CanonTester) {
	var sdecl = StructDecl.new([]);
	var pts: Array<Array<ValueType>> = [
		SigCache.arr_i,
		SigCache.arr_f,
		[ValueTypes.FUNCREF],
		[ValueTypes.EXTERNREF],
		[ValueType.Host(HostType.new())],
		[ValueTypes.RefFunc(false, SigCache.i_i)],
		[ValueTypes.RefStruct(false, sdecl)],
		[ValueTypes.RefArray(false, ArrayDecl.new([]))],
		[ValueType.Ref(false, HeapType.Rtt(0, sdecl))]
	];
	for (pt1 in pts) {
		var sig1 = SigDecl.new(pt1, SigCache.arr_v);
		for (pt2 in pts) {
			var sig2 = SigDecl.new(pt2, SigCache.arr_v);
			var id1 = Canon.sigId(sig1);
			var id2 = Canon.sigId(sig2);
			if (pt1 == pt2) t.t.asserteq(id1, id2);
			else t.t.assertne(id1, id2);
		}
	}
}

def test_sig_struct1(t: CanonTester) {
	var s1 = StructDecl.new([]);
	var s2 = StructDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, false)]);

	var bools = [true, false];
	for (s in [s1, s2]) {
		for (n1 in bools) {
			var t1 = ValueTypes.RefStruct(n1, s);
			var sig1 = SigDecl.new([t1], SigCache.arr_v);
			for (n2 in bools) {
				var t2 = ValueTypes.RefStruct(n2, s);
				var sig2 = SigDecl.new([t2], SigCache.arr_v);
				var id1 = Canon.sigId(sig1);
				var id2 = Canon.sigId(sig2);
				if (n1 == n2) t.t.asserteq(id1, id2);
				else t.t.assertne(id1, id2);
			}
		}
	}
}

def test_sig_struct2(t: CanonTester) {
	var s1 = StructDecl.new([]);
	var s2 = StructDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, false)]);
//TODO: canon structs	var s3 = StructDecl.new([StorageType.new(ValueType.I32, Packedness.UNPACKED, false)]);

	var sig1 = SigDecl.new([ValueTypes.RefStruct(false, s1)], SigCache.arr_v);
	var sig2 = SigDecl.new([ValueTypes.RefStruct(false, s2)], SigCache.arr_v);
	var sig3 = SigDecl.new([ValueTypes.RefStruct(false, s2)], SigCache.arr_v);

	t.t.assertne(Canon.sigId(sig1), Canon.sigId(sig2));
	t.t.asserteq(Canon.sigId(sig2), Canon.sigId(sig3));
}

def test_sig_func1(t: CanonTester) {
	var bools = [true, false];
	for (s in [SigCache.i_i, SigCache.ll_l]) {
		for (n1 in bools) {
			var t1 = ValueTypes.RefFunc(n1, s);
			var sig1 = SigDecl.new([t1], SigCache.arr_v);
			for (n2 in bools) {
				var t2 = ValueTypes.RefFunc(n2, s);
				var sig2 = SigDecl.new([t2], SigCache.arr_v);
				var id1 = Canon.sigId(sig1);
				var id2 = Canon.sigId(sig2);
				if (n1 == n2) t.t.asserteq(id1, id2);
				else t.t.assertne(id1, id2);
			}
		}
	}
}

def test_sig_func2(t: CanonTester) {
	var f1 = SigCache.v_v;
	var f2 = SigCache.i_i;
// TODO canon sigs	var f3 = SigDecl.new(Arrays.dup(f2.params), Arrays.dup(f2.results));

	var sig1 = SigDecl.new([ValueTypes.RefFunc(false, f1)], SigCache.arr_v);
	var sig2 = SigDecl.new([ValueTypes.RefFunc(false, f2)], SigCache.arr_v);
	var sig3 = SigDecl.new([ValueTypes.RefFunc(false, f2)], SigCache.arr_v);

	t.t.assertne(Canon.sigId(sig1), Canon.sigId(sig2));
	t.t.asserteq(Canon.sigId(sig2), Canon.sigId(sig3));
}

