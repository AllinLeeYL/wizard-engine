// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.register;
def X_ = void(
	T("strset:mask", test_mask),
	T("strset:ok1", test_ok1),
	T("strset:ok2", test_ok2),
	()
);

def assert_mask_shift(t: Tester, max: int, mask: int, shift: u5) {
	var got = StringSetUtil.computeMaskAndShift(max);
	t.asserti(mask, got.0);
	t.asserti(shift, got.1);
}

def test_mask(t: Tester) {
	assert_mask_shift(t, 0, 3, 2);
	assert_mask_shift(t, 1, 3, 2);
	assert_mask_shift(t, 2, 7, 3);
	assert_mask_shift(t, 3, 15, 4);
	assert_mask_shift(t, 4, 15, 4);
	assert_mask_shift(t, 5, 31, 5);
	assert_mask_shift(t, 6, 31, 5);
	assert_mask_shift(t, 7, 31, 5);
	assert_mask_shift(t, 8, 31, 5);
	assert_mask_shift(t, 9, 63, 6);
	assert_mask_shift(t, 16, 63, 6);
	assert_mask_shift(t, 17, 127, 7);
}

def testInsertion(t: Tester, strings: Array<string>) {
	var set = StringSet.new(strings.length);
	for (i < strings.length) {
		t.assertz(false, set.add(strings[i]));
		for (j < strings.length) {
			var there = j <= i;
			t.assertz(there, set.has(strings[j]));
		}
		t.assertz(true, set.add(strings[i]));
	}
}

def test_ok1(t: Tester) {
	testInsertion(t, ["C1X", "TurboFan", "Aeneas"]);
	testInsertion(t, ["foo", "bar", "baz", "qux"]);
}

def test_ok2(t: Tester) {
	for (s in StringHashCollisions.SETS) {
		testInsertion(t, s);
	}
}