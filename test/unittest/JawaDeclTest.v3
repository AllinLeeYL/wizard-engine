// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT(_, JawaTester.new, _);
def X = [
	T("jawa:fw_class1", test_fw_class1),
	T("jawa:fw_class2", test_fw_class2),
	T("jawa:fw_classN", test_fw_classN),
	T("jawa:fw_interface1", test_fw_interface1),
	T("jawa:fw_interfaceN", test_fw_interfaceN),
	T("jawa:def_class1", test_def_class1),
	()
];

def test_fw_class1(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	var name = "Bog", jname = JawaStrings.of(name);
	var it = t.declareClass(name, jlo, []);
	var r = t.process();
	var jlot = t.assertIsJawaClassType(null, r[jlo.import_index]);
	if (jlot == null) return;
	var ct = t.assertIsJawaClassType(null, r[it.import_index]);
	if (ct == null) return;
	if (!jname.equals(ct.name)) {
		t.t.fail(Strings.format2("expected jawa class with name %q, got %q", jname.render, ct.name.render));
	}
	if (ct.parent != jlot) {
		return t.t.fail(Strings.format1("expected parent=jawa/lang/Object, got %q", t.safeRender(ct.parent)));
	}
}

def test_fw_class2(t: JawaTester) {
	var xname = "X", xjname = JawaStrings.of(xname);
	var xjt = t.env.declareClass(xjname, JawaClasses.OBJECT, []);
	var xit = t.importClass(xname);

	var yname = "Y", yjname = JawaStrings.of(yname);
	var yit = t.declareClass(yname, xit, []);

	var zname = "Z", zjname = JawaStrings.of(zname);
	var zit = t.declareClass(zname, yit, []);

	var r = t.process();

	var xjt2 = t.assertIsJawaClassTypeWithName(xjname, r[xit.import_index]);
	if (xjt2 == null) return;
	var yjt = t.assertIsJawaClassTypeWithName(yjname, r[yit.import_index]);
	if (yjt == null) return;
	var zjt = t.assertIsJawaClassTypeWithName(zjname, r[zit.import_index]);
	if (zjt == null) return;

	if (zjt.parent != yjt) return t.t.fail("expected z.parent == y");
	if (yjt.parent != xjt) return t.t.fail("expected y.parent == x");
	if (xjt.parent != JawaClasses.OBJECT) return t.t.fail("expected x.parent == jawa/lang/Object");
}

def create_interfaces(t: JawaTester, names: Array<string>) -> Array<ImportedType> {
	var intfs = Array<JawaInterfaceType>.new(names.length);
	var its = Array<ImportedType>.new(names.length);
	for (i < intfs.length) {
		intfs[i] = t.env.declareInterface(JawaStrings.of(names[i]), []);
		its[i] = t.importInterface(names[i]);
	}
	return its;
}

def test_class_with_intfs(u: Tester, names: Array<string>) {
	var t = JawaTester.new(u);
	var name = "Hag", jname = JawaStrings.of(name);
	var its = create_interfaces(t, names);
	var it = t.declareClass(name, null, its);
	var r = t.process();
	var ct = t.assertIsJawaClassType(null, r[it.import_index]);
	if (ct == null) return;
	var dname = ct.name;
	if (!jname.equals(dname)) {
		t.t.fail(Strings.format2("expected jawa class with name %q, got %q", jname.render, dname.render));
	}
	if (ct.parent != JawaClasses.OBJECT) {
		return t.t.fail(Strings.format1("expected parent=jawa/lang/Object, got %q", t.safeRender(ct.parent)));
	}
	for (i < its.length) {
		var itt = t.assertIsJawaInterfaceType(null, r[its[i].import_index]);
		if (itt == null) return;
		var di = ct.interfaces[i];
		if (di != itt) {
			return t.t.fail(Strings.format3("expected interfaces[%d]=%q, got %q", i, t.safeRender(itt), t.safeRender(di)));
		}
	}
}

def test_fw_classN(t: JawaTester) {
	test_class_with_intfs(t.t, []);
	test_class_with_intfs(t.t, ["X"]);
	test_class_with_intfs(t.t, ["Y", "Z"]);
	test_class_with_intfs(t.t, ["A", "B", "C"]);
}

def test_fw_interface1(t: JawaTester) {
	var name = "Brig", jname = JawaStrings.of(name);
	var it = t.declareInterface(name, []);
	var r = t.process();
	var ct = t.assertIsJawaInterfaceType(null, r[it.import_index]);
	if (ct == null) return;
	if (!jname.equals(ct.name)) {
		t.t.fail(Strings.format2("expected jawa interface with name %q, got %q", jname.render, ct.name.render));
	}
}

def test_interface_with_intfs(u: Tester, names: Array<string>) {
	var t = JawaTester.new(u);
	var name = "Crux", jname = JawaStrings.of(name);
	var its = create_interfaces(t, names);
	var it = t.declareInterface(name, its);
	var r = t.process();
	var ct = t.assertIsJawaInterfaceType(null, r[it.import_index]);
	if (ct == null) return;
	var dname = ct.name;
	if (!jname.equals(dname)) {
		t.t.fail(Strings.format2("expected jawa interface with name %q, got %q", jname.render, dname.render));
	}
	for (i < its.length) {
		var itt = t.assertIsJawaInterfaceType(null, r[its[i].import_index]);
		if (itt == null) return;
		var di = ct.interfaces[i];
		if (di != itt) {
			return t.t.fail(Strings.format3("expected interfaces[%d]=%q, got %q", i, t.safeRender(itt), t.safeRender(di)));
		}
	}
}

def test_fw_interfaceN(t: JawaTester) {
	test_interface_with_intfs(t.t, []);
	test_interface_with_intfs(t.t, ["G"]);
	test_interface_with_intfs(t.t, ["H", "I"]);
	test_interface_with_intfs(t.t, ["J", "M", "N"]);
}

def test_def_class1(t: JawaTester) {
	var name = "Bonk", jname = JawaStrings.of(name);
	var it1 = t.declareClass(name, null, []);
	var it2 = t.defineClass(it1,
		[], // instance fields
		[], // instance methods
		[], // static fields
		[]  // static methods
	);

	var r = t.process();
	var ct1 = t.assertIsJawaClassTypeWithName(jname, r[it1.import_index]);
	if (ct1 == null) return;
	var ct2 = t.assertIsJawaClassTypeWithName(jname, r[it2.import_index]);
	if (ct2 == null) return;
	if (ct2 != ct1) return t.t.fail(Strings.format1("expected ct1 == ct2, got %q", t.safeRender(ct2)));
	if (ct1.parent != JawaClasses.OBJECT ) {
		return t.t.fail(Strings.format1("expected parent=jawa/lang/Object, got %q", t.safeRender(ct1.parent)));
	}
}

// TODO: DEF_CLASS errors: already defined, not found, not interface, etc
