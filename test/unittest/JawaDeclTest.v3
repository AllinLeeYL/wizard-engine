// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("jawa:", _, JawaTester.new, _);
def X = [
	T("fw_class1", test_fw_class1),
	T("fw_class2", test_fw_class2),
	T("fw_classN", test_fw_classN),
	T("fw_interface1", test_fw_interface1),
	T("fw_interfaceN", test_fw_interfaceN),
	T("def_class1", test_def_class1),
	T("def_intf1", test_def_intf1),
	T("def_field1", test_def_field1),
	T("def_fieldN", test_def_fieldN),
	T("def_method1", test_def_method1),
	T("def_methodN", test_def_methodN),
	T("def_class_attrs", test_class_attrs),
	T("def_method_attrs", test_method_attrs),
	T("def_field_attrs", test_field_attrs),
	()
];

def test_fw_class1(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	var name = "Bog", jname = JawaStrings.of(name);
	var it = t.declareClass(name, t.NO_CLASS_ATTRS, jlo, []);
	var r = t.process();
	if (r == null) return;
	var jlot = t.assertIsJawaClassType(null, r[jlo.imp.import_index]);
	if (jlot == null) return;
	var ct = t.assertIsJawaClassType(null, r[it.imp.import_index]);
	if (ct == null) return;
	if (!jname.equals(ct.name)) {
		t.t.fail(Strings.format2("expected jawa class with name %q, got %q", jname.render, ct.name.render));
	}
	if (ct.parent != jlot) {
		return t.t.fail(Strings.format1("expected parent=jawa/lang/Object, got %q", t.safeRender(ct.parent)));
	}
}

def test_fw_class2(t: JawaTester) {
	var xname = "X", xjname = JawaStrings.of(xname);
	var xjt = t.env.declareClass(xjname, t.NO_CLASS_ATTRS, JawaLang.OBJECT, []);
	var xit = t.importClass(xname);

	var yname = "Y", yjname = JawaStrings.of(yname);
	var yit = t.declareClass(yname, t.NO_CLASS_ATTRS, xit, []);

	var zname = "Z", zjname = JawaStrings.of(zname);
	var zit = t.declareClass(zname, t.NO_CLASS_ATTRS, yit, []);

	var r = t.process();
	if (r == null) return;

	var xjt2 = t.assertIsJawaClassTypeWithName(xjname, r[xit.imp.import_index]);
	if (xjt2 == null) return;
	var yjt = t.assertIsJawaClassTypeWithName(yjname, r[yit.imp.import_index]);
	if (yjt == null) return;
	var zjt = t.assertIsJawaClassTypeWithName(zjname, r[zit.imp.import_index]);
	if (zjt == null) return;

	if (zjt.parent != yjt) return t.t.fail("expected z.parent == y");
	if (yjt.parent != xjt) return t.t.fail("expected y.parent == x");
	if (xjt.parent != JawaLang.OBJECT) return t.t.fail("expected x.parent == jawa/lang/Object");
}

def create_interfaces(t: JawaTester, names: Array<string>) -> Array<AbsTypeDecl> {
	var intfs = Array<JawaInterfaceType>.new(names.length);
	var its = Array<AbsTypeDecl>.new(names.length);
	for (i < intfs.length) {
		intfs[i] = t.env.declareInterface(JawaStrings.of(names[i]), []);
		its[i] = t.importInterface(names[i]);
	}
	return its;
}

def test_class_with_intfs(u: Tester, names: Array<string>) {
	var t = JawaTester.new(u);
	var name = "Hag", jname = JawaStrings.of(name);
	var its = create_interfaces(t, names);
	var it = t.declareClass(name, t.NO_CLASS_ATTRS, null, its);
	var r = t.process();
	if (r == null) return;
	var ct = t.assertIsJawaClassType(null, r[it.imp.import_index]);
	if (ct == null) return;
	var dname = ct.name;
	if (!jname.equals(dname)) {
		t.t.fail(Strings.format2("expected jawa class with name %q, got %q", jname.render, dname.render));
	}
	if (ct.parent != JawaLang.OBJECT) {
		return t.t.fail(Strings.format1("expected parent=jawa/lang/Object, got %q", t.safeRender(ct.parent)));
	}
	for (i < its.length) {
		var itt = t.assertIsJawaInterfaceType(null, r[its[i].imp.import_index]);
		if (itt == null) return;
		var di = ct.interfaces[i];
		if (di != itt) {
			return t.t.fail(Strings.format3("expected interfaces[%d]=%q, got %q", i, t.safeRender(itt), t.safeRender(di)));
		}
	}
}

def test_fw_classN(t: JawaTester) {
	test_class_with_intfs(t.t, []);
	test_class_with_intfs(t.t, ["X"]);
	test_class_with_intfs(t.t, ["Y", "Z"]);
	test_class_with_intfs(t.t, ["A", "B", "C"]);
}

def test_fw_interface1(t: JawaTester) {
	var name = "Brig", jname = JawaStrings.of(name);
	var it = t.declareInterface(name, []);
	var r = t.process();
	var ct = t.assertIsJawaInterfaceType(null, r[it.imp.import_index]);
	if (ct == null) return;
	if (!jname.equals(ct.name)) {
		t.t.fail(Strings.format2("expected jawa interface with name %q, got %q", jname.render, ct.name.render));
	}
}

def test_interface_with_intfs(u: Tester, names: Array<string>) {
	var t = JawaTester.new(u);
	var name = "Crux", jname = JawaStrings.of(name);
	var its = create_interfaces(t, names);
	var it = t.declareInterface(name, its);
	var r = t.process();
	if (r == null) return;
	var ct = t.assertIsJawaInterfaceType(null, r[it.imp.import_index]);
	if (ct == null) return;
	var dname = ct.name;
	if (!jname.equals(dname)) {
		t.t.fail(Strings.format2("expected jawa interface with name %q, got %q", jname.render, dname.render));
	}
	for (i < its.length) {
		var itt = t.assertIsJawaInterfaceType(null, r[its[i].imp.import_index]);
		if (itt == null) return;
		var di = ct.interfaces[i];
		if (di != itt) {
			return t.t.fail(Strings.format3("expected interfaces[%d]=%q, got %q", i, t.safeRender(itt), t.safeRender(di)));
		}
	}
}

def test_fw_interfaceN(t: JawaTester) {
	test_interface_with_intfs(t.t, []);
	test_interface_with_intfs(t.t, ["G"]);
	test_interface_with_intfs(t.t, ["H", "I"]);
	test_interface_with_intfs(t.t, ["J", "M", "N"]);
}

def test_def_class1(t: JawaTester) {
	var name = "Bonk", jname = JawaStrings.of(name);
	var it1 = t.declareClass(name, t.NO_CLASS_ATTRS, null, []);
	var it2 = t.defineClass(it1,
		[], // instance fields
		[], // instance methods
		[], // static fields
		[]  // static methods
	);

	var r = t.process();
	if (r == null) return;
	var ct1 = t.assertIsJawaClassTypeWithName(jname, r[it1.imp.import_index]);
	if (ct1 == null) return;
	t.assertParent(JawaLang.OBJECT, ct1);
}

def test_def_intf1(t: JawaTester) {
	var name = "iKel", jname = JawaStrings.of(name);
	var it1 = t.declareInterface(name, []);
	var it2 = t.defineInterface(it1,
		[] // instance methods
	);

	var r = t.process();
	if (r == null) return;
	var ct1 = t.assertIsJawaInterfaceTypeWithName(jname, r[it1.imp.import_index]);
	if (ct1 == null) return;
	if (ct1.interfaces.length != 0) return t.t.fail("expected 0 interfaces");
}

def test_def_field1(t: JawaTester) {
	var name = "Edew", jname = JawaStrings.of(name);
	var f1 = "f1", jf1 = JawaStrings.of(f1);
	var f2 = "f2", jf2 = JawaStrings.of(f2);
	var it1 = t.declareClass(name, t.NO_CLASS_ATTRS, null, []);
	var it2 = t.defineClass(it1,
		[(jf1, t.NO_FIELD_ATTRS, JawaTypeRef.Prim(JawaTypes.INT))], // instance fields
		[], // instance methods
		[(jf2, t.NO_FIELD_ATTRS, JawaTypeRef.Prim(JawaTypes.FLOAT))], // static fields
		[]  // static methods
	);

	var r = t.process();
	if (r == null) return;
	var ct1 = t.assertIsJawaClassTypeWithName(jname, r[it1.imp.import_index]);
	if (ct1 == null) return;
	t.assertParent(JawaLang.OBJECT, ct1);
	t.assertIsJawaField(ct1.instanceFields, 0, jf1, JawaTypes.INT);
	t.assertIsJawaField(ct1.staticFields, 0, jf2, JawaTypes.FLOAT);
}

def test_def_fieldN(t: JawaTester) {
	var name = "Dinn", jname = JawaStrings.of(name);
	var f1 = "f1", jf1 = JawaStrings.of(f1);
	var f2 = "f2", jf2 = JawaStrings.of(f2);
	var ts = t.t;

	for (t in JawaTypes.PRIMITIVES) {
		var n = JawaTester.new(ts);
		var it1 = n.declareClass(name, n.NO_CLASS_ATTRS, null, []);
		var it2 = n.defineClass(it1,
			[
				(jf1, n.NO_FIELD_ATTRS, JawaTypeRef.Prim(t)),
				(jf2, n.NO_FIELD_ATTRS, JawaTypeRef.Abstract(it1))
			], // instance fields
			[], // instance methods
			[], // static fields
			[]  // static methods
		);
		var r = n.process();
		if (r == null) return;
		var ct1 = n.assertIsJawaClassTypeWithName(jname, r[it1.imp.import_index]);
		if (ct1 == null) return;
		n.assertIsJawaField(ct1.instanceFields, 0, jf1, t);
		n.assertIsJawaField(ct1.instanceFields, 1, jf2, ct1);
	}
}

def test_def_method1(t: JawaTester) {
	var name = "Edew", jname = JawaStrings.of(name);
	var m1 = "m1", jm1 = JawaStrings.of(m1);
	var m2 = "m2", jm2 = JawaStrings.of(m2);
	var it1 = t.declareClass(name, t.NO_CLASS_ATTRS, null, []);

	var m1d = t.newFunction(SigDecl.new([ValueType.Abstract(it1)], SigCache.arr_i), []);
	var m2d = t.newFunction(SigCache.v_d, []);

	var it2 = t.defineClass(it1,
		[], // instance fields
		[(jm1, t.NO_METHOD_ATTRS, JawaSigRef.new([], JawaTypeRef.Prim(JawaTypes.BYTE)), m1d)], // instance methods
		[], // static fields
		[(jm2, t.NO_METHOD_ATTRS, JawaSigRef.new([], JawaTypeRef.Prim(JawaTypes.DOUBLE)), m2d)]  // static methods
	);

	var r = t.process();
	if (r == null) return;
	var ct1 = t.assertIsJawaClassTypeWithName(jname, r[it1.imp.import_index]);
	if (ct1 == null) return;
	t.assertParent(JawaLang.OBJECT, ct1);
	t.assertIsJawaMethod(ct1.instanceMethods, 0, jm1, [], JawaTypes.BYTE);
	t.assertIsJawaMethod(ct1.staticMethods, 0, jm2, [], JawaTypes.DOUBLE);
}

def test_def_methodN(t: JawaTester) {
	var ts = t.t;

	var PARAMS = [JawaTypeRef.Prim(JawaTypes.LONG), JawaTypeRef.Prim(JawaTypes.DOUBLE)];
	var RETS = [
		(JawaTypeRef.Prim(JawaTypes.INT), JawaTypes.INT),
		(JawaTypeRef.Void, JawaTypes.VOID)
	];

	for (pt in PARAMS) {
		for (rt in RETS) {
			var n = JawaTester.new(ts);

			var name = "Xinb", jname = JawaStrings.of(name);
			var m1 = "m1", jm1 = JawaStrings.of(m1);
			var it1 = n.declareClass(name, t.NO_CLASS_ATTRS, null, []);
			var rt1 = if(rt.1 == JawaTypes.VOID, SigCache.arr_v, [t.rt.toType(rt.1)]);
			var m1sig = SigDecl.new([t.rt.toType(pt.t), ValueType.Abstract(it1)], rt1);
			var m1d = n.newFunction(m1sig, []);
			var it2 = n.defineClass(it1,
				[], // instance fields
				[], // instance methods
				[], // static fields
				[(jm1, t.NO_METHOD_ATTRS, JawaSigRef.new([pt, JawaTypeRef.Abstract(it1)], rt.0), m1d)]  // static methods
			);

			var r = n.process();
			if (r == null) return;
			var ct1 = n.assertIsJawaClassTypeWithName(jname, r[it1.imp.import_index]);
			if (ct1 == null) return;
			n.assertIsJawaMethod(ct1.staticMethods, 0, jm1, [pt.t, ct1], rt.1);
		}
	}

}

def test_class_attrs(t: JawaTester) {
	var name = "Xattr", jname = JawaStrings.of(name);
	for (a in JawaClassAttr) {
		var n = JawaTester.new(t.t);
		var it1 = n.declareClass(name, a, null, []);
		var it2 = n.defineClass(it1,
			[], // instance fields
			[], // instance methods
			[], // static fields
			[]  // static methods
		);
		var r = n.process();
		if (r == null) return;
		var ct1 = n.assertIsJawaClassTypeWithName(jname, r[it1.imp.import_index]);
		if (ct1 == null) return;
		if (ct1.attrs != a) t.t.fail1("expected attrs=%s", a.name);
	}
}

def test_method_attrs(t: JawaTester) {
	var name = "Yattr", jname = JawaStrings.of(name);
	var m1 = "m1", jm1 = JawaStrings.of(m1);
	for (a in JawaMethodAttr) {
		var n = JawaTester.new(t.t);
		var it1 = n.declareClass(name, t.NO_CLASS_ATTRS, null, []);
		var m1d = n.newFunction(SigCache.v_v, []);
		var it2 = n.defineClass(it1,
			[], // instance fields
			[], // instance methods
			[], // static fields
			[(jm1, a, JawaSigRef.new([], JawaTypeRef.Void), m1d)]  // static methods
		);
		var r = n.process();
		if (r == null) return;
		var ct1 = n.assertIsJawaClassTypeWithName(jname, r[it1.imp.import_index]);
		if (ct1 == null) return;
		var m = ct1.staticMethods[0];
		if (m.attrs != a) t.t.fail1("expected attrs=%s", a.name);
	}
}

def test_field_attrs(t: JawaTester) {
	var name = "Zattr", jname = JawaStrings.of(name);
	var f1 = "f1", jf1 = JawaStrings.of(f1);
	for (a in JawaFieldAttr) {
		var n = JawaTester.new(t.t);
		var it1 = n.declareClass(name, t.NO_CLASS_ATTRS, null, []);
		var it2 = n.defineClass(it1,
			[(jf1, a, JawaTypeRef.Prim(JawaTypes.INT))], // instance fields
			[], // instance methods
			[], // static fields
			[]  // static methods
		);
		var r = n.process();
		if (r == null) return;
		var ct1 = n.assertIsJawaClassTypeWithName(jname, r[it1.imp.import_index]);
		if (ct1 == null) return;
		var f = ct1.instanceFields[0];
		if (f.attrs != a) t.t.fail1("expected attrs=%s", a.name);
	}
}

// TODO: DEF_CLASS errors: not found, not interface, etc
// TODO: DEF_CLASS error: void field type
// TODO: DEF_CLASS error: void param type
