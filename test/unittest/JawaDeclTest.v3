// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT(_, JawaTester.new, _);
def X = [
	T("jawa:fw_class1", test_fw_class1),
	T("jawa:fw_class2", test_fw_class2),
	T("jawa:fw_interface1", test_fw_interface1),
	T("jawa:fw_interface2", test_fw_interface2),
	T("jawa:def_class1", test_def_class1),
	()
];

def test_fw_class1(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	var name = JawaStrings.of("Foo");
	var str = JawaAsm.new()
		.putc(JawaTypeOpcode.FW_CLASS_DECL.code)
		.put_jawa_name(name)
		.put_jawa_i4(jlo.type_index) // super
		.put_jawa_i4(0) // interfaces
		.extract();
	var it = t.addTypeImport(str, ValueTypes.NONE);
	var r = t.process();
	var jlot = t.assertIsJawaClassType(null, r[jlo.import_index]);
	if (jlot == null) return;
	var ct = t.assertIsJawaClassType(null, r[it.import_index]);
	if (ct == null) return;
	var dname = ct.name;
	if (!name.equals(dname)) {
		t.t.fail(Strings.format2("expected jawa class with name %q, got %q", name.render, dname.render));
	}
	if (ct.parent != jlot) {
		return t.t.fail(Strings.format1("expected parent=jawa/lang/Object, got %q", t.safeRender(ct.parent)));
	}
}

def test_class_with_intfs(u: Tester, names: Array<string>) {
	var t = JawaTester.new(u);
	var jlo = t.importJawaLangObject();
	var name = JawaStrings.of("Foo");
	var cmd = JawaAsm.new()
		.putc(JawaTypeOpcode.FW_CLASS_DECL.code)
		.put_jawa_name(name)
		.put_jawa_i4(jlo.type_index) // super
		.put_jawa_i4(names.length); // interfaces
	var intfs = Array<JawaInterfaceType>.new(names.length);
	var its = Array<ImportedType>.new(names.length);
	for (i < intfs.length) {
		intfs[i] = JawaInterfaceType.new(JawaStrings.of(names[i]), []);
		t.env.add(intfs[i]);
		var it = t.importInterface(names[i]);
		cmd.put_jawa_i4(it.type_index);
		its[i] = it;
	}
	var it = t.addTypeImport(cmd.extract(), ValueTypes.NONE);
	var r = t.process();
	var jlot = t.assertIsJawaClassType(null, r[jlo.import_index]);
	if (jlot == null) return;
	var ct = t.assertIsJawaClassType(null, r[it.import_index]);
	if (ct == null) return;
	var dname = ct.name;
	if (!name.equals(dname)) {
		t.t.fail(Strings.format2("expected jawa class with name %q, got %q", name.render, dname.render));
	}
	if (ct.parent != jlot) {
		return t.t.fail(Strings.format1("expected parent=jawa/lang/Object, got %q", t.safeRender(ct.parent)));
	}
	for (i < its.length) {
		var itt = t.assertIsJawaInterfaceType(null, r[its[i].import_index]);
		if (itt == null) return;
		var di = ct.interfaces[i];
		if (di != itt) { // TODO: identity of interface and class types
			return t.t.fail(Strings.format3("expected interfaces[%d]=%q, got %q", i, t.safeRender(itt), t.safeRender(di)));
		}
	}
}

def test_fw_class2(t: JawaTester) {
	test_class_with_intfs(t.t, []);
	test_class_with_intfs(t.t, ["X"]);
	test_class_with_intfs(t.t, ["Y", "Z"]);
	test_class_with_intfs(t.t, ["A", "B", "C"]);
}

def test_fw_interface1(t: JawaTester) {
	var name = JawaStrings.of("Brig");
	var str = JawaAsm.new()
		.putc(JawaTypeOpcode.FW_INTERFACE_DECL.code)
		.put_jawa_name(name)
		.put_jawa_i4(0) // interfaces
		.extract();
	var it = t.addTypeImport(str, ValueTypes.NONE);
	var r = t.process();
	var ct = t.assertIsJawaInterfaceType(null, r[it.import_index]);
	if (ct == null) return;
	var dname = ct.name;
	if (!name.equals(dname)) {
		t.t.fail(Strings.format2("expected jawa interface with name %q, got %q", name.render, dname.render));
	}
}

def test_fw_interface2(t: JawaTester) {
// TODO: fw_interface_decl with interfaces
}

def test_def_class1(t: JawaTester) {
	var jlo = t.importJawaLangObject();
	var name = JawaStrings.of("Foo");
	var str1 = JawaAsm.new()
		.putc(JawaTypeOpcode.FW_CLASS_DECL.code)
		.put_jawa_name(name)
		.put_jawa_i4(jlo.type_index) // super
		.put_jawa_i4(0) // interfaces
		.extract();
	var it1 = t.addTypeImport(str1, ValueTypes.NONE); // fw_class
	var str2 = JawaAsm.new()
		.putc(JawaTypeOpcode.DEF_CLASS.code)
		.put_jawa_i4(it1.type_index) // class index
		.put_jawa_i4(0) // # instance fields
		.put_jawa_i4(0) // # instance methods
		.put_jawa_i4(0) // # static fields
		.put_jawa_i4(0) // # static methods
		.extract();
	var it2 = t.addTypeImport(str2, ValueTypes.NONE);

	var r = t.process();
	var jlot = t.assertIsJawaClassType(null, r[jlo.import_index]);
	if (jlot == null) return;
	var ct1 = t.assertIsJawaClassType(null, r[it1.import_index]);
	var ct2 = t.assertIsJawaClassType(null, r[it2.import_index]);
	if (ct1 == null) return;
	if (ct2 != ct1) return t.t.fail(Strings.format1("expected ct1 == ct2, got %q", t.safeRender(ct2)));
	var dname = ct1.name;
	if (!name.equals(dname)) {
		t.t.fail(Strings.format2("expected jawa class with name %q, got %q", name.render, dname.render));
	}
	if (ct1.parent != jlot) {
		return t.t.fail(Strings.format1("expected parent=jawa/lang/Object, got %q", t.safeRender(ct1.parent)));
	}
}

// TODO: DEF_CLASS errors: already defined, not found, not interface, etc
