// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("jawa:gcrt:", _, JawaGcTester.new, _);
def X = [
	T("class_id1", test_class_id1),
	T("class_index1", test_class_index1),
	T("class_field1", test_class_field1),
	T("class_field2", test_class_field2),
	T("array1", test_array1),
	T("array2", test_array2),
	()
];

class JawaGcTester extends JawaTester {
	var gcrt: JawaGcRuntime;

	new(t: Tester) super(t, JawaGcRuntime.new()) {
		gcrt = JawaGcRuntime.!(rt);
	}
	def assertIsStruct(vt: ValueType) -> StructDecl {
		match (vt) {
			RefStruct(n, struct) => return struct;
			_ => t.fail1("expected struct type, got %q", vt.render);
		}
		return null;
	}
	def assertIsArray(vt: ValueType) -> ArrayDecl {
		match (vt) {
			RefArray(n, array) => return array;
			_ => t.fail1("expected array type, got %q", vt.render);
		}
		return null;
	}
	def assertStorageType(expected: StorageType, types: Array<StorageType>, index: int) {
		if (index >= types.length) return t.fail1("expected types[%d], but got out-of-bounds", index);
		var got = types[index];
		if (expected.valtype != got.valtype) return t.fail2("expected valtype=%q, got %q",
				expected.valtype.render, got.valtype.render);
		if (expected.packing != got.packing) return t.fail2("expected packing=%s, got %s", expected.packing, got.packing);
		if (expected.mutable != got.mutable) return t.fail2("expected mutable=%z, got %z", expected.mutable, got.mutable);
	}
}

def test_class_id1(t: JawaGcTester) {
	var c = JawaLang.newEmptyClass("Cx", null);
	var d = JawaLang.newEmptyClass("Dx", null);
	var ct = t.gcrt.toWasmType(c);
	var dt = t.gcrt.toWasmType(d);
	t.t.assertne(ct, dt);

	for (i < 3) {
		t.t.asserteq(ct, t.gcrt.toWasmType(c));
		t.t.asserteq(dt, t.gcrt.toWasmType(d));
	}
}

def test_class_index1(t: JawaGcTester) {
	var c = JawaLang.newEmptyClass("Cy", null);
	var d = JawaLang.newEmptyClass("Dy", null);
	for (x in [c, d]) {
		var xt = t.gcrt.toWasmType(x);
		var struct = t.assertIsStruct(xt);
		t.t.asserteq(x, t.gcrt.reftypes[struct.struct_index]);
	}
}

def newField(name: string, index: int, typ: JawaType) -> JawaField {
	return JawaField.new(JawaStrings.of(name), JawaLang.NO_FIELD_ATTRS, index, typ);
}

def test_class_field1(t: JawaGcTester) {
	var c = JawaLang.newEmptyClass("Cz", null);
	c.instanceFields = [
		newField("f1", 0, JawaTypes.BYTE),
		newField("f2", 1, JawaTypes.INT),
		newField("f3", 2, JawaTypes.FLOAT)
	];
	var ct = t.gcrt.toWasmType(c);
	var struct = t.assertIsStruct(ct);
	if (struct == null) return;

	// TODO: check meta field
	t.assertStorageType(StorageType.new(ValueType.I32, Packedness.PACKED_I8, true), struct.field_types, 1);
	t.assertStorageType(StorageType.new(ValueType.I32, Packedness.UNPACKED, true), struct.field_types, 2);
	t.assertStorageType(StorageType.new(ValueType.F32, Packedness.UNPACKED, true), struct.field_types, 3);
}

def test_class_field2(t: JawaGcTester) {
	var c = JawaLang.newEmptyClass("Cg", null);
	var d = JawaLang.newEmptyClass("Dg", null);
	c.instanceFields = [
		newField("f1", 0, c),
		newField("f2", 1, d)
	];
	d.instanceFields = [
		newField("h1", 0, d),
		newField("h2", 1, d)
	];
	var ct = t.gcrt.toWasmType(c);
	var cst = t.assertIsStruct(ct);
	if (cst == null) return;

	var dt = t.gcrt.toWasmType(d);
	var dst = t.assertIsStruct(dt);
	if (dst == null) return;

	// TODO: check meta field
	t.assertStorageType(StorageType.new(ct, Packedness.UNPACKED, true), cst.field_types, 1);
	t.assertStorageType(StorageType.new(dt, Packedness.UNPACKED, true), cst.field_types, 2);

	t.assertStorageType(StorageType.new(dt, Packedness.UNPACKED, true), dst.field_types, 1);
	t.assertStorageType(StorageType.new(dt, Packedness.UNPACKED, true), dst.field_types, 2);
}

def test_array1(t: JawaGcTester) {
	var at = t.gcrt.makeArrayRep(JawaTypes.BYTE_ARRAY).array;
	t.assertStorageType(StorageType.new(ValueType.I32, Packedness.PACKED_I8, true), at.elem_types, 0);

	at = t.gcrt.makeArrayRep(JawaTypes.CHAR_ARRAY).array;
	if (at == null) return;
	t.assertStorageType(StorageType.new(ValueType.I32, Packedness.PACKED_I16, true), at.elem_types, 0);

	at = t.gcrt.makeArrayRep(JawaTypes.LONG_ARRAY).array;
	if (at == null) return;
	t.assertStorageType(StorageType.new(ValueType.I64, Packedness.UNPACKED, true), at.elem_types, 0);

	at = t.gcrt.makeArrayRep(JawaTypes.DOUBLE_ARRAY).array;
	if (at == null) return;
	t.assertStorageType(StorageType.new(ValueType.F64, Packedness.UNPACKED, true), at.elem_types, 0);
}

def test_array2(t: JawaGcTester) {
	var c = JawaLang.OBJECT;
	var at = t.gcrt.makeArrayRep(c.arrayOf()).array;
	var y = t.gcrt.toWasmType(c);
	t.assertStorageType(StorageType.new(y, Packedness.UNPACKED, true), at.elem_types, 0);

	c = JawaLang.STRING;
	at = t.gcrt.makeArrayRep(c.arrayOf()).array;
	y = t.gcrt.toWasmType(c);
	t.assertStorageType(StorageType.new(y, Packedness.UNPACKED, true), at.elem_types, 0);
}
