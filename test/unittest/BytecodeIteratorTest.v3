// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("iterator:", _, BytecodeIteratorTester.new, _);

def X = [
	T("empty", test_empty),
	T("nop0", test_nop0),
	T("nop1", test_nop1),
	T("locals0", test_locals0),
	T("imm0", test_imm0),
	T("imm1", test_imm1),
	T("locals1", test_locals1),
	()
];

class BytecodeIteratorTester(t: Tester) extends ModuleBuilder {
	def iterator() -> BytecodeIterator {
		return BytecodeIterator.new(func);
	}
	def assert_bytecodes(expected: Array<Opcode>) {
		var it = iterator();
		for (i < expected.length) {
			var e = expected[i];
			if (Trace.test) Trace.OUT.put2("@+%d: expecting %s", it.pc, e.name).outln();
			if (!it.more()) return t.fail1("iteration %d: expected more bytecodes", i);
			// test current()
			var op = it.current();
			if (Trace.test) Trace.OUT.put2("  @+%d: got %s", it.pc, op.name).outln();
			if (op != e) return t.fail(Strings.format3("index=%d, expected %s, got %s", i, e.mnemonic, op.mnemonic));
			// test current2()
			var r = it.current2();
			op = r.0;
			if (Trace.test) Trace.OUT.put2("  @+%d: got %s", it.pc, op.name).outln();
			if (op != e) return t.fail(Strings.format3("index=%d, expected %s, got %s", i, e.mnemonic, op.mnemonic));
			// advance
			it.next();
			if (Trace.test) Trace.OUT.put1("  next=+%d", it.pc).outln();
		}
		if (it.more()) t.fail("expected !more()");
	}
	def assert_pcs(expected: Array<(int, Opcode, int)>) {
		var it = iterator();
		for (i < expected.length) {
			var p = expected[i], pc = p.0, e = p.1;
			if (Trace.test) Trace.OUT.put3("@+%d: expecting %s @+%d", it.pc, e.name, pc).outln();
			if (!it.more()) return t.fail1("iteration %d: expected more bytecodes", i);
			// test current()
			var op = it.current();
			if (Trace.test) Trace.OUT.put2("  got %s @+%d", op.name, it.pc).outln();
			if (it.pc != pc) return t.fail(Strings.format3("index=%d, expected @+%d, got @+%d", i, pc, it.pc));
			if (op != e) return t.fail(Strings.format3("index=%d, expected %s, got %s", i, e.mnemonic, op.mnemonic));
			// test current2()
			var r = it.current2();
			op = r.0;
			if (Trace.test) Trace.OUT.put2("  got %s @+%d", op.name, it.pc).outln();
			if (it.pc != pc) return t.fail(Strings.format3("index=%d, expected @+%d, got @+%d", i, pc, it.pc));
			if (op != e) return t.fail(Strings.format3("index=%d, expected %s, got %s", i, e.mnemonic, op.mnemonic));
			var immptr = r.1;
			if (immptr.pos != p.2) return t.fail(Strings.format3("index=%d, expected immptr=+%d, got +%d", i, p.2, immptr.pos));
			// advance
			it.next();
			if (Trace.test) Trace.OUT.put1("  next=+%d", it.pc).outln();
		}
		if (it.more()) t.fail("expected !more()");
	}
}

def test_empty(t: BytecodeIteratorTester) {
	t.code([]);
	t.assert_bytecodes([Opcode.END]);
}

def test_nop0(t: BytecodeIteratorTester) {
	t.code([Opcode.NOP.code]);
	t.assert_bytecodes([Opcode.NOP, Opcode.END]);

	t.code([Opcode.NOP.code, Opcode.NOP.code]);
	t.assert_bytecodes([Opcode.NOP, Opcode.NOP, Opcode.END]);

	t.code([Opcode.NOP.code, Opcode.NOP.code, Opcode.NOP.code]);
	t.assert_bytecodes([Opcode.NOP, Opcode.NOP, Opcode.NOP, Opcode.END]);
}

def test_nop1(t: BytecodeIteratorTester) {
	t.code([Opcode.NOP.code]);
	t.assert_pcs([
		(1, Opcode.NOP, 2),
		(2, Opcode.END, 3)]);

	t.code([Opcode.NOP.code, Opcode.NOP.code]);
	t.assert_pcs([
		(1, Opcode.NOP, 2),
		(2, Opcode.NOP, 3),
		(3, Opcode.END, 4)]);

	t.code([Opcode.NOP.code, Opcode.NOP.code, Opcode.NOP.code]);
	t.assert_pcs([
		(1, Opcode.NOP, 2),
		(2, Opcode.NOP, 3),
		(3, Opcode.NOP, 4),
		(4, Opcode.END, 5)]);
}

def test_locals0(t: BytecodeIteratorTester) {
	t.addLocal(ValueType.I32);
	t.code([]);
	t.assert_pcs([
		(3, Opcode.END, 4)]);

	t.addLocal(ValueType.F32);
	t.code([]);
	t.assert_pcs([
		(5, Opcode.END, 6)]);
}

def test_imm0(t: BytecodeIteratorTester) {
	t.code([Opcode.I32_CONST.code, 44]);
	t.assert_pcs([
		(1, Opcode.I32_CONST, 2),
		(3, Opcode.END, 4)
	]);
}

def test_imm1(t: BytecodeIteratorTester) {
	def EMPTY_BLOCK: byte = 0x40;
	def LABEL: byte = 0;
	t.code([
		Opcode.BLOCK.code, EMPTY_BLOCK,		//ImmSigs.BLOCKT, null),
		Opcode.LOOP.code, EMPTY_BLOCK,		//ImmSigs.BLOCKT, null),
		Opcode.IF.code, EMPTY_BLOCK,		//ImmSigs.BLOCKT, null),
		Opcode.BR.code,	LABEL,			//ImmSigs.LABEL, null),
		Opcode.BR_IF.code, LABEL,		//ImmSigs.LABEL, null),
		Opcode.BR_TABLE.code, 0, LABEL,		//ImmSigs.LABELS, null),
		Opcode.CALL.code, 0,			//ImmSigs.FUNC, null),
		Opcode.CALL_INDIRECT.code, 0, 0,	//ImmSigs.SIG_TABLE, null),
		Opcode.RETURN_CALL.code, 0,		//ImmSigs.FUNC, null),
		Opcode.RETURN_CALL_INDIRECT.code, 0, 0,	//ImmSigs.SIG_TABLE, null),
		Opcode.CALL_REF.code, 0,		//ImmSigs.SIG, null),
		Opcode.RETURN_CALL_REF.code, 0,		//ImmSigs.SIG, null),
		Opcode.SELECT_T.code, 1, 0,		//ImmSigs.VALTS, null)
		Opcode.NOP.code
	]);
	t.assert_pcs([
		(1, Opcode.BLOCK, 2),
		(3, Opcode.LOOP, 4),
		(5, Opcode.IF, 6),
		(7, Opcode.BR, 8),
		(9, Opcode.BR_IF, 10),
		(11, Opcode.BR_TABLE, 12),
		(14, Opcode.CALL, 15),
		(16, Opcode.CALL_INDIRECT, 17),
		(19, Opcode.RETURN_CALL, 20),
		(21, Opcode.RETURN_CALL_INDIRECT, 22),
		(24, Opcode.CALL_REF, 25),
		(26, Opcode.RETURN_CALL_REF, 27),
		(28, Opcode.SELECT_T, 29),
		(31, Opcode.NOP, 32),
		(32, Opcode.END, 33)
	]);
}

def test_locals1(t: BytecodeIteratorTester) {
	var expected: Array<(u32, ValueType)> = [
		(3, ValueType.I32),
		(4, ValueType.I64),
		(5, ValueType.F32),
		(6, ValueType.F64),
		(7, ValueType.V128)
	];

	for (e in expected) t.addLocals(int.!(e.0), e.1);
	t.code([]);

	var extensions: Extension.set;
	var p = WasmParser.new(extensions, Limits.new(), t.module, ErrorGen.new("<BytecodeIteratorTest>"), null);
	var v = Vector<(u32, ValueType)>.new().grow(expected.length);
	var it = t.iterator();
	it.parseLocalTypes(p, v.put);

	if (v.length != expected.length) return t.t.fail2("expected %d pairs of locals, got %d", expected.length, v.length);

	for (i < expected.length) {
		var e = expected[i], g = v[i];
		if (e.0 != g.0) return t.t.fail3("locals[%d], expected %d, got %d", i, e.0, g.0);
		if (e.1 != g.1) return t.t.fail3("locals[%d], expected %q, got %q", i, e.1.render, g.1.render);
	}

	if (it.pc != 11) return t.t.fail2("expected pc=+%d, got +%d", 10, it.pc);
	t.assert_pcs([
		(11, Opcode.END, 12)
	]);
}
