// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("jawa:ivt:", _, JawaTester.new, _);
def X = [
	T("vtable1", test_vtable1),
	T("vtable2", test_vtable2),
	T("vtableov1", test_vtableov1),
	T("vtableov2", test_vtableov2),
	T("ivt1", test_ivt1),
	T("ivt2", test_ivt2),
	T("ivt3", test_ivt3),
	T("overload_ret", test_overload_ret),
	T("overload1", test_overload1),
	T("overload2", test_overload2),
	()
];

def IA = JawaStrings.of("IA"), IB = JawaStrings.of("IB");
def CX = JawaStrings.of("CX"), CY = JawaStrings.of("CY"), CZ = JawaStrings.of("CZ"), CW = JawaStrings.of("CW");
def M = JawaStrings.of("M"), N = JawaStrings.of("N"), P = JawaStrings.of("P");

def test_vtable1(t: JawaTester) {
	def ct = JawaClassType.new(CX, null, []);
	var m1 = JawaMethod.new(M, [], JawaTypes.VOID, null);
	var m2 = JawaMethod.new(N, [], JawaTypes.VOID, null);
	ct.instanceMethods = [m1, m2];

	t.assertVTable([m1, m2], ct);
}

def test_vtable2(t: JawaTester) {
	def cx = JawaClassType.new(CX, null, []);
	var xm = JawaMethod.new(M, [], JawaTypes.VOID, null);
	var xn = JawaMethod.new(N, [], JawaTypes.VOID, null);
	cx.instanceMethods = [xm, xn];
	t.assertVTable([xm, xn], cx);

	def cy = JawaClassType.new(CY, cx, []);
	var ym = JawaMethod.new(M, [], JawaTypes.VOID, null);
	cy.instanceMethods = [ym];
	t.assertVTable([ym, xn], cy);

	def cz = JawaClassType.new(CZ, cy, []);
	var zn = JawaMethod.new(N, [], JawaTypes.VOID, null);
	var zp = JawaMethod.new(P, [], JawaTypes.VOID, null);
	cz.instanceMethods = [zn, zp];
	t.assertVTable([ym, zn, zp], cz);

	def cw = JawaClassType.new(CW, cz, []);
	var wm = JawaMethod.new(M, [], JawaTypes.VOID, null);
	var wp = JawaMethod.new(P, [], JawaTypes.VOID, null);
	cw.instanceMethods = [wm, wp];
	t.assertVTable([wm, zn, wp], cw);
}

def test_vtableov1(t: JawaTester) {
	def ct = JawaClassType.new(CX, null, []);
	var m1 = JawaMethod.new(M, [], JawaTypes.VOID, null);
	var m2 = JawaMethod.new(M, [JawaTypes.INT], JawaTypes.VOID, null);
	var m3 = JawaMethod.new(N, [JawaTypes.INT], JawaTypes.VOID, null);

	ct.instanceMethods = [m1, m2, m3];

	t.assertVTable([m1, m2, m3], ct);
}

def test_vtableov2(t: JawaTester) {
	def cx = JawaClassType.new(CX, null, []);
	var m1 = JawaMethod.new(M, [], JawaTypes.VOID, null);
	var m3 = JawaMethod.new(N, [JawaTypes.INT], JawaTypes.BYTE, null);
	var m2 = JawaMethod.new(M, [JawaTypes.INT], JawaTypes.VOID, null);
	cx.instanceMethods = [m1, m3, m2];

	t.assertVTable([m1, m3, m2], cx);

	def cy = JawaClassType.new(CX, cx, []);
	var om1 = JawaMethod.new(M, [], JawaTypes.VOID, null);
	var om2 = JawaMethod.new(M, [JawaTypes.INT], JawaTypes.VOID, null);
	cy.instanceMethods = [om2, om1];

	t.assertVTable([om1, m3, om2], cy);
}

def test_ivt1(t: JawaTester) {
	def ia = JawaInterfaceType.new(IA, []);
	var am = JawaMethod.new(M, [], JawaTypes.VOID, null);
	ia.instanceMethods = [am];

	def cx = JawaClassType.new(CX, null, [ia]);
	var xm = JawaMethod.new(M, [], JawaTypes.VOID, null);
	var xn = JawaMethod.new(N, [], JawaTypes.VOID, null);
	cx.instanceMethods = [xm, xn];
	t.assertVTable([xm, xn], cx);
	t.assertITable((ia, [0]), cx);
}

def test_ivt2(t: JawaTester) {
	def ia = JawaInterfaceType.new(IA, []);
	var am = JawaMethod.new(M, [], JawaTypes.VOID, null);
	var an = JawaMethod.new(N, [], JawaTypes.VOID, null);
	ia.instanceMethods = [am, an];

	def cx = JawaClassType.new(CX, null, [ia]);
	var xm = JawaMethod.new(M, [], JawaTypes.VOID, null);
	var xn = JawaMethod.new(N, [], JawaTypes.VOID, null);
	var xp = JawaMethod.new(P, [], JawaTypes.VOID, null);
	cx.instanceMethods = [xm, xp, xn];
	t.assertVTable([xm, xp, xn], cx);
	t.assertITable((ia, [0, 2]), cx);

	def cy = JawaClassType.new(CY, cx, []);
	cy.instanceMethods = [];
	t.assertVTable([xm, xp, xn], cy);
	t.assertITable((ia, [0, 2]), cy);
}

def test_ivt3(t: JawaTester) {
	def ia = JawaInterfaceType.new(IA, []);
	var am = JawaMethod.new(M, [], JawaTypes.VOID, null);
	var an = JawaMethod.new(N, [], JawaTypes.VOID, null);
	ia.instanceMethods = [am, an];

	def cx = JawaClassType.new(CX, null, [ia]);
	var xm = JawaMethod.new(M, [], JawaTypes.VOID, null);
	var xn = JawaMethod.new(N, [], JawaTypes.VOID, null);
	var xp = JawaMethod.new(P, [], JawaTypes.VOID, null);
	cx.instanceMethods = [xm, xp, xn];
	t.assertVTable([xm, xp, xn], cx);
	t.assertITable((ia, [0, 2]), cx);

	def cy = JawaClassType.new(CY, cx, []);
	cy.instanceMethods = [];
	t.assertVTable([xm, xp, xn], cy);
	t.assertITable((ia, [0, 2]), cy);
}

def test_overload_ret(t: JawaTester) {
 	def RETURN_TYPES = [JawaTypes.VOID, JawaTypes.BYTE, JawaTypes.INT, JawaTypes.BYTE_ARRAY, JawaTypes.OBJECT];

	for (x in RETURN_TYPES) {
		for (y in RETURN_TYPES) {
			var err = ErrorGen.new();
			var mx = JawaMethod.new(M, [], x, null);
			var my = JawaMethod.new(M, [], y, null);
			var ok = x.isAssignableToH(y);
			t.t.assertz(ok, JawaClasses.override(mx, my, err));
			t.t.assertz(ok, err.ok());
		}
	}
}

def test_overload1(t: JawaTester) {
	var err = ErrorGen.new();
	def m = JawaMethod.new(M, _, JawaTypes.VOID, null);

	t.t.assertz(false, JawaClasses.override(
		m([]),
		m([JawaTypes.INT]),
	err));

	t.t.assertz(false, JawaClasses.override(
		m([JawaTypes.INT]),
		m([]),
	err));

	t.t.assertz(false, JawaClasses.override(
		m([JawaTypes.INT, JawaTypes.INT]),
		m([JawaTypes.INT]),
	err));

	t.t.assertz(false, JawaClasses.override(
		m([JawaTypes.FLOAT]),
		m([JawaTypes.FLOAT, JawaTypes.INT]),
	err));
}

def test_overload2(t: JawaTester) {
 	def PARAM_TYPES = [JawaTypes.BYTE, JawaTypes.INT, JawaTypes.BYTE_ARRAY, JawaTypes.OBJECT];

	for (x in PARAM_TYPES) {
		for (y in PARAM_TYPES) {
			var err = ErrorGen.new();
			var mx = JawaMethod.new(M, [x], JawaTypes.VOID, null);
			var my = JawaMethod.new(M, [y], JawaTypes.VOID, null);
			var ok = x == y;
			t.t.assertz(ok, JawaClasses.override(mx, my, err));
		}
	}
}
