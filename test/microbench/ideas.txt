Wasm Microbenchmarks

Overview
-----------------

Microbenchmarks are useful for guiding specific optimizations that target individual
operations and for verifying that basic operations do not have any pathological
slowdowns. They can be used to verify that a newly-implemented optimization has its
intended effect. They are not meant to characterize the overall performance of a
system or make reliable comparative measurements or predictions about system performance.
They often answer small-scale questions such as "is it faster to use this specific
instruction sequence or that?"

Microbenchmarks should be comprehensive. All Wasm operations should at least have
microbenchmarks to verify that they don't have pathological slowdowns, or at least,
to quantify slowness as a feature graduates from functionally complete to fully optimized
over the course of engine development. In other words, microbenchmarks point at specific
performance problems that are fixable.

Microbenchmarks can also be used to quantify backend optimizations such as register
allocation, which is a cross-cutting concern, rather than tied to a specific set of
instructions.

Microbenchmarks can be used to explore the performance model of the underlying hardware.
For example, microbenchmarks can be written with specific amounts of ILP to quantify
the effect of superscalar hardware, or with certain branch patterns or memory access
patterns to study branch predictor performance or cache behavior.

Wasm GC:
- array create + scan
- array find
- manual array copy
- array.copy, array.fill, array.init
- vector calculation with structs representing vectors
- binary tree create + scan
- struct.new forms
- casts

Memory access:
- linear scan, rmw
- tiled scan
- small matrix multiply
- binary search
- random access
- manual memory copy, fill, init
- memory.copy, memory.fill, memory.init

SIMD:

