(module binary
  "\00\61\73\6d\01\00\00\00\01\8c\80\80\80\00\02\60"
  "\02\7f\7b\01\7e\60\01\7b\01\7e\03\b1\80\80\80\00"
  "\30\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01"
  "\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\05\83\80\80\80\00\01\00\01\06\96\80\80\80\00"
  "\01\7b\01\fd\0c\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\0b\07\99\8a\80\80\00\30\12\76\31"
  "\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65\5f\30"
  "\00\00\12\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c"
  "\61\6e\65\5f\31\00\01\12\76\31\32\38\2e\73\74\6f"
  "\72\65\38\5f\6c\61\6e\65\5f\32\00\02\12\76\31\32"
  "\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65\5f\33\00"
  "\03\12\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61"
  "\6e\65\5f\34\00\04\12\76\31\32\38\2e\73\74\6f\72"
  "\65\38\5f\6c\61\6e\65\5f\35\00\05\12\76\31\32\38"
  "\2e\73\74\6f\72\65\38\5f\6c\61\6e\65\5f\36\00\06"
  "\12\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e"
  "\65\5f\37\00\07\12\76\31\32\38\2e\73\74\6f\72\65"
  "\38\5f\6c\61\6e\65\5f\38\00\08\12\76\31\32\38\2e"
  "\73\74\6f\72\65\38\5f\6c\61\6e\65\5f\39\00\09\13"
  "\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65"
  "\5f\31\30\00\0a\13\76\31\32\38\2e\73\74\6f\72\65"
  "\38\5f\6c\61\6e\65\5f\31\31\00\0b\13\76\31\32\38"
  "\2e\73\74\6f\72\65\38\5f\6c\61\6e\65\5f\31\32\00"
  "\0c\13\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61"
  "\6e\65\5f\31\33\00\0d\13\76\31\32\38\2e\73\74\6f"
  "\72\65\38\5f\6c\61\6e\65\5f\31\34\00\0e\13\76\31"
  "\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65\5f\31"
  "\35\00\0f\1b\76\31\32\38\2e\73\74\6f\72\65\38\5f"
  "\6c\61\6e\65\5f\30\5f\6f\66\66\73\65\74\5f\30\00"
  "\10\1b\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61"
  "\6e\65\5f\31\5f\6f\66\66\73\65\74\5f\31\00\11\1b"
  "\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65"
  "\5f\32\5f\6f\66\66\73\65\74\5f\32\00\12\1b\76\31"
  "\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65\5f\33"
  "\5f\6f\66\66\73\65\74\5f\33\00\13\1b\76\31\32\38"
  "\2e\73\74\6f\72\65\38\5f\6c\61\6e\65\5f\34\5f\6f"
  "\66\66\73\65\74\5f\34\00\14\1b\76\31\32\38\2e\73"
  "\74\6f\72\65\38\5f\6c\61\6e\65\5f\35\5f\6f\66\66"
  "\73\65\74\5f\35\00\15\1b\76\31\32\38\2e\73\74\6f"
  "\72\65\38\5f\6c\61\6e\65\5f\36\5f\6f\66\66\73\65"
  "\74\5f\36\00\16\1b\76\31\32\38\2e\73\74\6f\72\65"
  "\38\5f\6c\61\6e\65\5f\37\5f\6f\66\66\73\65\74\5f"
  "\37\00\17\1b\76\31\32\38\2e\73\74\6f\72\65\38\5f"
  "\6c\61\6e\65\5f\38\5f\6f\66\66\73\65\74\5f\38\00"
  "\18\1b\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61"
  "\6e\65\5f\39\5f\6f\66\66\73\65\74\5f\39\00\19\1d"
  "\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65"
  "\5f\31\30\5f\6f\66\66\73\65\74\5f\31\30\00\1a\1d"
  "\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65"
  "\5f\31\31\5f\6f\66\66\73\65\74\5f\31\31\00\1b\1d"
  "\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65"
  "\5f\31\32\5f\6f\66\66\73\65\74\5f\31\32\00\1c\1d"
  "\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65"
  "\5f\31\33\5f\6f\66\66\73\65\74\5f\31\33\00\1d\1d"
  "\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65"
  "\5f\31\34\5f\6f\66\66\73\65\74\5f\31\34\00\1e\1d"
  "\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65"
  "\5f\31\35\5f\6f\66\66\73\65\74\5f\31\35\00\1f\1a"
  "\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65"
  "\5f\30\5f\61\6c\69\67\6e\5f\31\00\20\1a\76\31\32"
  "\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65\5f\31\5f"
  "\61\6c\69\67\6e\5f\31\00\21\1a\76\31\32\38\2e\73"
  "\74\6f\72\65\38\5f\6c\61\6e\65\5f\32\5f\61\6c\69"
  "\67\6e\5f\31\00\22\1a\76\31\32\38\2e\73\74\6f\72"
  "\65\38\5f\6c\61\6e\65\5f\33\5f\61\6c\69\67\6e\5f"
  "\31\00\23\1a\76\31\32\38\2e\73\74\6f\72\65\38\5f"
  "\6c\61\6e\65\5f\34\5f\61\6c\69\67\6e\5f\31\00\24"
  "\1a\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e"
  "\65\5f\35\5f\61\6c\69\67\6e\5f\31\00\25\1a\76\31"
  "\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65\5f\36"
  "\5f\61\6c\69\67\6e\5f\31\00\26\1a\76\31\32\38\2e"
  "\73\74\6f\72\65\38\5f\6c\61\6e\65\5f\37\5f\61\6c"
  "\69\67\6e\5f\31\00\27\1a\76\31\32\38\2e\73\74\6f"
  "\72\65\38\5f\6c\61\6e\65\5f\38\5f\61\6c\69\67\6e"
  "\5f\31\00\28\1a\76\31\32\38\2e\73\74\6f\72\65\38"
  "\5f\6c\61\6e\65\5f\39\5f\61\6c\69\67\6e\5f\31\00"
  "\29\1b\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61"
  "\6e\65\5f\31\30\5f\61\6c\69\67\6e\5f\31\00\2a\1b"
  "\76\31\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65"
  "\5f\31\31\5f\61\6c\69\67\6e\5f\31\00\2b\1b\76\31"
  "\32\38\2e\73\74\6f\72\65\38\5f\6c\61\6e\65\5f\31"
  "\32\5f\61\6c\69\67\6e\5f\31\00\2c\1b\76\31\32\38"
  "\2e\73\74\6f\72\65\38\5f\6c\61\6e\65\5f\31\33\5f"
  "\61\6c\69\67\6e\5f\31\00\2d\1b\76\31\32\38\2e\73"
  "\74\6f\72\65\38\5f\6c\61\6e\65\5f\31\34\5f\61\6c"
  "\69\67\6e\5f\31\00\2e\1b\76\31\32\38\2e\73\74\6f"
  "\72\65\38\5f\6c\61\6e\65\5f\31\35\5f\61\6c\69\67"
  "\6e\5f\31\00\2f\0a\91\8d\80\80\00\30\9e\80\80\80"
  "\00\01\01\7e\20\00\20\01\fd\58\00\00\00\20\00\29"
  "\03\00\21\02\20\00\23\00\fd\0b\04\00\20\02\0b\9e"
  "\80\80\80\00\01\01\7e\20\00\20\01\fd\58\00\00\01"
  "\20\00\29\03\00\21\02\20\00\23\00\fd\0b\04\00\20"
  "\02\0b\9e\80\80\80\00\01\01\7e\20\00\20\01\fd\58"
  "\00\00\02\20\00\29\03\00\21\02\20\00\23\00\fd\0b"
  "\04\00\20\02\0b\9e\80\80\80\00\01\01\7e\20\00\20"
  "\01\fd\58\00\00\03\20\00\29\03\00\21\02\20\00\23"
  "\00\fd\0b\04\00\20\02\0b\9e\80\80\80\00\01\01\7e"
  "\20\00\20\01\fd\58\00\00\04\20\00\29\03\00\21\02"
  "\20\00\23\00\fd\0b\04\00\20\02\0b\9e\80\80\80\00"
  "\01\01\7e\20\00\20\01\fd\58\00\00\05\20\00\29\03"
  "\00\21\02\20\00\23\00\fd\0b\04\00\20\02\0b\9e\80"
  "\80\80\00\01\01\7e\20\00\20\01\fd\58\00\00\06\20"
  "\00\29\03\00\21\02\20\00\23\00\fd\0b\04\00\20\02"
  "\0b\9e\80\80\80\00\01\01\7e\20\00\20\01\fd\58\00"
  "\00\07\20\00\29\03\00\21\02\20\00\23\00\fd\0b\04"
  "\00\20\02\0b\9e\80\80\80\00\01\01\7e\20\00\20\01"
  "\fd\58\00\00\08\20\00\29\03\00\21\02\20\00\23\00"
  "\fd\0b\04\00\20\02\0b\9e\80\80\80\00\01\01\7e\20"
  "\00\20\01\fd\58\00\00\09\20\00\29\03\00\21\02\20"
  "\00\23\00\fd\0b\04\00\20\02\0b\9e\80\80\80\00\01"
  "\01\7e\20\00\20\01\fd\58\00\00\0a\20\00\29\03\00"
  "\21\02\20\00\23\00\fd\0b\04\00\20\02\0b\9e\80\80"
  "\80\00\01\01\7e\20\00\20\01\fd\58\00\00\0b\20\00"
  "\29\03\00\21\02\20\00\23\00\fd\0b\04\00\20\02\0b"
  "\9e\80\80\80\00\01\01\7e\20\00\20\01\fd\58\00\00"
  "\0c\20\00\29\03\00\21\02\20\00\23\00\fd\0b\04\00"
  "\20\02\0b\9e\80\80\80\00\01\01\7e\20\00\20\01\fd"
  "\58\00\00\0d\20\00\29\03\00\21\02\20\00\23\00\fd"
  "\0b\04\00\20\02\0b\9e\80\80\80\00\01\01\7e\20\00"
  "\20\01\fd\58\00\00\0e\20\00\29\03\00\21\02\20\00"
  "\23\00\fd\0b\04\00\20\02\0b\9e\80\80\80\00\01\01"
  "\7e\20\00\20\01\fd\58\00\00\0f\20\00\29\03\00\21"
  "\02\20\00\23\00\fd\0b\04\00\20\02\0b\9e\80\80\80"
  "\00\01\01\7e\41\00\20\00\fd\58\00\00\00\41\00\29"
  "\03\00\21\01\41\00\23\00\fd\0b\04\00\20\01\0b\9e"
  "\80\80\80\00\01\01\7e\41\00\20\00\fd\58\00\01\01"
  "\41\00\29\03\01\21\01\41\00\23\00\fd\0b\04\01\20"
  "\01\0b\9e\80\80\80\00\01\01\7e\41\00\20\00\fd\58"
  "\00\02\02\41\00\29\03\02\21\01\41\00\23\00\fd\0b"
  "\04\02\20\01\0b\9e\80\80\80\00\01\01\7e\41\00\20"
  "\00\fd\58\00\03\03\41\00\29\03\03\21\01\41\00\23"
  "\00\fd\0b\04\03\20\01\0b\9e\80\80\80\00\01\01\7e"
  "\41\00\20\00\fd\58\00\04\04\41\00\29\03\04\21\01"
  "\41\00\23\00\fd\0b\04\04\20\01\0b\9e\80\80\80\00"
  "\01\01\7e\41\00\20\00\fd\58\00\05\05\41\00\29\03"
  "\05\21\01\41\00\23\00\fd\0b\04\05\20\01\0b\9e\80"
  "\80\80\00\01\01\7e\41\00\20\00\fd\58\00\06\06\41"
  "\00\29\03\06\21\01\41\00\23\00\fd\0b\04\06\20\01"
  "\0b\9e\80\80\80\00\01\01\7e\41\00\20\00\fd\58\00"
  "\07\07\41\00\29\03\07\21\01\41\00\23\00\fd\0b\04"
  "\07\20\01\0b\9e\80\80\80\00\01\01\7e\41\00\20\00"
  "\fd\58\00\08\08\41\00\29\03\08\21\01\41\00\23\00"
  "\fd\0b\04\08\20\01\0b\9e\80\80\80\00\01\01\7e\41"
  "\00\20\00\fd\58\00\09\09\41\00\29\03\09\21\01\41"
  "\00\23\00\fd\0b\04\09\20\01\0b\9e\80\80\80\00\01"
  "\01\7e\41\00\20\00\fd\58\00\0a\0a\41\00\29\03\0a"
  "\21\01\41\00\23\00\fd\0b\04\0a\20\01\0b\9e\80\80"
  "\80\00\01\01\7e\41\00\20\00\fd\58\00\0b\0b\41\00"
  "\29\03\0b\21\01\41\00\23\00\fd\0b\04\0b\20\01\0b"
  "\9e\80\80\80\00\01\01\7e\41\00\20\00\fd\58\00\0c"
  "\0c\41\00\29\03\0c\21\01\41\00\23\00\fd\0b\04\0c"
  "\20\01\0b\9e\80\80\80\00\01\01\7e\41\00\20\00\fd"
  "\58\00\0d\0d\41\00\29\03\0d\21\01\41\00\23\00\fd"
  "\0b\04\0d\20\01\0b\9e\80\80\80\00\01\01\7e\41\00"
  "\20\00\fd\58\00\0e\0e\41\00\29\03\0e\21\01\41\00"
  "\23\00\fd\0b\04\0e\20\01\0b\9e\80\80\80\00\01\01"
  "\7e\41\00\20\00\fd\58\00\0f\0f\41\00\29\03\0f\21"
  "\01\41\00\23\00\fd\0b\04\0f\20\01\0b\9e\80\80\80"
  "\00\01\01\7e\20\00\20\01\fd\58\00\00\00\20\00\29"
  "\03\00\21\02\41\00\23\00\fd\0b\04\00\20\02\0b\9e"
  "\80\80\80\00\01\01\7e\20\00\20\01\fd\58\00\00\01"
  "\20\00\29\03\00\21\02\41\00\23\00\fd\0b\04\01\20"
  "\02\0b\9e\80\80\80\00\01\01\7e\20\00\20\01\fd\58"
  "\00\00\02\20\00\29\03\00\21\02\41\00\23\00\fd\0b"
  "\04\02\20\02\0b\9e\80\80\80\00\01\01\7e\20\00\20"
  "\01\fd\58\00\00\03\20\00\29\03\00\21\02\41\00\23"
  "\00\fd\0b\04\03\20\02\0b\9e\80\80\80\00\01\01\7e"
  "\20\00\20\01\fd\58\00\00\04\20\00\29\03\00\21\02"
  "\41\00\23\00\fd\0b\04\04\20\02\0b\9e\80\80\80\00"
  "\01\01\7e\20\00\20\01\fd\58\00\00\05\20\00\29\03"
  "\00\21\02\41\00\23\00\fd\0b\04\05\20\02\0b\9e\80"
  "\80\80\00\01\01\7e\20\00\20\01\fd\58\00\00\06\20"
  "\00\29\03\00\21\02\41\00\23\00\fd\0b\04\06\20\02"
  "\0b\9e\80\80\80\00\01\01\7e\20\00\20\01\fd\58\00"
  "\00\07\20\00\29\03\00\21\02\41\00\23\00\fd\0b\04"
  "\07\20\02\0b\9e\80\80\80\00\01\01\7e\20\00\20\01"
  "\fd\58\00\00\08\20\00\29\03\00\21\02\41\00\23\00"
  "\fd\0b\04\08\20\02\0b\9e\80\80\80\00\01\01\7e\20"
  "\00\20\01\fd\58\00\00\09\20\00\29\03\00\21\02\41"
  "\00\23\00\fd\0b\04\09\20\02\0b\9e\80\80\80\00\01"
  "\01\7e\20\00\20\01\fd\58\00\00\0a\20\00\29\03\00"
  "\21\02\41\00\23\00\fd\0b\04\0a\20\02\0b\9e\80\80"
  "\80\00\01\01\7e\20\00\20\01\fd\58\00\00\0b\20\00"
  "\29\03\00\21\02\41\00\23\00\fd\0b\04\0b\20\02\0b"
  "\9e\80\80\80\00\01\01\7e\20\00\20\01\fd\58\00\00"
  "\0c\20\00\29\03\00\21\02\41\00\23\00\fd\0b\04\0c"
  "\20\02\0b\9e\80\80\80\00\01\01\7e\20\00\20\01\fd"
  "\58\00\00\0d\20\00\29\03\00\21\02\41\00\23\00\fd"
  "\0b\04\0d\20\02\0b\9e\80\80\80\00\01\01\7e\20\00"
  "\20\01\fd\58\00\00\0e\20\00\29\03\00\21\02\41\00"
  "\23\00\fd\0b\04\0e\20\02\0b\9e\80\80\80\00\01\01"
  "\7e\20\00\20\01\fd\58\00\00\0f\20\00\29\03\00\21"
  "\02\41\00\23\00\fd\0b\04\0f\20\02\0b"
)
(assert_return
  (invoke "v128.store8_lane_0"
    (i32.const 0x0)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (i64.const 0x0)
)
(assert_return
  (invoke "v128.store8_lane_1"
    (i32.const 0x1)
    (v128.const i32x4 0x100 0x0 0x0 0x0)
  )
  (i64.const 0x1)
)
(assert_return
  (invoke "v128.store8_lane_2"
    (i32.const 0x2)
    (v128.const i32x4 0x2_0000 0x0 0x0 0x0)
  )
  (i64.const 0x2)
)
(assert_return
  (invoke "v128.store8_lane_3"
    (i32.const 0x3)
    (v128.const i32x4 0x300_0000 0x0 0x0 0x0)
  )
  (i64.const 0x3)
)
(assert_return
  (invoke "v128.store8_lane_4"
    (i32.const 0x4)
    (v128.const i32x4 0x0 0x4 0x0 0x0)
  )
  (i64.const 0x4)
)
(assert_return
  (invoke "v128.store8_lane_5"
    (i32.const 0x5)
    (v128.const i32x4 0x0 0x500 0x0 0x0)
  )
  (i64.const 0x5)
)
(assert_return
  (invoke "v128.store8_lane_6"
    (i32.const 0x6)
    (v128.const i32x4 0x0 0x6_0000 0x0 0x0)
  )
  (i64.const 0x6)
)
(assert_return
  (invoke "v128.store8_lane_7"
    (i32.const 0x7)
    (v128.const i32x4 0x0 0x700_0000 0x0 0x0)
  )
  (i64.const 0x7)
)
(assert_return
  (invoke "v128.store8_lane_8"
    (i32.const 0x8)
    (v128.const i32x4 0x0 0x0 0x8 0x0)
  )
  (i64.const 0x8)
)
(assert_return
  (invoke "v128.store8_lane_9"
    (i32.const 0x9)
    (v128.const i32x4 0x0 0x0 0x900 0x0)
  )
  (i64.const 0x9)
)
(assert_return
  (invoke "v128.store8_lane_10"
    (i32.const 0xa)
    (v128.const i32x4 0x0 0x0 0xa_0000 0x0)
  )
  (i64.const 0xa)
)
(assert_return
  (invoke "v128.store8_lane_11"
    (i32.const 0xb)
    (v128.const i32x4 0x0 0x0 0xb00_0000 0x0)
  )
  (i64.const 0xb)
)
(assert_return
  (invoke "v128.store8_lane_12"
    (i32.const 0xc)
    (v128.const i32x4 0x0 0x0 0x0 0xc)
  )
  (i64.const 0xc)
)
(assert_return
  (invoke "v128.store8_lane_13"
    (i32.const 0xd)
    (v128.const i32x4 0x0 0x0 0x0 0xd00)
  )
  (i64.const 0xd)
)
(assert_return
  (invoke "v128.store8_lane_14"
    (i32.const 0xe)
    (v128.const i32x4 0x0 0x0 0x0 0xe_0000)
  )
  (i64.const 0xe)
)
(assert_return
  (invoke "v128.store8_lane_15"
    (i32.const 0xf)
    (v128.const i32x4 0x0 0x0 0x0 0xf00_0000)
  )
  (i64.const 0xf)
)
(assert_return
  (invoke "v128.store8_lane_0_offset_0" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (i64.const 0x0)
)
(assert_return
  (invoke "v128.store8_lane_1_offset_1" (v128.const i32x4 0x100 0x0 0x0 0x0))
  (i64.const 0x1)
)
(assert_return
  (invoke "v128.store8_lane_2_offset_2" (v128.const i32x4 0x2_0000 0x0 0x0 0x0))
  (i64.const 0x2)
)
(assert_return
  (invoke "v128.store8_lane_3_offset_3"
    (v128.const i32x4 0x300_0000 0x0 0x0 0x0)
  )
  (i64.const 0x3)
)
(assert_return
  (invoke "v128.store8_lane_4_offset_4" (v128.const i32x4 0x0 0x4 0x0 0x0))
  (i64.const 0x4)
)
(assert_return
  (invoke "v128.store8_lane_5_offset_5" (v128.const i32x4 0x0 0x500 0x0 0x0))
  (i64.const 0x5)
)
(assert_return
  (invoke "v128.store8_lane_6_offset_6" (v128.const i32x4 0x0 0x6_0000 0x0 0x0))
  (i64.const 0x6)
)
(assert_return
  (invoke "v128.store8_lane_7_offset_7"
    (v128.const i32x4 0x0 0x700_0000 0x0 0x0)
  )
  (i64.const 0x7)
)
(assert_return
  (invoke "v128.store8_lane_8_offset_8" (v128.const i32x4 0x0 0x0 0x8 0x0))
  (i64.const 0x8)
)
(assert_return
  (invoke "v128.store8_lane_9_offset_9" (v128.const i32x4 0x0 0x0 0x900 0x0))
  (i64.const 0x9)
)
(assert_return
  (invoke "v128.store8_lane_10_offset_10"
    (v128.const i32x4 0x0 0x0 0xa_0000 0x0)
  )
  (i64.const 0xa)
)
(assert_return
  (invoke "v128.store8_lane_11_offset_11"
    (v128.const i32x4 0x0 0x0 0xb00_0000 0x0)
  )
  (i64.const 0xb)
)
(assert_return
  (invoke "v128.store8_lane_12_offset_12" (v128.const i32x4 0x0 0x0 0x0 0xc))
  (i64.const 0xc)
)
(assert_return
  (invoke "v128.store8_lane_13_offset_13" (v128.const i32x4 0x0 0x0 0x0 0xd00))
  (i64.const 0xd)
)
(assert_return
  (invoke "v128.store8_lane_14_offset_14"
    (v128.const i32x4 0x0 0x0 0x0 0xe_0000)
  )
  (i64.const 0xe)
)
(assert_return
  (invoke "v128.store8_lane_15_offset_15"
    (v128.const i32x4 0x0 0x0 0x0 0xf00_0000)
  )
  (i64.const 0xf)
)
(assert_return
  (invoke "v128.store8_lane_0_align_1"
    (i32.const 0x0)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (i64.const 0x0)
)
(assert_return
  (invoke "v128.store8_lane_1_align_1"
    (i32.const 0x1)
    (v128.const i32x4 0x100 0x0 0x0 0x0)
  )
  (i64.const 0x1)
)
(assert_return
  (invoke "v128.store8_lane_2_align_1"
    (i32.const 0x2)
    (v128.const i32x4 0x2_0000 0x0 0x0 0x0)
  )
  (i64.const 0x2)
)
(assert_return
  (invoke "v128.store8_lane_3_align_1"
    (i32.const 0x3)
    (v128.const i32x4 0x300_0000 0x0 0x0 0x0)
  )
  (i64.const 0x3)
)
(assert_return
  (invoke "v128.store8_lane_4_align_1"
    (i32.const 0x4)
    (v128.const i32x4 0x0 0x4 0x0 0x0)
  )
  (i64.const 0x4)
)
(assert_return
  (invoke "v128.store8_lane_5_align_1"
    (i32.const 0x5)
    (v128.const i32x4 0x0 0x500 0x0 0x0)
  )
  (i64.const 0x5)
)
(assert_return
  (invoke "v128.store8_lane_6_align_1"
    (i32.const 0x6)
    (v128.const i32x4 0x0 0x6_0000 0x0 0x0)
  )
  (i64.const 0x6)
)
(assert_return
  (invoke "v128.store8_lane_7_align_1"
    (i32.const 0x7)
    (v128.const i32x4 0x0 0x700_0000 0x0 0x0)
  )
  (i64.const 0x7)
)
(assert_return
  (invoke "v128.store8_lane_8_align_1"
    (i32.const 0x8)
    (v128.const i32x4 0x0 0x0 0x8 0x0)
  )
  (i64.const 0x8)
)
(assert_return
  (invoke "v128.store8_lane_9_align_1"
    (i32.const 0x9)
    (v128.const i32x4 0x0 0x0 0x900 0x0)
  )
  (i64.const 0x9)
)
(assert_return
  (invoke "v128.store8_lane_10_align_1"
    (i32.const 0xa)
    (v128.const i32x4 0x0 0x0 0xa_0000 0x0)
  )
  (i64.const 0xa)
)
(assert_return
  (invoke "v128.store8_lane_11_align_1"
    (i32.const 0xb)
    (v128.const i32x4 0x0 0x0 0xb00_0000 0x0)
  )
  (i64.const 0xb)
)
(assert_return
  (invoke "v128.store8_lane_12_align_1"
    (i32.const 0xc)
    (v128.const i32x4 0x0 0x0 0x0 0xc)
  )
  (i64.const 0xc)
)
(assert_return
  (invoke "v128.store8_lane_13_align_1"
    (i32.const 0xd)
    (v128.const i32x4 0x0 0x0 0x0 0xd00)
  )
  (i64.const 0xd)
)
(assert_return
  (invoke "v128.store8_lane_14_align_1"
    (i32.const 0xe)
    (v128.const i32x4 0x0 0x0 0x0 0xe_0000)
  )
  (i64.const 0xe)
)
(assert_return
  (invoke "v128.store8_lane_15_align_1"
    (i32.const 0xf)
    (v128.const i32x4 0x0 0x0 0x0 0xf00_0000)
  )
  (i64.const 0xf)
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7b\01\7b\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\91\80\80\80\00\01\8b\80\80\80"
    "\00\00\20\00\41\00\fd\58\00\00\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7b\01\7b\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\91\80\80\80\00\01\8b\80\80\80"
    "\00\00\41\00\20\00\fd\58\00\00\10\0b"
  )
  "invalid lane index"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7b\01\7b\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\91\80\80\80\00\01\8b\80\80\80"
    "\00\00\41\00\20\00\fd\58\01\00\00\0b"
  )
  "alignment must not be larger than natural"
)
