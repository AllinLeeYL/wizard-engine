(module binary
  "\00\61\73\6d\01\00\00\00\01\8a\80\80\80\00\02\60"
  "\01\7f\01\7b\60\00\01\7b\03\90\80\80\80\00\0f\00"
  "\00\01\01\00\00\00\00\00\00\00\00\00\00\00\05\83"
  "\80\80\80\00\01\00\01\07\b6\83\80\80\00\0f\10\76"
  "\31\32\38\2e\6c\6f\61\64\33\32\5f\7a\65\72\6f\00"
  "\00\10\76\31\32\38\2e\6c\6f\61\64\36\34\5f\7a\65"
  "\72\6f\00\01\17\76\31\32\38\2e\6c\6f\61\64\33\32"
  "\5f\7a\65\72\6f\5f\63\6f\6e\73\74\30\00\02\17\76"
  "\31\32\38\2e\6c\6f\61\64\36\34\5f\7a\65\72\6f\5f"
  "\63\6f\6e\73\74\38\00\03\18\76\31\32\38\2e\6c\6f"
  "\61\64\33\32\5f\7a\65\72\6f\5f\6f\66\66\73\65\74"
  "\30\00\04\17\76\31\32\38\2e\6c\6f\61\64\33\32\5f"
  "\7a\65\72\6f\5f\61\6c\69\67\6e\31\00\05\1f\76\31"
  "\32\38\2e\6c\6f\61\64\33\32\5f\7a\65\72\6f\5f\6f"
  "\66\66\73\65\74\30\5f\61\6c\69\67\6e\31\00\06\1f"
  "\76\31\32\38\2e\6c\6f\61\64\33\32\5f\7a\65\72\6f"
  "\5f\6f\66\66\73\65\74\31\5f\61\6c\69\67\6e\31\00"
  "\07\20\76\31\32\38\2e\6c\6f\61\64\33\32\5f\7a\65"
  "\72\6f\5f\6f\66\66\73\65\74\31\30\5f\61\6c\69\67"
  "\6e\34\00\08\18\76\31\32\38\2e\6c\6f\61\64\36\34"
  "\5f\7a\65\72\6f\5f\6f\66\66\73\65\74\30\00\09\17"
  "\76\31\32\38\2e\6c\6f\61\64\36\34\5f\7a\65\72\6f"
  "\5f\61\6c\69\67\6e\31\00\0a\1f\76\31\32\38\2e\6c"
  "\6f\61\64\36\34\5f\7a\65\72\6f\5f\6f\66\66\73\65"
  "\74\30\5f\61\6c\69\67\6e\31\00\0b\1f\76\31\32\38"
  "\2e\6c\6f\61\64\36\34\5f\7a\65\72\6f\5f\6f\66\66"
  "\73\65\74\31\5f\61\6c\69\67\6e\31\00\0c\20\76\31"
  "\32\38\2e\6c\6f\61\64\36\34\5f\7a\65\72\6f\5f\6f"
  "\66\66\73\65\74\31\30\5f\61\6c\69\67\6e\34\00\0d"
  "\20\76\31\32\38\2e\6c\6f\61\64\36\34\5f\7a\65\72"
  "\6f\5f\6f\66\66\73\65\74\32\30\5f\61\6c\69\67\6e"
  "\38\00\0e\0a\c4\81\80\80\00\0f\88\80\80\80\00\00"
  "\20\00\fd\5c\02\00\0b\88\80\80\80\00\00\20\00\fd"
  "\5d\03\00\0b\88\80\80\80\00\00\41\00\fd\5c\02\00"
  "\0b\88\80\80\80\00\00\41\08\fd\5d\03\00\0b\88\80"
  "\80\80\00\00\20\00\fd\5c\02\00\0b\88\80\80\80\00"
  "\00\20\00\fd\5c\00\00\0b\88\80\80\80\00\00\20\00"
  "\fd\5c\00\00\0b\88\80\80\80\00\00\20\00\fd\5c\00"
  "\01\0b\88\80\80\80\00\00\20\00\fd\5c\02\0a\0b\88"
  "\80\80\80\00\00\20\00\fd\5d\03\00\0b\88\80\80\80"
  "\00\00\20\00\fd\5d\00\00\0b\88\80\80\80\00\00\20"
  "\00\fd\5d\00\00\0b\88\80\80\80\00\00\20\00\fd\5d"
  "\00\01\0b\88\80\80\80\00\00\20\00\fd\5d\02\0a\0b"
  "\88\80\80\80\00\00\20\00\fd\5d\03\14\0b\0b\b7\80"
  "\80\80\00\02\00\41\00\0b\1a\00\01\02\03\04\05\06"
  "\07\08\09\0a\0b\0c\0d\0e\0f\80\81\82\83\84\85\86"
  "\87\88\89\00\41\f0\ff\03\0b\10\0a\0b\0c\0d\0e\0f"
  "\80\81\82\83\84\85\86\87\88\89"
)
(assert_return
  (invoke "v128.load32_zero" (i32.const 0x0))
  (v128.const i32x4 0x302_0100 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load64_zero" (i32.const 0x0))
  (v128.const i64x2 0x706_0504_0302_0100 0x0)
)
(assert_return
  (invoke "v128.load32_zero" (i32.const 0xa))
  (v128.const i32x4 0xd0c_0b0a 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load64_zero" (i32.const 0xa))
  (v128.const i64x2 0x8180_0f0e_0d0c_0b0a 0x0)
)
(assert_return
  (invoke "v128.load32_zero" (i32.const 0x14))
  (v128.const i32x4 0x8786_8584 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load64_zero" (i32.const 0x14))
  (v128.const i64x2 0x8988_8786_8584 0x0)
)
(assert_return
  (invoke "v128.load32_zero_const0")
  (v128.const i32x4 0x302_0100 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load64_zero_const8")
  (v128.const i64x2 0xf0e_0d0c_0b0a_0908 0x0)
)
(assert_return
  (invoke "v128.load32_zero_offset0" (i32.const 0x0))
  (v128.const i32x4 0x302_0100 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load32_zero_align1" (i32.const 0x1))
  (v128.const i32x4 0x403_0201 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load32_zero_offset0_align1" (i32.const 0x2))
  (v128.const i32x4 0x504_0302 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load32_zero_offset10_align4" (i32.const 0x3))
  (v128.const i32x4 0x800f_0e0d 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load64_zero_offset0" (i32.const 0x0))
  (v128.const i64x2 0x706_0504_0302_0100 0x0)
)
(assert_return
  (invoke "v128.load64_zero_align1" (i32.const 0x1))
  (v128.const i64x2 0x807_0605_0403_0201 0x0)
)
(assert_return
  (invoke "v128.load64_zero_offset0_align1" (i32.const 0x2))
  (v128.const i64x2 0x908_0706_0504_0302 0x0)
)
(assert_return
  (invoke "v128.load64_zero_offset10_align4" (i32.const 0x3))
  (v128.const i64x2 0x8483_8281_800f_0e0d 0x0)
)
(assert_return
  (invoke "v128.load64_zero_offset20_align8" (i32.const 0x4))
  (v128.const i64x2 0x8988 0x0)
)
(assert_trap
  (invoke "v128.load32_zero" (i32.const 0xffff_ffff))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load64_zero" (i32.const 0xffff_ffff))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load32_zero_offset1_align1" (i32.const 0xffff_ffff))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load64_zero_offset1_align1" (i32.const 0xffff_ffff))
  "out of bounds memory access"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\91\80\80\80\00\01\8b\80\80\80\00"
    "\00\43\00\00\00\00\fd\5c\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\91\80\80\80\00\01\8b\80\80\80\00"
    "\00\43\00\00\00\00\fd\5d\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\8c\80\80\80\00\01\86\80\80\80\00"
    "\00\fd\5c\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\8c\80\80\80\00\01\86\80\80\80\00"
    "\00\fd\5d\03\00\0b"
  )
  "type mismatch"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\8d\80\80\80\00\03\60"
  "\00\01\7b\60\00\01\7f\60\00\01\7e\03\87\80\80\80"
  "\00\06\00\00\00\00\01\02\05\83\80\80\80\00\01\00"
  "\01\07\cb\81\80\80\00\06\19\76\31\32\38\2e\6c\6f"
  "\61\64\33\32\5f\7a\65\72\6f\2d\69\6e\2d\62\6c\6f"
  "\63\6b\00\00\19\76\31\32\38\2e\6c\6f\61\64\36\34"
  "\5f\7a\65\72\6f\2d\69\6e\2d\62\6c\6f\63\6b\00\01"
  "\1c\76\31\32\38\2e\6c\6f\61\64\33\32\5f\7a\65\72"
  "\6f\2d\61\73\2d\62\72\2d\76\61\6c\75\65\00\02\1c"
  "\76\31\32\38\2e\6c\6f\61\64\36\34\5f\7a\65\72\6f"
  "\2d\61\73\2d\62\72\2d\76\61\6c\75\65\00\03\27\76"
  "\31\32\38\2e\6c\6f\61\64\33\32\5f\7a\65\72\6f\2d"
  "\65\78\74\72\61\63\74\5f\6c\61\6e\65\5f\73\2d\6f"
  "\70\65\72\61\6e\64\00\04\27\76\31\32\38\2e\6c\6f"
  "\61\64\36\34\5f\7a\65\72\6f\2d\65\78\74\72\61\63"
  "\74\5f\6c\61\6e\65\5f\73\2d\6f\70\65\72\61\6e\64"
  "\00\05\0a\eb\80\80\80\00\06\8e\80\80\80\00\00\02"
  "\7b\02\7b\41\00\fd\5c\02\00\0b\0b\0b\8e\80\80\80"
  "\00\00\02\7b\02\7b\41\01\fd\5d\03\00\0b\0b\0b\8d"
  "\80\80\80\00\00\02\7b\41\06\fd\5c\02\00\0c\00\0b"
  "\0b\8d\80\80\80\00\00\02\7b\41\07\fd\5d\03\00\0c"
  "\00\0b\0b\8b\80\80\80\00\00\41\0c\fd\5c\02\00\fd"
  "\1b\00\0b\8b\80\80\80\00\00\41\0d\fd\5d\03\00\fd"
  "\1d\00\0b\0b\a0\80\80\80\00\01\00\41\00\0b\1a\00"
  "\01\02\03\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f\80"
  "\81\82\83\84\85\86\87\88\89"
)
(assert_return
  (invoke "v128.load32_zero-in-block")
  (v128.const i32x4 0x302_0100 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load64_zero-in-block")
  (v128.const i64x2 0x807_0605_0403_0201 0x0)
)
(assert_return
  (invoke "v128.load32_zero-as-br-value")
  (v128.const i32x4 0x908_0706 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load64_zero-as-br-value")
  (v128.const i64x2 0xe0d_0c0b_0a09_0807 0x0)
)
(assert_return
  (invoke "v128.load32_zero-extract_lane_s-operand")
  (i32.const 0xf0e_0d0c)
)
(assert_return
  (invoke "v128.load64_zero-extract_lane_s-operand")
  (i64.const 0x8483_8281_800f_0e0d)
)
