(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\89\80\80\80\00\08\00\00\00\00\00\00"
  "\00\00\05\83\80\80\80\00\01\00\01\07\a1\81\80\80"
  "\00\08\10\76\31\32\38\2e\73\74\6f\72\65\5f\69\38"
  "\78\31\36\00\00\10\76\31\32\38\2e\73\74\6f\72\65"
  "\5f\69\31\36\78\38\00\01\12\76\31\32\38\2e\73\74"
  "\6f\72\65\5f\69\31\36\78\38\5f\32\00\02\12\76\31"
  "\32\38\2e\73\74\6f\72\65\5f\69\31\36\78\38\5f\33"
  "\00\03\10\76\31\32\38\2e\73\74\6f\72\65\5f\69\33"
  "\32\78\34\00\04\12\76\31\32\38\2e\73\74\6f\72\65"
  "\5f\69\33\32\78\34\5f\32\00\05\12\76\31\32\38\2e"
  "\73\74\6f\72\65\5f\69\33\32\78\34\5f\33\00\06\10"
  "\76\31\32\38\2e\73\74\6f\72\65\5f\66\33\32\78\34"
  "\00\07\0a\a9\82\80\80\00\08\a0\80\80\80\00\00\41"
  "\00\fd\0c\00\01\02\03\04\05\06\07\08\09\0a\0b\0c"
  "\0d\0e\0f\fd\0b\04\00\41\00\fd\00\04\00\0b\a0\80"
  "\80\80\00\00\41\00\fd\0c\00\00\01\00\02\00\03\00"
  "\04\00\05\00\06\00\07\00\fd\0b\04\00\41\00\fd\00"
  "\04\00\0b\a0\80\80\80\00\00\41\00\fd\0c\39\30\39"
  "\30\39\30\39\30\39\30\39\30\39\30\39\30\fd\0b\04"
  "\00\41\00\fd\00\04\00\0b\a0\80\80\80\00\00\41\00"
  "\fd\0c\34\12\34\12\34\12\34\12\34\12\34\12\34\12"
  "\34\12\fd\0b\04\00\41\00\fd\00\04\00\0b\a0\80\80"
  "\80\00\00\41\00\fd\0c\00\00\00\00\01\00\00\00\02"
  "\00\00\00\03\00\00\00\fd\0b\04\00\41\00\fd\00\04"
  "\00\0b\a0\80\80\80\00\00\41\00\fd\0c\15\cd\5b\07"
  "\15\cd\5b\07\15\cd\5b\07\15\cd\5b\07\fd\0b\04\00"
  "\41\00\fd\00\04\00\0b\a0\80\80\80\00\00\41\00\fd"
  "\0c\78\56\34\12\78\56\34\12\78\56\34\12\78\56\34"
  "\12\fd\0b\04\00\41\00\fd\00\04\00\0b\a0\80\80\80"
  "\00\00\41\00\fd\0c\00\00\00\00\00\00\80\3f\00\00"
  "\00\40\00\00\40\40\fd\0b\04\00\41\00\fd\00\04\00"
  "\0b"
)
(assert_return
  (invoke "v128.store_i8x16")
  (v128.const i8x16
    0x0
    0x1
    0x2
    0x3
    0x4
    0x5
    0x6
    0x7
    0x8
    0x9
    0xa
    0xb
    0xc
    0xd
    0xe
    0xf
  )
)
(assert_return
  (invoke "v128.store_i16x8")
  (v128.const i16x8 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7)
)
(assert_return
  (invoke "v128.store_i16x8_2")
  (v128.const i16x8 0x3039 0x3039 0x3039 0x3039 0x3039 0x3039 0x3039 0x3039)
)
(assert_return
  (invoke "v128.store_i16x8_3")
  (v128.const i16x8 0x1234 0x1234 0x1234 0x1234 0x1234 0x1234 0x1234 0x1234)
)
(assert_return (invoke "v128.store_i32x4") (v128.const i32x4 0x0 0x1 0x2 0x3))
(assert_return
  (invoke "v128.store_i32x4_2")
  (v128.const i32x4 0x75b_cd15 0x75b_cd15 0x75b_cd15 0x75b_cd15)
)
(assert_return
  (invoke "v128.store_i32x4_3")
  (v128.const i32x4 0x1234_5678 0x1234_5678 0x1234_5678 0x1234_5678)
)
(assert_return
  (invoke "v128.store_f32x4")
  (v128.const f32x4 0x0p+0 0x1p+0 0x1p+1 0x1.8p+1)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\8a\80\80\80\00\09\00\00\00\00\00\00\00"
  "\00\00\05\83\80\80\80\00\01\00\01\07\97\81\80\80"
  "\00\09\0e\61\73\2d\62\6c\6f\63\6b\2d\76\61\6c\75"
  "\65\00\00\0d\61\73\2d\6c\6f\6f\70\2d\76\61\6c\75"
  "\65\00\01\0b\61\73\2d\62\72\2d\76\61\6c\75\65\00"
  "\02\0e\61\73\2d\62\72\5f\69\66\2d\76\61\6c\75\65"
  "\00\03\13\61\73\2d\62\72\5f\69\66\2d\76\61\6c\75"
  "\65\2d\63\6f\6e\64\00\04\11\61\73\2d\62\72\5f\74"
  "\61\62\6c\65\2d\76\61\6c\75\65\00\05\0f\61\73\2d"
  "\72\65\74\75\72\6e\2d\76\61\6c\75\65\00\06\0a\61"
  "\73\2d\69\66\2d\74\68\65\6e\00\07\0a\61\73\2d\69"
  "\66\2d\65\6c\73\65\00\08\0a\c5\82\80\80\00\09\9d"
  "\80\80\80\00\00\02\40\41\00\fd\0c\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\fd\0b\04\00\0b"
  "\0b\9d\80\80\80\00\00\03\40\41\00\fd\0c\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\fd\0b\04"
  "\00\0b\0b\9f\80\80\80\00\00\02\40\41\00\fd\0c\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\fd"
  "\0b\04\00\0c\00\0b\0b\a1\80\80\80\00\00\02\40\41"
  "\00\fd\0c\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\fd\0b\04\00\41\01\0d\00\0b\0b\a1\80\80"
  "\80\00\00\02\40\41\06\41\00\fd\0c\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\fd\0b\04\00\0d"
  "\00\0b\0b\a2\80\80\80\00\00\02\40\41\00\fd\0c\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\fd"
  "\0b\04\00\41\01\0e\00\00\0b\0b\9b\80\80\80\00\00"
  "\41\00\fd\0c\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\fd\0b\04\00\0f\0b\9f\80\80\80\00\00"
  "\41\01\04\40\41\00\fd\0c\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\fd\0b\04\00\0b\0b\a0\80"
  "\80\80\00\00\41\00\04\40\05\41\00\fd\0c\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\fd\0b\04"
  "\00\0b\0b"
)
(assert_return (invoke "as-block-value"))
(assert_return (invoke "as-loop-value"))
(assert_return (invoke "as-br-value"))
(assert_return (invoke "as-br_if-value"))
(assert_return (invoke "as-br_if-value-cond"))
(assert_return (invoke "as-br_table-value"))
(assert_return (invoke "as-return-value"))
(assert_return (invoke "as-if-then"))
(assert_return (invoke "as-if-else"))
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\a3\80\80\80\00\01\9d\80\80\80\00\00"
    "\43\00\00\00\00\fd\0c\00\00\00\00\00\00\00\00\00"
    "\00\00\00\00\00\00\00\fd\0b\04\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\93\80\80\80\00\01\8d\80\80\80\00\01"
    "\01\7b\02\40\fd\0b\04\00\0d\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\01\0a\a0\80\80\80\00\01\9a\80\80\80\00"
    "\00\41\00\fd\0c\00\00\00\00\00\00\00\00\00\00\00"
    "\00\00\00\00\00\fd\0b\04\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\00\0a\9e\80\80\80\00\01\98\80\80\80\00\00"
    "\fd\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
    "\00\00\fd\0b\04\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\00\0a\8e\80\80\80\00\01\88\80\80\80\00\00"
    "\41\00\fd\0b\04\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\00\0a\8c\80\80\80\00\01\86\80\80\80\00\00"
    "\fd\0b\04\00\0b"
  )
  "type mismatch"
)
