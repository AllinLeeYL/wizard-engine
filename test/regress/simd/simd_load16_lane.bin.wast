(module binary
  "\00\61\73\6d\01\00\00\00\01\8c\80\80\80\00\02\60"
  "\02\7f\7b\01\7b\60\01\7b\01\7b\03\a1\80\80\80\00"
  "\20\00\00\00\00\00\00\00\00\01\01\01\01\01\01\01"
  "\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\05\83\80\80\80\00\01\00\01\07\e9\86\80\80\00"
  "\20\12\76\31\32\38\2e\6c\6f\61\64\31\36\5f\6c\61"
  "\6e\65\5f\30\00\00\12\76\31\32\38\2e\6c\6f\61\64"
  "\31\36\5f\6c\61\6e\65\5f\31\00\01\12\76\31\32\38"
  "\2e\6c\6f\61\64\31\36\5f\6c\61\6e\65\5f\32\00\02"
  "\12\76\31\32\38\2e\6c\6f\61\64\31\36\5f\6c\61\6e"
  "\65\5f\33\00\03\12\76\31\32\38\2e\6c\6f\61\64\31"
  "\36\5f\6c\61\6e\65\5f\34\00\04\12\76\31\32\38\2e"
  "\6c\6f\61\64\31\36\5f\6c\61\6e\65\5f\35\00\05\12"
  "\76\31\32\38\2e\6c\6f\61\64\31\36\5f\6c\61\6e\65"
  "\5f\36\00\06\12\76\31\32\38\2e\6c\6f\61\64\31\36"
  "\5f\6c\61\6e\65\5f\37\00\07\1b\76\31\32\38\2e\6c"
  "\6f\61\64\31\36\5f\6c\61\6e\65\5f\30\5f\6f\66\66"
  "\73\65\74\5f\30\00\08\1b\76\31\32\38\2e\6c\6f\61"
  "\64\31\36\5f\6c\61\6e\65\5f\31\5f\6f\66\66\73\65"
  "\74\5f\31\00\09\1b\76\31\32\38\2e\6c\6f\61\64\31"
  "\36\5f\6c\61\6e\65\5f\32\5f\6f\66\66\73\65\74\5f"
  "\32\00\0a\1b\76\31\32\38\2e\6c\6f\61\64\31\36\5f"
  "\6c\61\6e\65\5f\33\5f\6f\66\66\73\65\74\5f\33\00"
  "\0b\1b\76\31\32\38\2e\6c\6f\61\64\31\36\5f\6c\61"
  "\6e\65\5f\34\5f\6f\66\66\73\65\74\5f\34\00\0c\1b"
  "\76\31\32\38\2e\6c\6f\61\64\31\36\5f\6c\61\6e\65"
  "\5f\35\5f\6f\66\66\73\65\74\5f\35\00\0d\1b\76\31"
  "\32\38\2e\6c\6f\61\64\31\36\5f\6c\61\6e\65\5f\36"
  "\5f\6f\66\66\73\65\74\5f\36\00\0e\1b\76\31\32\38"
  "\2e\6c\6f\61\64\31\36\5f\6c\61\6e\65\5f\37\5f\6f"
  "\66\66\73\65\74\5f\37\00\0f\1a\76\31\32\38\2e\6c"
  "\6f\61\64\31\36\5f\6c\61\6e\65\5f\30\5f\61\6c\69"
  "\67\6e\5f\31\00\10\1a\76\31\32\38\2e\6c\6f\61\64"
  "\31\36\5f\6c\61\6e\65\5f\30\5f\61\6c\69\67\6e\5f"
  "\32\00\11\1a\76\31\32\38\2e\6c\6f\61\64\31\36\5f"
  "\6c\61\6e\65\5f\31\5f\61\6c\69\67\6e\5f\31\00\12"
  "\1a\76\31\32\38\2e\6c\6f\61\64\31\36\5f\6c\61\6e"
  "\65\5f\31\5f\61\6c\69\67\6e\5f\32\00\13\1a\76\31"
  "\32\38\2e\6c\6f\61\64\31\36\5f\6c\61\6e\65\5f\32"
  "\5f\61\6c\69\67\6e\5f\31\00\14\1a\76\31\32\38\2e"
  "\6c\6f\61\64\31\36\5f\6c\61\6e\65\5f\32\5f\61\6c"
  "\69\67\6e\5f\32\00\15\1a\76\31\32\38\2e\6c\6f\61"
  "\64\31\36\5f\6c\61\6e\65\5f\33\5f\61\6c\69\67\6e"
  "\5f\31\00\16\1a\76\31\32\38\2e\6c\6f\61\64\31\36"
  "\5f\6c\61\6e\65\5f\33\5f\61\6c\69\67\6e\5f\32\00"
  "\17\1a\76\31\32\38\2e\6c\6f\61\64\31\36\5f\6c\61"
  "\6e\65\5f\34\5f\61\6c\69\67\6e\5f\31\00\18\1a\76"
  "\31\32\38\2e\6c\6f\61\64\31\36\5f\6c\61\6e\65\5f"
  "\34\5f\61\6c\69\67\6e\5f\32\00\19\1a\76\31\32\38"
  "\2e\6c\6f\61\64\31\36\5f\6c\61\6e\65\5f\35\5f\61"
  "\6c\69\67\6e\5f\31\00\1a\1a\76\31\32\38\2e\6c\6f"
  "\61\64\31\36\5f\6c\61\6e\65\5f\35\5f\61\6c\69\67"
  "\6e\5f\32\00\1b\1a\76\31\32\38\2e\6c\6f\61\64\31"
  "\36\5f\6c\61\6e\65\5f\36\5f\61\6c\69\67\6e\5f\31"
  "\00\1c\1a\76\31\32\38\2e\6c\6f\61\64\31\36\5f\6c"
  "\61\6e\65\5f\36\5f\61\6c\69\67\6e\5f\32\00\1d\1a"
  "\76\31\32\38\2e\6c\6f\61\64\31\36\5f\6c\61\6e\65"
  "\5f\37\5f\61\6c\69\67\6e\5f\31\00\1e\1a\76\31\32"
  "\38\2e\6c\6f\61\64\31\36\5f\6c\61\6e\65\5f\37\5f"
  "\61\6c\69\67\6e\5f\32\00\1f\0a\81\84\80\80\00\20"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\00\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\01\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\02\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\03\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\04\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\05\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\06\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\07\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\55\01\00\00\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\55\01\01\01\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\55\01\02\02\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\55\01\03\03\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\55\01\04\04\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\55\01\05\05\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\55\01\06\06\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\55\01\07\07\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\00\00\00\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\00\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\00\00\01\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\01\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\00\00\02\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\02\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\00\00\03\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\03\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\00\00\04\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\04\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\00\00\05\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\05\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\00\00\06\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\06\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\00\00\07\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\55\01\00\07\0b"
  "\0b\96\80\80\80\00\01\00\41\00\0b\10\00\01\02\03"
  "\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f"
)
(assert_return
  (invoke "v128.load16_lane_0"
    (i32.const 0x0)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x100 0x0 0x0 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_1"
    (i32.const 0x1)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x201 0x0 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_2"
    (i32.const 0x2)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x302 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_3"
    (i32.const 0x3)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x403 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_4"
    (i32.const 0x4)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x504 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_5"
    (i32.const 0x5)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x0 0x605 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_6"
    (i32.const 0x6)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x0 0x0 0x706 0x0)
)
(assert_return
  (invoke "v128.load16_lane_7"
    (i32.const 0x7)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x807)
)
(assert_return
  (invoke "v128.load16_lane_0_offset_0" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i16x8 0x100 0x0 0x0 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_1_offset_1" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i16x8 0x0 0x201 0x0 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_2_offset_2" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i16x8 0x0 0x0 0x302 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_3_offset_3" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i16x8 0x0 0x0 0x0 0x403 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_4_offset_4" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x504 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_5_offset_5" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x0 0x605 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_6_offset_6" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x0 0x0 0x706 0x0)
)
(assert_return
  (invoke "v128.load16_lane_7_offset_7" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x807)
)
(assert_return
  (invoke "v128.load16_lane_0_align_1"
    (i32.const 0x0)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x100 0x0 0x0 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_0_align_2"
    (i32.const 0x0)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x100 0x0 0x0 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_1_align_1"
    (i32.const 0x1)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x201 0x0 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_1_align_2"
    (i32.const 0x1)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x201 0x0 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_2_align_1"
    (i32.const 0x2)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x302 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_2_align_2"
    (i32.const 0x2)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x302 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_3_align_1"
    (i32.const 0x3)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x403 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_3_align_2"
    (i32.const 0x3)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x403 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_4_align_1"
    (i32.const 0x4)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x504 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_4_align_2"
    (i32.const 0x4)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x504 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_5_align_1"
    (i32.const 0x5)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x0 0x605 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_5_align_2"
    (i32.const 0x5)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x0 0x605 0x0 0x0)
)
(assert_return
  (invoke "v128.load16_lane_6_align_1"
    (i32.const 0x6)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x0 0x0 0x706 0x0)
)
(assert_return
  (invoke "v128.load16_lane_6_align_2"
    (i32.const 0x6)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x0 0x0 0x706 0x0)
)
(assert_return
  (invoke "v128.load16_lane_7_align_1"
    (i32.const 0x7)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x807)
)
(assert_return
  (invoke "v128.load16_lane_7_align_2"
    (i32.const 0x7)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i16x8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x807)
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7b\01\7b\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\91\80\80\80\00\01\8b\80\80\80"
    "\00\00\20\00\41\00\fd\55\01\00\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7b\01\7b\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\91\80\80\80\00\01\8b\80\80\80"
    "\00\00\41\00\20\00\fd\55\01\00\08\0b"
  )
  "invalid lane index"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7b\01\7b\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\91\80\80\80\00\01\8b\80\80\80"
    "\00\00\41\00\20\00\fd\55\02\00\00\0b"
  )
  "alignment must not be larger than natural"
)
