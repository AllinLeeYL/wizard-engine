(module binary
  "\00\61\73\6d\01\00\00\00\01\8c\80\80\80\00\02\60"
  "\02\7f\7b\01\7b\60\01\7b\01\7b\03\8d\80\80\80\00"
  "\0c\00\00\01\01\00\00\00\00\00\00\00\00\05\83\80"
  "\80\80\00\01\00\01\07\cf\82\80\80\00\0c\12\76\31"
  "\32\38\2e\6c\6f\61\64\36\34\5f\6c\61\6e\65\5f\30"
  "\00\00\12\76\31\32\38\2e\6c\6f\61\64\36\34\5f\6c"
  "\61\6e\65\5f\31\00\01\1b\76\31\32\38\2e\6c\6f\61"
  "\64\36\34\5f\6c\61\6e\65\5f\30\5f\6f\66\66\73\65"
  "\74\5f\30\00\02\1b\76\31\32\38\2e\6c\6f\61\64\36"
  "\34\5f\6c\61\6e\65\5f\31\5f\6f\66\66\73\65\74\5f"
  "\31\00\03\1a\76\31\32\38\2e\6c\6f\61\64\36\34\5f"
  "\6c\61\6e\65\5f\30\5f\61\6c\69\67\6e\5f\31\00\04"
  "\1a\76\31\32\38\2e\6c\6f\61\64\36\34\5f\6c\61\6e"
  "\65\5f\30\5f\61\6c\69\67\6e\5f\32\00\05\1a\76\31"
  "\32\38\2e\6c\6f\61\64\36\34\5f\6c\61\6e\65\5f\30"
  "\5f\61\6c\69\67\6e\5f\34\00\06\1a\76\31\32\38\2e"
  "\6c\6f\61\64\36\34\5f\6c\61\6e\65\5f\30\5f\61\6c"
  "\69\67\6e\5f\38\00\07\1a\76\31\32\38\2e\6c\6f\61"
  "\64\36\34\5f\6c\61\6e\65\5f\31\5f\61\6c\69\67\6e"
  "\5f\31\00\08\1a\76\31\32\38\2e\6c\6f\61\64\36\34"
  "\5f\6c\61\6e\65\5f\31\5f\61\6c\69\67\6e\5f\32\00"
  "\09\1a\76\31\32\38\2e\6c\6f\61\64\36\34\5f\6c\61"
  "\6e\65\5f\31\5f\61\6c\69\67\6e\5f\34\00\0a\1a\76"
  "\31\32\38\2e\6c\6f\61\64\36\34\5f\6c\61\6e\65\5f"
  "\31\5f\61\6c\69\67\6e\5f\38\00\0b\0a\c1\81\80\80"
  "\00\0c\8b\80\80\80\00\00\20\00\20\01\fd\57\03\00"
  "\00\0b\8b\80\80\80\00\00\20\00\20\01\fd\57\03\00"
  "\01\0b\8b\80\80\80\00\00\41\00\20\00\fd\57\03\00"
  "\00\0b\8b\80\80\80\00\00\41\00\20\00\fd\57\03\01"
  "\01\0b\8b\80\80\80\00\00\20\00\20\01\fd\57\00\00"
  "\00\0b\8b\80\80\80\00\00\20\00\20\01\fd\57\01\00"
  "\00\0b\8b\80\80\80\00\00\20\00\20\01\fd\57\02\00"
  "\00\0b\8b\80\80\80\00\00\20\00\20\01\fd\57\03\00"
  "\00\0b\8b\80\80\80\00\00\20\00\20\01\fd\57\00\00"
  "\01\0b\8b\80\80\80\00\00\20\00\20\01\fd\57\01\00"
  "\01\0b\8b\80\80\80\00\00\20\00\20\01\fd\57\02\00"
  "\01\0b\8b\80\80\80\00\00\20\00\20\01\fd\57\03\00"
  "\01\0b\0b\96\80\80\80\00\01\00\41\00\0b\10\00\01"
  "\02\03\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f"
)
(assert_return
  (invoke "v128.load64_lane_0"
    (i32.const 0x0)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i64x2 0x706_0504_0302_0100 0x0)
)
(assert_return
  (invoke "v128.load64_lane_1"
    (i32.const 0x1)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i64x2 0x0 0x807_0605_0403_0201)
)
(assert_return
  (invoke "v128.load64_lane_0_offset_0" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i64x2 0x706_0504_0302_0100 0x0)
)
(assert_return
  (invoke "v128.load64_lane_1_offset_1" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i64x2 0x0 0x807_0605_0403_0201)
)
(assert_return
  (invoke "v128.load64_lane_0_align_1"
    (i32.const 0x0)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i64x2 0x706_0504_0302_0100 0x0)
)
(assert_return
  (invoke "v128.load64_lane_0_align_2"
    (i32.const 0x0)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i64x2 0x706_0504_0302_0100 0x0)
)
(assert_return
  (invoke "v128.load64_lane_0_align_4"
    (i32.const 0x0)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i64x2 0x706_0504_0302_0100 0x0)
)
(assert_return
  (invoke "v128.load64_lane_0_align_8"
    (i32.const 0x0)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i64x2 0x706_0504_0302_0100 0x0)
)
(assert_return
  (invoke "v128.load64_lane_1_align_1"
    (i32.const 0x1)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i64x2 0x0 0x807_0605_0403_0201)
)
(assert_return
  (invoke "v128.load64_lane_1_align_2"
    (i32.const 0x1)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i64x2 0x0 0x807_0605_0403_0201)
)
(assert_return
  (invoke "v128.load64_lane_1_align_4"
    (i32.const 0x1)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i64x2 0x0 0x807_0605_0403_0201)
)
(assert_return
  (invoke "v128.load64_lane_1_align_8"
    (i32.const 0x1)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i64x2 0x0 0x807_0605_0403_0201)
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7b\01\7b\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\91\80\80\80\00\01\8b\80\80\80"
    "\00\00\20\00\41\00\fd\57\03\00\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7b\01\7b\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\91\80\80\80\00\01\8b\80\80\80"
    "\00\00\41\00\20\00\fd\57\03\00\02\0b"
  )
  "invalid lane index"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7b\01\7b\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\91\80\80\80\00\01\8b\80\80\80"
    "\00\00\41\00\20\00\fd\57\04\00\00\0b"
  )
  "alignment must not be larger than natural"
)
