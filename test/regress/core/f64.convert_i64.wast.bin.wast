(module binary
  "\00\61\73\6d\01\00\00\00\01\bd\80\80\80\00\0c\60"
  "\01\7f\01\7e\60\01\7e\01\7f\60\01\7d\01\7f\60\01"
  "\7c\01\7f\60\01\7d\01\7e\60\01\7c\01\7e\60\01\7f"
  "\01\7d\60\01\7e\01\7d\60\01\7f\01\7c\60\01\7e\01"
  "\7c\60\01\7d\01\7c\60\01\7c\01\7d\03\a2\80\80\80"
  "\00\21\00\00\01\02\02\03\03\04\04\05\05\02\02\03"
  "\03\04\04\05\05\06\07\08\09\06\07\08\09\0a\0b\06"
  "\09\02\05\07\91\85\80\80\00\21\10\69\36\34\2e\65"
  "\78\74\65\6e\64\5f\69\33\32\5f\73\00\00\10\69\36"
  "\34\2e\65\78\74\65\6e\64\5f\69\33\32\5f\75\00\01"
  "\0c\69\33\32\2e\77\72\61\70\5f\69\36\34\00\02\0f"
  "\69\33\32\2e\74\72\75\6e\63\5f\66\33\32\5f\73\00"
  "\03\0f\69\33\32\2e\74\72\75\6e\63\5f\66\33\32\5f"
  "\75\00\04\0f\69\33\32\2e\74\72\75\6e\63\5f\66\36"
  "\34\5f\73\00\05\0f\69\33\32\2e\74\72\75\6e\63\5f"
  "\66\36\34\5f\75\00\06\0f\69\36\34\2e\74\72\75\6e"
  "\63\5f\66\33\32\5f\73\00\07\0f\69\36\34\2e\74\72"
  "\75\6e\63\5f\66\33\32\5f\75\00\08\0f\69\36\34\2e"
  "\74\72\75\6e\63\5f\66\36\34\5f\73\00\09\0f\69\36"
  "\34\2e\74\72\75\6e\63\5f\66\36\34\5f\75\00\0a\13"
  "\69\33\32\2e\74\72\75\6e\63\5f\73\61\74\5f\66\33"
  "\32\5f\73\00\0b\13\69\33\32\2e\74\72\75\6e\63\5f"
  "\73\61\74\5f\66\33\32\5f\75\00\0c\13\69\33\32\2e"
  "\74\72\75\6e\63\5f\73\61\74\5f\66\36\34\5f\73\00"
  "\0d\13\69\33\32\2e\74\72\75\6e\63\5f\73\61\74\5f"
  "\66\36\34\5f\75\00\0e\13\69\36\34\2e\74\72\75\6e"
  "\63\5f\73\61\74\5f\66\33\32\5f\73\00\0f\13\69\36"
  "\34\2e\74\72\75\6e\63\5f\73\61\74\5f\66\33\32\5f"
  "\75\00\10\13\69\36\34\2e\74\72\75\6e\63\5f\73\61"
  "\74\5f\66\36\34\5f\73\00\11\13\69\36\34\2e\74\72"
  "\75\6e\63\5f\73\61\74\5f\66\36\34\5f\75\00\12\11"
  "\66\33\32\2e\63\6f\6e\76\65\72\74\5f\69\33\32\5f"
  "\73\00\13\11\66\33\32\2e\63\6f\6e\76\65\72\74\5f"
  "\69\36\34\5f\73\00\14\11\66\36\34\2e\63\6f\6e\76"
  "\65\72\74\5f\69\33\32\5f\73\00\15\11\66\36\34\2e"
  "\63\6f\6e\76\65\72\74\5f\69\36\34\5f\73\00\16\11"
  "\66\33\32\2e\63\6f\6e\76\65\72\74\5f\69\33\32\5f"
  "\75\00\17\11\66\33\32\2e\63\6f\6e\76\65\72\74\5f"
  "\69\36\34\5f\75\00\18\11\66\36\34\2e\63\6f\6e\76"
  "\65\72\74\5f\69\33\32\5f\75\00\19\11\66\36\34\2e"
  "\63\6f\6e\76\65\72\74\5f\69\36\34\5f\75\00\1a\0f"
  "\66\36\34\2e\70\72\6f\6d\6f\74\65\5f\66\33\32\00"
  "\1b\0e\66\33\32\2e\64\65\6d\6f\74\65\5f\66\36\34"
  "\00\1c\13\66\33\32\2e\72\65\69\6e\74\65\72\70\72"
  "\65\74\5f\69\33\32\00\1d\13\66\36\34\2e\72\65\69"
  "\6e\74\65\72\70\72\65\74\5f\69\36\34\00\1e\13\69"
  "\33\32\2e\72\65\69\6e\74\65\72\70\72\65\74\5f\66"
  "\33\32\00\1f\13\69\36\34\2e\72\65\69\6e\74\65\72"
  "\70\72\65\74\5f\66\36\34\00\20\0a\d3\82\80\80\00"
  "\21\85\80\80\80\00\00\20\00\ac\0b\85\80\80\80\00"
  "\00\20\00\ad\0b\85\80\80\80\00\00\20\00\a7\0b\85"
  "\80\80\80\00\00\20\00\a8\0b\85\80\80\80\00\00\20"
  "\00\a9\0b\85\80\80\80\00\00\20\00\aa\0b\85\80\80"
  "\80\00\00\20\00\ab\0b\85\80\80\80\00\00\20\00\ae"
  "\0b\85\80\80\80\00\00\20\00\af\0b\85\80\80\80\00"
  "\00\20\00\b0\0b\85\80\80\80\00\00\20\00\b1\0b\86"
  "\80\80\80\00\00\20\00\fc\00\0b\86\80\80\80\00\00"
  "\20\00\fc\01\0b\86\80\80\80\00\00\20\00\fc\02\0b"
  "\86\80\80\80\00\00\20\00\fc\03\0b\86\80\80\80\00"
  "\00\20\00\fc\04\0b\86\80\80\80\00\00\20\00\fc\05"
  "\0b\86\80\80\80\00\00\20\00\fc\06\0b\86\80\80\80"
  "\00\00\20\00\fc\07\0b\85\80\80\80\00\00\20\00\b2"
  "\0b\85\80\80\80\00\00\20\00\b4\0b\85\80\80\80\00"
  "\00\20\00\b7\0b\85\80\80\80\00\00\20\00\b9\0b\85"
  "\80\80\80\00\00\20\00\b3\0b\85\80\80\80\00\00\20"
  "\00\b5\0b\85\80\80\80\00\00\20\00\b8\0b\85\80\80"
  "\80\00\00\20\00\ba\0b\85\80\80\80\00\00\20\00\bb"
  "\0b\85\80\80\80\00\00\20\00\b6\0b\85\80\80\80\00"
  "\00\20\00\be\0b\85\80\80\80\00\00\20\00\bf\0b\85"
  "\80\80\80\00\00\20\00\bc\0b\85\80\80\80\00\00\20"
  "\00\bd\0b"
)

(assert_return (invoke "f64.convert_i64_s" (i64.const 0x1)) (f64.const 0x1p+0))
(assert_return
  (invoke "f64.convert_i64_s" (i64.const 0xffff_ffff_ffff_ffff))
  (f64.const -0x1p+0)
)
(assert_return (invoke "f64.convert_i64_s" (i64.const 0x0)) (f64.const 0x0p+0))
(assert_return
  (invoke "f64.convert_i64_s" (i64.const 0x7fff_ffff_ffff_ffff))
  (f64.const 0x1p+63)
)
(assert_return
  (invoke "f64.convert_i64_s" (i64.const 0x8000_0000_0000_0000))
  (f64.const -0x1p+63)
)
(assert_return
  (invoke "f64.convert_i64_s" (i64.const 0x10_969d_374b_968e))
  (f64.const 0x1.0969_d374_b968_ep+52)
)
(assert_return
  (invoke "f64.convert_i64_s" (i64.const 0x20_0000_0000_0001))
  (f64.const 0x1p+53)
)
(assert_return
  (invoke "f64.convert_i64_s" (i64.const 0xffdf_ffff_ffff_ffff))
  (f64.const -0x1p+53)
)
(assert_return
  (invoke "f64.convert_i64_s" (i64.const 0x20_0000_0000_0003))
  (f64.const 0x1.0000_0000_0000_2p+53)
)
(assert_return
  (invoke "f64.convert_i64_s" (i64.const 0xffdf_ffff_ffff_fffd))
  (f64.const -0x1.0000_0000_0000_2p+53)
)
(assert_return (invoke "f64.convert_i32_u" (i32.const 0x1)) (f64.const 0x1p+0))
(assert_return (invoke "f64.convert_i32_u" (i32.const 0x0)) (f64.const 0x0p+0))
(assert_return
  (invoke "f64.convert_i32_u" (i32.const 0x7fff_ffff))
  (f64.const 0x1.ffff_fffcp+30)
)
(assert_return
  (invoke "f64.convert_i32_u" (i32.const 0x8000_0000))
  (f64.const 0x1p+31)
)
(assert_return
  (invoke "f64.convert_i32_u" (i32.const 0xffff_ffff))
  (f64.const 0x1.ffff_fffep+31)
)
(assert_return (invoke "f64.convert_i64_u" (i64.const 0x1)) (f64.const 0x1p+0))
(assert_return (invoke "f64.convert_i64_u" (i64.const 0x0)) (f64.const 0x0p+0))
(assert_return
  (invoke "f64.convert_i64_u" (i64.const 0x7fff_ffff_ffff_ffff))
  (f64.const 0x1p+63)
)
(assert_return
  (invoke "f64.convert_i64_u" (i64.const 0x8000_0000_0000_0000))
  (f64.const 0x1p+63)
)
(assert_return
  (invoke "f64.convert_i64_u" (i64.const 0xffff_ffff_ffff_ffff))
  (f64.const 0x1p+64)
)
(assert_return
  (invoke "f64.convert_i64_u" (i64.const 0x8000_0000_0000_0400))
  (f64.const 0x1p+63)
)
(assert_return
  (invoke "f64.convert_i64_u" (i64.const 0x8000_0000_0000_0401))
  (f64.const 0x1.0000_0000_0000_1p+63)
)
(assert_return
  (invoke "f64.convert_i64_u" (i64.const 0x8000_0000_0000_0402))
  (f64.const 0x1.0000_0000_0000_1p+63)
)
(assert_return
  (invoke "f64.convert_i64_u" (i64.const 0xffff_ffff_ffff_f400))
  (f64.const 0x1.ffff_ffff_ffff_ep+63)
)
(assert_return
  (invoke "f64.convert_i64_u" (i64.const 0xffff_ffff_ffff_f401))
  (f64.const 0x1.ffff_ffff_ffff_fp+63)
)
(assert_return
  (invoke "f64.convert_i64_u" (i64.const 0xffff_ffff_ffff_f402))
  (f64.const 0x1.ffff_ffff_ffff_fp+63)
)
(assert_return
  (invoke "f64.convert_i64_u" (i64.const 0x20_0000_0000_0001))
  (f64.const 0x1p+53)
)
(assert_return
  (invoke "f64.convert_i64_u" (i64.const 0x20_0000_0000_0003))
  (f64.const 0x1.0000_0000_0000_2p+53)
)
