component ExpansionCounter {
	var histogram = Array<int>.new(256);
	var expanded = Array<int>.new(256);
	var total: int;
	def count(module: Module) {
		var d = module.functions.declared;
		for (i < d.length) {
			var func = d[i];
			var it = BytecodeIterator.new(func);
			while (it.more()) {
				var op = it.current();
				doOp(it.current(), it.immptr());
				it.next();
			}
			total += func.code.orig.length;
		}
	}
	def doOp(op: Opcode, immptr: Decoder) {
		histogram[op.code]++;
		var expand = 0;
		match (op) {
			IF => expand = 4;
			BR_IF => expand = 11;
			BR, ELSE => {
				expand = 10;
			}
			BR_TABLE => {
				var count = immptr.read_u32leb();
				expand = 8 * int.!(count);
			}
			_ => ;
		}
		match (op.imm) {
			I32 => {
				var p = immptr.pos;
				var val = immptr.read_i32leb();
				if (immptr.pos > p + 1) { 
					if (val == i16.!(val)) expand = 3;
					else expand = 5;
				}
			}
			LOCAL_INDEX, GLOBAL_INDEX, BLOCK_TYPE, MEMORY_INDEX => {
				var p = immptr.pos;
				var val = immptr.read_u32leb();
				if (immptr.pos > p + 1) { 
					if (val < 0x10000) expand = 3;
					else expand = 5;
				}
			}
			I64 => {
				var val = immptr.read_u8();
				if ((val & 0x80) != 0) expand = 9;
			}
			_ => ;
		}
		expanded[op.code] += expand;
	}
	def dump() {
		var buf = StringBuilder.new();
		var extra = 0;
		for (i < 256) {
			extra += expanded[i];
			if (!Opcodes.valid[i]) continue;
			if (histogram[i] == 0) continue;
			var op = Opcodes.opcodes[i];
			buf.put3(" op[0x%x %s] = %d", u8.!(i), op.name, histogram[i]);
			if (expanded[i] != 0) buf.put1(" +%d", expanded[i]);
			buf.ln();
		}
		buf.put1("total size = %d bytes\n", total);
		buf.put1("expanded = +%d bytes\n", extra);
		buf.out(Trace.STDOUT);
	}
}