Prio	Component	Issue
-------------------------------
	binparse	decode individual elements of sections without buffering
	binparse	offsets for errors are (incorrectly) buffer relative
	binparse	reduce type specialization of readMultiple<T>
	ctlxfer		more tests for greater depths
	interpreter	floating point
	interpreter	multivalue blocks, loops
	interpreter	print value stack / call stack in tracing mode
	interpreter	separate u64 and ref stacks to avoid boxing
	interpreter	support probes
	interpreter	test host functions
	lebtest		better error message reporting
	main		ability to execute modules
	main		repl for loading and running modules
	main		version / commit updater
	test		measure and report execution time of individual tests
	validator	check for mutability of global in write
	validator	more br tests
	validator	typecheck whole signatures at a time
	wave		implementation to bootstrap Virgil
	spec		is it legal to have 0-count funcs and no code section?
	spec		floating point opcodes
	spec		br_table bugs
	spec		subnormal floats
	spec		spectest includes 0xFFFE and 0xFFFF special characters
	unit		Improve overall unit testing framework
	trace		Move all tracing and rendering code into src/render ?

	ext		bulk_memory: memcpy, table access
	ext		reference_types: new value
	ext		tail_call: new bytecodes
	ext		sign_extension
	ext		non_trapping_fic
	ext		multiple_memories
	ext		typed_functions

Done
--------------------------------
	spec		br_table merging of types
	spec		binary LEB 5-byte limit
	spec		elements bugs
	spec		duplicate export name
	spec		invalid memory flags
	spec		parse unicode escapes in strings
	spec		assign to immutable global
	spec		invalid global flags
	spec		assert_trap of module: start function
	spec		UTF-8 encoding
	spec		br_if bugs
	util		use "def var" Virgil feature for .length
	spec		support _ in literals
	binparse	tests for streaming
	config		properly check config settings for decoding and running
	instance	move oom logic into instantiator, out of constructors
	trace		Always use StringBuffer.out(STDOUT)
	validator	multivalue blocks, loops
	test		spec test loader and runner
	interpreter	memory index decoding
	core		introduce Extension enum
	binparse	double check memory operand decoding
	validator	check alignment of memory operators
	interpreter	convert unit tests to params, results order
	binparse	write tests for binary decoding
