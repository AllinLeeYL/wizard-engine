enum Kind {
	I32, I64, F32, F64, V128, REF
}

type externref;
type moduleref;
type instanceref;
type funcref;
type frameref;
type anyref;

import "wizeng:reflect" component wizeng_reflect {
	// reflection
	def get_own_module() -> moduleref;
	def get_own_instance() -> instanceref;
	def get_comodule() -> moduleref;
	def get_coinstance() -> instanceref;
	def get_instance_func(module: moduleref, func: u31) -> funcref;

	def eq_externref(a: externref, b: externref) -> bool;
	def eq_anyref(a: anyref, b: anyref) -> bool;
	def eq_module(a: moduleref, b: moduleref) -> bool;
	def eq_instance(a: instanceref, b: instanceref) -> bool;
	def eq_func(a: funcref, b: funcref) -> bool;
}

import "wizeng:reflect:module" component wizeng_reflect_module {
	def get_type_count(module: moduleref) -> u31;
	def get_func_count(module: moduleref) -> u31;
	def get_memory_count(module: moduleref) -> u31;
	def get_table_count(module: moduleref) -> u31;
}

import "wizeng:reflect:func" component wizeng_reflect_func {
	def get_instance(func: funcref) -> instanceref;
	def get_name(func: funcref, name_buf: u32/*Pointer*/);
	def get_param_arity(func: funcref) -> u31;
	def get_param_kind(func: funcref) -> Kind;
	def get_result_arity(func: funcref) -> u31;
	def get_result_kind(func: funcref) -> Kind;
}

import "wizeng:instrument" component wizeng_instrument {
	def insert_global_probe(callback: funcref);
	def insert_local_probe(func: funcref, pc: u31, callback: funcref);
	def remove_local_probe(func: funcref, pc: u31, callback: funcref);
}

import "wizeng:reflect:frame" component wizeng_reflect_frame {
	def get_module(accessor: frameref, func: funcref) -> moduleref;
	def get_instance(accessor: frameref, func: funcref) -> instanceref;
	def get_func(accessor: frameref) -> funcref;
	def get_pc(accessor: frameref) -> u31;
	def get_stp(accessor: frameref) -> u31;
	def get_depth(accessor: frameref) -> u31;
	def get_caller(accessor: frameref) -> frameref;

	def get_local_count(accessor: frameref) -> u31;
	def get_operand_count(accessor: frameref) -> u31;

	def get_operand_i(accessor: frameref, d: int) -> u32;
	def get_operand_l(accessor: frameref, d: int) -> u64;
	def get_operand_f(accessor: frameref, d: int) -> float;
	def get_operand_d(accessor: frameref, d: int) -> double;

	def set_operand_i(accessor: frameref, d: int, val: u32);
	def set_operand_l(accessor: frameref, d: int, val: u64);
	def set_operand_f(accessor: frameref, d: int, val: float);
	def set_operand_d(accessor: frameref, d: int, val: double);
}
