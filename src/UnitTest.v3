// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component UnitTests {
	var list: List<UnitTest>;
	var fatal: bool = false;
	def register(name: string, fun: Tester -> ()) {
		list = List.new(UnitTest.new(name, fun), list);
	}
	def registerT<T>(name: string, n: Tester -> T, f: T -> void) {
		register(name, runNew<T>(_, n, f));
	}
	def runNew<T>(t: Tester, n: Tester -> T, f: T -> ()) {
		return f(n(t));
	}
	def run(args: Array<string>) -> int {
		var matchers = Vector<GlobMatcher>.new();
		for (a in args) {
			if (a != null) matchers.put(GlobMatcher.new(a));
		}
		var count = 0, r: List<UnitTest>;
		for (l = list; l != null; l = l.tail) { // count and reverse list
			var t = l.head;
			if (matchers.length > 0) {
				var skip = true;
				for (i < matchers.length) {
					if (skip) skip = !matchers[i].matches(t.name);
				}
				if (skip) continue;
			}
			r = List.new(l.head, r);
			count++;
		}
		System.puts("#");
		System.puti(count);
		System.puts(" unit tests\n");
		var fail = false;
		for (l = r; l != null; l = l.tail) {
			var u = l.head;
			var t = Tester.new(u.name);
			System.puts("+");
			System.puts(u.name);
			System.ln();
			u.fun(t);
			if (t.ok) {
				System.puts("-ok\n");
			} else {
				fail = true;
				System.puts("-fail (");
				System.puts(t.msg);
				System.puts(")\n");
			}
		}
		return if(fail, 1, 0);
	}
}

class UnitTest(name: string, fun: Tester -> ()) { }
class Tester(name: string) {
	var ok = true;
	var msg: string;
	def fail(msg: string) {
		if (!ok) return;
		this.ok = false;
		this.msg = msg;
		if (UnitTests.fatal) {
			System.error("UnitTestError", msg);
		}
	}
	def asserti(expected: int, got: int) -> this {
		if (expected != got) fail2("expected %d, got %d", expected, got);
	}
	def assertz(expected: bool, got: bool) -> this {
		if (expected != got) fail2("expected %z, got %z", expected, got);
	}
	def assertl(expected: long, got: long) -> this {
		if (expected != got) fail2("expected %d, got %d", expected, got);
	}
	def asserteq<T>(a: T, b: T) -> this {
		if (a != b) fail("expected equal");
	}
	def assertne<T>(a: T, b: T) -> this {
		if (a == b) fail("expected not equal");
	}
	def assertb(expected: Array<byte>, got: Array<byte>) -> this {
		if (expected.length != got.length) {
			return fail2("expected %d bytes, got %d", expected.length, got.length);
		}
		for (i < expected.length) {
			if (expected[i] != got[i]) {
				var msg = Strings.format3("expected data[%d] = 0x%x, got 0x%x",
								i, expected[i], got[i]);
				return fail(msg);
			}
		}
	}
	def assert_string(expected: string, got: string) -> this {
		if (!Strings.equals(expected, got)) {
			var msg = StringBuffer.new().puts("expected ");
			msg.puts(if(expected == null, "null", expected));
			msg.puts(", got ");
			msg.puts(if(got == null, "null", got));
			fail(msg.extract());
		}
	}
	def fail1<T>(msg: string, a: T) {
		fail(Strings.format1(msg, a));
	}
	def fail2<T, U>(msg: string, a: T, b: U) {
		fail(Strings.format2(msg, a, b));
	}
	def fail3<T, U, V>(msg: string, a: T, b: U, c: V) {
		fail(Strings.format3(msg, a, b, c));
	}
}
