// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses and runs binary .wasm files that use the "wave" embedding.
def main(args: Array<string>) -> int {
	var trace = false;
	var engine = Engine.new();
	var programArgs: Array<string>;
	var path: string;
	// Parse option and extract module and module arguments
	for (i < args.length) {
		var a = args[i];
		if (Strings.equal(a, "-trace-wave")) {
			trace = true;
		} else if (a.length > 0 && a[0] == '-') {
			if (!engine.parseOption(a)) return ErrorBuilder.new()
				.puts("wave: unrecognized option ")
				.putsq(a)
				.ln()
				.exit(1);
		} else {
			path = a;
			programArgs = Arrays.range(args, i+1, args.length);
			break;
		}
	}

	if (path == null) return ErrorBuilder.new()
		.puts("wave: no input files\n")
		.exit(3);

	if (!Strings.endsWith(path, ".wasm")) return ErrorBuilder.new()
		.puts(path)
		.puts(": unknown file format, expected .wasm\n")
		.exit(4);

	// Parse the binary module
	var result = engine.loadWasmFile(path);
	var module: Module;
	match (result) {
		Ok(m) => module = m;
		FileNotFound => return ErrorBuilder.new()
			.puts("wave: could not load file ")
			.puts(path)
			.puts("\n")
			.exit(2);
		ParseError(code, path, error_pos, error_msg) => return ErrorBuilder.new()
			.render(code, path, error_pos, error_msg)
			.exit(3);
	}
	var err = ErrorGen.new(path);
	var imports = Array<Exportable>.new(module.imports.length);
	var wave = WaveInstance.new(programArgs, trace);
	wave.provideImports(module, imports);
	var i = Instantiator.new(engine.extensions, module, imports, err);
	var instance = i.run();

	if (!err.ok()) return ErrorBuilder.new()
		.render(err.error_code, path, err.error_pos, err.error_msg)
		.exit(6);

	wave.extractMemoryExport(instance);
	var main = wave.extractMainExport(instance);

	if (main == null) return ErrorBuilder.new()
		.puts(path)
		.puts(": no main export from module\n")
		.exit(7);

	var exe = Target.newInterpreter();
	var params = main.sig.params;
	if (!isIntOrVoid(main.sig.params) || !isIntOrVoid(main.sig.results)) return ErrorBuilder.new()
		.puts(path)
		.put1(": expected main of type [i32?] -> [i32?], got %q\n", main.sig.render)
		.exit(8);

	var exeArgs = if(main.sig.params.length == 1, [Values.i_v(programArgs.length)], Values.NONE);
	var r = exe.run(-1, main, exeArgs);
	match (r) {
		Break => ;
		Value(vals) => return if(vals.length == 1, Values.v_i(vals[0]));
		Trap(reason) => {
			var e = ErrorBuilder.new()
				.puts("trap: ")
				.puts(reason.name)
				.ln();
			// TODO: call back into module to render source-level stacktrace
			for (i = exe.call_stack.top - 1; i >= 0; i--) {
				var f = exe.call_stack.elems[i];
				e.puts("\t@ ");
				f.func.render(e);
				e.puts(" +");
				e.putd(f.pc);
				e.ln();
			}
			e.exit(10);
		}
	}
	return 0;
}
def isIntOrVoid(t: Array<ValueType>) -> bool {
	return t.length == 0 || (t.length == 1 && t[0] == ValueType.I32);
}
