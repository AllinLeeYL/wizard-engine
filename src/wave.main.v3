// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses and runs binary .wasm files that use the "wave" embedding.
component wave {
	def main(args: Array<string>) -> int {
		var engine = Engine.new();
		var programArgs: Array<string>;
		var path: string;
		// Parse option and extract module and module arguments
		for (i < args.length) {
			var a = args[i];
			if (a.length > 0 && a[0] == '-') {
				var ok = engine.parseOption(a);
				if (!ok) {
					System.puts("wave: unrecognized option \"");
					System.puts(a);
					System.puts("\"\n");
					return 1;
				}
			} else {
				path = a;
				programArgs = Arrays.range(args, i+1, args.length);
				break;
			}
		}
		if (path == null) {
			System.puts("wave: no input files\n");
			return 3;
		}
		if (!Strings.endsWith(path, ".wasm")) {
			System.puts(path);
			System.puts(": unknown file format, expected .wasm\n");
			return 4;
		}
		// Parse the binary module
		var result = engine.loadWasmFile(path);
		var module: Module;
		match (result) {
			Ok(m) => module = m;
			FileNotFound => {
				System.puts("wave: could not load file ");
				System.puts(path);
				System.puts("\n");
				return 2;
			}
			ParseError(code, path, error_pos, error_msg) => {
				renderError(code, path, error_pos, error_msg);
				return 3;
			}
		}
		var err = WasmErrorGen.new(path);
		var imports = Array<Exportable>.new(module.imports.length);
		var finish = WaveModule.new().provideImports(module, err, imports);
		if (!err.ok()) {
			renderError(err.error_code, path, err.error_pos, err.error_msg);
			return 5;
		}
		var i = Instantiator.new(engine.extensions, module, imports);
		var instance = i.run();
		if (!i.err.ok()) {
			renderError(i.err.error_code, path, i.err.error_pos, i.err.error_msg);
			return 6;
		}
		finish(err, instance);
		if (!err.ok()) {
			renderError(err.error_code, path, err.error_pos, err.error_msg);
			return 7;
		}
		return 0;
	}
	def renderError(code: WasmError, path: string, error_pos: int, error_msg: string) {
		System.puts(path);
		System.puts(": error @");
		System.puti(error_pos);
		System.puts(" ");
		System.puts(error_msg);
		System.ln();
	}
}
