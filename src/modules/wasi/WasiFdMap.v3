// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Maps user-level file descriptors to WASI state.
class WasiFdMap(max: int) {
	private def fds = Array<WasiFd>.new(max);
	private var lastfd: int;

	new() {
		fds[0] = WasiFd.new(0, wasi_filetype.CHARACTER_DEVICE, false, "<stdin>"); // TODO: sense stdin type
		fds[1] = WasiFd.new(1, wasi_filetype.CHARACTER_DEVICE, false, "<stdout>"); // TODO: sense stdout type
		fds[2] = WasiFd.new(2, wasi_filetype.CHARACTER_DEVICE, false, "<stderr>"); // TODO: sense stderr type
		lastfd = 3;
	}
	def get(fd: int) -> WasiFd {
		return if(fd < 0 || fd >= fds.length, null, fds[fd]);
	}
	def set(fd: int, wfd: WasiFd) {
		fds[fd] = wfd;
	}
	def alloc() -> int {
		for (i = lastfd; i < fds.length; i++) {
			if (fds[i] == null) {
				lastfd = (i + 1) % fds.length;
				return i;
			}
		}
		for (i < lastfd) {
			if (fds[i] == null) {
				lastfd = (i + 1) % fds.length;
				return i;
			}
		}
		return -1;
	}
	def free(fd: int) -> int {
		if (fd < 3 || fd >= fds.length) return -1;
		if (fds[fd] == null) return -1;
		fds[fd] = null;
		return fd;
	}
	def closeAll() {
		for (i = 3; i < fds.length; i++) {
			var wfd = fds[i];
			if (wfd != null) {
				System.fileClose(wfd.sysfd);
				fds[i] = null;
			}
		}
	}
}

// A WASI file descriptor, which has a type, flags, etc.
class WasiFd(sysfd: int, ftype: wasi_filetype, preopen: bool, path: string) {
}
