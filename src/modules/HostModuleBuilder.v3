// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class HostModuleBuilder(name: string) {
	private var module = SimpleHostModule.new(name);

	def func(name: string, sig: SigDecl, hf: Range<Value> -> HostResult) -> this {
		module.map[name] = HostFunction.new(name, sig, hf);
	}
	def register(exposed: bool) {
		ModuleRegistry.add(module, exposed);
		module = null;
	}
}

// A simple host module that only has static mappings to names.
class SimpleHostModule extends HostModule {
	private def map = Strings.newMap<Exportable>();

	new(name: string) super(name) { }

	def preprocess(module: Module, result: Array<Exportable>) {
		var imports = module.imports;
		for (j < imports.length) {
			var i = imports[j];
			if (result[j] != null) continue;                             // don't overwrite existing binding
			if (!Strings.equal(this.name, i.imp.module_name)) continue;  // not this module
			var found = map[i.imp.field_name];
			result[j] = found;
		}
	}
}
