// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Host modules must be registered by their name so the Wizard engine can find them.
component ModuleRegistry {
	def map = Strings.newMap<HostModule>();
	def add(m: HostModule) {
		map[m.name] = m;
	}
}
// A host module (with state) that can provide imports to a module as well as the entrypoint and exit value.
class HostModule extends ImportProcessor {
	new(name: string) super(name) { }

	// Initializes the host module with the command-line arguments.
	def init(args: Array<string>, trace: bool) -> HostResult { return HostResult.Value0; }
	// Get the main export and arguments, if exported from the instance.
	def getEntry(instance: Instance) -> (Function, Array<Value>) { return (null, null); }
	// De-initialize after running.
	def deinit(result: Result) { }

	// Helper functions.
	def findExportedMemory(instance: Instance) -> Memory {
		// Find memory and save internally
		for (iex in instance.exports) match (iex) {
			x: Memory => return x;
		}
		return null;
	}
	def getRegion(memory: Memory, v: Value, size: u32) -> i64 {
		if (memory == null) return -1;
		if (Value.I32.?(v)) return memory.boundsCheck(0, Value.I32.!(v).val, size);
		return -1;
	}
	def getRegion2(memory: Memory, v: u32, size: u32) -> i64 {
		if (memory == null) return -1;
		return memory.boundsCheck(0, v, size);
	}
}
