// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility that serves as a base class for decoding and dispatching on bytecodes, defining one
// method per opcode. The bytecode visitor decodes opcodes and their immediates (without
// translation to module references) and calls the appropriate {visit_OP()} method. The
// default implementation of each method organizes the opcodes into categories by calling
// the appropriate {visitCategory()} method.
class BytecodeVisitor {
	def var pc: int;		// the current program counter
	def var current: Opcode;	// the current opcode
	private def origptr: CodePtr;
	private def codeptr: CodePtr;
	private def imm: CodePtr;
	private var imm_pos: int;

	// Decodes and dispatches on the current bytecode. Returns {true} if a bytecode was successfully
	// dispatched, or {false} if the bytecode was invalid, or the end was reached.
	def dispatch() -> bool {
		pc = codeptr.pos;
		if (codeptr.done()) return false;
		// Read the first byte of the code
		var b = codeptr.read1();
		if (b == InternalOpcode.PROBE.code) { // probe is inserted here
			visitProbe();
			b = origptr.at(pc).read1();
		}
		// Query opcode attributes array
		var opcode: Opcode;
		if (Opcodes.attributes[b].PREFIX) {
			// prefixed opcode, read LEB
			opcode = this.current = Opcodes.find(b, codeptr.read_uleb32());
		} else {
			// single byte opcode
			opcode = this.current = Opcodes.opcodes[b];
		}
		// Check for decode errors
		if (!codeptr.ok) return false;

		// delegates that read the various types of immediates
		var cp = codeptr;
		def read_ileb = cp.read_sleb32;
		def read_uleb = cp.read_uleb32;
		def read_u8 = cp.read1;

		def read_BLOCKT = read_ileb;
		def read_MEMARG = cp.read_MemArg;
		def read_GLOBAL = read_uleb;
		def read_LOCAL = read_uleb;
		def read_LABEL = read_uleb;
		def read_TABLE = read_uleb;
		def read_ELEM = read_uleb;
		def read_DATA = read_uleb;
		def read_MEMORY = read_uleb;
		def read_STRUCTT = read_uleb;
		def read_ARRAYT = read_uleb;
		def read_HEAPT = read_uleb;
		def read_SIG = read_uleb;
		def read_FUNC = read_uleb;
		def read_FIELD = read_uleb;
		def read_TAG = read_uleb;
		def read_LANE = read_u8;
		def read_ZEROB = read_u8;
		def read_VALTS = cp.read_value_codes;

		// Dispatch to appropriate visit_OP() method.
		match (opcode) {
			INVALID =>			return false;
			UNREACHABLE =>			visit_UNREACHABLE();
			NOP =>				visit_NOP();
			BLOCK =>			visit_BLOCK(read_BLOCKT());
			LOOP =>				visit_LOOP(read_BLOCKT());
			IF =>				visit_IF(read_BLOCKT());
			ELSE =>				visit_ELSE();
			TRY =>				visit_TRY(read_BLOCKT());
			CATCH =>			visit_CATCH(read_TAG());
			THROW =>			visit_THROW(read_TAG());
			RETHROW =>			visit_RETHROW(read_LABEL());
			END =>				visit_END();
			BR =>				visit_BR(read_LABEL());
			BR_IF =>			visit_BR_IF(read_LABEL());
			BR_TABLE =>			visit_BR_TABLE(cp.read_labels());
			RETURN =>			visit_RETURN();
			CALL =>				visit_CALL(read_FUNC());
			CALL_INDIRECT =>		visit_CALL_INDIRECT(read_SIG(), read_TABLE());
			RETURN_CALL =>			visit_RETURN_CALL(read_FUNC());
			RETURN_CALL_INDIRECT =>		visit_RETURN_CALL_INDIRECT(read_SIG(), read_TABLE());
			CALL_REF =>			visit_CALL_REF(read_SIG());
			RETURN_CALL_REF =>		visit_RETURN_CALL_REF(read_SIG());
			DELEGATE =>			visit_DELEGATE(read_LABEL());
			CATCH_ALL =>			visit_CATCH_ALL();
			DROP =>				visit_DROP();
			SELECT =>			visit_SELECT();
			SELECT_T =>			visit_SELECT_T(read_VALTS());
			LOCAL_GET =>			visit_LOCAL_GET(read_LOCAL());
			LOCAL_SET =>			visit_LOCAL_SET(read_LOCAL());
			LOCAL_TEE =>			visit_LOCAL_TEE(read_LOCAL());
			GLOBAL_GET =>			visit_GLOBAL_GET(read_GLOBAL());
			GLOBAL_SET =>			visit_GLOBAL_SET(read_GLOBAL());
			TABLE_GET =>			visit_TABLE_GET(read_TABLE());
			TABLE_SET =>			visit_TABLE_SET(read_TABLE());
			I32_LOAD =>			visit_I32_LOAD(read_MEMARG());
			I64_LOAD =>			visit_I64_LOAD(read_MEMARG());
			F32_LOAD =>			visit_F32_LOAD(read_MEMARG());
			F64_LOAD =>			visit_F64_LOAD(read_MEMARG());
			I32_LOAD8_S =>			visit_I32_LOAD8_S(read_MEMARG());
			I32_LOAD8_U =>			visit_I32_LOAD8_U(read_MEMARG());
			I32_LOAD16_S =>			visit_I32_LOAD16_S(read_MEMARG());
			I32_LOAD16_U =>			visit_I32_LOAD16_U(read_MEMARG());
			I64_LOAD8_S =>			visit_I64_LOAD8_S(read_MEMARG());
			I64_LOAD8_U =>			visit_I64_LOAD8_U(read_MEMARG());
			I64_LOAD16_S =>			visit_I64_LOAD16_S(read_MEMARG());
			I64_LOAD16_U =>			visit_I64_LOAD16_U(read_MEMARG());
			I64_LOAD32_S =>			visit_I64_LOAD32_S(read_MEMARG());
			I64_LOAD32_U =>			visit_I64_LOAD32_U(read_MEMARG());
			I32_STORE =>			visit_I32_STORE(read_MEMARG());
			I64_STORE =>			visit_I64_STORE(read_MEMARG());
			F32_STORE =>			visit_F32_STORE(read_MEMARG());
			F64_STORE =>			visit_F64_STORE(read_MEMARG());
			I32_STORE8 =>			visit_I32_STORE8(read_MEMARG());
			I32_STORE16 =>			visit_I32_STORE16(read_MEMARG());
			I64_STORE8 =>			visit_I64_STORE8(read_MEMARG());
			I64_STORE16 =>			visit_I64_STORE16(read_MEMARG());
			I64_STORE32 =>			visit_I64_STORE32(read_MEMARG());
			MEMORY_SIZE =>			visit_MEMORY_SIZE(read_MEMORY());
			MEMORY_GROW =>			visit_MEMORY_GROW(read_MEMORY());
			I32_CONST =>			visit_I32_CONST(cp.read_sleb32());
			I64_CONST =>			visit_I64_CONST(cp.read_sleb64());
			F32_CONST =>			visit_F32_CONST(cp.read_u32());
			F64_CONST =>			visit_F64_CONST(cp.read_u64());
			I32_EQZ =>			visit_I32_EQZ();
			I32_EQ =>			visit_I32_EQ();
			I32_NE =>			visit_I32_NE();
			I32_LT_S =>			visit_I32_LT_S();
			I32_LT_U =>			visit_I32_LT_U();
			I32_GT_S =>			visit_I32_GT_S();
			I32_GT_U =>			visit_I32_GT_U();
			I32_LE_S =>			visit_I32_LE_S();
			I32_LE_U =>			visit_I32_LE_U();
			I32_GE_S =>			visit_I32_GE_S();
			I32_GE_U =>			visit_I32_GE_U();
			I64_EQZ =>			visit_I64_EQZ();
			I64_EQ =>			visit_I64_EQ();
			I64_NE =>			visit_I64_NE();
			I64_LT_S =>			visit_I64_LT_S();
			I64_LT_U =>			visit_I64_LT_U();
			I64_GT_S =>			visit_I64_GT_S();
			I64_GT_U =>			visit_I64_GT_U();
			I64_LE_S =>			visit_I64_LE_S();
			I64_LE_U =>			visit_I64_LE_U();
			I64_GE_S =>			visit_I64_GE_S();
			I64_GE_U =>			visit_I64_GE_U();
			F32_EQ =>			visit_F32_EQ();
			F32_NE =>			visit_F32_NE();
			F32_LT =>			visit_F32_LT();
			F32_GT =>			visit_F32_GT();
			F32_LE =>			visit_F32_LE();
			F32_GE =>			visit_F32_GE();
			F64_EQ =>			visit_F64_EQ();
			F64_NE =>			visit_F64_NE();
			F64_LT =>			visit_F64_LT();
			F64_GT =>			visit_F64_GT();
			F64_LE =>			visit_F64_LE();
			F64_GE =>			visit_F64_GE();
			I32_CLZ =>			visit_I32_CLZ();
			I32_CTZ =>			visit_I32_CTZ();
			I32_POPCNT =>			visit_I32_POPCNT();
			I32_ADD =>			visit_I32_ADD();
			I32_SUB =>			visit_I32_SUB();
			I32_MUL =>			visit_I32_MUL();
			I32_DIV_S =>			visit_I32_DIV_S();
			I32_DIV_U =>			visit_I32_DIV_U();
			I32_REM_S =>			visit_I32_REM_S();
			I32_REM_U =>			visit_I32_REM_U();
			I32_AND =>			visit_I32_AND();
			I32_OR =>			visit_I32_OR();
			I32_XOR =>			visit_I32_XOR();
			I32_SHL =>			visit_I32_SHL();
			I32_SHR_S =>			visit_I32_SHR_S();
			I32_SHR_U =>			visit_I32_SHR_U();
			I32_ROTL =>			visit_I32_ROTL();
			I32_ROTR =>			visit_I32_ROTR();
			I64_CLZ =>			visit_I64_CLZ();
			I64_CTZ =>			visit_I64_CTZ();
			I64_POPCNT =>			visit_I64_POPCNT();
			I64_ADD =>			visit_I64_ADD();
			I64_SUB =>			visit_I64_SUB();
			I64_MUL =>			visit_I64_MUL();
			I64_DIV_S =>			visit_I64_DIV_S();
			I64_DIV_U =>			visit_I64_DIV_U();
			I64_REM_S =>			visit_I64_REM_S();
			I64_REM_U =>			visit_I64_REM_U();
			I64_AND =>			visit_I64_AND();
			I64_OR =>			visit_I64_OR();
			I64_XOR =>			visit_I64_XOR();
			I64_SHL =>			visit_I64_SHL();
			I64_SHR_S =>			visit_I64_SHR_S();
			I64_SHR_U =>			visit_I64_SHR_U();
			I64_ROTL =>			visit_I64_ROTL();
			I64_ROTR =>			visit_I64_ROTR();
			F32_ABS =>			visit_F32_ABS();
			F32_NEG =>			visit_F32_NEG();
			F32_CEIL =>			visit_F32_CEIL();
			F32_FLOOR =>			visit_F32_FLOOR();
			F32_TRUNC =>			visit_F32_TRUNC();
			F32_NEAREST =>			visit_F32_NEAREST();
			F32_SQRT =>			visit_F32_SQRT();
			F32_ADD =>			visit_F32_ADD();
			F32_SUB =>			visit_F32_SUB();
			F32_MUL =>			visit_F32_MUL();
			F32_DIV =>			visit_F32_DIV();
			F32_MIN =>			visit_F32_MIN();
			F32_MAX =>			visit_F32_MAX();
			F32_COPYSIGN =>			visit_F32_COPYSIGN();
			F64_ABS =>			visit_F64_ABS();
			F64_NEG =>			visit_F64_NEG();
			F64_CEIL =>			visit_F64_CEIL();
			F64_FLOOR =>			visit_F64_FLOOR();
			F64_TRUNC =>			visit_F64_TRUNC();
			F64_NEAREST =>			visit_F64_NEAREST();
			F64_SQRT =>			visit_F64_SQRT();
			F64_ADD =>			visit_F64_ADD();
			F64_SUB =>			visit_F64_SUB();
			F64_MUL =>			visit_F64_MUL();
			F64_DIV =>			visit_F64_DIV();
			F64_MIN =>			visit_F64_MIN();
			F64_MAX =>			visit_F64_MAX();
			F64_COPYSIGN =>			visit_F64_COPYSIGN();
			I32_WRAP_I64 =>			visit_I32_WRAP_I64();
			I32_TRUNC_F32_S =>		visit_I32_TRUNC_F32_S();
			I32_TRUNC_F32_U =>		visit_I32_TRUNC_F32_U();
			I32_TRUNC_F64_S =>		visit_I32_TRUNC_F64_S();
			I32_TRUNC_F64_U =>		visit_I32_TRUNC_F64_U();
			I64_EXTEND_I32_S =>		visit_I64_EXTEND_I32_S();
			I64_EXTEND_I32_U =>		visit_I64_EXTEND_I32_U();
			I64_TRUNC_F32_S =>		visit_I64_TRUNC_F32_S();
			I64_TRUNC_F32_U =>		visit_I64_TRUNC_F32_U();
			I64_TRUNC_F64_S =>		visit_I64_TRUNC_F64_S();
			I64_TRUNC_F64_U =>		visit_I64_TRUNC_F64_U();
			F32_CONVERT_I32_S =>		visit_F32_CONVERT_I32_S();
			F32_CONVERT_I32_U =>		visit_F32_CONVERT_I32_U();
			F32_CONVERT_I64_S =>		visit_F32_CONVERT_I64_S();
			F32_CONVERT_I64_U =>		visit_F32_CONVERT_I64_U();
			F32_DEMOTE_F64 =>		visit_F32_DEMOTE_F64();
			F64_CONVERT_I32_S =>		visit_F64_CONVERT_I32_S();
			F64_CONVERT_I32_U =>		visit_F64_CONVERT_I32_U();
			F64_CONVERT_I64_S =>		visit_F64_CONVERT_I64_S();
			F64_CONVERT_I64_U =>		visit_F64_CONVERT_I64_U();
			F64_PROMOTE_F32 =>		visit_F64_PROMOTE_F32();
			I32_REINTERPRET_F32 =>		visit_I32_REINTERPRET_F32();
			I64_REINTERPRET_F64 =>		visit_I64_REINTERPRET_F64();
			F32_REINTERPRET_I32 =>		visit_F32_REINTERPRET_I32();
			F64_REINTERPRET_I64 =>		visit_F64_REINTERPRET_I64();
			I32_EXTEND8_S =>		visit_I32_EXTEND8_S();
			I32_EXTEND16_S =>		visit_I32_EXTEND16_S();
			I64_EXTEND8_S =>		visit_I64_EXTEND8_S();
			I64_EXTEND16_S =>		visit_I64_EXTEND16_S();
			I64_EXTEND32_S =>		visit_I64_EXTEND32_S();
			REF_NULL =>			visit_REF_NULL(read_HEAPT());
			REF_IS_NULL =>			visit_REF_IS_NULL();
			REF_FUNC =>			visit_REF_FUNC(read_FUNC());
			REF_AS_NON_NULL =>		visit_REF_AS_NON_NULL();
			BR_ON_NULL =>			visit_BR_ON_NULL(read_LABEL());
			REF_EQ =>			visit_REF_EQ();
			BR_ON_NON_NULL =>		visit_BR_ON_NON_NULL(read_LABEL());
			STRUCT_NEW_CANON =>		visit_STRUCT_NEW_CANON(read_STRUCTT());
			STRUCT_NEW_CANON_DEFAULT =>	visit_STRUCT_NEW_CANON_DEFAULT(read_STRUCTT());
			STRUCT_GET =>			visit_STRUCT_GET(read_STRUCTT(), read_FIELD());
			STRUCT_GET_S =>			visit_STRUCT_GET_S(read_STRUCTT(), read_FIELD());
			STRUCT_GET_U =>			visit_STRUCT_GET_U(read_STRUCTT(), read_FIELD());
			STRUCT_SET =>			visit_STRUCT_SET(read_STRUCTT(), read_FIELD());
			ARRAY_NEW_CANON =>		visit_ARRAY_NEW_CANON(read_ARRAYT());
			ARRAY_NEW_CANON_DEFAULT =>	visit_ARRAY_NEW_CANON_DEFAULT(read_ARRAYT());
			ARRAY_GET =>			visit_ARRAY_GET(read_ARRAYT());
			ARRAY_GET_S =>			visit_ARRAY_GET_S(read_ARRAYT());
			ARRAY_GET_U =>			visit_ARRAY_GET_U(read_ARRAYT());
			ARRAY_SET =>			visit_ARRAY_SET(read_ARRAYT());
			ARRAY_LEN =>			visit_ARRAY_LEN();
			ARRAY_NEW_CANON_FIXED =>	visit_ARRAY_NEW_CANON_FIXED(read_ARRAYT(), cp.read_uleb32());
			ARRAY_NEW_CANON_DATA =>		visit_ARRAY_NEW_CANON_DATA(read_ARRAYT(), read_DATA());
			ARRAY_NEW_CANON_ELEM =>		visit_ARRAY_NEW_CANON_ELEM(read_ARRAYT(), read_ELEM());
			I31_NEW =>			visit_I31_NEW();
			I31_GET_S =>			visit_I31_GET_S();
			I31_GET_U =>			visit_I31_GET_U();
			REF_TEST =>			visit_REF_TEST(read_HEAPT());
			REF_CAST =>			visit_REF_CAST(read_HEAPT());
			BR_ON_CAST =>			visit_BR_ON_CAST(read_LABEL(), read_HEAPT());
			BR_ON_CAST_FAIL =>		visit_BR_ON_CAST_FAIL(read_LABEL(), read_HEAPT());
			REF_TEST_NULL =>		visit_REF_TEST_NULL(read_HEAPT());
			REF_CAST_NULL =>		visit_REF_CAST_NULL(read_HEAPT());
			BR_ON_CAST_NULL =>		visit_BR_ON_CAST_NULL(read_LABEL(), read_HEAPT());
			BR_ON_CAST_FAIL_NULL =>		visit_BR_ON_CAST_FAIL_NULL(read_LABEL(), read_HEAPT());
			EXTERN_INTERNALIZE =>		visit_EXTERN_INTERNALIZE();
			EXTERN_EXTERNALIZE =>		visit_EXTERN_EXTERNALIZE();
			I32_TRUNC_SAT_F32_S =>		visit_I32_TRUNC_SAT_F32_S();
			I32_TRUNC_SAT_F32_U =>		visit_I32_TRUNC_SAT_F32_U();
			I32_TRUNC_SAT_F64_S =>		visit_I32_TRUNC_SAT_F64_S();
			I32_TRUNC_SAT_F64_U =>		visit_I32_TRUNC_SAT_F64_U();
			I64_TRUNC_SAT_F32_S =>		visit_I64_TRUNC_SAT_F32_S();
			I64_TRUNC_SAT_F32_U =>		visit_I64_TRUNC_SAT_F32_U();
			I64_TRUNC_SAT_F64_S =>		visit_I64_TRUNC_SAT_F64_S();
			I64_TRUNC_SAT_F64_U =>		visit_I64_TRUNC_SAT_F64_U();
			MEMORY_INIT =>			visit_MEMORY_INIT(read_DATA(), read_MEMORY());
			DATA_DROP =>			visit_DATA_DROP(read_DATA());
			MEMORY_COPY =>			visit_MEMORY_COPY(read_MEMORY(), read_MEMORY());
			MEMORY_FILL =>			visit_MEMORY_FILL(read_MEMORY());
			TABLE_INIT =>			visit_TABLE_INIT(read_ELEM(), read_TABLE());
			ELEM_DROP =>			visit_ELEM_DROP(read_ELEM());
			TABLE_COPY =>			visit_TABLE_COPY(read_TABLE(), read_TABLE());
			TABLE_GROW =>			visit_TABLE_GROW(read_TABLE());
			TABLE_SIZE =>			visit_TABLE_SIZE(read_TABLE());
			TABLE_FILL =>			visit_TABLE_FILL(read_TABLE());
			V128_LOAD =>			visit_V128_LOAD(read_MEMARG());
			V128_LOAD_8X8_S =>		visit_V128_LOAD_8X8_S(read_MEMARG());
			V128_LOAD_8X8_U =>		visit_V128_LOAD_8X8_U(read_MEMARG());
			V128_LOAD_16X4_S =>		visit_V128_LOAD_16X4_S(read_MEMARG());
			V128_LOAD_16X4_U =>		visit_V128_LOAD_16X4_U(read_MEMARG());
			V128_LOAD_32X2_S =>		visit_V128_LOAD_32X2_S(read_MEMARG());
			V128_LOAD_32X2_U =>		visit_V128_LOAD_32X2_U(read_MEMARG());
			V128_LOAD_8_SPLAT =>		visit_V128_LOAD_8_SPLAT(read_MEMARG());
			V128_LOAD_16_SPLAT =>		visit_V128_LOAD_16_SPLAT(read_MEMARG());
			V128_LOAD_32_SPLAT =>		visit_V128_LOAD_32_SPLAT(read_MEMARG());
			V128_LOAD_64_SPLAT =>		visit_V128_LOAD_64_SPLAT(read_MEMARG());
			V128_LOAD_32_ZERO =>		visit_V128_LOAD_32_ZERO(read_MEMARG());
			V128_LOAD_64_ZERO =>		visit_V128_LOAD_64_ZERO(read_MEMARG());
			V128_STORE =>			visit_V128_STORE(read_MEMARG());
			V128_LOAD_8_LANE =>		visit_V128_LOAD_8_LANE(read_MEMARG(), read_LANE());
			V128_LOAD_16_LANE =>		visit_V128_LOAD_16_LANE(read_MEMARG(), read_LANE());
			V128_LOAD_32_LANE =>		visit_V128_LOAD_32_LANE(read_MEMARG(), read_LANE());
			V128_LOAD_64_LANE =>		visit_V128_LOAD_64_LANE(read_MEMARG(), read_LANE());
			V128_STORE_8_LANE =>		visit_V128_STORE_8_LANE(read_MEMARG(), read_LANE());
			V128_STORE_16_LANE =>		visit_V128_STORE_16_LANE(read_MEMARG(), read_LANE());
			V128_STORE_32_LANE =>		visit_V128_STORE_32_LANE(read_MEMARG(), read_LANE());
			V128_STORE_64_LANE =>		visit_V128_STORE_64_LANE(read_MEMARG(), read_LANE());
			V128_CONST =>			visit_V128_CONST(cp.read_u64(), cp.read_u64());
			I8X16_SHUFFLE =>		visit_I8X16_SHUFFLE(cp.readN(16));
			I8X16_EXTRACTLANE_S =>		visit_I8X16_EXTRACTLANE_S(read_LANE());
			I8X16_EXTRACTLANE_U =>		visit_I8X16_EXTRACTLANE_U(read_LANE());
			I8X16_REPLACELANE =>		visit_I8X16_REPLACELANE(read_LANE());
			I16X8_EXTRACTLANE_S =>		visit_I16X8_EXTRACTLANE_S(read_LANE());
			I16X8_EXTRACTLANE_U =>		visit_I16X8_EXTRACTLANE_U(read_LANE());
			I16X8_REPLACELANE =>		visit_I16X8_REPLACELANE(read_LANE());
			I32X4_EXTRACTLANE =>		visit_I32X4_EXTRACTLANE(read_LANE());
			I32X4_REPLACELANE =>		visit_I32X4_REPLACELANE(read_LANE());
			I64X2_EXTRACTLANE =>		visit_I64X2_EXTRACTLANE(read_LANE());
			I64X2_REPLACELANE =>		visit_I64X2_REPLACELANE(read_LANE());
			F32X4_EXTRACTLANE =>		visit_F32X4_EXTRACTLANE(read_LANE());
			F32X4_REPLACELANE =>		visit_F32X4_REPLACELANE(read_LANE());
			F64X2_EXTRACTLANE =>		visit_F64X2_EXTRACTLANE(read_LANE());
			F64X2_REPLACELANE =>		visit_F64X2_REPLACELANE(read_LANE());
			I8X16_SWIZZLE =>		visit_I8X16_SWIZZLE();
			I8X16_SPLAT =>			visit_I8X16_SPLAT();
			I16X8_SPLAT =>			visit_I16X8_SPLAT();
			I32X4_SPLAT =>			visit_I32X4_SPLAT();
			I64X2_SPLAT =>			visit_I64X2_SPLAT();
			F32X4_SPLAT =>			visit_F32X4_SPLAT();
			F64X2_SPLAT =>			visit_F64X2_SPLAT();
			I8X16_EQ =>			visit_I8X16_EQ();
			I8X16_NE =>			visit_I8X16_NE();
			I8X16_LT_S =>			visit_I8X16_LT_S();
			I8X16_LT_U =>			visit_I8X16_LT_U();
			I8X16_GT_S =>			visit_I8X16_GT_S();
			I8X16_GT_U =>			visit_I8X16_GT_U();
			I8X16_LE_S =>			visit_I8X16_LE_S();
			I8X16_LE_U =>			visit_I8X16_LE_U();
			I8X16_GE_S =>			visit_I8X16_GE_S();
			I8X16_GE_U =>			visit_I8X16_GE_U();
			I16X8_EQ =>			visit_I16X8_EQ();
			I16X8_NE =>			visit_I16X8_NE();
			I16X8_LT_S =>			visit_I16X8_LT_S();
			I16X8_LT_U =>			visit_I16X8_LT_U();
			I16X8_GT_S =>			visit_I16X8_GT_S();
			I16X8_GT_U =>			visit_I16X8_GT_U();
			I16X8_LE_S =>			visit_I16X8_LE_S();
			I16X8_LE_U =>			visit_I16X8_LE_U();
			I16X8_GE_S =>			visit_I16X8_GE_S();
			I16X8_GE_U =>			visit_I16X8_GE_U();
			I32X4_EQ =>			visit_I32X4_EQ();
			I32X4_NE =>			visit_I32X4_NE();
			I32X4_LT_S =>			visit_I32X4_LT_S();
			I32X4_LT_U =>			visit_I32X4_LT_U();
			I32X4_GT_S =>			visit_I32X4_GT_S();
			I32X4_GT_U =>			visit_I32X4_GT_U();
			I32X4_LE_S =>			visit_I32X4_LE_S();
			I32X4_LE_U =>			visit_I32X4_LE_U();
			I32X4_GE_S =>			visit_I32X4_GE_S();
			I32X4_GE_U =>			visit_I32X4_GE_U();
			I64X2_EQ =>			visit_I64X2_EQ();
			I64X2_NE =>			visit_I64X2_NE();
			I64X2_LT_S =>			visit_I64X2_LT_S();
			I64X2_GT_S =>			visit_I64X2_GT_S();
			I64X2_LE_S =>			visit_I64X2_LE_S();
			I64X2_GE_S =>			visit_I64X2_GE_S();
			F32X4_EQ =>			visit_F32X4_EQ();
			F32X4_NE =>			visit_F32X4_NE();
			F32X4_LT =>			visit_F32X4_LT();
			F32X4_GT =>			visit_F32X4_GT();
			F32X4_LE =>			visit_F32X4_LE();
			F32X4_GE =>			visit_F32X4_GE();
			F64X2_EQ =>			visit_F64X2_EQ();
			F64X2_NE =>			visit_F64X2_NE();
			F64X2_LT =>			visit_F64X2_LT();
			F64X2_GT =>			visit_F64X2_GT();
			F64X2_LE =>			visit_F64X2_LE();
			F64X2_GE =>			visit_F64X2_GE();
			V128_NOT =>			visit_V128_NOT();
			V128_AND =>			visit_V128_AND();
			V128_ANDNOT =>			visit_V128_ANDNOT();
			V128_OR =>			visit_V128_OR();
			V128_XOR =>			visit_V128_XOR();
			V128_BITSELECT =>		visit_V128_BITSELECT();
			V128_ANYTRUE =>			visit_V128_ANYTRUE();
			I8X16_ABS =>			visit_I8X16_ABS();
			I8X16_NEG =>			visit_I8X16_NEG();
			I8X16_POPCNT =>			visit_I8X16_POPCNT();
			I8X16_ALLTRUE =>		visit_I8X16_ALLTRUE();
			I8X16_BITMASK =>		visit_I8X16_BITMASK();
			I8X16_NARROW_I16X8_S =>		visit_I8X16_NARROW_I16X8_S();
			I8X16_NARROW_I16X8_U =>		visit_I8X16_NARROW_I16X8_U();
			I8X16_SHL =>			visit_I8X16_SHL();
			I8X16_SHR_S =>			visit_I8X16_SHR_S();
			I8X16_SHR_U =>			visit_I8X16_SHR_U();
			I8X16_ADD =>			visit_I8X16_ADD();
			I8X16_ADD_SAT_S =>		visit_I8X16_ADD_SAT_S();
			I8X16_ADD_SAT_U =>		visit_I8X16_ADD_SAT_U();
			I8X16_SUB =>			visit_I8X16_SUB();
			I8X16_SUB_SAT_S =>		visit_I8X16_SUB_SAT_S();
			I8X16_SUB_SAT_U =>		visit_I8X16_SUB_SAT_U();
			I8X16_MIN_S =>			visit_I8X16_MIN_S();
			I8X16_MIN_U =>			visit_I8X16_MIN_U();
			I8X16_MAX_S =>			visit_I8X16_MAX_S();
			I8X16_MAX_U =>			visit_I8X16_MAX_U();
			I8X16_AVGR_U =>			visit_I8X16_AVGR_U();
			I16X8_EXTADDPAIRWISE_I8X16_S =>	visit_I16X8_EXTADDPAIRWISE_I8X16_S();
			I16X8_EXTADDPAIRWISE_I8X16_U =>	visit_I16X8_EXTADDPAIRWISE_I8X16_U();
			I16X8_ABS =>			visit_I16X8_ABS();
			I16X8_NEG =>			visit_I16X8_NEG();
			I16X8_Q15MULRSAT_S =>		visit_I16X8_Q15MULRSAT_S();
			I16X8_ALLTRUE =>		visit_I16X8_ALLTRUE();
			I16X8_BITMASK =>		visit_I16X8_BITMASK();
			I16X8_NARROW_I32X4_S =>		visit_I16X8_NARROW_I32X4_S();
			I16X8_NARROW_I32X4_U =>		visit_I16X8_NARROW_I32X4_U();
			I16X8_EXTEND_LOW_I8X16_S =>	visit_I16X8_EXTEND_LOW_I8X16_S();
			I16X8_EXTEND_HIGH_I8X16_S =>	visit_I16X8_EXTEND_HIGH_I8X16_S();
			I16X8_EXTEND_LOW_I8X16_U =>	visit_I16X8_EXTEND_LOW_I8X16_U();
			I16X8_EXTEND_HIGH_I8X16_U =>	visit_I16X8_EXTEND_HIGH_I8X16_U();
			I16X8_SHL =>			visit_I16X8_SHL();
			I16X8_SHR_S =>			visit_I16X8_SHR_S();
			I16X8_SHR_U =>			visit_I16X8_SHR_U();
			I16X8_ADD =>			visit_I16X8_ADD();
			I16X8_ADD_SAT_S =>		visit_I16X8_ADD_SAT_S();
			I16X8_ADD_SAT_U =>		visit_I16X8_ADD_SAT_U();
			I16X8_SUB =>			visit_I16X8_SUB();
			I16X8_SUB_SAT_S =>		visit_I16X8_SUB_SAT_S();
			I16X8_SUB_SAT_U =>		visit_I16X8_SUB_SAT_U();
			I16X8_MUL =>			visit_I16X8_MUL();
			I16X8_MIN_S =>			visit_I16X8_MIN_S();
			I16X8_MIN_U =>			visit_I16X8_MIN_U();
			I16X8_MAX_S =>			visit_I16X8_MAX_S();
			I16X8_MAX_U =>			visit_I16X8_MAX_U();
			I16X8_AVGR_U =>			visit_I16X8_AVGR_U();
			I16X8_EXTMUL_LOW_I8X16_S =>	visit_I16X8_EXTMUL_LOW_I8X16_S();
			I16X8_EXTMUL_HIGH_I8X16_S =>	visit_I16X8_EXTMUL_HIGH_I8X16_S();
			I16X8_EXTMUL_LOW_I8X16_U =>	visit_I16X8_EXTMUL_LOW_I8X16_U();
			I16X8_EXTMUL_HIGH_I8X16_U =>	visit_I16X8_EXTMUL_HIGH_I8X16_U();
			I32X4_EXTADDPAIRWISE_I16X8_S =>	visit_I32X4_EXTADDPAIRWISE_I16X8_S();
			I32X4_EXTADDPAIRWISE_I16X8_U =>	visit_I32X4_EXTADDPAIRWISE_I16X8_U();
			I32X4_ABS =>			visit_I32X4_ABS();
			I32X4_NEG =>			visit_I32X4_NEG();
			I32X4_ALLTRUE =>		visit_I32X4_ALLTRUE();
			I32X4_BITMASK =>		visit_I32X4_BITMASK();
			I32X4_EXTEND_LOW_I16X8_S =>	visit_I32X4_EXTEND_LOW_I16X8_S();
			I32X4_EXTEND_HIGH_I16X8_S =>	visit_I32X4_EXTEND_HIGH_I16X8_S();
			I32X4_EXTEND_LOW_I16X8_U =>	visit_I32X4_EXTEND_LOW_I16X8_U();
			I32X4_EXTEND_HIGH_I16X8_U =>	visit_I32X4_EXTEND_HIGH_I16X8_U();
			I32X4_SHL =>			visit_I32X4_SHL();
			I32X4_SHR_S =>			visit_I32X4_SHR_S();
			I32X4_SHR_U =>			visit_I32X4_SHR_U();
			I32X4_ADD =>			visit_I32X4_ADD();
			I32X4_SUB =>			visit_I32X4_SUB();
			I32X4_MUL =>			visit_I32X4_MUL();
			I32X4_MIN_S =>			visit_I32X4_MIN_S();
			I32X4_MIN_U =>			visit_I32X4_MIN_U();
			I32X4_MAX_S =>			visit_I32X4_MAX_S();
			I32X4_MAX_U =>			visit_I32X4_MAX_U();
			I32X4_DOT_I16X8_S =>		visit_I32X4_DOT_I16X8_S();
			I32X4_EXTMUL_LOW_I16X8_S =>	visit_I32X4_EXTMUL_LOW_I16X8_S();
			I32X4_EXTMUL_HIGH_I16X8_S =>	visit_I32X4_EXTMUL_HIGH_I16X8_S();
			I32X4_EXTMUL_LOW_I16X8_U =>	visit_I32X4_EXTMUL_LOW_I16X8_U();
			I32X4_EXTMUL_HIGH_I16X8_U =>	visit_I32X4_EXTMUL_HIGH_I16X8_U();
			I64X2_ABS =>			visit_I64X2_ABS();
			I64X2_NEG =>			visit_I64X2_NEG();
			I64X2_ALLTRUE =>		visit_I64X2_ALLTRUE();
			I64X2_BITMASK =>		visit_I64X2_BITMASK();
			I64X2_EXTEND_LOW_I32X4_S =>	visit_I64X2_EXTEND_LOW_I32X4_S();
			I64X2_EXTEND_HIGH_I32X4_S =>	visit_I64X2_EXTEND_HIGH_I32X4_S();
			I64X2_EXTEND_LOW_I32X4_U =>	visit_I64X2_EXTEND_LOW_I32X4_U();
			I64X2_EXTEND_HIGH_I32X4_U =>	visit_I64X2_EXTEND_HIGH_I32X4_U();
			I64X2_SHL =>			visit_I64X2_SHL();
			I64X2_SHR_S =>			visit_I64X2_SHR_S();
			I64X2_SHR_U =>			visit_I64X2_SHR_U();
			I64X2_ADD =>			visit_I64X2_ADD();
			I64X2_SUB =>			visit_I64X2_SUB();
			I64X2_MUL =>			visit_I64X2_MUL();
			I64X2_EXTMUL_LOW_I32X4_S =>	visit_I64X2_EXTMUL_LOW_I32X4_S();
			I64X2_EXTMUL_HIGH_I32X4_S =>	visit_I64X2_EXTMUL_HIGH_I32X4_S();
			I64X2_EXTMUL_LOW_I32X4_U =>	visit_I64X2_EXTMUL_LOW_I32X4_U();
			I64X2_EXTMUL_HIGH_I32X4_U =>	visit_I64X2_EXTMUL_HIGH_I32X4_U();
			F32X4_CEIL =>			visit_F32X4_CEIL();
			F32X4_FLOOR =>			visit_F32X4_FLOOR();
			F32X4_TRUNC =>			visit_F32X4_TRUNC();
			F32X4_NEAREST =>		visit_F32X4_NEAREST();
			F32X4_ABS =>			visit_F32X4_ABS();
			F32X4_NEG =>			visit_F32X4_NEG();
			F32X4_SQRT =>			visit_F32X4_SQRT();
			F32X4_ADD =>			visit_F32X4_ADD();
			F32X4_SUB =>			visit_F32X4_SUB();
			F32X4_MUL =>			visit_F32X4_MUL();
			F32X4_DIV =>			visit_F32X4_DIV();
			F32X4_MIN =>			visit_F32X4_MIN();
			F32X4_MAX =>			visit_F32X4_MAX();
			F32X4_PMIN =>			visit_F32X4_PMIN();
			F32X4_PMAX =>			visit_F32X4_PMAX();
			F64X2_CEIL =>			visit_F64X2_CEIL();
			F64X2_FLOOR =>			visit_F64X2_FLOOR();
			F64X2_TRUNC =>			visit_F64X2_TRUNC();
			F64X2_NEAREST =>		visit_F64X2_NEAREST();
			F64X2_ABS =>			visit_F64X2_ABS();
			F64X2_NEG =>			visit_F64X2_NEG();
			F64X2_SQRT =>			visit_F64X2_SQRT();
			F64X2_ADD =>			visit_F64X2_ADD();
			F64X2_SUB =>			visit_F64X2_SUB();
			F64X2_MUL =>			visit_F64X2_MUL();
			F64X2_DIV =>			visit_F64X2_DIV();
			F64X2_MIN =>			visit_F64X2_MIN();
			F64X2_MAX =>			visit_F64X2_MAX();
			F64X2_PMIN =>			visit_F64X2_PMIN();
			F64X2_PMAX =>			visit_F64X2_PMAX();
			I32X4_TRUNC_SAT_F32X4_S =>	visit_I32X4_TRUNC_SAT_F32X4_S();
			I32X4_TRUNC_SAT_F32X4_U =>	visit_I32X4_TRUNC_SAT_F32X4_U();
			F32X4_CONVERT_I32X4_S =>	visit_F32X4_CONVERT_I32X4_S();
			F32X4_CONVERT_I32X4_U =>	visit_F32X4_CONVERT_I32X4_U();
			I32X4_TRUNC_SAT_F64X2_S_ZERO =>	visit_I32X4_TRUNC_SAT_F64X2_S_ZERO();
			I32X4_TRUNC_SAT_F64X2_U_ZERO =>	visit_I32X4_TRUNC_SAT_F64X2_U_ZERO();
			F64X2_CONVERT_LOW_I32X4_S =>	visit_F64X2_CONVERT_LOW_I32X4_S();
			F64X2_CONVERT_LOW_I32X4_U =>	visit_F64X2_CONVERT_LOW_I32X4_U();
			F32X4_DEMOTE_F64X2_ZERO =>	visit_F32X4_DEMOTE_F64X2_ZERO();
			F64X2_PROMOTE_LOW_F32X4 =>	visit_F64X2_PROMOTE_LOW_F32X4();
			MEMORY_ATOMIC_NOTIFY =>		visit_MEMORY_ATOMIC_NOTIFY(read_MEMARG());
			MEMORY_ATOMIC_WAIT32 =>		visit_MEMORY_ATOMIC_WAIT32(read_MEMARG());
			MEMORY_ATOMIC_WAIT64 =>		visit_MEMORY_ATOMIC_WAIT64(read_MEMARG());
			ATOMIC_FENCE =>			visit_ATOMIC_FENCE(read_ZEROB());
			I32_ATOMIC_LOAD =>		visit_I32_ATOMIC_LOAD(read_MEMARG());
			I64_ATOMIC_LOAD =>		visit_I64_ATOMIC_LOAD(read_MEMARG());
			I32_ATOMIC_LOAD8_U =>		visit_I32_ATOMIC_LOAD8_U(read_MEMARG());
			I32_ATOMIC_LOAD16_U =>		visit_I32_ATOMIC_LOAD16_U(read_MEMARG());
			I64_ATOMIC_LOAD8_U =>		visit_I64_ATOMIC_LOAD8_U(read_MEMARG());
			I64_ATOMIC_LOAD16_U =>		visit_I64_ATOMIC_LOAD16_U(read_MEMARG());
			I64_ATOMIC_LOAD32_U =>		visit_I64_ATOMIC_LOAD32_U(read_MEMARG());
			I32_ATOMIC_STORE =>		visit_I32_ATOMIC_STORE(read_MEMARG());
			I64_ATOMIC_STORE =>		visit_I64_ATOMIC_STORE(read_MEMARG());
			I32_ATOMIC_STORE8 =>		visit_I32_ATOMIC_STORE8(read_MEMARG());
			I32_ATOMIC_STORE16 =>		visit_I32_ATOMIC_STORE16(read_MEMARG());
			I64_ATOMIC_STORE8 =>		visit_I64_ATOMIC_STORE8(read_MEMARG());
			I64_ATOMIC_STORE16 =>		visit_I64_ATOMIC_STORE16(read_MEMARG());
			I64_ATOMIC_STORE32 =>		visit_I64_ATOMIC_STORE32(read_MEMARG());
			I32_ATOMIC_RMW_ADD =>		visit_I32_ATOMIC_RMW_ADD(read_MEMARG());
			I64_ATOMIC_RMW_ADD =>		visit_I64_ATOMIC_RMW_ADD(read_MEMARG());
			I32_ATOMIC_RMW8_ADD_U =>	visit_I32_ATOMIC_RMW8_ADD_U(read_MEMARG());
			I32_ATOMIC_RMW16_ADD_U =>	visit_I32_ATOMIC_RMW16_ADD_U(read_MEMARG());
			I64_ATOMIC_RMW8_ADD_U =>	visit_I64_ATOMIC_RMW8_ADD_U(read_MEMARG());
			I64_ATOMIC_RMW16_ADD_U =>	visit_I64_ATOMIC_RMW16_ADD_U(read_MEMARG());
			I64_ATOMIC_RMW32_ADD_U =>	visit_I64_ATOMIC_RMW32_ADD_U(read_MEMARG());
			I32_ATOMIC_RMW_SUB =>		visit_I32_ATOMIC_RMW_SUB(read_MEMARG());
			I64_ATOMIC_RMW_SUB =>		visit_I64_ATOMIC_RMW_SUB(read_MEMARG());
			I32_ATOMIC_RMW8_SUB_U =>	visit_I32_ATOMIC_RMW8_SUB_U(read_MEMARG());
			I32_ATOMIC_RMW16_SUB_U =>	visit_I32_ATOMIC_RMW16_SUB_U(read_MEMARG());
			I64_ATOMIC_RMW8_SUB_U =>	visit_I64_ATOMIC_RMW8_SUB_U(read_MEMARG());
			I64_ATOMIC_RMW16_SUB_U =>	visit_I64_ATOMIC_RMW16_SUB_U(read_MEMARG());
			I64_ATOMIC_RMW32_SUB_U =>	visit_I64_ATOMIC_RMW32_SUB_U(read_MEMARG());
			I32_ATOMIC_RMW_AND =>		visit_I32_ATOMIC_RMW_AND(read_MEMARG());
			I64_ATOMIC_RMW_AND =>		visit_I64_ATOMIC_RMW_AND(read_MEMARG());
			I32_ATOMIC_RMW8_AND_U =>	visit_I32_ATOMIC_RMW8_AND_U(read_MEMARG());
			I32_ATOMIC_RMW16_AND_U =>	visit_I32_ATOMIC_RMW16_AND_U(read_MEMARG());
			I64_ATOMIC_RMW8_AND_U =>	visit_I64_ATOMIC_RMW8_AND_U(read_MEMARG());
			I64_ATOMIC_RMW16_AND_U =>	visit_I64_ATOMIC_RMW16_AND_U(read_MEMARG());
			I64_ATOMIC_RMW32_AND_U =>	visit_I64_ATOMIC_RMW32_AND_U(read_MEMARG());
			I32_ATOMIC_RMW_OR =>		visit_I32_ATOMIC_RMW_OR(read_MEMARG());
			I64_ATOMIC_RMW_OR =>		visit_I64_ATOMIC_RMW_OR(read_MEMARG());
			I32_ATOMIC_RMW8_OR_U =>		visit_I32_ATOMIC_RMW8_OR_U(read_MEMARG());
			I32_ATOMIC_RMW16_OR_U =>	visit_I32_ATOMIC_RMW16_OR_U(read_MEMARG());
			I64_ATOMIC_RMW8_OR_U =>		visit_I64_ATOMIC_RMW8_OR_U(read_MEMARG());
			I64_ATOMIC_RMW16_OR_U =>	visit_I64_ATOMIC_RMW16_OR_U(read_MEMARG());
			I64_ATOMIC_RMW32_OR_U =>	visit_I64_ATOMIC_RMW32_OR_U(read_MEMARG());
			I32_ATOMIC_RMW_XOR =>		visit_I32_ATOMIC_RMW_XOR(read_MEMARG());
			I64_ATOMIC_RMW_XOR =>		visit_I64_ATOMIC_RMW_XOR(read_MEMARG());
			I32_ATOMIC_RMW8_XOR_U =>	visit_I32_ATOMIC_RMW8_XOR_U(read_MEMARG());
			I32_ATOMIC_RMW16_XOR_U =>	visit_I32_ATOMIC_RMW16_XOR_U(read_MEMARG());
			I64_ATOMIC_RMW8_XOR_U =>	visit_I64_ATOMIC_RMW8_XOR_U(read_MEMARG());
			I64_ATOMIC_RMW16_XOR_U =>	visit_I64_ATOMIC_RMW16_XOR_U(read_MEMARG());
			I64_ATOMIC_RMW32_XOR_U =>	visit_I64_ATOMIC_RMW32_XOR_U(read_MEMARG());
			I32_ATOMIC_RMW_XCHG =>		visit_I32_ATOMIC_RMW_XCHG(read_MEMARG());
			I64_ATOMIC_RMW_XCHG =>		visit_I64_ATOMIC_RMW_XCHG(read_MEMARG());
			I32_ATOMIC_RMW8_XCHG_U =>	visit_I32_ATOMIC_RMW8_XCHG_U(read_MEMARG());
			I32_ATOMIC_RMW16_XCHG_U =>	visit_I32_ATOMIC_RMW16_XCHG_U(read_MEMARG());
			I64_ATOMIC_RMW8_XCHG_U =>	visit_I64_ATOMIC_RMW8_XCHG_U(read_MEMARG());
			I64_ATOMIC_RMW16_XCHG_U =>	visit_I64_ATOMIC_RMW16_XCHG_U(read_MEMARG());
			I64_ATOMIC_RMW32_XCHG_U =>	visit_I64_ATOMIC_RMW32_XCHG_U(read_MEMARG());
			I32_ATOMIC_RMW_CMPXCHG =>	visit_I32_ATOMIC_RMW_CMPXCHG(read_MEMARG());
			I64_ATOMIC_RMW_CMPXCHG =>	visit_I64_ATOMIC_RMW_CMPXCHG(read_MEMARG());
			I32_ATOMIC_RMW8_CMPXCHG_U =>	visit_I32_ATOMIC_RMW8_CMPXCHG_U(read_MEMARG());
			I32_ATOMIC_RMW16_CMPXCHG_U =>	visit_I32_ATOMIC_RMW16_CMPXCHG_U(read_MEMARG());
			I64_ATOMIC_RMW8_CMPXCHG_U =>	visit_I64_ATOMIC_RMW8_CMPXCHG_U(read_MEMARG());
			I64_ATOMIC_RMW16_CMPXCHG_U =>	visit_I64_ATOMIC_RMW16_CMPXCHG_U(read_MEMARG());
			I64_ATOMIC_RMW32_CMPXCHG_U =>	visit_I64_ATOMIC_RMW32_CMPXCHG_U(read_MEMARG());
		}
		return true;
	}

	// Resets the internal code pointer to the code in the given function.
	def reset(func: FuncDecl) {
		this.codeptr.reset(func.cur_bytecode, 0, func.cur_bytecode.length);
		this.origptr.reset(func.orig_bytecode, 0, func.orig_bytecode.length);
	}

	// Gets a code pointer to the first immediate for the current instruction.
	// This code pointer does not alias the internal code pointer, so reading from it does not
	// interfere with iteration over the bytecodes.
	def immptr() -> CodePtr {
		imm.reset(codeptr.data, imm_pos, codeptr.pos);
		return imm;
	}

	// Opcodes are organized into categories by the default visit_OP() methods.
	// Override these methods to handle a whole category of bytecodes at once.
	def visitOp(op: Opcode) 			{ }
	def visitProbe()				{ }
	def visitConst(op: Opcode)			{ visitOp(op); }
	def visitMisc(op: Opcode) 			{ visitOp(op); }
	def visitControl(op: Opcode) 			{ visitOp(op); }
	def visitCall(op: Opcode)			{ visitOp(op); }
	def visitLocal(op: Opcode, local_index: u32)	{ visitOp(op); }
	def visitGlobal(op: Opcode, local_index: u32)	{ visitOp(op); }
	def visitTable(op: Opcode, table_index: u32)	{ visitOp(op); }
	def visitMem(op: Opcode, memory_index: u32)	{ visitOp(op); }
	def visitLoad(op: Opcode, imm: MemArg)		{ visitMem(op, imm.memory_index); }
	def visitStore(op: Opcode, imm: MemArg)		{ visitMem(op, imm.memory_index); }
	def visitUnop(op: Opcode)			{ visitOp(op); }
	def visitBinop(op: Opcode)			{ visitOp(op); }
	def visitCompare(op: Opcode)			{ visitBinop(op); }
	def visitConvert(op: Opcode)			{ visitUnop(op); }
	def visitSimd(op: Opcode)			{ visitOp(op); }
	def visitRef(op: Opcode)			{ visitOp(op); }
	def visitGc(op: Opcode)				{ visitOp(op); }
	def visitAtomic(op: Opcode, imm: MemArg)	{ visitOp(op); }

	// Visit methods for each opcode.
	// Override these methods to handle a single instruction.
	// XXX: could be generated automatically from the Opcodes definition.
	def visit_UNREACHABLE	() 			{ visitMisc(Opcode.UNREACHABLE); }
	def visit_NOP		() 			{ visitMisc(Opcode.NOP); }
	def visit_BLOCK		(blocktype_code: int) 	{ visitControl(Opcode.BLOCK); }
	def visit_LOOP		(blocktype_code: int) 	{ visitControl(Opcode.LOOP); }
	def visit_IF		(blocktype_code: int) 	{ visitControl(Opcode.IF); }
	def visit_ELSE		() 			{ visitControl(Opcode.ELSE); }
	def visit_TRY		(blocktype_code: int) 	{ visitControl(Opcode.TRY); }
	def visit_CATCH		(tag_code: u32) 	{ visitControl(Opcode.CATCH); }
	def visit_THROW		(tag_code: u32) 	{ visitControl(Opcode.THROW); }
	def visit_RETHROW	(depth: u32) 		{ visitControl(Opcode.RETHROW); }
	def visit_END		() 			{ visitControl(Opcode.END); }
	def visit_BR		(depth: u32) 		{ visitControl(Opcode.BR); }
	def visit_BR_IF		(depth: u32) 		{ visitControl(Opcode.BR_IF); }
	def visit_BR_TABLE	(labels: Range<u32>) 	{ visitControl(Opcode.BR_TABLE); }
	def visit_RETURN	() 			{ visitControl(Opcode.RETURN); }
	def visit_CALL		(sig_index: u32) 	{ visitCall(Opcode.CALL); }
	def visit_CALL_INDIRECT	(sig_index: u32, table_index: u32) 		{ visitCall(Opcode.CALL_INDIRECT); }
	def visit_RETURN_CALL	(func_index: u32) 				{ visitCall(Opcode.RETURN_CALL); }
	def visit_RETURN_CALL_INDIRECT(sig_index: u32, table_index: u32)	{ visitCall(Opcode.RETURN_CALL_INDIRECT); }
	def visit_CALL_REF	(sig_index: u32) 				{ visitCall(Opcode.CALL_REF); }
	def visit_RETURN_CALL_REF(sig_index: u32) 				{ visitCall(Opcode.RETURN_CALL_REF); }
	def visit_DELEGATE	(depth: u32) 					{ visitControl(Opcode.DELEGATE); }
	def visit_CATCH_ALL	() 						{ visitControl(Opcode.CATCH_ALL); }
	def visit_DROP		() 						{ visitMisc(Opcode.DROP); }
	def visit_SELECT	() 						{ visitMisc(Opcode.SELECT); }
	def visit_SELECT_T	(val_types: Array<(int, u32)>) 			{ visitMisc(Opcode.SELECT_T); }
	// Locals.
	def visit_LOCAL_GET(local_index: u32) { visitLocal(Opcode.LOCAL_GET, local_index); }
	def visit_LOCAL_SET(local_index: u32) { visitLocal(Opcode.LOCAL_SET, local_index); }
	def visit_LOCAL_TEE(local_index: u32) { visitLocal(Opcode.LOCAL_TEE, local_index); }
	// Globals.
	def visit_GLOBAL_GET		(global_index: u32) { visitGlobal(Opcode.GLOBAL_GET, global_index); }
	def visit_GLOBAL_SET		(global_index: u32) { visitGlobal(Opcode.GLOBAL_SET, global_index); }
	// Table elems.
	def visit_TABLE_GET		(table_index: u32) { visitTable(Opcode.TABLE_GET, table_index); }
	def visit_TABLE_SET		(table_index: u32) { visitTable(Opcode.TABLE_SET, table_index); }
	// Loads and stores.
	def visit_I32_LOAD		(imm: MemArg) { visitLoad(Opcode.I32_LOAD, imm); }
	def visit_I64_LOAD		(imm: MemArg) { visitLoad(Opcode.I64_LOAD, imm); }
	def visit_F32_LOAD		(imm: MemArg) { visitLoad(Opcode.F32_LOAD, imm); }
	def visit_F64_LOAD		(imm: MemArg) { visitLoad(Opcode.F64_LOAD, imm); }
	def visit_I32_LOAD8_S		(imm: MemArg) { visitLoad(Opcode.I32_LOAD8_S, imm); }
	def visit_I32_LOAD8_U		(imm: MemArg) { visitLoad(Opcode.I32_LOAD8_U, imm); }
	def visit_I32_LOAD16_S		(imm: MemArg) { visitLoad(Opcode.I32_LOAD16_S, imm); }
	def visit_I32_LOAD16_U		(imm: MemArg) { visitLoad(Opcode.I32_LOAD16_U, imm); }
	def visit_I64_LOAD8_S		(imm: MemArg) { visitLoad(Opcode.I64_LOAD8_S, imm); }
	def visit_I64_LOAD8_U		(imm: MemArg) { visitLoad(Opcode.I64_LOAD8_U, imm); }
	def visit_I64_LOAD16_S		(imm: MemArg) { visitLoad(Opcode.I64_LOAD16_S, imm); }
	def visit_I64_LOAD16_U		(imm: MemArg) { visitLoad(Opcode.I64_LOAD16_U, imm); }
	def visit_I64_LOAD32_S		(imm: MemArg) { visitLoad(Opcode.I64_LOAD32_S, imm); }
	def visit_I64_LOAD32_U		(imm: MemArg) { visitLoad(Opcode.I64_LOAD32_U, imm); }
	def visit_I32_STORE		(imm: MemArg) { visitStore(Opcode.I32_STORE, imm); }
	def visit_I64_STORE		(imm: MemArg) { visitStore(Opcode.I64_STORE, imm); }
	def visit_F32_STORE		(imm: MemArg) { visitStore(Opcode.F32_STORE, imm); }
	def visit_F64_STORE		(imm: MemArg) { visitStore(Opcode.F64_STORE, imm); }
	def visit_I32_STORE8		(imm: MemArg) { visitStore(Opcode.I32_STORE8, imm); }
	def visit_I32_STORE16		(imm: MemArg) { visitStore(Opcode.I32_STORE16, imm); }
	def visit_I64_STORE8		(imm: MemArg) { visitStore(Opcode.I64_STORE8, imm); }
	def visit_I64_STORE16		(imm: MemArg) { visitStore(Opcode.I64_STORE16, imm); }
	def visit_I64_STORE32		(imm: MemArg) { visitStore(Opcode.I64_STORE32, imm); }
	// Misc memory.
	def visit_MEMORY_SIZE		(memory_index: u32) { visitMem(Opcode.MEMORY_SIZE, memory_index); }
	def visit_MEMORY_GROW		(memory_index: u32) { visitMem(Opcode.MEMORY_GROW, memory_index); }
	// Constants.
	def visit_I32_CONST		(val: i32) { visitConst(Opcode.I32_CONST); }
	def visit_I64_CONST		(val: i64) { visitConst(Opcode.I64_CONST); }
	def visit_F32_CONST		(bits: u32) { visitConst(Opcode.F32_CONST); }
	def visit_F64_CONST		(bits: u64) { visitConst(Opcode.F64_CONST); }
	// Comparisons.
	def visit_I32_EQZ		() { visitCompare(Opcode.I32_EQZ); }
	def visit_I32_EQ		() { visitCompare(Opcode.I32_EQ); }
	def visit_I32_NE		() { visitCompare(Opcode.I32_NE); }
	def visit_I32_LT_S		() { visitCompare(Opcode.I32_LT_S); }
	def visit_I32_LT_U		() { visitCompare(Opcode.I32_LT_U); }
	def visit_I32_GT_S		() { visitCompare(Opcode.I32_GT_S); }
	def visit_I32_GT_U		() { visitCompare(Opcode.I32_GT_U); }
	def visit_I32_LE_S		() { visitCompare(Opcode.I32_LE_S); }
	def visit_I32_LE_U		() { visitCompare(Opcode.I32_LE_U); }
	def visit_I32_GE_S		() { visitCompare(Opcode.I32_GE_S); }
	def visit_I32_GE_U		() { visitCompare(Opcode.I32_GE_U); }
	def visit_I64_EQZ		() { visitCompare(Opcode.I64_EQZ); }
	def visit_I64_EQ		() { visitCompare(Opcode.I64_EQ); }
	def visit_I64_NE		() { visitCompare(Opcode.I64_NE); }
	def visit_I64_LT_S		() { visitCompare(Opcode.I64_LT_S); }
	def visit_I64_LT_U		() { visitCompare(Opcode.I64_LT_U); }
	def visit_I64_GT_S		() { visitCompare(Opcode.I64_GT_S); }
	def visit_I64_GT_U		() { visitCompare(Opcode.I64_GT_U); }
	def visit_I64_LE_S		() { visitCompare(Opcode.I64_LE_S); }
	def visit_I64_LE_U		() { visitCompare(Opcode.I64_LE_U); }
	def visit_I64_GE_S		() { visitCompare(Opcode.I64_GE_S); }
	def visit_I64_GE_U		() { visitCompare(Opcode.I64_GE_U); }
	def visit_F32_EQ		() { visitCompare(Opcode.F32_EQ); }
	def visit_F32_NE		() { visitCompare(Opcode.F32_NE); }
	def visit_F32_LT		() { visitCompare(Opcode.F32_LT); }
	def visit_F32_GT		() { visitCompare(Opcode.F32_GT); }
	def visit_F32_LE		() { visitCompare(Opcode.F32_LE); }
	def visit_F32_GE		() { visitCompare(Opcode.F32_GE); }
	def visit_F64_EQ		() { visitCompare(Opcode.F64_EQ); }
	def visit_F64_NE		() { visitCompare(Opcode.F64_NE); }
	def visit_F64_LT		() { visitCompare(Opcode.F64_LT); }
	def visit_F64_GT		() { visitCompare(Opcode.F64_GT); }
	def visit_F64_LE		() { visitCompare(Opcode.F64_LE); }
	def visit_F64_GE		() { visitCompare(Opcode.F64_GE); }
	// I32 arithmetic.
	def visit_I32_CLZ		() { visitUnop(Opcode.I32_CLZ); }
	def visit_I32_CTZ		() { visitUnop(Opcode.I32_CTZ); }
	def visit_I32_POPCNT		() { visitUnop(Opcode.I32_POPCNT); }
	def visit_I32_ADD		() { visitBinop(Opcode.I32_ADD); }
	def visit_I32_SUB		() { visitBinop(Opcode.I32_SUB); }
	def visit_I32_MUL		() { visitBinop(Opcode.I32_MUL); }
	def visit_I32_DIV_S		() { visitBinop(Opcode.I32_DIV_S); }
	def visit_I32_DIV_U		() { visitBinop(Opcode.I32_DIV_U); }
	def visit_I32_REM_S		() { visitBinop(Opcode.I32_REM_S); }
	def visit_I32_REM_U		() { visitBinop(Opcode.I32_REM_U); }
	def visit_I32_AND		() { visitBinop(Opcode.I32_AND); }
	def visit_I32_OR		() { visitBinop(Opcode.I32_OR); }
	def visit_I32_XOR		() { visitBinop(Opcode.I32_XOR); }
	def visit_I32_SHL		() { visitBinop(Opcode.I32_SHL); }
	def visit_I32_SHR_S		() { visitBinop(Opcode.I32_SHR_S); }
	def visit_I32_SHR_U		() { visitBinop(Opcode.I32_SHR_U); }
	def visit_I32_ROTL		() { visitBinop(Opcode.I32_ROTL); }
	def visit_I32_ROTR		() { visitBinop(Opcode.I32_ROTR); }
	// I64 arithmetic.
	def visit_I64_CLZ		() { visitUnop(Opcode.I64_CLZ); }
	def visit_I64_CTZ		() { visitUnop(Opcode.I64_CTZ); }
	def visit_I64_POPCNT		() { visitUnop(Opcode.I64_POPCNT); }
	def visit_I64_ADD		() { visitBinop(Opcode.I64_ADD); }
	def visit_I64_SUB		() { visitBinop(Opcode.I64_SUB); }
	def visit_I64_MUL		() { visitBinop(Opcode.I64_MUL); }
	def visit_I64_DIV_S		() { visitBinop(Opcode.I64_DIV_S); }
	def visit_I64_DIV_U		() { visitBinop(Opcode.I64_DIV_U); }
	def visit_I64_REM_S		() { visitBinop(Opcode.I64_REM_S); }
	def visit_I64_REM_U		() { visitBinop(Opcode.I64_REM_U); }
	def visit_I64_AND		() { visitBinop(Opcode.I64_AND); }
	def visit_I64_OR		() { visitBinop(Opcode.I64_OR); }
	def visit_I64_XOR		() { visitBinop(Opcode.I64_XOR); }
	def visit_I64_SHL		() { visitBinop(Opcode.I64_SHL); }
	def visit_I64_SHR_S		() { visitBinop(Opcode.I64_SHR_S); }
	def visit_I64_SHR_U		() { visitBinop(Opcode.I64_SHR_U); }
	def visit_I64_ROTL		() { visitBinop(Opcode.I64_ROTL); }
	def visit_I64_ROTR		() { visitBinop(Opcode.I64_ROTR); }
	// F32 arithmetic.
	def visit_F32_ABS		() { visitUnop(Opcode.F32_ABS); }
	def visit_F32_NEG		() { visitUnop(Opcode.F32_NEG); }
	def visit_F32_CEIL		() { visitUnop(Opcode.F32_CEIL); }
	def visit_F32_FLOOR		() { visitUnop(Opcode.F32_FLOOR); }
	def visit_F32_TRUNC		() { visitUnop(Opcode.F32_TRUNC); }
	def visit_F32_NEAREST		() { visitUnop(Opcode.F32_NEAREST); }
	def visit_F32_SQRT		() { visitUnop(Opcode.F32_SQRT); }
	def visit_F32_ADD		() { visitBinop(Opcode.F32_ADD); }
	def visit_F32_SUB		() { visitBinop(Opcode.F32_SUB); }
	def visit_F32_MUL		() { visitBinop(Opcode.F32_MUL); }
	def visit_F32_DIV		() { visitBinop(Opcode.F32_DIV); }
	def visit_F32_MIN		() { visitBinop(Opcode.F32_MIN); }
	def visit_F32_MAX		() { visitBinop(Opcode.F32_MAX); }
	def visit_F32_COPYSIGN		() { visitBinop(Opcode.F32_COPYSIGN); }
	// F64 arithmetic.
	def visit_F64_ABS		() { visitUnop(Opcode.F64_ABS); }
	def visit_F64_NEG		() { visitUnop(Opcode.F64_NEG); }
	def visit_F64_CEIL		() { visitUnop(Opcode.F64_CEIL); }
	def visit_F64_FLOOR		() { visitUnop(Opcode.F64_FLOOR); }
	def visit_F64_TRUNC		() { visitUnop(Opcode.F64_TRUNC); }
	def visit_F64_NEAREST		() { visitUnop(Opcode.F64_NEAREST); }
	def visit_F64_SQRT		() { visitUnop(Opcode.F64_SQRT); }
	def visit_F64_ADD		() { visitBinop(Opcode.F64_ADD); }
	def visit_F64_SUB		() { visitBinop(Opcode.F64_SUB); }
	def visit_F64_MUL		() { visitBinop(Opcode.F64_MUL); }
	def visit_F64_DIV		() { visitBinop(Opcode.F64_DIV); }
	def visit_F64_MIN		() { visitBinop(Opcode.F64_MIN); }
	def visit_F64_MAX		() { visitBinop(Opcode.F64_MAX); }
	def visit_F64_COPYSIGN		() { visitBinop(Opcode.F64_COPYSIGN); }
	// Conversions and casts.
	def visit_I32_WRAP_I64		() { visitConvert(Opcode.I32_WRAP_I64); }
	def visit_I32_TRUNC_F32_S	() { visitConvert(Opcode.I32_TRUNC_F32_S); }
	def visit_I32_TRUNC_F32_U	() { visitConvert(Opcode.I32_TRUNC_F32_U); }
	def visit_I32_TRUNC_F64_S	() { visitConvert(Opcode.I32_TRUNC_F64_S); }
	def visit_I32_TRUNC_F64_U	() { visitConvert(Opcode.I32_TRUNC_F64_U); }
	def visit_I64_EXTEND_I32_S	() { visitConvert(Opcode.I64_EXTEND_I32_S); }
	def visit_I64_EXTEND_I32_U	() { visitConvert(Opcode.I64_EXTEND_I32_U); }
	def visit_I64_TRUNC_F32_S	() { visitConvert(Opcode.I64_TRUNC_F32_S); }
	def visit_I64_TRUNC_F32_U	() { visitConvert(Opcode.I64_TRUNC_F32_U); }
	def visit_I64_TRUNC_F64_S	() { visitConvert(Opcode.I64_TRUNC_F64_S); }
	def visit_I64_TRUNC_F64_U	() { visitConvert(Opcode.I64_TRUNC_F64_U); }
	def visit_F32_CONVERT_I32_S	() { visitConvert(Opcode.F32_CONVERT_I32_S); }
	def visit_F32_CONVERT_I32_U	() { visitConvert(Opcode.F32_CONVERT_I32_U); }
	def visit_F32_CONVERT_I64_S	() { visitConvert(Opcode.F32_CONVERT_I64_S); }
	def visit_F32_CONVERT_I64_U	() { visitConvert(Opcode.F32_CONVERT_I64_U); }
	def visit_F32_DEMOTE_F64	() { visitConvert(Opcode.F32_DEMOTE_F64); }
	def visit_F64_CONVERT_I32_S	() { visitConvert(Opcode.F64_CONVERT_I32_S); }
	def visit_F64_CONVERT_I32_U	() { visitConvert(Opcode.F64_CONVERT_I32_U); }
	def visit_F64_CONVERT_I64_S	() { visitConvert(Opcode.F64_CONVERT_I64_S); }
	def visit_F64_CONVERT_I64_U	() { visitConvert(Opcode.F64_CONVERT_I64_U); }
	def visit_F64_PROMOTE_F32	() { visitConvert(Opcode.F64_PROMOTE_F32); }
	def visit_I32_REINTERPRET_F32	() { visitConvert(Opcode.I32_REINTERPRET_F32); }
	def visit_I64_REINTERPRET_F64	() { visitConvert(Opcode.I64_REINTERPRET_F64); }
	def visit_F32_REINTERPRET_I32	() { visitConvert(Opcode.F32_REINTERPRET_I32); }
	def visit_F64_REINTERPRET_I64	() { visitConvert(Opcode.F64_REINTERPRET_I64); }
	// Sign extensions.
	def visit_I32_EXTEND8_S		() { visitUnop(Opcode.I32_EXTEND8_S); }
	def visit_I32_EXTEND16_S	() { visitUnop(Opcode.I32_EXTEND16_S); }
	def visit_I64_EXTEND8_S		() { visitUnop(Opcode.I64_EXTEND8_S); }
	def visit_I64_EXTEND16_S	() { visitUnop(Opcode.I64_EXTEND16_S); }
	def visit_I64_EXTEND32_S	() { visitUnop(Opcode.I64_EXTEND32_S); }
	// Reference instructions.
	def visit_REF_NULL		(ht_index: u32)		{ visitRef(Opcode.REF_NULL); }
	def visit_REF_IS_NULL		()			{ visitRef(Opcode.REF_IS_NULL); }
	def visit_REF_FUNC		(func_index: u32)	{ visitRef(Opcode.REF_FUNC); }
	def visit_REF_AS_NON_NULL	() 			{ visitRef(Opcode.REF_AS_NON_NULL); }
	def visit_BR_ON_NULL		(label: u32) 		{ visitControl(Opcode.BR_ON_NULL); }
	def visit_REF_EQ		() 			{ visitRef(Opcode.REF_EQ); }
	def visit_BR_ON_NON_NULL	(label: u32) 		{ visitControl(Opcode.BR_ON_NON_NULL); }
	// FB prefix: gc proposal opcodes.
	def visit_STRUCT_NEW_CANON		(ht_index: u32) 			{ visitGc(Opcode.STRUCT_NEW_CANON); }
	def visit_STRUCT_NEW_CANON_DEFAULT	(ht_index: u32) 			{ visitGc(Opcode.STRUCT_NEW_CANON_DEFAULT); }
	def visit_STRUCT_GET			(ht_index: u32, field_index: u32) 	{ visitGc(Opcode.STRUCT_GET); }
	def visit_STRUCT_GET_S			(ht_index: u32, field_index: u32) 	{ visitGc(Opcode.STRUCT_GET_S); }
	def visit_STRUCT_GET_U			(ht_index: u32, field_index: u32) 	{ visitGc(Opcode.STRUCT_GET_U); }
	def visit_STRUCT_SET			(ht_index: u32, field_index: u32) 	{ visitGc(Opcode.STRUCT_SET); }
	def visit_ARRAY_NEW_CANON		(ht_index: u32) 			{ visitGc(Opcode.ARRAY_NEW_CANON); }
	def visit_ARRAY_NEW_CANON_DEFAULT	(ht_index: u32) 			{ visitGc(Opcode.ARRAY_NEW_CANON_DEFAULT); }
	def visit_ARRAY_GET			(ht_index: u32) 			{ visitGc(Opcode.ARRAY_GET); }
	def visit_ARRAY_GET_S			(ht_index: u32) 			{ visitGc(Opcode.ARRAY_GET_S); }
	def visit_ARRAY_GET_U			(ht_index: u32) 			{ visitGc(Opcode.ARRAY_GET_U); }
	def visit_ARRAY_SET			(ht_index: u32) 			{ visitGc(Opcode.ARRAY_SET); }
	def visit_ARRAY_LEN			() 					{ visitGc(Opcode.ARRAY_LEN); }
	def visit_ARRAY_NEW_CANON_FIXED		(ht_index: u32, length: u32)		{ visitGc(Opcode.ARRAY_NEW_CANON_FIXED); }
	def visit_ARRAY_NEW_CANON_DATA		(ht_index: u32, data_index: u32)	{ visitGc(Opcode.ARRAY_NEW_CANON_DATA); }
	def visit_ARRAY_NEW_CANON_ELEM		(ht_index: u32, elem_index: u32)	{ visitGc(Opcode.ARRAY_NEW_CANON_ELEM); }
	def visit_I31_NEW			()					{ visitGc(Opcode.I31_NEW); }
	def visit_I31_GET_S			()					{ visitGc(Opcode.I31_GET_S); }
	def visit_I31_GET_U			() 					{ visitGc(Opcode.I31_GET_U); }
	def visit_REF_TEST			(ht_index: u32)				{ visitGc(Opcode.REF_TEST); }
	def visit_REF_CAST			(ht_index: u32)				{ visitGc(Opcode.REF_CAST); }
	def visit_BR_ON_CAST			(label: u32, ht_index: u32)		{ visitControl(Opcode.BR_ON_CAST); }
	def visit_BR_ON_CAST_FAIL		(label: u32, ht_index: u32)		{ visitControl(Opcode.BR_ON_CAST_FAIL); }
	def visit_REF_TEST_NULL			(ht_index: u32)				{ visitGc(Opcode.REF_TEST_NULL); }
	def visit_REF_CAST_NULL			(ht_index: u32)				{ visitGc(Opcode.REF_CAST_NULL); }
	def visit_BR_ON_CAST_NULL		(label: u32, ht_index: u32)		{ visitControl(Opcode.BR_ON_CAST_NULL); }
	def visit_BR_ON_CAST_FAIL_NULL		(label: u32, ht_index: u32)		{ visitControl(Opcode.BR_ON_CAST_FAIL_NULL); }
	def visit_EXTERN_INTERNALIZE		() 					{ visitGc(Opcode.EXTERN_INTERNALIZE); }
	def visit_EXTERN_EXTERNALIZE		() 					{ visitGc(Opcode.EXTERN_EXTERNALIZE); }
	// FC prefix: saturating truncations.
	def visit_I32_TRUNC_SAT_F32_S	() { visitConvert(Opcode.I32_TRUNC_SAT_F32_S); }
	def visit_I32_TRUNC_SAT_F32_U	() { visitConvert(Opcode.I32_TRUNC_SAT_F32_U); }
	def visit_I32_TRUNC_SAT_F64_S	() { visitConvert(Opcode.I32_TRUNC_SAT_F64_S); }
	def visit_I32_TRUNC_SAT_F64_U	() { visitConvert(Opcode.I32_TRUNC_SAT_F64_U); }
	def visit_I64_TRUNC_SAT_F32_S	() { visitConvert(Opcode.I64_TRUNC_SAT_F32_S); }
	def visit_I64_TRUNC_SAT_F32_U	() { visitConvert(Opcode.I64_TRUNC_SAT_F32_U); }
	def visit_I64_TRUNC_SAT_F64_S	() { visitConvert(Opcode.I64_TRUNC_SAT_F64_S); }
	def visit_I64_TRUNC_SAT_F64_U	() { visitConvert(Opcode.I64_TRUNC_SAT_F64_U); }
	// FC prefix: bulk-memory and references.
	def visit_MEMORY_INIT		(data_index: u32, memory_index: u32) { visitMem(Opcode.MEMORY_INIT, memory_index); }
	def visit_DATA_DROP		(data_index: u32) 		{ visitMisc(Opcode.DATA_DROP); }
	def visit_MEMORY_COPY		(dst_memory_index: u32, src_memory_index: u32) { visitMem(Opcode.MEMORY_COPY, dst_memory_index); }
	def visit_MEMORY_FILL		(memory_index: u32)		{ visitMem(Opcode.MEMORY_FILL, memory_index); }
	def visit_TABLE_INIT		(elem_index: u32, table_index: u32) { visitTable(Opcode.TABLE_INIT, table_index); }
	def visit_ELEM_DROP		(elem_index: u32) 		{ visitMisc(Opcode.ELEM_DROP); }
	def visit_TABLE_COPY		(dst_table_index: u32, src_table_index: u32)	{ visitTable(Opcode.TABLE_COPY, dst_table_index); }
	def visit_TABLE_GROW		(table_index: u32)		{ visitTable(Opcode.TABLE_GROW, table_index); }
	def visit_TABLE_SIZE		(table_index: u32)		{ visitTable(Opcode.TABLE_SIZE, table_index); }
	def visit_TABLE_FILL		(table_index: u32)		{ visitTable(Opcode.TABLE_FILL, table_index); }
	// FD prefix: vector instructions.
	def visit_V128_LOAD			(imm: MemArg) { visitLoad(Opcode.V128_LOAD, imm); }
	def visit_V128_LOAD_8X8_S		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_8X8_S, imm); }
	def visit_V128_LOAD_8X8_U		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_8X8_U, imm); }
	def visit_V128_LOAD_16X4_S		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_16X4_S, imm); }
	def visit_V128_LOAD_16X4_U		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_16X4_U, imm); }
	def visit_V128_LOAD_32X2_S		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_32X2_S, imm); }
	def visit_V128_LOAD_32X2_U		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_32X2_U, imm); }
	def visit_V128_LOAD_8_SPLAT		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_8_SPLAT, imm); }
	def visit_V128_LOAD_16_SPLAT		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_16_SPLAT, imm); }
	def visit_V128_LOAD_32_SPLAT		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_32_SPLAT, imm); }
	def visit_V128_LOAD_64_SPLAT		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_64_SPLAT, imm); }
	def visit_V128_LOAD_32_ZERO		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_32_ZERO, imm); }
	def visit_V128_LOAD_64_ZERO		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_64_ZERO, imm); }
	def visit_V128_STORE			(imm: MemArg) { visitStore(Opcode.V128_STORE, imm); }
	def visit_V128_LOAD_8_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_LOAD_8_LANE, imm); }
	def visit_V128_LOAD_16_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_LOAD_16_LANE, imm); }
	def visit_V128_LOAD_32_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_LOAD_32_LANE, imm); }
	def visit_V128_LOAD_64_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_LOAD_64_LANE, imm); }
	def visit_V128_STORE_8_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_STORE_8_LANE, imm); }
	def visit_V128_STORE_16_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_STORE_16_LANE, imm); }
	def visit_V128_STORE_32_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_STORE_32_LANE, imm); }
	def visit_V128_STORE_64_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_STORE_64_LANE, imm); }
	def visit_V128_CONST			(low: u64, high: u64) { visitConst(Opcode.V128_CONST); }
	def visit_I8X16_SHUFFLE			(lane_indexes: Array<u8>) { visitSimd(Opcode.I8X16_SHUFFLE); }
	def visit_I8X16_EXTRACTLANE_S		(lane_index: u8) { visitSimd(Opcode.I8X16_EXTRACTLANE_S); }
	def visit_I8X16_EXTRACTLANE_U		(lane_index: u8) { visitSimd(Opcode.I8X16_EXTRACTLANE_U); }
	def visit_I8X16_REPLACELANE		(lane_index: u8) { visitSimd(Opcode.I8X16_REPLACELANE); }
	def visit_I16X8_EXTRACTLANE_S		(lane_index: u8) { visitSimd(Opcode.I16X8_EXTRACTLANE_S); }
	def visit_I16X8_EXTRACTLANE_U		(lane_index: u8) { visitSimd(Opcode.I16X8_EXTRACTLANE_U); }
	def visit_I16X8_REPLACELANE		(lane_index: u8) { visitSimd(Opcode.I16X8_REPLACELANE); }
	def visit_I32X4_EXTRACTLANE		(lane_index: u8) { visitSimd(Opcode.I32X4_EXTRACTLANE); }
	def visit_I32X4_REPLACELANE		(lane_index: u8) { visitSimd(Opcode.I32X4_REPLACELANE); }
	def visit_I64X2_EXTRACTLANE		(lane_index: u8) { visitSimd(Opcode.I64X2_EXTRACTLANE); }
	def visit_I64X2_REPLACELANE		(lane_index: u8) { visitSimd(Opcode.I64X2_REPLACELANE); }
	def visit_F32X4_EXTRACTLANE		(lane_index: u8) { visitSimd(Opcode.F32X4_EXTRACTLANE); }
	def visit_F32X4_REPLACELANE		(lane_index: u8) { visitSimd(Opcode.F32X4_REPLACELANE); }
	def visit_F64X2_EXTRACTLANE		(lane_index: u8) { visitSimd(Opcode.F64X2_EXTRACTLANE); }
	def visit_F64X2_REPLACELANE		(lane_index: u8) { visitSimd(Opcode.F64X2_REPLACELANE); }
	def visit_I8X16_SWIZZLE			() { visitSimd(Opcode.I8X16_SWIZZLE); }
	def visit_I8X16_SPLAT			() { visitSimd(Opcode.I8X16_SPLAT); }
	def visit_I16X8_SPLAT			() { visitSimd(Opcode.I16X8_SPLAT); }
	def visit_I32X4_SPLAT			() { visitSimd(Opcode.I32X4_SPLAT); }
	def visit_I64X2_SPLAT			() { visitSimd(Opcode.I64X2_SPLAT); }
	def visit_F32X4_SPLAT			() { visitSimd(Opcode.F32X4_SPLAT); }
	def visit_F64X2_SPLAT			() { visitSimd(Opcode.F64X2_SPLAT); }
	def visit_I8X16_EQ			() { visitSimd(Opcode.I8X16_EQ); }
	def visit_I8X16_NE			() { visitSimd(Opcode.I8X16_NE); }
	def visit_I8X16_LT_S			() { visitSimd(Opcode.I8X16_LT_S); }
	def visit_I8X16_LT_U			() { visitSimd(Opcode.I8X16_LT_U); }
	def visit_I8X16_GT_S			() { visitSimd(Opcode.I8X16_GT_S); }
	def visit_I8X16_GT_U			() { visitSimd(Opcode.I8X16_GT_U); }
	def visit_I8X16_LE_S			() { visitSimd(Opcode.I8X16_LE_S); }
	def visit_I8X16_LE_U			() { visitSimd(Opcode.I8X16_LE_U); }
	def visit_I8X16_GE_S			() { visitSimd(Opcode.I8X16_GE_S); }
	def visit_I8X16_GE_U			() { visitSimd(Opcode.I8X16_GE_U); }
	def visit_I16X8_EQ			() { visitSimd(Opcode.I16X8_EQ); }
	def visit_I16X8_NE			() { visitSimd(Opcode.I16X8_NE); }
	def visit_I16X8_LT_S			() { visitSimd(Opcode.I16X8_LT_S); }
	def visit_I16X8_LT_U			() { visitSimd(Opcode.I16X8_LT_U); }
	def visit_I16X8_GT_S			() { visitSimd(Opcode.I16X8_GT_S); }
	def visit_I16X8_GT_U			() { visitSimd(Opcode.I16X8_GT_U); }
	def visit_I16X8_LE_S			() { visitSimd(Opcode.I16X8_LE_S); }
	def visit_I16X8_LE_U			() { visitSimd(Opcode.I16X8_LE_U); }
	def visit_I16X8_GE_S			() { visitSimd(Opcode.I16X8_GE_S); }
	def visit_I16X8_GE_U			() { visitSimd(Opcode.I16X8_GE_U); }
	def visit_I32X4_EQ			() { visitSimd(Opcode.I32X4_EQ); }
	def visit_I32X4_NE			() { visitSimd(Opcode.I32X4_NE); }
	def visit_I32X4_LT_S			() { visitSimd(Opcode.I32X4_LT_S); }
	def visit_I32X4_LT_U			() { visitSimd(Opcode.I32X4_LT_U); }
	def visit_I32X4_GT_S			() { visitSimd(Opcode.I32X4_GT_S); }
	def visit_I32X4_GT_U			() { visitSimd(Opcode.I32X4_GT_U); }
	def visit_I32X4_LE_S			() { visitSimd(Opcode.I32X4_LE_S); }
	def visit_I32X4_LE_U			() { visitSimd(Opcode.I32X4_LE_U); }
	def visit_I32X4_GE_S			() { visitSimd(Opcode.I32X4_GE_S); }
	def visit_I32X4_GE_U			() { visitSimd(Opcode.I32X4_GE_U); }
	def visit_I64X2_EQ			() { visitSimd(Opcode.I64X2_EQ); }
	def visit_I64X2_NE			() { visitSimd(Opcode.I64X2_NE); }
	def visit_I64X2_LT_S			() { visitSimd(Opcode.I64X2_LT_S); }
	def visit_I64X2_GT_S			() { visitSimd(Opcode.I64X2_GT_S); }
	def visit_I64X2_LE_S			() { visitSimd(Opcode.I64X2_LE_S); }
	def visit_I64X2_GE_S			() { visitSimd(Opcode.I64X2_GE_S); }
	def visit_F32X4_EQ			() { visitSimd(Opcode.F32X4_EQ); }
	def visit_F32X4_NE			() { visitSimd(Opcode.F32X4_NE); }
	def visit_F32X4_LT			() { visitSimd(Opcode.F32X4_LT); }
	def visit_F32X4_GT			() { visitSimd(Opcode.F32X4_GT); }
	def visit_F32X4_LE			() { visitSimd(Opcode.F32X4_LE); }
	def visit_F32X4_GE			() { visitSimd(Opcode.F32X4_GE); }
	def visit_F64X2_EQ			() { visitSimd(Opcode.F64X2_EQ); }
	def visit_F64X2_NE			() { visitSimd(Opcode.F64X2_NE); }
	def visit_F64X2_LT			() { visitSimd(Opcode.F64X2_LT); }
	def visit_F64X2_GT			() { visitSimd(Opcode.F64X2_GT); }
	def visit_F64X2_LE			() { visitSimd(Opcode.F64X2_LE); }
	def visit_F64X2_GE			() { visitSimd(Opcode.F64X2_GE); }
	def visit_V128_NOT			() { visitSimd(Opcode.V128_NOT); }
	def visit_V128_AND			() { visitSimd(Opcode.V128_AND); }
	def visit_V128_ANDNOT			() { visitSimd(Opcode.V128_ANDNOT); }
	def visit_V128_OR			() { visitSimd(Opcode.V128_OR); }
	def visit_V128_XOR			() { visitSimd(Opcode.V128_XOR); }
	def visit_V128_BITSELECT		() { visitSimd(Opcode.V128_BITSELECT); }
	def visit_V128_ANYTRUE			() { visitSimd(Opcode.V128_ANYTRUE); }
	def visit_I8X16_ABS			() { visitSimd(Opcode.I8X16_ABS); }
	def visit_I8X16_NEG			() { visitSimd(Opcode.I8X16_NEG); }
	def visit_I8X16_POPCNT			() { visitSimd(Opcode.I8X16_POPCNT); }
	def visit_I8X16_ALLTRUE			() { visitSimd(Opcode.I8X16_ALLTRUE); }
	def visit_I8X16_BITMASK			() { visitSimd(Opcode.I8X16_BITMASK); }
	def visit_I8X16_NARROW_I16X8_S		() { visitSimd(Opcode.I8X16_NARROW_I16X8_S); }
	def visit_I8X16_NARROW_I16X8_U		() { visitSimd(Opcode.I8X16_NARROW_I16X8_U); }
	def visit_I8X16_SHL			() { visitSimd(Opcode.I8X16_SHL); }
	def visit_I8X16_SHR_S			() { visitSimd(Opcode.I8X16_SHR_S); }
	def visit_I8X16_SHR_U			() { visitSimd(Opcode.I8X16_SHR_U); }
	def visit_I8X16_ADD			() { visitSimd(Opcode.I8X16_ADD); }
	def visit_I8X16_ADD_SAT_S		() { visitSimd(Opcode.I8X16_ADD_SAT_S); }
	def visit_I8X16_ADD_SAT_U		() { visitSimd(Opcode.I8X16_ADD_SAT_U); }
	def visit_I8X16_SUB			() { visitSimd(Opcode.I8X16_SUB); }
	def visit_I8X16_SUB_SAT_S		() { visitSimd(Opcode.I8X16_SUB_SAT_S); }
	def visit_I8X16_SUB_SAT_U		() { visitSimd(Opcode.I8X16_SUB_SAT_U); }
	def visit_I8X16_MIN_S			() { visitSimd(Opcode.I8X16_MIN_S); }
	def visit_I8X16_MIN_U			() { visitSimd(Opcode.I8X16_MIN_U); }
	def visit_I8X16_MAX_S			() { visitSimd(Opcode.I8X16_MAX_S); }
	def visit_I8X16_MAX_U			() { visitSimd(Opcode.I8X16_MAX_U); }
	def visit_I8X16_AVGR_U			() { visitSimd(Opcode.I8X16_AVGR_U); }
	def visit_I16X8_EXTADDPAIRWISE_I8X16_S	() { visitSimd(Opcode.I16X8_EXTADDPAIRWISE_I8X16_S); }
	def visit_I16X8_EXTADDPAIRWISE_I8X16_U	() { visitSimd(Opcode.I16X8_EXTADDPAIRWISE_I8X16_U); }
	def visit_I16X8_ABS			() { visitSimd(Opcode.I16X8_ABS); }
	def visit_I16X8_NEG			() { visitSimd(Opcode.I16X8_NEG); }
	def visit_I16X8_Q15MULRSAT_S		() { visitSimd(Opcode.I16X8_Q15MULRSAT_S); }
	def visit_I16X8_ALLTRUE			() { visitSimd(Opcode.I16X8_ALLTRUE); }
	def visit_I16X8_BITMASK			() { visitSimd(Opcode.I16X8_BITMASK); }
	def visit_I16X8_NARROW_I32X4_S		() { visitSimd(Opcode.I16X8_NARROW_I32X4_S); }
	def visit_I16X8_NARROW_I32X4_U		() { visitSimd(Opcode.I16X8_NARROW_I32X4_U); }
	def visit_I16X8_EXTEND_LOW_I8X16_S	() { visitSimd(Opcode.I16X8_EXTEND_LOW_I8X16_S); }
	def visit_I16X8_EXTEND_HIGH_I8X16_S	() { visitSimd(Opcode.I16X8_EXTEND_HIGH_I8X16_S); }
	def visit_I16X8_EXTEND_LOW_I8X16_U	() { visitSimd(Opcode.I16X8_EXTEND_LOW_I8X16_U); }
	def visit_I16X8_EXTEND_HIGH_I8X16_U	() { visitSimd(Opcode.I16X8_EXTEND_HIGH_I8X16_U); }
	def visit_I16X8_SHL			() { visitSimd(Opcode.I16X8_SHL); }
	def visit_I16X8_SHR_S			() { visitSimd(Opcode.I16X8_SHR_S); }
	def visit_I16X8_SHR_U			() { visitSimd(Opcode.I16X8_SHR_U); }
	def visit_I16X8_ADD			() { visitSimd(Opcode.I16X8_ADD); }
	def visit_I16X8_ADD_SAT_S		() { visitSimd(Opcode.I16X8_ADD_SAT_S); }
	def visit_I16X8_ADD_SAT_U		() { visitSimd(Opcode.I16X8_ADD_SAT_U); }
	def visit_I16X8_SUB			() { visitSimd(Opcode.I16X8_SUB); }
	def visit_I16X8_SUB_SAT_S		() { visitSimd(Opcode.I16X8_SUB_SAT_S); }
	def visit_I16X8_SUB_SAT_U		() { visitSimd(Opcode.I16X8_SUB_SAT_U); }
	def visit_I16X8_MUL			() { visitSimd(Opcode.I16X8_MUL); }
	def visit_I16X8_MIN_S			() { visitSimd(Opcode.I16X8_MIN_S); }
	def visit_I16X8_MIN_U			() { visitSimd(Opcode.I16X8_MIN_U); }
	def visit_I16X8_MAX_S			() { visitSimd(Opcode.I16X8_MAX_S); }
	def visit_I16X8_MAX_U			() { visitSimd(Opcode.I16X8_MAX_U); }
	def visit_I16X8_AVGR_U			() { visitSimd(Opcode.I16X8_AVGR_U); }
	def visit_I16X8_EXTMUL_LOW_I8X16_S	() { visitSimd(Opcode.I16X8_EXTMUL_LOW_I8X16_S); }
	def visit_I16X8_EXTMUL_HIGH_I8X16_S	() { visitSimd(Opcode.I16X8_EXTMUL_HIGH_I8X16_S); }
	def visit_I16X8_EXTMUL_LOW_I8X16_U	() { visitSimd(Opcode.I16X8_EXTMUL_LOW_I8X16_U); }
	def visit_I16X8_EXTMUL_HIGH_I8X16_U	() { visitSimd(Opcode.I16X8_EXTMUL_HIGH_I8X16_U); }
	def visit_I32X4_EXTADDPAIRWISE_I16X8_S	() { visitSimd(Opcode.I32X4_EXTADDPAIRWISE_I16X8_S); }
	def visit_I32X4_EXTADDPAIRWISE_I16X8_U	() { visitSimd(Opcode.I32X4_EXTADDPAIRWISE_I16X8_U); }
	def visit_I32X4_ABS			() { visitSimd(Opcode.I32X4_ABS); }
	def visit_I32X4_NEG			() { visitSimd(Opcode.I32X4_NEG); }
	def visit_I32X4_ALLTRUE			() { visitSimd(Opcode.I32X4_ALLTRUE); }
	def visit_I32X4_BITMASK			() { visitSimd(Opcode.I32X4_BITMASK); }
	def visit_I32X4_EXTEND_LOW_I16X8_S	() { visitSimd(Opcode.I32X4_EXTEND_LOW_I16X8_S); }
	def visit_I32X4_EXTEND_HIGH_I16X8_S	() { visitSimd(Opcode.I32X4_EXTEND_HIGH_I16X8_S); }
	def visit_I32X4_EXTEND_LOW_I16X8_U	() { visitSimd(Opcode.I32X4_EXTEND_LOW_I16X8_U); }
	def visit_I32X4_EXTEND_HIGH_I16X8_U	() { visitSimd(Opcode.I32X4_EXTEND_HIGH_I16X8_U); }
	def visit_I32X4_SHL			() { visitSimd(Opcode.I32X4_SHL); }
	def visit_I32X4_SHR_S			() { visitSimd(Opcode.I32X4_SHR_S); }
	def visit_I32X4_SHR_U			() { visitSimd(Opcode.I32X4_SHR_U); }
	def visit_I32X4_ADD			() { visitSimd(Opcode.I32X4_ADD); }
	def visit_I32X4_SUB			() { visitSimd(Opcode.I32X4_SUB); }
	def visit_I32X4_MUL			() { visitSimd(Opcode.I32X4_MUL); }
	def visit_I32X4_MIN_S			() { visitSimd(Opcode.I32X4_MIN_S); }
	def visit_I32X4_MIN_U			() { visitSimd(Opcode.I32X4_MIN_U); }
	def visit_I32X4_MAX_S			() { visitSimd(Opcode.I32X4_MAX_S); }
	def visit_I32X4_MAX_U			() { visitSimd(Opcode.I32X4_MAX_U); }
	def visit_I32X4_DOT_I16X8_S		() { visitSimd(Opcode.I32X4_DOT_I16X8_S); }
	def visit_I32X4_EXTMUL_LOW_I16X8_S	() { visitSimd(Opcode.I32X4_EXTMUL_LOW_I16X8_S); }
	def visit_I32X4_EXTMUL_HIGH_I16X8_S	() { visitSimd(Opcode.I32X4_EXTMUL_HIGH_I16X8_S); }
	def visit_I32X4_EXTMUL_LOW_I16X8_U	() { visitSimd(Opcode.I32X4_EXTMUL_LOW_I16X8_U); }
	def visit_I32X4_EXTMUL_HIGH_I16X8_U	() { visitSimd(Opcode.I32X4_EXTMUL_HIGH_I16X8_U); }
	def visit_I64X2_ABS			() { visitSimd(Opcode.I64X2_ABS); }
	def visit_I64X2_NEG			() { visitSimd(Opcode.I64X2_NEG); }
	def visit_I64X2_ALLTRUE			() { visitSimd(Opcode.I64X2_ALLTRUE); }
	def visit_I64X2_BITMASK			() { visitSimd(Opcode.I64X2_BITMASK); }
	def visit_I64X2_EXTEND_LOW_I32X4_S	() { visitSimd(Opcode.I64X2_EXTEND_LOW_I32X4_S); }
	def visit_I64X2_EXTEND_HIGH_I32X4_S	() { visitSimd(Opcode.I64X2_EXTEND_HIGH_I32X4_S); }
	def visit_I64X2_EXTEND_LOW_I32X4_U	() { visitSimd(Opcode.I64X2_EXTEND_LOW_I32X4_U); }
	def visit_I64X2_EXTEND_HIGH_I32X4_U	() { visitSimd(Opcode.I64X2_EXTEND_HIGH_I32X4_U); }
	def visit_I64X2_SHL			() { visitSimd(Opcode.I64X2_SHL); }
	def visit_I64X2_SHR_S			() { visitSimd(Opcode.I64X2_SHR_S); }
	def visit_I64X2_SHR_U			() { visitSimd(Opcode.I64X2_SHR_U); }
	def visit_I64X2_ADD			() { visitSimd(Opcode.I64X2_ADD); }
	def visit_I64X2_SUB			() { visitSimd(Opcode.I64X2_SUB); }
	def visit_I64X2_MUL			() { visitSimd(Opcode.I64X2_MUL); }
	def visit_I64X2_EXTMUL_LOW_I32X4_S	() { visitSimd(Opcode.I64X2_EXTMUL_LOW_I32X4_S); }
	def visit_I64X2_EXTMUL_HIGH_I32X4_S	() { visitSimd(Opcode.I64X2_EXTMUL_HIGH_I32X4_S); }
	def visit_I64X2_EXTMUL_LOW_I32X4_U	() { visitSimd(Opcode.I64X2_EXTMUL_LOW_I32X4_U); }
	def visit_I64X2_EXTMUL_HIGH_I32X4_U	() { visitSimd(Opcode.I64X2_EXTMUL_HIGH_I32X4_U); }
	def visit_F32X4_CEIL			() { visitSimd(Opcode.F32X4_CEIL); }
	def visit_F32X4_FLOOR			() { visitSimd(Opcode.F32X4_FLOOR); }
	def visit_F32X4_TRUNC			() { visitSimd(Opcode.F32X4_TRUNC); }
	def visit_F32X4_NEAREST			() { visitSimd(Opcode.F32X4_NEAREST); }
	def visit_F32X4_ABS			() { visitSimd(Opcode.F32X4_ABS); }
	def visit_F32X4_NEG			() { visitSimd(Opcode.F32X4_NEG); }
	def visit_F32X4_SQRT			() { visitSimd(Opcode.F32X4_SQRT); }
	def visit_F32X4_ADD			() { visitSimd(Opcode.F32X4_ADD); }
	def visit_F32X4_SUB			() { visitSimd(Opcode.F32X4_SUB); }
	def visit_F32X4_MUL			() { visitSimd(Opcode.F32X4_MUL); }
	def visit_F32X4_DIV			() { visitSimd(Opcode.F32X4_DIV); }
	def visit_F32X4_MIN			() { visitSimd(Opcode.F32X4_MIN); }
	def visit_F32X4_MAX			() { visitSimd(Opcode.F32X4_MAX); }
	def visit_F32X4_PMIN			() { visitSimd(Opcode.F32X4_PMIN); }
	def visit_F32X4_PMAX			() { visitSimd(Opcode.F32X4_PMAX); }
	def visit_F64X2_CEIL			() { visitSimd(Opcode.F64X2_CEIL); }
	def visit_F64X2_FLOOR			() { visitSimd(Opcode.F64X2_FLOOR); }
	def visit_F64X2_TRUNC			() { visitSimd(Opcode.F64X2_TRUNC); }
	def visit_F64X2_NEAREST			() { visitSimd(Opcode.F64X2_NEAREST); }
	def visit_F64X2_ABS			() { visitSimd(Opcode.F64X2_ABS); }
	def visit_F64X2_NEG			() { visitSimd(Opcode.F64X2_NEG); }
	def visit_F64X2_SQRT			() { visitSimd(Opcode.F64X2_SQRT); }
	def visit_F64X2_ADD			() { visitSimd(Opcode.F64X2_ADD); }
	def visit_F64X2_SUB			() { visitSimd(Opcode.F64X2_SUB); }
	def visit_F64X2_MUL			() { visitSimd(Opcode.F64X2_MUL); }
	def visit_F64X2_DIV			() { visitSimd(Opcode.F64X2_DIV); }
	def visit_F64X2_MIN			() { visitSimd(Opcode.F64X2_MIN); }
	def visit_F64X2_MAX			() { visitSimd(Opcode.F64X2_MAX); }
	def visit_F64X2_PMIN			() { visitSimd(Opcode.F64X2_PMIN); }
	def visit_F64X2_PMAX			() { visitSimd(Opcode.F64X2_PMAX); }
	def visit_I32X4_TRUNC_SAT_F32X4_S	() { visitSimd(Opcode.I32X4_TRUNC_SAT_F32X4_S); }
	def visit_I32X4_TRUNC_SAT_F32X4_U	() { visitSimd(Opcode.I32X4_TRUNC_SAT_F32X4_U); }
	def visit_F32X4_CONVERT_I32X4_S		() { visitSimd(Opcode.F32X4_CONVERT_I32X4_S); }
	def visit_F32X4_CONVERT_I32X4_U		() { visitSimd(Opcode.F32X4_CONVERT_I32X4_U); }
	def visit_I32X4_TRUNC_SAT_F64X2_S_ZERO	() { visitSimd(Opcode.I32X4_TRUNC_SAT_F64X2_S_ZERO); }
	def visit_I32X4_TRUNC_SAT_F64X2_U_ZERO	() { visitSimd(Opcode.I32X4_TRUNC_SAT_F64X2_U_ZERO); }
	def visit_F64X2_CONVERT_LOW_I32X4_S	() { visitSimd(Opcode.F64X2_CONVERT_LOW_I32X4_S); }
	def visit_F64X2_CONVERT_LOW_I32X4_U	() { visitSimd(Opcode.F64X2_CONVERT_LOW_I32X4_U); }
	def visit_F32X4_DEMOTE_F64X2_ZERO	() { visitSimd(Opcode.F32X4_DEMOTE_F64X2_ZERO); }
	def visit_F64X2_PROMOTE_LOW_F32X4	() { visitSimd(Opcode.F64X2_PROMOTE_LOW_F32X4); }
	// FE prefix: atomics.
	def visit_MEMORY_ATOMIC_NOTIFY		(imm: MemArg) 	{ visitAtomic(Opcode.MEMORY_ATOMIC_NOTIFY, imm); }
	def visit_MEMORY_ATOMIC_WAIT32		(imm: MemArg) 	{ visitAtomic(Opcode.MEMORY_ATOMIC_WAIT32, imm); }
	def visit_MEMORY_ATOMIC_WAIT64		(imm: MemArg) 	{ visitAtomic(Opcode.MEMORY_ATOMIC_WAIT64, imm); }
	def visit_ATOMIC_FENCE			(flags: u8)	{ visitMisc(Opcode.ATOMIC_FENCE); }
	def visit_I32_ATOMIC_LOAD		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_LOAD, imm); }
	def visit_I64_ATOMIC_LOAD		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_LOAD, imm); }
	def visit_I32_ATOMIC_LOAD8_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_LOAD8_U, imm); }
	def visit_I32_ATOMIC_LOAD16_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_LOAD16_U, imm); }
	def visit_I64_ATOMIC_LOAD8_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_LOAD8_U, imm); }
	def visit_I64_ATOMIC_LOAD16_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_LOAD16_U, imm); }
	def visit_I64_ATOMIC_LOAD32_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_LOAD32_U, imm); }
	def visit_I32_ATOMIC_STORE		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_STORE, imm); }
	def visit_I64_ATOMIC_STORE		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_STORE, imm); }
	def visit_I32_ATOMIC_STORE8		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_STORE8, imm); }
	def visit_I32_ATOMIC_STORE16		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_STORE16, imm); }
	def visit_I64_ATOMIC_STORE8		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_STORE8, imm); }
	def visit_I64_ATOMIC_STORE16		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_STORE16, imm); }
	def visit_I64_ATOMIC_STORE32		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_STORE32, imm); }
	def visit_I32_ATOMIC_RMW_ADD		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_ADD, imm); }
	def visit_I64_ATOMIC_RMW_ADD		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_ADD, imm); }
	def visit_I32_ATOMIC_RMW8_ADD_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_ADD_U, imm); }
	def visit_I32_ATOMIC_RMW16_ADD_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_ADD_U, imm); }
	def visit_I64_ATOMIC_RMW8_ADD_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_ADD_U, imm); }
	def visit_I64_ATOMIC_RMW16_ADD_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_ADD_U, imm); }
	def visit_I64_ATOMIC_RMW32_ADD_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_ADD_U, imm); }
	def visit_I32_ATOMIC_RMW_SUB		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_SUB, imm); }
	def visit_I64_ATOMIC_RMW_SUB		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_SUB, imm); }
	def visit_I32_ATOMIC_RMW8_SUB_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_SUB_U, imm); }
	def visit_I32_ATOMIC_RMW16_SUB_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_SUB_U, imm); }
	def visit_I64_ATOMIC_RMW8_SUB_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_SUB_U, imm); }
	def visit_I64_ATOMIC_RMW16_SUB_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_SUB_U, imm); }
	def visit_I64_ATOMIC_RMW32_SUB_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_SUB_U, imm); }
	def visit_I32_ATOMIC_RMW_AND		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_AND, imm); }
	def visit_I64_ATOMIC_RMW_AND		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_AND, imm); }
	def visit_I32_ATOMIC_RMW8_AND_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_AND_U, imm); }
	def visit_I32_ATOMIC_RMW16_AND_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_AND_U, imm); }
	def visit_I64_ATOMIC_RMW8_AND_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_AND_U, imm); }
	def visit_I64_ATOMIC_RMW16_AND_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_AND_U, imm); }
	def visit_I64_ATOMIC_RMW32_AND_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_AND_U, imm); }
	def visit_I32_ATOMIC_RMW_OR		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_OR, imm); }
	def visit_I64_ATOMIC_RMW_OR		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_OR, imm); }
	def visit_I32_ATOMIC_RMW8_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_OR_U, imm); }
	def visit_I32_ATOMIC_RMW16_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_OR_U, imm); }
	def visit_I64_ATOMIC_RMW8_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_OR_U, imm); }
	def visit_I64_ATOMIC_RMW16_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_OR_U, imm); }
	def visit_I64_ATOMIC_RMW32_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_OR_U, imm); }
	def visit_I32_ATOMIC_RMW_XOR		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_XOR, imm); }
	def visit_I64_ATOMIC_RMW_XOR		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_XOR, imm); }
	def visit_I32_ATOMIC_RMW8_XOR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_XOR_U, imm); }
	def visit_I32_ATOMIC_RMW16_XOR_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_XOR_U, imm); }
	def visit_I64_ATOMIC_RMW8_XOR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_XOR_U, imm); }
	def visit_I64_ATOMIC_RMW16_XOR_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_XOR_U, imm); }
	def visit_I64_ATOMIC_RMW32_XOR_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_XOR_U, imm); }
	def visit_I32_ATOMIC_RMW_XCHG		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_XCHG, imm); }
	def visit_I64_ATOMIC_RMW_XCHG		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_XCHG, imm); }
	def visit_I32_ATOMIC_RMW8_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_XCHG_U, imm); }
	def visit_I32_ATOMIC_RMW16_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_XCHG_U, imm); }
	def visit_I64_ATOMIC_RMW8_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_XCHG_U, imm); }
	def visit_I64_ATOMIC_RMW16_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_XCHG_U, imm); }
	def visit_I64_ATOMIC_RMW32_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_XCHG_U, imm); }
	def visit_I32_ATOMIC_RMW_CMPXCHG	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_CMPXCHG, imm); }
	def visit_I64_ATOMIC_RMW_CMPXCHG	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_CMPXCHG, imm); }
	def visit_I32_ATOMIC_RMW8_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_CMPXCHG_U, imm); }
	def visit_I32_ATOMIC_RMW16_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_CMPXCHG_U, imm); }
	def visit_I64_ATOMIC_RMW8_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_CMPXCHG_U, imm); }
	def visit_I64_ATOMIC_RMW16_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_CMPXCHG_U, imm); }
	def visit_I64_ATOMIC_RMW32_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_CMPXCHG_U, imm); }
}
