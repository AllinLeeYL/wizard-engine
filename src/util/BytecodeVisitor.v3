// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility that serves as a base class for decoding and dispatching on bytecodes.
// The bytecode visitor decodes immediates but does not translate them into module references
// (e.g. signatures, tables, etc).
// (sketch)
class BytecodeVisitor {
	def var current: Opcode;
	
	def dispatch(codeptr: Decoder) {
		var entry = bytecodeVisitorDispatcher.decode(codeptr);
		current = entry.0;
		entry.1(this);
		current = Opcode.UNREACHABLE;
	}

	def visit_UNREACHABLE	() 			{ }
	def visit_NOP		() 			{ }
	def visit_BLOCK		(blocktype_code: int) 	{ }
	def visit_LOOP		(blocktype_code: int) 	{ }
	def visit_IF		(blocktype_code: int) 	{ }
	def visit_ELSE		() 			{ }
	def visit_TRY		(blocktype_code: int) 	{ }
	def visit_CATCH		(tag_code: u32) 	{ }
	def visit_THROW		(tag_code: u32) 	{ }
	def visit_RETHROW	() 			{ }
	def visit_END		() 			{ }
	def visit_BR		(depth: u32) 		{ }
	def visit_BR_IF		(depth: u32) 		{ }
	def visit_BR_TABLE	(labels: Range<u32>) 	{ }
	def visit_RETURN	() 			{ }
	def visit_CALL		(sig_index: u32) 	{ }
	def visit_CALL_INDIRECT	(sig_index: u32) 	{ }
	def visit_RETURN_CALL	(func_index: u32) 	{ }
	def visit_RETURN_CALL_INDIRECT(sig_index: u32, table_index: u32) { }
	def visit_CALL_REF	(sig_index: u32) 	{ }
	def visit_RETURN_CALL_REF(sig_index: u32) 	{ }
	def visit_DELEGATE	() 			{ }
	def visit_CATCH_ALL	() 			{ }
	def visit_DROP		() 			{ }
	def visit_SELECT	() 			{ }
	def visit_SELECT_T	(val_types: Range<int>) { }
}

def bytecodeVisitorDispatcher = initBytecodeVisitorDispatchTable();
def initBytecodeVisitorDispatchTable() -> OpcodeMap<BytecodeVisitor -> void> {
	def map = OpcodeMap<BytecodeVisitor -> void>.new();
	for (op in Opcode) {
		// TODO
	}
	return map;
}

// A utility that serves as a base class for decoding and dispatching on opcodes.
// The opcode visitor decodes immediates and translates them into module references
// (e.g. signatures, tables, etc).
// (sketch)
class OpcodeVisitor(codeptr: Decoder, module: Module) {
	def visit_UNREACHABLE	() 				{ }
	def visit_NOP		() 				{ }
	def visit_BLOCK		(params: Range<ValueType>, results: Range<ValueType>) 	{ }
	def visit_LOOP		(params: Range<ValueType>, results: Range<ValueType>) 	{ }
	def visit_IF		(params: Range<ValueType>, results: Range<ValueType>) 	{ }
	def visit_ELSE		() 				{ }
	def visit_TRY		(params: Range<ValueType>, results: Range<ValueType>) 	{ }
	def visit_CATCH		(tag: TagDecl) 			{ }
	def visit_THROW		(tag: TagDecl) 			{ }
	def visit_RETHROW	() 				{ }
	def visit_END		() 				{ }
	def visit_BR		(depth: u32) 			{ }
	def visit_BR_IF		(depth: u32) 			{ }
	def visit_BR_TABLE	(labels: Range<u32>) 		{ }
	def visit_RETURN	() 				{ }
	def visit_CALL		(sig: SigDecl) 			{ }
	def visit_CALL_INDIRECT	(sig: SigDecl) 			{ }
	def visit_RETURN_CALL	(func: FuncDecl) 		{ }
	def visit_RETURN_CALL_INDIRECT(sig: SigDecl, table: TableDecl) { }
	def visit_CALL_REF	(sig: SigDecl) 			{ }
	def visit_RETURN_CALL_REF(sig: SigDecl) 		{ }
	def visit_DELEGATE	() 				{ }
	def visit_CATCH_ALL	() 				{ }
	def visit_DROP		() 				{ }
	def visit_SELECT	() 				{ }
	def visit_SELECT_T	(val_types: Range<ValueType>)	{ }
}
