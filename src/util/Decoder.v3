// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A decoder is a helper class for parsing a stream of bytes into a structured
// format, offering routines to read bytes, integers, LEBs, etc. A decoder
// has state for whether an error occurred, keeping the first (earliest position)
// error. Read operations only succeed if all of the data they expect is
// in the current buffer and instead signal an end-of-file error if they
// would go past the end of the current buffer. When the caller has more data
// to supply, they can use the append() and divest() calls add data to this
// buffer while minding propering aliasing.
class Decoder(var data: Array<byte>, err: ErrorGen) {
	var pos: int;
	var eof: bool;
	var limit = data.length;
	// N.B. this field tracks the number of bytes from the beginning of a stream,
	// i.e. bytes skipped by append().
	var skipped: int;

	// Checks whether the input has been completely consumed.
	def done() -> bool {
		return pos >= limit;
	}
	// Checks whether more input remains.
	def more() -> bool {
		return pos < limit;
	}
	// Returns the number of available bytes.
	def available() -> int {
		var diff = limit - pos;
		return if(diff > 0, diff);
	}
	// Set the current position of the decoder.
	def at(npos: int) -> this {
		pos = npos;
	}
	// Set the current position of the decoder and reset any EOF error.
	def reset(x: Array<byte>, xpos: int, xlength: int) -> this {
		skipped = 0;
		err.reset();
		eof = false;
		data = x;
		pos = xpos;
		limit = xpos + xlength;
	}
	// Record an error at the current position.
	def fail(msg: string) -> this {
		fail_at(pos, msg, ());
	}
	// Record an error at the given position, if there is not already an
	// error at an earlier position. Resets the limit for early termination.
	def fail_at<T>(pos: int, msg: string, arg: T) -> this {
		if (err.set(pos + skipped, msg)) {
			err.error_msg = Strings.format1(msg, arg);
			eof = false;
			limit = 0;
		}
	}
	// Record an end-of-file for the quantity beginning at the given position.
	def eof_at(pos: int, msg: string) -> this {
		if (err.set(pos + skipped, msg)) {
			err.error_msg = msg;
			eof = true;
		}
	}

	// Read a single byte.
	def read_u8() -> byte {
		if (pos >= limit) {
			eof_at(pos, "expected byte");
			return 0;
		}
		return data[pos++];
	}
	// Read a 4-byte quantity as an unsigned integer.
	def read_u32() -> u32 {
		if (limit - pos < 4) {
			eof_at(pos, "expected 4 bytes");
			return 0;
		}
		var b0: u32 = data[pos];
		var b1: u32 = data[pos + 1];
		var b2: u32 = data[pos + 2];
		var b3: u32 = data[pos + 3];
		pos += 4;
		var result = (b3 << 24) | (b2 << 16) | (b1 << 8) | b0;
		return result;
	}
	// Read a 8-byte quantity as an unsigned integer.
	def read_u64() -> u64 {
		if (limit - pos < 8) {
			eof_at(pos, "expected 8 bytes");
			return 0;
		}
		var w0 = read_u32();
		var w1 = read_u32();
		return (u64.!(w1) << 32) | w0;
	}
	// Read an unsigned 32-bit LEB-encoded integer.
	def read_u32leb() -> u32 {
		return read_x32leb(false, "LEB out of unsigned 32-bit range");
	}
	// Read an unsigned 32-bit LEB-encoded integer, returning (length, value).
	def read_i32leb() -> i32 {
		return int.!(read_x32leb(true, "LEB out of signed 32-bit range"));
	}
	private def check_leb_ext(p: int, b: byte, signed: bool, shift: u3, msg: string) -> int {
		var upper = i7.!(b) >> shift;
		if (upper != 0 && (!signed || upper != -1)) {
			fail(msg);
			return p;
		}
		if (b < 0x80) return p;
		while (p < limit) {
			var b = data[p++], v = i7.!(b);
			if (v != upper) { fail(msg); break; }
			if (b < 0x80) return p;
		}
		eof_at(pos, "unterminated LEB");
		return p;
	}
	private def read_x32leb(signed: bool, msg: string) -> u32 {
		var result: u32, p = pos, shift = 0;
		while (p < limit) {
			var b = data[p++];
			result = result | u32.!(b & 0x7F) << u5.!(shift);
			shift += 7;
			if (shift == 35) { // consumed (special) 5th byte
				// check upper bits of last byte and extension
				p = check_leb_ext(p, b, signed, 4, msg);
				pos = p;
				return result;
			}
			if (b < 0x80) { // no continuation byte
				if (signed) { // perform sign-extension
					var rem = u5.!(0 - shift);
					result = u32.!(i32.!(result << rem) >> rem);
				}
				pos = p;
				return result;
			}
		}
		if (p == pos) eof_at(pos, "expected LEB");
		else eof_at(pos, "unterminated LEB");
		return 0;
	}
	// Read an unsigned 64-bit LEB-encoded integer.
	def read_u64leb() -> u64 {
		return read_x64leb(false, "LEB out of unsigned 64-bit range");
	}
	// Read an unsigned 64-bit LEB-encoded integer, returning (length, value).
	def read_i64leb() -> i64 {
		return i64.!(read_x64leb(true, "LEB out of signed 64-bit range"));
	}
	private def read_x64leb(signed: bool, msg: string) -> u64 {
		var result: u64, p = pos, shift = 0;
		while (p < limit) {
			var b = data[p++];
			result = result | u64.!(b & 0x7F) << u6.!(shift);
			shift += 7;
			if (shift == 70) { // consumed (special) 10th byte
				// check upper bits of last byte and extension
				p = check_leb_ext(p, b, signed, 1, msg);
				pos = p;
				return result;
			}
			if (b < 0x80) { // no continuation byte
				if (signed) { // perform sign-extension
					var rem = u6.!(0 - shift);
					result = u64.!(i64.!(result << rem) >> rem);
				}
				pos = p;
				return result;
			}
		}
		if (p == pos) eof_at(pos, "expected LEB");
		else eof_at(pos, "unterminated LEB");
		return 0;

	}

	// Read a string of {length} bytes.
	def read_bytes(length: int) -> string {
		if (limit - pos < length) {
			eof_at(pos, "EOF expecting N bytes"); // TODO: better error msg
			return Array.new(length);
		}
		var result = Arrays.range(data, pos, pos + length);
		pos += length;
		return result;
	}
	// Check that a string of {length} bytes could be read. Signals an EOF error
	// if not possible.
	def check_bytes(length: int) -> bool {
		if (limit - pos < length) {
			eof_at(pos, "EOF expecting N bytes"); // TODO: better error msg
		}
		return !eof;
	}
	// Read a string of {length} bytes.
	def skip_bytes(length: int) {
		if (limit - pos < length) {
			eof_at(pos, "EOF expecting N bytes"); // TODO: better error msg
			return;
		}
		pos += length;
	}

	// Append more data to the buffer of this decoder. Reuses the provided buffer if
	// there is no remaining data in this one. The optional {hint} argument can be
	// used by the caller to indicate that it expects to buffer that given number of
	// bytes, and thus this method should preallocate that much.
	def append(hint: int, x: Array<byte>, xpos: int, xlength: int) -> this {
		if (eof) {
			// Reset EOF flag and error because we have new data
			err.reset();
			eof = false;
		}
		if ((data.length - limit) >= xlength) {
			// There is enough space to copy into this decoder's buffer.
			for (i < xlength) data[limit + i] = x[xpos + i];
			limit += xlength;
			return;
		}
		var avail = available(), diff = 0;
		if (avail == 0 && x.length >= hint) {
			// Reuse {x} in-place.
			// TODO: check hint > x.length?
			diff = pos - xpos;
			data = x;
			pos = xpos;
			limit = xpos + xlength;
		} else {
			// Not enough space. Copy the old data and the new data together
			// into a new buffer in a new decoder.
			var combined = avail + xlength;
			var nlength = if(hint > combined, hint, combined);
			var nbuf = Array<byte>.new(nlength);
			for (i < avail) nbuf[i] = data[pos + i];
			for (i < xlength) nbuf[avail + i] = x[xpos + i];

			diff = pos;
			data = nbuf;
			pos = 0;
			limit = combined;
		}
		skipped += diff;
	}
	// Divest from the given buffer {alias} so that this decoder no longer aliases it.
	// Callers should use this method if they have previously provided {alias}
	// to this decoder through the constructor or {append()} but now need to
	// reuse {alias}.
	def divest(hint: int, alias: Array<byte>) -> this {
		if (alias != data) return; // nothing to do
		var avail = available();
		var nlength = if(hint > avail, hint, avail);
		var nbuf = Array<byte>.new(nlength);
		for (i < avail) nbuf[i] = data[pos + i];  // copy data out
		data = nbuf;
		skipped += pos;
		limit = avail;
		pos = 0;
	}
}
