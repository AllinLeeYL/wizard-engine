// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Lightweight stack data structure with exposed guts.
class Stack<T> {
	var elems = Array<T>.new(10);
	var top = 0;
	// Push a single element.
	def push(v: T) {
		if (top == elems.length) {
			var nelems = Array<T>.new(elems.length * 4);
			for (i < top) nelems[i] = elems[i];
			elems = nelems;
		}
		elems[top++] = v;
	}
	// Push all the given elements.
	def pushA(v: Array<T>) {
		var end = top + v.length;
		if (end > elems.length) {
			var nelems = Array<T>.new(end + elems.length * 3);
			for (i < top) nelems[i] = elems[i];
			elems = nelems;
		}
		for (i < v.length) elems[top + i] = v[i];
		top = end;
	}
	// FAST: Peek at the storage just above the top.
	def next() -> T {
		return if(top < elems.length - 1, elems[top]);
	}
	// Read the top of the stack without popping.
	def peek() -> T {
		return if(top > 0, elems[top - 1]);
	}
	// Pop the top of the stack and return it.
	def pop() -> T {
		return if(top > 0, elems[--top]);
	}
	// Reset stack height to 0.
	def clear() {
		top = 0;
	}
}
