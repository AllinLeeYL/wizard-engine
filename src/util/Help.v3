// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Centralizes management of help for options and sections for various utilities,
// which is used to print out 
component Help {
	def ALL = BasicOptions.new(null);
	var groups: List<(OptionGroup, TraceBuilder -> void)>;

	def newGroup(name: string, printHelp: TraceBuilder -> void) -> OptionGroup {
		var g = OptionGroup.new(name, ALL);
		groups = List.new((g, printHelp), groups);
		return g;
	}
	def print() {
		var out = Trace.OUT;
		for (l = groups; l != null; l = l.tail) {
			var g = l.head.0, h = l.head.1;
			out.put1("%s OPTIONS\n", g.name);
			out.ln();
			if (h != null) {
				h(out);
			} else {
				g.print(out);
			}
			out.ln();
		}
	}
	def parse(arg: string) -> bool {
		return ALL.parseOption(arg);
	}
}

// Collects related options and stores a help string for each.
class OptionGroup(name: string, o: BasicOptions) {
	var list: List<(Opt, string, string)>;

	def newDeclFilterOption(name: string, help: string) -> Option<DeclFilter> {
		var r = Option.new<DeclFilter>(name, null, DeclFilters.parseString);
		return add(o.add(r), "=<function patterns>", help);
	}
	def newIntOption(name: string, defval: int, help: string) -> Option<int> {
		return add(o.newIntOption(name, defval), "=<int>", help);
	}
	def newBoolOption(name: string, defval: bool, help: string) -> Option<bool> {
		return add(o.newBoolOption(name, defval), "[=(true|false)]", help);
	}
	def newFlag(name: string, onParse: string -> void, help: string) -> Option<void> {
		var r = Option<void>.new(name, (), onParse);
		return add(o.add(r), "", help);
	}
	def newStringOption(name: string, defval: string, help: string) -> Option<string> {
		return add(o.newStringOption(name, defval), "=<string>", help);
	}
	def newPathOption(name: string, defval: string, help: string) -> Option<string> {
		return add(o.newStringOption(name, defval), "=<path>", help);
	}
	def newSizeOption(name: string, defval: u32, help: string) -> Option<u32> {
		return add(o.newSizeOption(name, defval), "=<int[K|M|G]>", help);
	}
	def newAddrOption(name: string, defval: u64, help: string) -> Option<u64> {
		return add(o.newAddrOption(name, defval), "=<address>", help);
	}
	def newEmptyOption(name: string, help: string) -> Option<bool> {
		return add(o.newOption(name, false, parseEmpty), "", help);
	}
	def newOption<T>(name: string, defval: T, typename: string, parseFun: string -> T, help: string) -> Option<T> {
		return add(o.newOption(name, defval, parseFun), typename, help);
	}
	def add<T>(opt: Option<T>, typename: string, help: string) -> Option<T> {
		list = List.new((opt, typename, help), list);
		return opt;
	}
	def parseEmpty(str: string) -> bool {
		return str == null;
	}
	def print(buf: StringBuilder) {
		for (l = Lists.reverse(list); l != null; l = l.tail) {
			var t = l.head;
			buf.put2("    -%s%s\n", t.0.name, t.1);
			buf.put1("        %s\n", t.2);
		}
		buf.ln();
	}
}

