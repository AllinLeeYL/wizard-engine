// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component TraceUtil {
	// Returns change in length in {out} after {f(out)} is called.
	// Useful with TraceBuilder.rjustify(...)
	def renderedLength(out: TraceBuilder, f: StringBuilder -> StringBuilder) -> int {
		var length = out.length;
		f(out);
		return out.length - length;
	}
	// Renders the decimal {dividend/divisor} to {prec} decimal places
	def renderFraction(out: TraceBuilder, dividend: long, divisor: long, prec: int) -> int {
		var length = out.length;
		var intVal = dividend / divisor;
		out.putd(intVal);
		out.putc('.');

		var base = 10;
		for (i < prec) {
			out.putd((dividend * base / divisor) % 10);
			base *= 10;
		}
		return out.length - length;
	}
	def renderPercent(out: TraceBuilder, dividend: long, divisor: long, prec: int) -> int {
		var length = TraceUtil.renderFraction(out, dividend * 100, divisor, prec);
		out.putc('%');
		return length + 1;
	}
	// Render {time} in microseconds as {0.xxxxxxs}
	def renderUs(out: TraceBuilder, time: long) -> int {
		var length = TraceUtil.renderFraction(out, time, 1000000, 6);
		out.putc('s');
		return length + 1;
	}
}