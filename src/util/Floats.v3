// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component Floats {
	def d_minus0	= 0x80000000_00000000uL;
	def d_nan	= 0x7ff80000_00000000uL;
	def d_1p1	= 0x40000000_00000000uL;	// 2^1 as double
	def d_1p31	= 0x41e00000_00000000uL;	// 2^31 as double
	def d_1p32	= 0x41f00000_00000000uL;
	def d_1p33	= 0x42000000_00000000uL;
	def d_1p63	= 0x43e00000_00000000uL;
	def d_1p64	= 0x43f00000_00000000uL;
	def d_minus1p31 = 0xc1e00000_00000000uL;	// -2^31 as double
	def d_minus1p32 = 0xc1f00000_00000000uL;
	def d_minus1p33 = 0xc2000000_00000000uL;
	def d_minus1p63 = 0xc3e00000_00000000uL;
	def d_minus1p64 = 0xc3f00000_00000000uL;
	def d_minus1	= 0xbff00000_00000000uL;

	def f_minus0	= 0x8000_0000u;
	def f_nan	= 0x7fc0_0000u;
	def f_1p1	= 0x4000_0000u;
	def f_1p31	= 0x4f00_0000u;
	def f_1p32	= 0x4f80_0000u;
	def f_1p33	= 0x5000_0000u;
	def f_1p63	= 0x5f00_0000u;
	def f_1p64	= 0x5f80_0000u;
	def f_minus1p31	= 0xcf00_0000u;
	def f_minus1p32	= 0xcf80_0000u;
	def f_minus1p33	= 0xd000_0000u;
	def f_minus1p63	= 0xdf00_0000u;
	def f_minus1p64	= 0xdf80_0000u;
	def f_minus1	= 0xbf80_0000u;

	def isNan32(bits: u32) -> bool {
		if ((bits & 0x7F80_0000) != 0x7F80_0000) return false;
		if ((bits << 9) == 0) return false;
		return true;
	}
	def isNan64(bits: u64) -> bool {
		if ((bits & 0x7FF00000_00000000) != 0x7FF00000_00000000) return false;
		if ((bits << 12) == 0) return false;
		return true;
	}
}