// Copyright 2024 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Builds a control flow graph for a function.
class CfgBuilder {
	private def bi = BytecodeIterator.new();
	private def ctl_stack = ControlStack<CfgBlock>.new();

	new() {
		ctl_stack.newLabel = newCfgBlock;
		ctl_stack.splitBlock = splitCfgBlock;
		ctl_stack.mergeBlock = mergeCfgBlock;
		ctl_stack.bindLabel = bindCfgBlock;
	}

	def build(func: FuncDecl) -> CfgBlock {
		var start = ctl_stack.reset();
		bi.reset(func);
		while (bi.more()) {
			ctl_stack.pc = bi.pc;
			bi.dispatch(ctl_stack);
			bi.next();
		}
		return start;
	}
	private def newCfgBlock(cs: ControlStack<CfgBlock>) -> CfgBlock {
		return if(cs.isUnreachable(), null, CfgBlock.new(cs.pc));
	}
	private def splitCfgBlock(cs: ControlStack<CfgBlock>, from: CfgBlock) -> (CfgBlock, CfgBlock) {
		if (from == null || cs.isUnreachable()) return (null, null);
		var pos = bi.pc;
		var a = CfgBlock.new(pos), b = CfgBlock.new(pos);
		from.goto(pos, a);
		from.goto(pos, b);

		return (a, b);
	}
	private def mergeCfgBlock(cs: ControlStack<CfgBlock>, from: CfgBlock, to: CfgBlock) -> CfgBlock {
		if (from == null || cs.isUnreachable()) return to;
		from.goto(bi.pc, to);
		return to;
	}
	private def bindCfgBlock(cs: ControlStack<CfgBlock>, pc: int, label: CfgBlock) {
		if (label == null) return;
		if (pc < 0) pc = bi.nextPc();
		label.bind_pos = pc;
		if (verbose) Trace.OUT.put2("bind id:%d @%d", label.id, pc).ln();
	}
}

def verbose = false;
var labelId = 100;

class CfgBlock(decl_pos: int) {
	def id = labelId++;
	var bind_pos: int = -1;
	var outgoing: List<(int, CfgBlock)>;
	var incoming: List<(int, CfgBlock)>;
	var mark: int;

	def goto(pc: int, t: CfgBlock) {
		if (verbose) Trace.OUT.put2("add id:%d -> id:%d", this.id, t.id).ln();
		outgoing = List.new((pc, t), outgoing);
		t.incoming = List.new((pc, this), t.incoming);
	}
}
