// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility routines for strings.
component Strings {
	def hexMap_l = "0123456789abcdef";
	def hexMap_u = "0123456789ABCDEF";
	def equals(a: string, b: string) -> bool {
        	if (a == b) return true;
		if (a == null && b != null) return false;
		if (b == null) return false;
                if (a.length != b.length) return false;
                for (i < a.length) if (a[i] != b[i]) return false;
                return true;
        }
        def endsWith(str: string, end: string) -> bool {
        	if (str.length <= end.length) return false;
                for (i < end.length) {
                	if (str[str.length - i - 1] != end[end.length - i - 1]) return false;
                }
                return true;
        }
	def endsWithFrom(str: string, start: int, end: string) -> bool {
		return (str.length - start) == end.length && endsWith(str, end);
	}
	def startsWith(str: string, start: string) -> bool {
		if (str.length < start.length) return false;
		for (i < start.length) if (str[i] != start[i]) return false;
		return true;
	}
	def format1<A>(fmt: string, a: A) -> string {
		return StringBuilder.new().put1(fmt, a).extract();
	}
	def format2<A, B>(fmt: string, a: A, b: B) -> string {
		return StringBuilder.new().put2(fmt, a, b).extract();
	}
	def format3<A, B, C>(fmt: string, a: A, b: B, c: C) -> string {
		return StringBuilder.new().put3(fmt, a, b, c).extract();
	}
	def isHexChar(c: byte) -> bool {
		return 'a' <= c && c <= 'f' ||
			'A' <= c && c <= 'F' ||
			'0' <= c && c <= '9';
	}
	def hexValue(c: byte) -> int {
		if (c >= 'a') return c - 'a' + 10;
		if (c >= 'A') return c - 'A' + 10;
		return c - '0';
	}
	def hash(str: string) -> int {
		if (str.length == 0) return 1;
		var val = str.length;
		for (c in str) val = val * 31 + c;
		return val;
	}
	def puts(s: string) -> StringBuilder -> StringBuilder {
		return StringBuilder.puts(_, s);
	}
}
