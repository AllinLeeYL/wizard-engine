// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility for tracking the earliest error that occurs in an input (e.g. byte stream).
class ErrorGen {
	var error_pos: int = int.max;
	var error_msg: string;
	var next_error_pos = -1;

	// Returns {true} if no error has been recorded yet.
	def ok() -> bool {
		return error_pos == int.max;
	}
	// Returns {true} if an error has been recorded.
	def error() -> bool {
		return error_pos < int.max;
	}
	// Set an error at the current {next_error_pos} if no error has already been
	// recorded at an earlier position. Return {true} if this error was recorded,
	// {false}, if an earlier error was already recorded.
	def set(msg: string) -> bool {
		var pos = next_error_pos;
		if (pos < 0) System.error("ErrorGenError", "next error position not set");
		next_error_pos = -1;
		if (error_pos <= pos) return false;
		error_pos = pos;
		error_msg = msg;
		return true;
	}
	// Reset any error currently recorded.
	def reset() -> this {
		error_pos = int.max;
		error_msg = null;
		next_error_pos = -1;
	}
	// Set the {next_error_pos} to the absolute position of the given decoder.
	def at(d: DataReader) -> this {
		next_error_pos = d.abs_pos();
	}
	// Set the {next_error_pos} to the absolute position of the given decoder, plus {pt}.
	def rel(d: DataReader, pt: int) -> this {
		next_error_pos = d.abs(pt);
	}
	// Set the {next_error_pos} to the given absolute position.
	def abs(pt: int) -> this {
		next_error_pos = pt;
	}
}