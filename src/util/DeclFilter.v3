// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Filters members based on names using a pattern list given as a string.
// The syntax of the pattern string is: "(Glob[.Glob])*" where Glob can contain "*" and "?",
// as implemented in {GlobMatcher}.
class DeclFilter(pattern: string) {
	private def list = parseDeclFilter(pattern);

	def matches(module: Module, decl: Decl) -> bool {
		if (pattern == null) return true;
		var names = module.names;
		var mname = module.name;
		if (mname == null && names != null) mname = names.getModuleName();
		var fname: string;
		if (FuncDecl.?(decl) && names != null) fname = names.getFuncName(FuncDecl.!(decl).func_index);
		return matchesStr(mname, fname);
	}
	def matchesStr(mname: string, fname: string) -> bool {
		if (pattern == null) return true;
		for (l = list; l != null; l = l.tail) {
			var mfilter = l.head.0, ffilter = l.head.1;
			if (ffilter == null && matchOne(mname, fname, mfilter)) return true;
			if (matchBoth(mname, fname, mfilter, ffilter)) return true;
		}
		return false;
	}
	def matchOne(mname: string, fname: string, filter: GlobMatcher) -> bool {
		return (mname != null && filter.matches(mname)) || (fname != null && filter.matches(fname));
	}
	def matchBoth(mname: string, fname: string, mfilter: GlobMatcher, ffilter: GlobMatcher) -> bool {
		return (mname != null && mfilter.matches(mname)) && (fname != null && ffilter.matches(fname));
	}
}
def parseDeclFilter(pat: string) -> List<(GlobMatcher, GlobMatcher)> {
	var list: List<(GlobMatcher, GlobMatcher)>;
	if (pat == null) return list;
	var buf = StringBuilder.new();
	var m: GlobMatcher, f: GlobMatcher;
	var i = 0;
	while (true) {
		if (i == pat.length || pat[i] == ',') {
			var matcher = GlobMatcher.new(buf.toString());
			if (m != null) f = matcher;
			else m = matcher;
			list = List.new((m, f), list);
			m = f = null;
			buf.reset();
			if (i == pat.length) break;
		} else if (pat[i] == '.' && m == null) {
			m = GlobMatcher.new(buf.toString());
			buf.reset();
		} else {
			buf.putc(pat[i]);
		}
		i++;
	}
	return list;
}
