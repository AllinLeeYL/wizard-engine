// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A {Vector} is a growable, appendable array.
class Vector<T> {
	private var length: int;
        private var data: Array<T>;

	// Read the value at the given index.
	def [i: int] -> T {
        	if (i > length || data == null) System.error("BoundsCheckException", "");
		return data[i];
        }
        
        // Write a value at the given index.
	def [i: int] = v: T {
        	if (i > length || data == null) System.error("BoundsCheckException", "");
		data[i] = v;
       	}

	// Append the given value to this vector.
	def add(v: T) {
        	var end = length;
        	grow(end + 1);
                data[end] = v;
        }

	def size() -> int { return length; }

	// Grow the internal storage capacity to the given new length.
	def grow(nlength: int) -> this {
        	if (data == null && length > 0) { // no array yet.
                	data = Array.new(nlength);
                        return;
                }
                if (nlength > data.length) { // allocate and copy.
                	def ndata = Array<T>.new(nlength);
                        for (i < length) ndata[i] = data[i];
                        data = ndata;
                        length = nlength;
                	return;
                }
      	}

	// Extract the values from this vector as an array. The length of this
        // vector is reset to {0}.
        def extract() -> Array<T> {
        	if (length == 0) {
                	return [];
                }
                var ret: Array<T>;
                if (length == data.length) {  // steal the underlying storage.
                	ret = data;
                        data = null;
                } else { // make a copy and retain underlying storage.
	                ret = Array<T>.new(length);
                        var d = data;
        	        for (i < ret.length) ret[i] = d[i];
                }
                length = 0;
                return ret;
        }
}
