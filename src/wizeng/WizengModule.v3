// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

enum WizengExports(sig: SigDecl, invoke: (WizengModule, Array<Value>) -> HostResult) {
	invoke0(SigCache.g_v, WizengModule.invoke0)
}

class WizengModule extends HostModule("wizeng") {
	def preprocess(module: Module, result: Array<Exportable>) {
		var imports = module.imports;
		for (j < imports.length) {
			var i = imports[j];
			if (!Strings.equal(this.name, i.imp.module_name)) continue;
			if (!FuncDecl.?(i)) continue;
			var impf = FuncDecl.!(i);
			for (ex in WizengExports) {
				if (Strings.equal(ex.name, i.imp.field_name)) {
					var func = ex.invoke(this, _);
					result[j] = HostFunctionN.new(ex.name, ex.sig, func);
					break;
				}
			}
		}
	}
	// Exported functions
	def invoke0(args: Array<Value>) -> HostResult {
		match (args[0]) {
			Ref(object) => {
				match (object) {
					null => return HostResult.Throw(Trap.new(TrapReason.NULL_DEREF, null, null));
					x: Function => return invokeFunction0(x);
				}
			}
			_ => ;
		}

		return HostResult.Throw(Trap.new(TrapReason.FAILED_CAST, null, null));
	}

	private def invokeFunction0(func: Function) -> HostResult {
		if (func.sig.params.length != 0 || func.sig.results.length != 0) {
			return HostResult.Throw(Trap.new(TrapReason.FUNC_SIG_MISMATCH, null, null));
		}

		var result = Execute.invoke(func, []);
		match (result) {
			Throw(thrown) => return HostResult.Throw(thrown);
			_ => return HostResult.Value0;
		}
	}
}

def WizengModule_installed = HostModuleRegistry.add(WizengModule.new());
