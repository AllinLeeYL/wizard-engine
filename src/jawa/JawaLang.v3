// All built-in classes in Jawa.
component JawaLang {
	def NO_INTERFACES: Array<JawaInterfaceType> = [];
	def NO_CLASS_ATTRS: JawaClassAttr.set;
	def NO_METHODS = Array<JawaMethod>.new(0);
	def NO_FIELDS = Array<JawaField>.new(0);

	def OBJECT = JawaClassType.new(JawaStrings.of("jawa/lang/Object"), NO_CLASS_ATTRS, null, NO_INTERFACES);
	def STRING = JawaClassType.new(JawaStrings.of("jawa/lang/String"), NO_CLASS_ATTRS, OBJECT, NO_INTERFACES);

	new() {
		OBJECT.boilerplate = Values.NONE;
		STRING.boilerplate = Values.NONE;

		empty(OBJECT);
		empty(STRING);

		def NO_METHOD_ATTRS: JawaMethodAttr.set;
		var equals = JawaStrings.of("equals");
		OBJECT.instanceMethods = [
			JawaMethod.new(equals, NO_METHOD_ATTRS, [OBJECT], JawaTypes.BOOL,
				newHostFunction(OBJECT, equals,
					SigDecl.new([ValueType.Host(OBJECT), ValueType.Host(OBJECT)], SigCache.arr_i),
					Object_equals))
		];

		STRING.instanceMethods = [
			JawaMethod.new(equals, NO_METHOD_ATTRS, [OBJECT], JawaTypes.BOOL,
				newHostFunction(STRING, equals,
					SigDecl.new([ValueType.Host(STRING), ValueType.Host(OBJECT)], SigCache.arr_i),
					String_equals))
		];

		var err = ErrorGen.new();
		OBJECT.buildTables(err);
		STRING.buildTables(err);
	}

	def install(env: JawaEnvironment) {
		env.add(OBJECT);
		env.add(STRING);
	}
	private def empty(ct: JawaClassType) {
		ct.instanceFields = ct.staticFields = NO_FIELDS;
		ct.instanceFields = ct.staticFields = NO_FIELDS;
		ct.instanceMethods = ct.staticMethods = NO_METHODS;
		ct.instanceMethods = ct.staticMethods = NO_METHODS;
	}

	private def newHostFunction(ct: JawaClassType, name: JawaString, sig: SigDecl,
			eval: Array<Value> -> HostResult) -> JawaHostFunction {
		if (sig == null) System.error("JawaLangInitError", "null signature");
		var buf = StringBuilder.new();
		ct.name.render(buf);
		buf.putc('.');
		name.render(buf);
		return JawaHostFunction.new(buf.extract(), sig, eval);
	}

// ---- Implementation of java.lang.* methods -----------------------------------
	def TRUE = HostResult.Value([Values.I32_1]);
	def FALSE = HostResult.Value([Values.I32_0]);

	private def Object_equals(args: Array<Value>) -> HostResult {
		var x = Value.ExternRef.!(args[0]).val;
		var y = Value.ExternRef.!(args[1]).val;
		return if(x == y, TRUE, FALSE);
	}
	private def String_equals(args: Array<Value>) -> HostResult {
		var x = Value.ExternRef.!(args[0]).val;
		var y = Value.ExternRef.!(args[1]).val;
		if (x == y) return TRUE;
		if (JawaString.?(x) && JawaString.?(y)) {
			var xx = JawaString.!(x), yy = JawaString.!(y);
			return if(xx.equals(yy), TRUE, FALSE);
		}
		return FALSE;
	}
}
