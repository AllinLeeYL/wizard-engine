// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Interface to the runtime representation of Jawa concepts such as classes,
// objects, strings, arrays, etc.
class JawaRuntime {
	private def strings = HashMap<JawaString, Global>.new(JawaString.hashCode, JawaString.equals);
	def typeRep: JawaWasmLens<JawaType, ValueType>;
	def stringRep: JawaWasmLens<JawaString, Value>;
	def classRep: JawaWasmLens<JawaClassType, Value>;
	def interfaceRep: JawaWasmLens<JawaInterfaceType, Value>;
	def arrayRep: JawaWasmLens<JawaArrayType, Value>;

	new(typeRep, stringRep, classRep, interfaceRep, arrayRep) { }

	def nullRef() -> Value;
	def newObject(ct: JawaClassType) -> Value;
	def getField(obj: Value, i: int) -> Value;
	def setField(obj: Value, i: int, v: Value);

	def intern(str: JawaString) -> Global {
		var g = strings[str];
		if (g == null) {
			// XXX: cache global decl for string constants?
			var vt = typeRep.toWasm(JawaTypes.STRING);
			var decl = GlobalDecl.new(vt, false, InitExpr.ExternRefNull);
			strings[str] = g = Global.new(vt, decl);
			g.value = stringRep.toWasm(str);
		}
		return g;
	}
	def classToGlobal(ct: JawaClassType) -> Global {
		var vt = typeRep.toWasm(JawaLang.CLASS);
		var decl = GlobalDecl.new(vt, false, InitExpr.ExternRefNull);
		var g = Global.new(vt, decl);
		g.value = classRep.toWasm(ct);
		return g;  // XXX: cache class globals
	}
	def interfaceToGlobal(it: JawaInterfaceType) -> Global {
		var vt = typeRep.toWasm(JawaLang.CLASS);
		var decl = GlobalDecl.new(vt, false, InitExpr.ExternRefNull);
		var g = Global.new(vt, decl);
		g.value = interfaceRep.toWasm(it);
		return g;  // XXX: cache interface globals
	}

	def AALOAD(at: JawaArrayType) -> Function;
	def AASTORE(at: JawaArrayType) -> Function;
	def ACMPEQ() -> Function;
	def ANEWARRAY(at: JawaArrayType) -> Function;
	def ARRAYLENGTH(at: JawaArrayType) -> Function;
	def NEWARRAY(at: JawaArrayType) -> Function;
	def ALOAD<T>(at: JawaArrayType, map: JawaPrimMappingOf<T>) -> Function;
	def ASTORE<T>(at: JawaArrayType, map: JawaPrimMappingOf<T>) -> Function;
	def CHECKCAST(t: JawaRefType) -> Function;
	def DCMPG() -> Function;
	def DCMPL() -> Function;
	def DREM() -> Function;
	def FCMPG() -> Function;
	def FCMPL() -> Function;
	def FREM() -> Function;
	def GETFIELD(ct: JawaClassType, f: JawaField) -> Function;
	def GETSTATIC(ct: JawaClassType, f: JawaField) -> Function;
	def INSTANCEOF(t: JawaRefType) -> Function;
	def INVOKEINTERFACE(it: JawaInterfaceType, m: JawaMethod) -> Function;
	def INVOKESPECIAL(ct: JawaClassType, m: JawaMethod) -> Function;
	def INVOKESTATIC(ct: JawaClassType, m: JawaMethod) -> Function;
	def INVOKEVIRTUAL(ct: JawaClassType, m: JawaMethod) -> Function;
	def ISNULL() -> Function;
	def MONITORENTER() -> Function;
	def MONITOREXIT() -> Function;
	def MULTIANEWARRAY(dims: int, at: JawaArrayType) -> Function;
	def NEW(ct: JawaClassType) -> Function;
	def PUTFIELD(ct: JawaClassType, f: JawaField) -> Function;
	def PUTSTATIC(ct: JawaClassType, f: JawaField) -> Function;
}
// Manages a bidirectional relationship between a Jawa concept {J}, such as a
// {JawaType}, and a Wasm concept {W}, such as a {ValueType}.
class JawaWasmLens<J, W> {
	def toWasm(j: J) -> W;
	def fromWasm(w: W) -> J;
}
