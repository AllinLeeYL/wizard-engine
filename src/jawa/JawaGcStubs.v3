// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class JawaGcStubs(comodule: Module, coinstance: Instance) {
	var jawa_class_field: byte;
	var ref_array_obj: StructDecl; // TODO
	var ref_array_obj_array_field: byte; // TODO
	var ref_array: ArrayDecl; // TODO
	var asm = WasmGcAsm.new();

//-------------------------------------------------------------------------------------------------
	def AALOAD(at: JawaArrayType) -> WasmFunction {
		start0()
			.local_get(0)
			.struct_get(ref_array_obj, ref_array_obj_array_field)
			.local_get(1)
			.array_get(ref_array);
		return makeFunc(SigDecl.new([ValueType.Host(at), ValueType.I32], [ValueType.Host(at.elem)]));
	}
//-------------------------------------------------------------------------------------------------	
	def AASTORE(at: JawaArrayType) -> WasmFunction {
		start0()
			.local_get(0)
			.struct_get(ref_array_obj, ref_array_obj_array_field)
			.local_get(1)
			.local_get(2)
			.array_set(ref_array);
		return makeFunc(SigDecl.new([ValueType.Host(at), ValueType.I32, ValueType.Host(at.elem)], SigCache.arr_v));
	}
//-------------------------------------------------------------------------------------------------
	def start0() -> WasmGcAsm {
		asm.resize(0);
		return asm.put(0 /*locals*/);
	}
	def makeFunc(sig: SigDecl) -> WasmFunction {
		comodule.addDecl(sig);
		var func = FuncDecl.new(sig);
		func.code = Code.new(asm.put(Opcode.END.code).extract()); // TODO: run verifier?
		return WasmFunction.new(coinstance, func);
	}
}

class WasmGcAsm extends Vector<byte> {
	def put_u32leb(v: int) -> this {
		var data = u32.view(v);
		while (data >= 0x80) {
			put(byte.view(0x80u | (data & 0x7F)));
			data = data >> 7;
		}
		put(byte.view(data));
	}
	def local_get(index: byte) -> this {
		put(Opcode.LOCAL_GET.code).put(index);
	}
	def local_set(index: byte) -> this {
		put(Opcode.LOCAL_SET.code).put(index);
	}
	def struct_get(decl: StructDecl, field: byte) -> this {
		put(Opcode.STRUCT_GET.prefix).put(Opcode.STRUCT_GET.code).put_u32leb(decl.struct_index).put(field);
	}
	def array_get(decl: ArrayDecl) -> this {
		put(Opcode.ARRAY_GET.prefix).put(Opcode.ARRAY_GET.code).put_u32leb(decl.array_index);
	}
	def array_set(decl: ArrayDecl) -> this {
		put(Opcode.ARRAY_SET.prefix).put(Opcode.ARRAY_SET.code).put_u32leb(decl.array_index);
	}
}