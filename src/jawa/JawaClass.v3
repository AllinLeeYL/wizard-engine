// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Base class of compound types, i.e. class and interface.
class JawaCompound(name: JawaString) { }

// Contains declared members of classes.
class JawaClass extends JawaCompound {
	def parent: JawaClass;
	def interfaces: Array<JawaInterfaceType>;
	var instanceFields: Array<JawaField>;
	var instanceMethods: Array<JawaMethod>;
	var staticFields: Array<JawaField>;
	var staticMethods: Array<JawaMethod>;

	new(name: JawaString, parent, interfaces) super(name) { }

	def complete() -> bool {
		return instanceFields != null;
	}
}

// Contains declared members of interfaces.
class JawaInterface extends JawaCompound {
	def interfaces: Array<JawaInterfaceType>;
	var instanceMethods: Array<JawaMethod>;

	new(name: JawaString, interfaces) super(name) { }

	def complete() -> bool {
		return instanceMethods != null;
	}

}

class JawaField(name: JawaString, typ: JawaType) { }
class JawaMethod(name: JawaString, params: Array<JawaType>, ret: JawaType) { }

// All built-in classes in Jawa.
component JawaClasses {
	def NO_INTERFACES: Array<JawaInterfaceType> = [];
	def OBJECT = JawaClass.new(ascii("jawa/lang/Object"), null, NO_INTERFACES);
	def STRING = JawaClass.new(ascii("jawa/lang/String"), OBJECT, NO_INTERFACES);

	def add(env: JawaEnvironment) {
		env.add(OBJECT);
		env.add(STRING);
	}

	def ascii(s: string) -> JawaString {
		var chars = Array<u16>.new(s.length);
		for (i < s.length) chars[i] = s[i];
		return JawaString.new(chars);
	}
}
