// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class JawaField(name: JawaString, index: int, typ: JawaType) {
	def defaultValue() -> Value {
		return JawaTypes.defaultValue(typ);
	}
}
class JawaMethod(name: JawaString, params: Array<JawaType>, ret: JawaType, var impl: Function) {
	var vtable_index = -1;
	def sig(receiver: JawaType) -> FuncSig {
		var rt = if(ret.kind != JawaKind.VOID, [ret.valueType()], SigCache.arr_v);
		if (receiver == null) {
			return FuncSig.new(Arrays.map(params, JawaType.valueType), rt);
		} else {
			var v = Vector<ValueType>.new().grow(1 + params.length);
			v.put(receiver.valueType());
			for (p in params) v.put(p.valueType());
			return FuncSig.new(v.extract(), rt);
		}
	}
}

// All built-in classes in Jawa.
component JawaClasses {
	def NO_INTERFACES: Array<JawaInterfaceType> = [];

	def OBJECT = JawaClassType.new(JawaStrings.of("jawa/lang/Object"), null, NO_INTERFACES);
	def STRING = JawaClassType.new(JawaStrings.of("jawa/lang/String"), OBJECT, NO_INTERFACES);

	new() {
		OBJECT.boilerplate = Values.NONE;
		STRING.boilerplate = Values.NONE;
		def NO_METHODS = Array<JawaMethod>.new(0);
		def NO_FIELDS = Array<JawaField>.new(0);
		OBJECT.instanceFields = OBJECT.staticFields = NO_FIELDS;
		STRING.instanceFields = STRING.staticFields = NO_FIELDS;
		OBJECT.instanceMethods = OBJECT.staticMethods = NO_METHODS;
		STRING.instanceMethods = STRING.staticMethods = NO_METHODS;
		OBJECT.vtable = [];
		STRING.vtable = [];
	}

	def add(env: JawaEnvironment) {
		env.add(OBJECT);
		env.add(STRING);
	}
	def buildVtable(ct: JawaClassType, err: ErrorGen) {
		if (ct.parent == null) {
			ct.vtable = Arrays.dup(ct.instanceMethods);
			for (i < ct.vtable.length) ct.vtable[i].vtable_index = i;
			return;
		}
		var vtable = Vector<JawaMethod>.new();
		vtable.puta(ct.parent.vtable);
		for (m in ct.instanceMethods) {
			for (pm in ct.parent.vtable) {
				if (!err.ok()) return;
				if (override(m, pm, err)) {
					m.vtable_index = pm.vtable_index;
					vtable.set(m.vtable_index, m);
				} else {
					m.vtable_index = vtable.length;
					vtable.put(m);
				}
			}
		}
		ct.vtable = vtable.extract();
	}
	def override(m: JawaMethod, pm: JawaMethod, err: ErrorGen) -> bool {
		if (!m.name.equals(pm.name)) return false;
		var mp = m.params, pmp = pm.params;
		if (mp.length != mp.length) return false;  // overloading
		for (i < mp.length) {
			if (mp[i] != pmp[i]) return false; // overloading
		}
		if (pm.ret.isAssignableToH(m.ret)) {
			err.abs(0).set(Strings.format1("cannot override return value in method %q", m.name.render));
			return false;
		}
		return true;
	}
}
