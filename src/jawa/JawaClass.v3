// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

enum JawaFieldAttr(code: u16) {
	PUBLIC		(0x0001),
	PRIVATE		(0x0002),
	PROTECTED	(0x0004),
	FINAL		(0x0010),
	VOLATILE	(0x0040),
	TRANSIENT	(0x0080),
	SYNTHETIC	(0x1000),
	ENUM		(0x2000)
}
class JawaField(name: JawaString, attrs: JawaFieldAttr.set, index: int, typ: JawaType) {
	def defaultValue() -> Value {
		return JawaTypes.defaultValue(typ);
	}
	def render(buf: StringBuilder) -> StringBuilder {
		buf.puts("field \"");
		name.render(buf);
		buf.puts("\" :");
		typ.renderJ(buf);
		for (a in attrs) buf.sp().puts(a.name);
		return buf;
	}
}

enum JawaMethodAttr(code: u16) {
	PUBLIC		(0x0001),
	PRIVATE		(0x0002),
	PROTECTED	(0x0004),
	FINAL		(0x0010),
	SYNCHRONIZED	(0x0020),
	BRIDGE		(0x0040),
	VARARGS		(0x0080),
	NATIVE		(0x0100),
	ABSTRACT	(0x0400),
	STRICT		(0x0800),
	SYNTHETIC	(0x1000)
}
class JawaMethod(name: JawaString, attrs: JawaMethodAttr.set, params: Array<JawaType>, ret: JawaType, var impl: Function) {
	var vtable_index = -1;
	var itable_index = -1;
	def sig(receiver: JawaType) -> SigDecl {
		var rt = if(ret.kind != JawaKind.VOID, [ret.valueType()], SigCache.arr_v);
		if (receiver == null) {
			return SigDecl.new(Arrays.map(params, JawaType.valueType), rt);
		} else {
			var v = Vector<ValueType>.new().grow(1 + params.length);
			v.put(receiver.valueType());
			for (p in params) v.put(p.valueType());
			return SigDecl.new(v.extract(), rt);
		}
	}
	def render(buf: StringBuilder) -> StringBuilder {
		buf.puts("method \"");
		name.render(buf);
		buf.puts("\" (");
		for (p in params) p.renderJ(buf);
		buf.puts(")");
		ret.renderJ(buf);
		for (a in attrs) buf.sp().puts(a.name);
		return buf;
	}
	def override(pm: JawaMethod) -> JawaOverride {
		if (!name.equals(pm.name)) return JawaOverride.NO_BECAUSE_NAME;
		// Overloading checks
		var mp = params, pmp = pm.params;
		if (mp.length != pmp.length) return JawaOverride.NO_BECAUSE_PARAMS;
		for (i < mp.length) if (mp[i] != pmp[i]) return JawaOverride.NO_BECAUSE_PARAMS;
		// Return-value check
		if (!ret.isAssignableToH(pm.ret)) return JawaOverride.ERR_BECAUSE_RETURN;
		// Cannot override final methods from parent
		if (pm.attrs.FINAL) return JawaOverride.ERR_BECAUSE_FINAL;
		return JawaOverride.YES;
	}
}
enum JawaOverride {
	YES,
	NO_BECAUSE_NAME,
	NO_BECAUSE_PARAMS,
	ERR_BECAUSE_FINAL,
	ERR_BECAUSE_RETURN
}

enum JawaClassAttr(code: u16) {
	PUBLIC		(0x0001),
	FINAL		(0x0002),
	SUPER		(0x0004),
	ABSTRACT	(0x0008),
	SYNTHETIC	(0x0010),
	ANNOTATION	(0x0020),
	ENUM		(0x0040)
}
class JawaClassType extends JawaDeclType {
	def attrs: JawaClassAttr.set;
	def parent: JawaClassType;
	def interfaces: Array<JawaInterfaceType>;
	var instanceFields: Array<JawaField>;
	var instanceMethods: Array<JawaMethod>;
	var staticFields: Array<JawaField>;
	var staticMethods: Array<JawaMethod>;
	var boilerplate: Array<Value>; 				// field values for newly created objects
	var vtable: Array<JawaMethod>;				// virtual dispatch table
	var itable: List<(JawaInterfaceType, Array<int>)>;	// interface dispatch table
	var fields: Array<Value>;  				// static field values

	new(name: JawaString, attrs, parent, interfaces) super(name) { }

	def defined() -> bool {
		return instanceFields != null;
	}
	def isAssignableTo(t: ValueType) -> bool {
		match (t) {
			Host(host) => return isAssignableToH(host);
			EXTERNREF => return true;
			_ => return false;
		}
	}
	def isAssignableToH(that: HostType) -> bool {
		if (this == that) return true;
		if (JawaInterfaceType.?(that)) return isAssignableToI(JawaInterfaceType.!(that));
		if (JawaClassType.?(that)) {
			for (t = this; t != null; t = t.parent) if (t == that) return true;
		}
		return false;
	}
	def isAssignableToI(that: JawaInterfaceType) -> bool {
		for (i in interfaces) if (i.isAssignableToI(that)) return true;
		return false;
	}
	def renderJ(buf: StringBuilder) -> StringBuilder {
		return name.render(buf.putc('L')).putc(';');
	}
	// Build the {vtable} and {itable} for this class.
	def buildTables(err: ErrorGen) {
		if (vtable != null) return; // already built
		var trace = if(Trace.jawa, TraceBuilder.new());
		if (parent == null) {
			if (trace != null) trace.put2("jawa vtable \"%q\", parent=null, %d entries",
					name.render, instanceMethods.length)
				.outln();
			vtable = Arrays.dup(instanceMethods);
			for (i < vtable.length) vtable[i].vtable_index = i;
			checkAbstract(err);
			for (i in interfaces) buildITableR(i, err);
			return;
		}
		if (trace != null) trace.put3("jawa vtable \"%q\", parent=\"%q\", %d entries",
				name.render, parent.name.render, parent.vtable.length)
			.outln();
		var vec = Vector<JawaMethod>.new();
		vec.puta(parent.vtable);
		for (m in instanceMethods) {
			if (trace != null) trace.put1("  process \"%q\" ", m.name.render);
			var found = false;
			for (pm in parent.vtable) {
				if (!err.ok()) return;
				if (override(m, pm, err)) {
					m.vtable_index = pm.vtable_index;
					vec.set(m.vtable_index, m);
					found = true;
					if (trace != null) trace.put1("-> override @%d", m.vtable_index).outln();
					break;
				}
			}
			if (!found) {
				m.vtable_index = vec.length;
				vec.put(m);
				if (trace != null) trace.put1("-> add @%d", m.vtable_index).outln();
			}
		}
		vtable = vec.extract();
		checkAbstract(err);
		itable = if(parent != null, parent.itable);  // share itable list with parent
		for (i in interfaces) buildITableR(i, err);
	}
	private def buildITableR(i: JawaInterfaceType, err: ErrorGen) {
		var indexes = Array<int>.new(i.instanceMethods.length);
		var found = false;
		for (j < i.instanceMethods.length) {
			var pm = i.instanceMethods[j];
			if (pm.itable_index < 0) pm.itable_index = j;
			for (m in vtable) {
				if (override(m, pm, err)) {
					indexes[j] = m.vtable_index;
					found = true;
					break;
				}
			}
			if (!found) {
				if (attrs.ABSTRACT) {
					// Abstract class has no implementation of interface method.
					// Add a synthetic method and grow the vtable.
					var attrs = JawaMethodAttr.SYNTHETIC | JawaMethodAttr.ABSTRACT;
					var nm = JawaMethod.new(pm.name, attrs, pm.params, pm.ret, null);
					indexes[j] = nm.vtable_index = vtable.length;
					vtable = Arrays.append(nm, vtable); // XXX: use vector to prevent n^2 copy
				} else {
					err.abs(0).set(Strings.format2("no implementation for interface method %q.%q",
						i.name.render, pm.render));
					return;
				}
			}
		}
		itable = List.new((i, indexes), itable);

		for (j in i.interfaces) buildITableR(j, err);
	}
	private def override(m: JawaMethod, pm: JawaMethod, err: ErrorGen) -> bool {
		match (m.override(pm)) {
			YES => return true;
			ERR_BECAUSE_RETURN =>
				err.abs(0).set(Strings.format1("cannot override return value in method %q", pm.render));
			ERR_BECAUSE_FINAL =>
				err.abs(0).set(Strings.format1("cannot override final method %q", pm.render));
			_ => ;
		}
		return false;
	}
	private def checkAbstract(err: ErrorGen) {
		if (attrs.ABSTRACT) return; // nothing to check
		for (m in vtable) {
			if (m.attrs.ABSTRACT) {
				err.abs(0).set(Strings.format1("class does not implement abstract method %q", m.render));
				return;
			}
		}
	}
}

// Jawa interface types.
class JawaInterfaceType extends JawaDeclType {
	def interfaces: Array<JawaInterfaceType>;
	var instanceMethods: Array<JawaMethod>;

	new(name: JawaString, interfaces) super(name) { }

	def defined() -> bool {
		return instanceMethods != null;
	}
	def isAssignableTo(t: ValueType) -> bool {
		match (t) {
			Host(host) => return isAssignableToH(host);
			EXTERNREF => return true;
			_ => return false;
		}
	}
	def isAssignableToH(that: HostType) -> bool {
		if (this == that) return true;
		if (JawaInterfaceType.?(that)) return isAssignableToI(JawaInterfaceType.!(that));
		if (JawaClassType.?(that)) return JawaClassType.!(that).parent == null; // jawa/lang/Object
		return false;
	}
	def isAssignableToI(that: JawaInterfaceType) -> bool {
		if (this == that) return true;
		for (i in interfaces) if (i.isAssignableToI(that)) return true;
		return false;
	}
	def renderJ(buf: StringBuilder) -> StringBuilder {
		return name.render(buf.putc('L')).putc(';');
	}
}
