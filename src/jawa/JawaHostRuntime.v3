// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implementation of the Jawa runtime using only the host language, Virgil.
class JawaHostRuntime extends JawaRuntime {

	new() super(JawaHostStringLens.new(),
		JawaHostRefTypeClassObjectLens.new()) { } // XXX: cache lenses?

	def toWasmType(t: JawaType) -> ValueType {
		match (t) {
			x: JawaPrimType => return x.prim.valueType;
			_ => return ValueType.Host(t);
		}
	}
	def toExportedType(t: JawaRefType) -> ExportedType {
		return t;
	}
	def nullRef() -> Value {
		return Values.REF_NULL;
	}
	def newObject(ct: JawaClassType) -> Value {
		return Value.Ref(JawaInstanceObject.new(ct));
	}
	def getStatic(ct: JawaClassType, f: JawaField) -> Value {
		return ct.staticStorage[f.index];
	}
	def setStatic(ct: JawaClassType, f: JawaField, v: Value) {
		ct.staticStorage[f.index] = v;
	}
	def getField(obj: Value, i: int) -> Value {
		return JawaInstanceObject.!(Value.Ref.!(obj).val).fields[i];
	}
	def setField(obj: Value, i: int, v: Value) {
		JawaInstanceObject.!(Value.Ref.!(obj).val).fields[i] = v;
	}
	def newArray(at: JawaArrayType, length: int) -> Value {
		return Value.Ref(newArrayObject(at, length));
	}
	def initArray<T>(at: JawaArrayType, vals: Array<T>, map: JawaPrimMappingOf<T>) -> Value {
		var obj = JawaArrayObjectOf<T>.new(vals);
		return Value.Ref(obj);
	}
	def getElem(arr: Value, i: int) -> Value {
		match (Value.Ref.!(arr).val) {
			x: JawaRefArrayObject => return Value.Ref(x.elems[i]);
			x: JawaArrayObjectOf<bool> => return if(x.elems[i], Values.I32_1, Values.I32_0);
			x: JawaArrayObjectOf<i8> => return Value.I32(u32.view(x.elems[i]));
			x: JawaArrayObjectOf<i16> => return Value.I32(u32.view(x.elems[i]));
			x: JawaArrayObjectOf<u16> => return Value.I32(x.elems[i]);
			x: JawaArrayObjectOf<i32> => return Value.I32(u32.view(x.elems[i]));
			x: JawaArrayObjectOf<i64> => return Value.I64(u64.view(x.elems[i]));
			x: JawaArrayObjectOf<float> => return Value.F32(u32.view(x.elems[i]));
			x: JawaArrayObjectOf<double> => return Value.F64(u64.view(x.elems[i]));
			_ => return Values.I32_0;
		}
	}
	def setElem(arr: Value, i: int, v: Value) {
		var ref = JawaRefArrayObject.!(Value.Ref.!(arr).val); // TODO: JawaRefArrayObjectOf<Prim>
		ref.elems[i] = JawaObject.!(Value.Ref.!(v).val);
	}
	def getLength(arr: Value) -> int {
		match (Value.Ref.!(arr).val) {
			x: JawaRefArrayObject => return x.elems.length;
			x: JawaArrayObjectOf<bool> => return x.elems.length;
			x: JawaArrayObjectOf<i8> => return x.elems.length;
			x: JawaArrayObjectOf<i16> => return x.elems.length;
			x: JawaArrayObjectOf<u16> => return x.elems.length;
			x: JawaArrayObjectOf<i32> => return x.elems.length;
			x: JawaArrayObjectOf<i64> => return x.elems.length;
			x: JawaArrayObjectOf<float> => return x.elems.length;
			x: JawaArrayObjectOf<double> => return x.elems.length;
			_ => return -1;
		}
	}
	def getJawaType(v: Value) -> JawaType {
		match (v) {
			I32 => return JawaTypes.INT;
			I64 => return JawaTypes.LONG;
			F32 => return JawaTypes.FLOAT;
			F64 => return JawaTypes.DOUBLE;
			Ref(host) => match (host) {
				x: JawaObject => return x.jawaType();
			}
			_ => ;
		}
		return null;
	}

	def AALOAD(at: JawaArrayType) -> HostFunction {
		var sig = SigDecl.new([ValueType.Host(at), ValueType.I32], [ValueType.Host(at.elem)]);
		return HostFunction2.new("AALOAD", sig, eval_AALOAD);
	}
	def AASTORE(at: JawaArrayType) -> HostFunction {
		var sig = SigDecl.new([ValueType.Host(at), ValueType.I32, ValueType.Host(at.elem)], SigCache.arr_v);
		return HostFunction3.new("AASTORE", sig, eval_AASTORE);
	}
	def ACMPEQ() -> HostFunction {
		return func_ACMPEQ;
	}
	def ANEWARRAY(at: JawaArrayType) -> HostFunction {
		var sig = SigDecl.new(SigCache.arr_i, [ValueType.Host(at)]);
		return HostFunction1.new("ANEWARRAY", sig, eval_ANEWARRAY(at, _));
	}
	def ARRAYLENGTH(at: JawaArrayType) -> HostFunction {
		var sig = SigDecl.new([ValueType.Host(at)], SigCache.arr_i);
		return HostFunction1.new("ARRAYLENGTH", sig, eval_ARRAYLENGTH);
	}
	def NEWARRAY(at: JawaArrayType) -> HostFunction {
		var sig = SigDecl.new(SigCache.arr_i, [ValueType.Host(at)]);
		var eval: Value -> HostResult;
		match (at.elem.kind) {
			BYTE => eval = eval_NEWARRAY<i8>;
			BOOL => eval = eval_NEWARRAY<bool>;
			CHAR => eval = eval_NEWARRAY<u16>;
			SHORT => eval = eval_NEWARRAY<i16>;
			INT => eval = eval_NEWARRAY<int>;
			LONG => eval = eval_NEWARRAY<long>;
			FLOAT => eval = eval_NEWARRAY<float>;
			DOUBLE => eval = eval_NEWARRAY<double>;
			_ => return null;
		}
		return HostFunction1.new("NEWARRAY", sig, eval);
	}
	def ALOAD<T>(at: JawaArrayType, map: JawaPrimMappingOf<T>) -> HostFunction {
		var et = JawaPrimType.!(at.elem).prim.valueType;
		var sig = SigDecl.new([ValueType.Host(at), ValueType.I32], [et]);
		return HostFunction2.new("ALOAD", sig, eval_ALOAD<T>(map.box, _, _));
	}
	def ASTORE<T>(at: JawaArrayType, map: JawaPrimMappingOf<T>) -> HostFunction {
		var et = JawaPrimType.!(at.elem).prim.valueType;
		var sig = SigDecl.new([ValueType.Host(at), ValueType.I32, et], SigCache.arr_v);
		return HostFunction3.new("ASTORE", sig, eval_ASTORE<T>(map.unbox, _, _, _));
	}
	def CHECKCAST(t: JawaRefType) -> HostFunction {
		var sig = SigDecl.new([ValueType.Host(JawaLang.OBJECT)], [ValueType.Host(t)]);
		return HostFunction1.new("CHECKCAST", sig, eval_CHECKCAST(t, _));
	}
	def DCMPG() -> HostFunction {
		return func_DCMPG;
	}
	def DCMPL() -> HostFunction {
		return func_DCMPL;
	}
	def DREM() -> HostFunction {
		return func_DREM;
	}
	def FCMPG() -> HostFunction {
		return func_FCMPG;
	}
	def FCMPL() -> HostFunction {
		return func_FCMPL;
	}
	def FREM() -> HostFunction {
		return func_FREM;
	}
	def GETFIELD(ct: JawaClassType, f: JawaField) -> HostFunction {
		var sig = SigDecl.new([ValueType.Host(ct)], [toWasmType(f.typ)]);
		return HostFunction1.new("GETFIELD", sig, eval_GETFIELD(f, _));
	}
	def GETSTATIC(ct: JawaClassType, f: JawaField) -> HostFunction {
		var sig = SigDecl.new(SigCache.arr_v, [toWasmType(f.typ)]);
		return HostFunction0.new("GETSTATIC", sig, eval_GETSTATIC(ct, f, _));
	}
	def INSTANCEOF(t: JawaRefType) -> HostFunction {
		return HostFunction1.new("INSTANCEOF", sig_o_i, eval_INSTANCEOF(t, _));
	}
	def INVOKEINTERFACE(it: JawaInterfaceType, m: JawaMethod) -> Function {
		return HostFunctionN.new("INVOKEINTERFACE", m.sig.sig(it, toWasmType), eval_INVOKEINTERFACE(it, m, _));
	}
	def INVOKESPECIAL(ct: JawaClassType, m: JawaMethod) -> Function {
		return HostFunctionN.new("INVOKESPECIAL", m.sig.sig(ct, toWasmType), eval_INVOKESPECIAL(m.impl, _));
	}
	def INVOKESTATIC(ct: JawaClassType, m: JawaMethod) -> Function {
		return m.impl;
	}
	def INVOKEVIRTUAL(ct: JawaClassType, m: JawaMethod) -> Function {
		return HostFunctionN.new("INVOKEVIRTUAL", m.sig.sig(ct, toWasmType), eval_INVOKEVIRTUAL(m, _));
	}
	def ISNULL() -> HostFunction {
		return func_ISNULL;
	}
	def MONITORENTER() -> HostFunction {
		return func_MONITORENTER;
	}
	def MONITOREXIT() -> HostFunction {
		return func_MONITOREXIT;
	}
	def MULTIANEWARRAY(dims: int, at: JawaArrayType) -> HostFunction {
		// TODO: negative array size exception
		var params = Array<ValueType>.new(dims);
		for (i < dims) params[i] = ValueType.I32;
		var sig = SigDecl.new(params, [ValueType.Host(at)]);
		return HostFunctionN.new("MULTIANEWARRAY", sig, eval_MULTIANEWARRAY(at, _));
	}
	def NEW(ct: JawaClassType) -> HostFunction {
		var sig = SigDecl.new(SigCache.arr_v, [ValueType.Host(ct)]);
		return HostFunctionN.new("NEW", sig, eval_NEW(ct, _));
	}
	def PUTFIELD(ct: JawaClassType, f: JawaField) -> HostFunction {
		var sig = SigDecl.new([ValueType.Host(ct), toWasmType(f.typ)], SigCache.arr_v);
		return HostFunction2.new("PUTFIELD", sig, eval_PUTFIELD(f, _, _));
	}
	def PUTSTATIC(ct: JawaClassType, f: JawaField) -> HostFunction {
		var sig = SigDecl.new([toWasmType(f.typ)], SigCache.arr_v);
		return HostFunction1.new("PUTSTATIC", sig, eval_PUTSTATIC(ct, f, _));
	}
}

def VOID = HostResult.Value0;
def TRUE = HostResult.Value1(Values.I32_1);
def FALSE = HostResult.Value1(Values.I32_0);

def vt_o = ValueType.Host(JawaTypes.OBJECT);

def arr_o: Array<ValueType> = [vt_o];
def arr_oo: Array<ValueType> = [vt_o, vt_o];

def sig_oo_i = SigDecl.new(arr_oo, SigCache.arr_i);
def sig_o_i = SigDecl.new(arr_o, SigCache.arr_i);
def sig_o_v = SigDecl.new(arr_o, SigCache.arr_v);

def func_ISNULL = HostFunction1.new("ISNULL", sig_o_i, eval_ISNULL);
def func_MONITORENTER = HostFunction1.new("MONITORENTER", sig_o_v, eval_MONITORENTER);
def func_MONITOREXIT = HostFunction1.new("MONITOREXIT", sig_o_v, eval_MONITOREXIT);
def func_DCMPG = HostFunction2.new("DCMPG", SigCache.dd_i, eval_DCMPG);
def func_DCMPL = HostFunction2.new("DCMPL", SigCache.dd_i, eval_DCMPL);
def func_DREM = HostFunction2.new("DREM", SigCache.dd_d, eval_DREM);
def func_FCMPG = HostFunction2.new("FCMPG", SigCache.ff_i, eval_FCMPG);
def func_FCMPL = HostFunction2.new("FCMPL", SigCache.ff_i, eval_FCMPL);
def func_FREM = HostFunction2.new("FREM", SigCache.ff_f, eval_FREM);
def func_ACMPEQ = HostFunction2.new("ACMPEQ", sig_oo_i, eval_ACMPEQ);

def eval_MONITOREXIT(arg: Value) -> HostResult { // TODO: nop
	var obj = Value.Ref.!(arg).val;
	if (obj == null) return JawaTraps.NullPointerException;
	return VOID;
}
def eval_MONITORENTER(arg: Value) -> HostResult { // TODO: nop
	var obj = Value.Ref.!(arg).val;
	if (obj == null) return JawaTraps.NullPointerException;
	return VOID;
}
def eval_ISNULL(a: Value) -> HostResult {
	var x = Value.Ref.!(a).val;
	return if(x == null, TRUE, FALSE);
}
def eval_INVOKEVIRTUAL(m: JawaMethod, args: Array<Value>) -> HostResult {
	var obj = Value.Ref.!(args[0]).val;
	if (obj == null) return JawaTraps.NullPointerException;
	var vtable: Array<JawaMethod>;
	match (obj) {
		x: JawaInstanceObject => vtable = x.clazz.vtable;
		_ => vtable = JawaLang.OBJECT.vtable;
	}
	var impl = vtable[m.vtable_index].impl;
	return HostResult.TailCall(impl, args);
}
def eval_INVOKESPECIAL(f: Function, args: Array<Value>) -> HostResult {
	var obj = Value.Ref.!(args[0]).val;
	if (obj == null) return JawaTraps.NullPointerException;
	return HostResult.TailCall(f, args);
}
def eval_INVOKEINTERFACE(it: JawaInterfaceType, m: JawaMethod, args: Array<Value>) -> HostResult {
	var obj = Value.Ref.!(args[0]).val;
	if (obj == null) return JawaTraps.NullPointerException;
	var f: Function;
	match (obj) {
		obj: JawaInstanceObject => {
			// linear search all itable entries, looking for this interface
			for (t = obj.clazz.itable; t != null; t = t.tail) {
				if (t.head.0 == it) {
					f = obj.clazz.vtable[t.head.1[m.itable_index]].impl;
					return HostResult.TailCall(f, args);
				}
			}
			return HostResult.Trap(TrapReason.ERROR); // TODO: interface not found
		}
	}
	return HostResult.Trap(TrapReason.ERROR); // TODO: object not jawa instance
}
def eval_INSTANCEOF(t: JawaRefType, arg: Value) -> HostResult {
	var obj = Value.Ref.!(arg).val;
	if (obj == null) return FALSE;
	var jt = JawaObject.!(obj).jawaType();
	return if(jt.isAssignableToH(t), TRUE, FALSE);
}
def eval_GETSTATIC(ct: JawaClassType, f: JawaField, v: void) -> HostResult {
	return HostResult.Value1(ct.staticStorage[f.index]);
}
def eval_GETFIELD(f: JawaField, arg: Value) -> HostResult {
	var obj = JawaInstanceObject.!(Value.Ref.!(arg).val);
	if (obj == null) return JawaTraps.NullPointerException;
	return HostResult.Value1(obj.fields[f.index]);
}
def eval_FREM(a: Value, b: Value) -> HostResult {
	var x = float.view(Values.v_f(a)), y = float.view(Values.v_f(b));
	if (y == y) {
		var rem = x - y * float.floor(x / y); // TODO: check inf%inf and 0%0
		return HostResult.Value1(Value.F32(u32.view(rem)));
	} else { // y is NaN
		return HostResult.Value1(Values.F32_nan);
	}
}
def eval_FCMPL(a: Value, b: Value) -> HostResult {
	var x = float.view(Values.v_f(a)), y = float.view(Values.v_f(b));
	var r = if(x > y, 1, if(x == y, 0, -1));
	return HostResult.Value1(Values.i_v(r));
}
def eval_FCMPG(a: Value, b: Value) -> HostResult {
	var x = float.view(Values.v_f(a)), y = float.view(Values.v_f(b));
	var r = if(x < y, -1, if(x == y, 0, 1));
	return HostResult.Value1(Values.i_v(r));
}
def eval_DREM(a: Value, b: Value) -> HostResult {
	var x = double.view(Values.v_d(a)), y = double.view(Values.v_d(b));
	if (y == y) {
		var rem = x - y * double.floor(x / y); // TODO: check inf%inf and 0%0
		return HostResult.Value1(Value.F64(u64.view(rem)));
	} else { // y is NaN
		return HostResult.Value1(Values.F64_nan);
	}
}
def eval_DCMPL(a: Value, b: Value) -> HostResult {
	var x = double.view(Values.v_d(a)), y = double.view(Values.v_d(b));
	var r = if(x > y, 1, if(x == y, 0, -1));
	return HostResult.Value1(Values.i_v(r));
}
def eval_DCMPG(a: Value, b: Value) -> HostResult {
	var x = double.view(Values.v_d(a)), y = double.view(Values.v_d(b));
	var r = if(x < y, -1, if(x == y, 0, 1));
	return HostResult.Value1(Values.i_v(r));
}
def eval_CHECKCAST(t: JawaRefType, v: Value) -> HostResult {
	var obj = Value.Ref.!(v).val;
	if (obj == null) return HostResult.Value1(v);
	var jt = JawaObject.!(obj).jawaType();
	return if(jt.isAssignableToH(t), HostResult.Value1(v), JawaTraps.ClassCastException);
}
def eval_ASTORE<T>(unbox: Value -> T, a: Value, i: Value, v: Value) -> HostResult {
	var obj = JawaArrayObjectOf<T>.!(Value.Ref.!(a).val);
	if (obj == null) return JawaTraps.NullPointerException;
	var index = Values.v_u(i);
	if (index >= obj.elems.length) return JawaTraps.ArrayIndexOutOfBoundsException;
	obj.elems[index] = unbox(v);
	return VOID;
}
def eval_ALOAD<T>(box: T -> Value, a: Value, i: Value) -> HostResult {
	var obj = JawaArrayObjectOf<T>.!(Value.Ref.!(a).val);
	if (obj == null) return JawaTraps.NullPointerException;
	var index = Values.v_u(i);
	if (index >= obj.elems.length) return JawaTraps.ArrayIndexOutOfBoundsException;
	return HostResult.Value1(box(obj.elems[index]));
}
def eval_NEWARRAY<T>(arg: Value) -> HostResult {
	var length = Values.v_i(arg);
	if (length < 0) return JawaTraps.NegativeArraySizeException;
	var elems = Array<T>.new(length); // TODO: out-of-memory check
	return HostResult.Value1(Value.Ref(JawaArrayObjectOf.new(elems)));
}
def eval_ARRAYLENGTH(arg: Value) -> HostResult {
	var obj = JawaArrayObject.!(Value.Ref.!(arg).val);
	if (obj == null) return JawaTraps.NullPointerException;
	return HostResult.Value1(Values.i_v(obj.length()));  // XXX: avoid virtual dispatch here?
}
def eval_ANEWARRAY(at: JawaArrayType, arg: Value) -> HostResult {
	var length = Values.v_i(arg);
	if (length < 0) return JawaTraps.NegativeArraySizeException;
	var elems = Array<JawaObject>.new(length); // TODO: out-of-memory check
	return HostResult.Value1(Value.Ref(JawaRefArrayObject.new(at, elems)));
}
def eval_ACMPEQ(a: Value, b: Value) -> HostResult {
	var x = Value.Ref.!(a).val;
	var y = Value.Ref.!(b).val;
	return if(x == y, TRUE, FALSE);
}
def eval_AASTORE(a: Value, i: Value, v: Value) -> HostResult {
	var obj = JawaRefArrayObject.!(Value.Ref.!(a).val);
	if (obj == null) return JawaTraps.NullPointerException;
	var index = Values.v_u(i);
	if (index >= obj.elems.length) return JawaTraps.ArrayIndexOutOfBoundsException;
	obj.elems[index] = JawaObject.!(Value.Ref.!(v).val); // TODO: check for array store exception
	return VOID;
}
def eval_AALOAD(a: Value, i: Value) -> HostResult {
	var obj = JawaRefArrayObject.!(Value.Ref.!(a).val);
	if (obj == null) return JawaTraps.NullPointerException;
	var index = Values.v_u(i);
	if (index >= obj.elems.length) return JawaTraps.ArrayIndexOutOfBoundsException;
	return HostResult.Value1(Value.Ref(obj.elems[index]));
}
def eval_MULTIANEWARRAY(at: JawaArrayType, args: Array<Value>) -> HostResult {
	var dims = Arrays.map(args, Values.v_i);
	for (d in dims) if(d < 0) return JawaTraps.NegativeArraySizeException;
	return HostResult.Value1(Value.Ref(recMakeArray(at, dims, 0)));
}
def recMakeArray(at: JawaArrayType, dims: Array<int>, index: int) -> JawaObject {
	var length = dims[index];
	var next = index + 1;
	if (next == dims.length) return newArrayObject(at, length);
	var elems = Array<JawaObject>.new(length);
	var et = JawaArrayType.!(at.elem);
	for (i < length) {
		elems[i] = recMakeArray(et, dims, next);
	}
	return JawaRefArrayObject.new(at, elems);
}
def eval_NEW(ct: JawaClassType, args: Array<Value>) -> HostResult {
	return HostResult.Value1(Value.Ref(JawaInstanceObject.new(ct)));
}
def eval_PUTFIELD(f: JawaField, a: Value, v: Value) -> HostResult {
	var obj = JawaInstanceObject.!(Value.Ref.!(a).val);
	if (obj == null) return JawaTraps.NullPointerException;
	obj.fields[f.index] = v; // TODO: narrowing stores
	return VOID;
}
def eval_PUTSTATIC(ct: JawaClassType, f: JawaField, v: Value) -> HostResult {
	ct.staticStorage[f.index] = v; // TODO: narrowing stores
	return VOID;
}

def newArrayObject(at: JawaArrayType, length: int) -> JawaArrayObject {
	var obj: JawaArrayObject;
	match (at.elem.kind) {
		BYTE => obj = JawaArrayObjectOf<i8>.new(Array.new(length));
		BOOL => obj = JawaArrayObjectOf<bool>.new(Array.new(length));
		CHAR => obj = JawaArrayObjectOf<u16>.new(Array.new(length));
		SHORT => obj = JawaArrayObjectOf<i16>.new(Array.new(length));
		INT => obj = JawaArrayObjectOf<i32>.new(Array.new(length));
		LONG => obj = JawaArrayObjectOf<i64>.new(Array.new(length));
		FLOAT => obj = JawaArrayObjectOf<float>.new(Array.new(length));
		DOUBLE => obj = JawaArrayObjectOf<double>.new(Array.new(length));
		REF => obj = JawaRefArrayObject.new(at, Array.new(length));
		VOID => ;
	}
	return obj;
}

component JawaTraps {
	def ArrayIndexOutOfBoundsException = HostResult.Trap(TrapReason.ARRAY_INDEX_OOB);
	def NullPointerException = HostResult.Trap(TrapReason.NULL_DEREF);
	def NegativeArraySizeException = HostResult.Trap(TrapReason.OOM); // TODO: negative array size exception
	def ClassCastException = HostResult.Trap(TrapReason.FAILED_CAST);
	def OutOfMemoryException = HostResult.Trap(TrapReason.OOM);
}

class JawaHostStringLens extends JawaWasmLens<JawaString, Value> {
	def toWasm(s: JawaString) -> Value {
		return Value.Ref(s.toObject());
	}
	def fromWasm(v: Value) -> JawaString {
		if (!Value.Ref.?(v)) return null;
		var obj = Value.Ref.!(v).val;
		if (!JawaStringObject.?(obj)) return null;
		return JawaStringObject.!(obj).rep;
	}
}
class JawaHostRefTypeClassObjectLens extends JawaWasmLens<JawaRefType, Value> {
	def toWasm(rt: JawaRefType) -> Value {
		var ref = rt.obj;
		if (ref == null) ref = rt.obj = JawaClassObject.new(rt);
		return Value.Ref(ref);
	}
	def fromWasm(v: Value) -> JawaRefType {
		if (!Value.Ref.?(v)) return null;
		var obj = Value.Ref.!(v).val;
		if (!JawaClassObject.?(obj)) return null;
		return JawaClassObject.!(obj).rep;
	}
}
// Every object gets lazily assigned an identity hash code.
var hashUid = 99u;
// An instance of an on-heap Jawa object
class JawaObject extends HostObject {
	var hash: u32;
	def jawaType() -> JawaType;
	def hashCode() -> u32 {
		if (hash == 0) hash = hashUid++;
		return hash;
	}
}
class JawaArrayObject extends JawaObject {
	def length() -> int;
}
class JawaArrayObjectOf<T>(elems: Array<T>) extends JawaArrayObject {
	def length() -> int { return elems.length; }
	def jawaType() -> JawaType {
		// XXX: bake array type into Jawa primitive array objects?
		match (this) {
			x: JawaArrayObjectOf<i8> => return JawaTypes.BYTE_ARRAY;
			x: JawaArrayObjectOf<bool> => return JawaTypes.BOOL_ARRAY;
			x: JawaArrayObjectOf<u16> => return JawaTypes.CHAR_ARRAY;
			x: JawaArrayObjectOf<i16> => return JawaTypes.SHORT_ARRAY;
			x: JawaArrayObjectOf<i32> => return JawaTypes.INT_ARRAY;
			x: JawaArrayObjectOf<i64> => return JawaTypes.LONG_ARRAY;
			x: JawaArrayObjectOf<float> => return JawaTypes.FLOAT_ARRAY;
			x: JawaArrayObjectOf<double> => return JawaTypes.DOUBLE_ARRAY;
		}
		return null;
	}
}
class JawaRefArrayObject(at: JawaArrayType, elems: Array<JawaObject>) extends JawaArrayObject {
	def length() -> int { return elems.length; }
	def jawaType() -> JawaType { return at; }
}
class JawaInstanceObject(clazz: JawaClassType) extends JawaObject {
	def fields = Arrays.dup(clazz.boilerplate);
	def jawaType() -> JawaType { return clazz; }
}
class JawaStringObject(rep: JawaString) extends JawaInstanceObject(JawaLang.STRING) {
}
class JawaClassObject(rep: JawaRefType) extends JawaInstanceObject(JawaLang.CLASS) {
}
