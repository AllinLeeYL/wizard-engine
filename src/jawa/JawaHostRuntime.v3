// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implementation of the jawa runtime using only the host language, Virgil.
class JawaHostRuntime extends JawaRuntime {

	new() super(JawaHostTypeLens.new(),
		JawaHostStringLens.new(),
		JawaHostClassLens.new(),
		JawaHostInterfaceLens.new()) { }

	def nullRef() -> Value {
		return Values.EXTERNREF_NULL;
	}
	def newObject(ct: JawaClassType) -> Value {
		return Value.ExternRef(JawaInstanceObject.new(ct));
	}
	def getField(obj: Value, i: int) -> Value {
		return JawaInstanceObject.!(Value.ExternRef.!(obj).val).fields[i];
	}
	def setField(obj: Value, i: int, v: Value) {
		JawaInstanceObject.!(Value.ExternRef.!(obj).val).fields[i] = v;
	}

	def AALOAD(at: JawaArrayType) -> HostFunction {
		var sig = SigDecl.new([ValueType.Host(at), ValueType.I32], [ValueType.Host(at.elem)]);
		return JawaHostFunction.new("AALOAD", sig, eval_AALOAD);
	}
	def AASTORE(at: JawaArrayType) -> HostFunction {
		var sig = SigDecl.new([ValueType.Host(at), ValueType.I32, ValueType.Host(at.elem)], SigCache.arr_v);
		return JawaHostFunction.new("AASTORE", sig, eval_AASTORE);
	}
	def ACMPEQ() -> HostFunction {
		return func_ACMPEQ;
	}
	def ANEWARRAY(at: JawaArrayType) -> HostFunction {
		var sig = SigDecl.new(SigCache.arr_i, [ValueType.Host(at)]);
		return JawaHostFunction.new("ANEWARRAY", sig, eval_ANEWARRAY(at, _));
	}
	def ARRAYLENGTH(at: JawaArrayType) -> HostFunction {
		var sig = SigDecl.new([ValueType.Host(at)], SigCache.arr_i);
		return JawaHostFunction.new("ARRAYLENGTH", sig, eval_ARRAYLENGTH);
	}
	def NEWARRAY(at: JawaArrayType) -> HostFunction {
		var sig = SigDecl.new(SigCache.arr_i, [ValueType.Host(at)]);
		var eval: Array<Value> -> HostResult;
		match (at.elem.kind) {
			BYTE => eval = eval_NEWARRAY<i8>;
			BOOL => eval = eval_NEWARRAY<bool>;
			CHAR => eval = eval_NEWARRAY<u16>;
			SHORT => eval = eval_NEWARRAY<i16>;
			INT => eval = eval_NEWARRAY<int>;
			LONG => eval = eval_NEWARRAY<long>;
			FLOAT => eval = eval_NEWARRAY<float>;
			DOUBLE => eval = eval_NEWARRAY<double>;
			_ => return null;
		}
		return JawaHostFunction.new("NEWARRAY", sig, eval);
	}
	def ALOAD<T>(at: JawaArrayType, map: JawaPrimMappingOf<T>) -> HostFunction {
		var et = JawaPrimType.!(at.elem).prim.valueType;
		var sig = SigDecl.new([ValueType.Host(at), ValueType.I32], [et]);
		return JawaHostFunction.new("ALOAD", sig, eval_ALOAD<T>(_, map.box));
	}
	def ASTORE<T>(at: JawaArrayType, map: JawaPrimMappingOf<T>) -> HostFunction {
		var et = JawaPrimType.!(at.elem).prim.valueType;
		var sig = SigDecl.new([ValueType.Host(at), ValueType.I32, et], SigCache.arr_v);
		return JawaHostFunction.new("ASTORE", sig, eval_ASTORE<T>(_, map.unbox));
	}
	def CHECKCAST(t: JawaRefType) -> HostFunction {
		var sig = SigDecl.new([ValueType.Host(JawaLang.OBJECT)], [ValueType.Host(t)]);
		return JawaHostFunction.new("CHECKCAST", sig, eval_CHECKCAST(t, _));
	}
	def DCMPG() -> HostFunction {
		return func_DCMPG;
	}
	def DCMPL() -> HostFunction {
		return func_DCMPL;
	}
	def DREM() -> HostFunction {
		return func_DREM;
	}
	def FCMPG() -> HostFunction {
		return func_FCMPG;
	}
	def FCMPL() -> HostFunction {
		return func_FCMPL;
	}
	def FREM() -> HostFunction {
		return func_FREM;
	}
	def GETFIELD(ct: JawaClassType, f: JawaField) -> HostFunction {
		var sig = SigDecl.new([ValueType.Host(ct)], [typeRep.toWasm(f.typ)]);
		return JawaHostFunction.new("GETFIELD", sig, eval_GETFIELD(f, _));
	}
	def GETSTATIC(ct: JawaClassType, f: JawaField) -> HostFunction {
		var sig = SigDecl.new(SigCache.arr_v, [typeRep.toWasm(f.typ)]);
		return JawaHostFunction.new("GETSTATIC", sig, eval_GETSTATIC(ct, f, _));
	}
	def INSTANCEOF(t: JawaRefType) -> HostFunction {
		return JawaHostFunction.new("INSTANCEOF", sig_o_i, eval_INSTANCEOF(t, _));
	}
	def INVOKEINTERFACE(it: JawaInterfaceType, m: JawaMethod) -> Function {
		return JawaHostFunction.new("INVOKEINTERFACE", m.sig.sig(it, typeRep.toWasm), eval_INVOKEINTERFACE(it, m, _));
	}
	def INVOKESPECIAL(ct: JawaClassType, m: JawaMethod) -> Function {
		return JawaHostFunction.new("INVOKESPECIAL", m.sig.sig(ct, typeRep.toWasm), eval_INVOKESPECIAL(m.impl, _));
	}
	def INVOKESTATIC(ct: JawaClassType, m: JawaMethod) -> Function {
		return JawaHostFunction.new("INVOKESTATIC", m.sig.sig(null, typeRep.toWasm), eval_fw(m.impl, _));
	}
	def INVOKEVIRTUAL(ct: JawaClassType, m: JawaMethod) -> Function {
		return JawaHostFunction.new("INVOKEVIRTUAL", m.sig.sig(ct, typeRep.toWasm), eval_INVOKEVIRTUAL(m, _));
	}
	def ISNULL() -> HostFunction {
		return func_ISNULL;
	}
	def MONITORENTER() -> HostFunction {
		return func_MONITORENTER;
	}
	def MONITOREXIT() -> HostFunction {
		return func_MONITOREXIT;
	}
	def MULTIANEWARRAY(dims: int, at: JawaArrayType) -> HostFunction {
		// TODO: negative array size exception
		var p = Vector<ValueType>.new().grow(dims);
		for (i < dims) p.put(ValueType.I32);
		var sig = SigDecl.new(p.extract(), [ValueType.Host(at)]);
		return JawaHostFunction.new("MULTIANEWARRAY", sig, eval_MULTIANEWARRAY(at, _));
	}
	def NEW(ct: JawaClassType) -> HostFunction {
		var sig = SigDecl.new(SigCache.arr_v, [ValueType.Host(ct)]);
		return JawaHostFunction.new("NEW", sig, eval_NEW(ct, _));
	}
	def PUTFIELD(ct: JawaClassType, f: JawaField) -> HostFunction {
		var sig = SigDecl.new([ValueType.Host(ct), typeRep.toWasm(f.typ)], SigCache.arr_v);
		return JawaHostFunction.new("PUTFIELD", sig, eval_PUTFIELD(f, _));
	}
	def PUTSTATIC(ct: JawaClassType, f: JawaField) -> HostFunction {
		var sig = SigDecl.new([typeRep.toWasm(f.typ)], SigCache.arr_v);
		return JawaHostFunction.new("PUTSTATIC", sig, eval_PUTSTATIC(ct, f, _));
	}
}

def VOID = HostResult.Value([]);
def TRUE = HostResult.Value([Values.I32_1]);
def FALSE = HostResult.Value([Values.I32_0]);

def vt_o = ValueType.Host(JawaTypes.OBJECT);

def arr_o: Array<ValueType> = [vt_o];
def arr_oo: Array<ValueType> = [vt_o, vt_o];

def sig_oo_i = SigDecl.new(arr_oo, SigCache.arr_i);
def sig_o_i = SigDecl.new(arr_o, SigCache.arr_i);
def sig_o_v = SigDecl.new(arr_o, SigCache.arr_v);

def func_ISNULL = JawaHostFunction.new("ISNULL", sig_o_i, eval_ISNULL);
def func_MONITORENTER = JawaHostFunction.new("MONITORENTER", sig_o_v, eval_MONITORENTER);
def func_MONITOREXIT = JawaHostFunction.new("MONITOREXIT", sig_o_v, eval_MONITOREXIT);
def func_DCMPG = JawaHostFunction.new("DCMPG", SigCache.dd_i, eval_DCMPG);
def func_DCMPL = JawaHostFunction.new("DCMPL", SigCache.dd_i, eval_DCMPL);
def func_DREM = JawaHostFunction.new("DREM", SigCache.dd_d, eval_DREM);
def func_FCMPG = JawaHostFunction.new("FCMPG", SigCache.ff_i, eval_FCMPG);
def func_FCMPL = JawaHostFunction.new("FCMPL", SigCache.ff_i, eval_FCMPL);
def func_FREM = JawaHostFunction.new("FREM", SigCache.ff_f, eval_FREM);
def func_ACMPEQ = JawaHostFunction.new("ACMPEQ", sig_oo_i, eval_ACMPEQ);

def eval_MONITOREXIT(args: Array<Value>) -> HostResult { // TODO: nop
	var obj = Value.ExternRef.!(args[0]).val;
	if (obj == null) return JawaTraps.NullPointerException;
	return VOID;
}
def eval_MONITORENTER(args: Array<Value>) -> HostResult { // TODO: nop
	var obj = Value.ExternRef.!(args[0]).val;
	if (obj == null) return JawaTraps.NullPointerException;
	return VOID;
}
def eval_ISNULL(args: Array<Value>) -> HostResult {
	var a = Value.ExternRef.!(args[0]);
	return if(a.val == null, TRUE, FALSE);
}
def eval_INVOKEVIRTUAL(m: JawaMethod, args: Array<Value>) -> HostResult {
	var obj = Value.ExternRef.!(args[0]).val;
	if (obj == null) return JawaTraps.NullPointerException;
	var vtable: Array<JawaMethod>;
	match (obj) {
		x: JawaInstanceObject => vtable = x.clazz.vtable;
		_ => vtable = JawaLang.OBJECT.vtable;
	}
	var impl = vtable[m.vtable_index].impl;
	return HostResult.TailCall(impl, args);
}
def eval_fw(f: Function, args: Array<Value>) -> HostResult {
	return HostResult.TailCall(f, args);
}
def eval_INVOKESPECIAL(f: Function, args: Array<Value>) -> HostResult {
	var obj = Value.ExternRef.!(args[0]).val;
	if (obj == null) return JawaTraps.NullPointerException;
	return HostResult.TailCall(f, args);
}
def eval_INVOKEINTERFACE(it: JawaInterfaceType, m: JawaMethod, args: Array<Value>) -> HostResult {
	var obj = Value.ExternRef.!(args[0]).val;
	if (obj == null) return JawaTraps.NullPointerException;
	var f: Function;
	match (obj) {
		obj: JawaInstanceObject => {
			// linear search all itable entries, looking for this interface
			for (t = obj.clazz.itable; t != null; t = t.tail) {
				if (t.head.0 == it) {
					f = obj.clazz.vtable[t.head.1[m.itable_index]].impl;
					return HostResult.TailCall(f, args);
				}
			}
			return HostResult.Trap(TrapReason.ERROR); // TODO: interface not found
		}
	}
	return HostResult.Trap(TrapReason.ERROR); // TODO: object not jawa instance
}
def eval_INSTANCEOF(t: JawaRefType, args: Array<Value>) -> HostResult {
	var obj = Value.ExternRef.!(args[0]).val;
	if (obj == null) return FALSE;
	var jt = JawaObject.!(obj).jawaType();
	return if(jt.isAssignableToH(t), TRUE, FALSE);
}
def eval_GETSTATIC(ct: JawaClassType, f: JawaField, args: Array<Value>) -> HostResult {
	return HostResult.Value([ct.staticStorage[f.index]]);
}
def eval_GETFIELD(f: JawaField, args: Array<Value>) -> HostResult {
	var obj = JawaInstanceObject.!(Value.ExternRef.!(args[0]).val);
	if (obj == null) return JawaTraps.NullPointerException;
	return HostResult.Value([obj.fields[f.index]]);
}
def eval_FREM(args: Array<Value>) -> HostResult {
	var x = float.view(Values.v_f(args[0])), y = float.view(Values.v_f(args[1]));
	if (y == y) {
		var rem = x - y * float.floor(x / y); // TODO: check inf%inf and 0%0
		return HostResult.Value([Value.F32(u32.view(rem))]);
	} else { // y is NaN
		return HostResult.Value([Values.F32_nan]);
	}
}
def eval_FCMPL(args: Array<Value>) -> HostResult {
	var x = float.view(Values.v_f(args[0])), y = float.view(Values.v_f(args[1]));
	var r = if(x > y, 1, if(x == y, 0, -1));
	return HostResult.Value([Values.i_v(r)]);
}
def eval_FCMPG(args: Array<Value>) -> HostResult {
	var x = float.view(Values.v_f(args[0])), y = float.view(Values.v_f(args[1]));
	var r = if(x < y, -1, if(x == y, 0, 1));
	return HostResult.Value([Values.i_v(r)]);
}
def eval_DREM(args: Array<Value>) -> HostResult {
	var x = double.view(Values.v_d(args[0])), y = double.view(Values.v_d(args[1]));
	if (y == y) {
		var rem = x - y * double.floor(x / y); // TODO: check inf%inf and 0%0
		return HostResult.Value([Value.F64(u64.view(rem))]);
	} else { // y is NaN
		return HostResult.Value([Values.F64_nan]);
	}
}
def eval_DCMPL(args: Array<Value>) -> HostResult {
	var x = double.view(Values.v_d(args[0])), y = double.view(Values.v_d(args[1]));
	var r = if(x > y, 1, if(x == y, 0, -1));
	return HostResult.Value([Values.i_v(r)]);
}
def eval_DCMPG(args: Array<Value>) -> HostResult {
	var x = double.view(Values.v_d(args[0])), y = double.view(Values.v_d(args[1]));
	var r = if(x < y, -1, if(x == y, 0, 1));
	return HostResult.Value([Values.i_v(r)]);
}
def eval_CHECKCAST(t: JawaRefType, args: Array<Value>) -> HostResult {
	var v = args[0];
	var obj = Value.ExternRef.!(v).val;
	if (obj == null) return HostResult.Value([v]);
	var jt = JawaObject.!(obj).jawaType();
	return if(jt.isAssignableToH(t), HostResult.Value([v]), JawaTraps.ClassCastException);
}
def eval_ASTORE<T>(args: Array<Value>, unbox: Value -> T) -> HostResult {
	var obj = JawaArrayObjectOf<T>.!(Value.ExternRef.!(args[0]).val);
	if (obj == null) return JawaTraps.NullPointerException;
	var index = Values.v_u(args[1]);
	if (index >= obj.elems.length) return JawaTraps.ArrayIndexOutOfBoundsException;
	obj.elems[index] = unbox(args[2]);
	return VOID;
}
def eval_ALOAD<T>(args: Array<Value>, box: T -> Value) -> HostResult {
	var obj = JawaArrayObjectOf<T>.!(Value.ExternRef.!(args[0]).val);
	if (obj == null) return JawaTraps.NullPointerException;
	var index = Values.v_u(args[1]);
	if (index >= obj.elems.length) return JawaTraps.ArrayIndexOutOfBoundsException;
	return HostResult.Value([box(obj.elems[index])]);
}
def eval_NEWARRAY<T>(args: Array<Value>) -> HostResult {
	var length = Values.v_i(args[0]);
	if (length < 0) return JawaTraps.NegativeArraySizeException;
	var elems = Array<T>.new(length); // TODO: out-of-memory check
	return HostResult.Value([Value.ExternRef(JawaArrayObjectOf.new(elems))]);
}
def eval_ARRAYLENGTH(args: Array<Value>) -> HostResult {
	var obj = JawaArrayObject.!(Value.ExternRef.!(args[0]).val);
	if (obj == null) return JawaTraps.NullPointerException;
	return HostResult.Value([Values.i_v(obj.length())]);  // XXX: avoid virtual dispatch here?
}
def eval_ANEWARRAY(at: JawaArrayType, args: Array<Value>) -> HostResult {
	var length = Values.v_i(args[0]);
	if (length < 0) return JawaTraps.NegativeArraySizeException;
	var elems = Array<JawaObject>.new(length); // TODO: out-of-memory check
	return HostResult.Value([Value.ExternRef(JawaRefArrayObject.new(at, elems))]);
}
def eval_ACMPEQ(args: Array<Value>) -> HostResult {
	var a = Value.ExternRef.!(args[0]);
	var b = Value.ExternRef.!(args[1]);
	return if(a.val == b.val, TRUE, FALSE);
}
def eval_AASTORE(args: Array<Value>) -> HostResult {
	var obj = JawaRefArrayObject.!(Value.ExternRef.!(args[0]).val);
	if (obj == null) return JawaTraps.NullPointerException;
	var index = Values.v_u(args[1]);
	if (index >= obj.elems.length) return JawaTraps.ArrayIndexOutOfBoundsException;
	obj.elems[index] = JawaObject.!(Value.ExternRef.!(args[2]).val); // TODO: check for array store exception
	return VOID;
}
def eval_AALOAD(args: Array<Value>) -> HostResult {
	var obj = JawaRefArrayObject.!(Value.ExternRef.!(args[0]).val);
	if (obj == null) return JawaTraps.NullPointerException;
	var index = Values.v_u(args[1]);
	if (index >= obj.elems.length) return JawaTraps.ArrayIndexOutOfBoundsException;
	return HostResult.Value([Value.ExternRef(obj.elems[index])]);
}
def eval_MULTIANEWARRAY(at: JawaArrayType, args: Array<Value>) -> HostResult {
	var dims = Arrays.map(args, Values.v_i);
	for (d in dims) if(d < 0) return JawaTraps.NegativeArraySizeException;
	return HostResult.Value([Value.ExternRef(recMakeArray(at, dims, 0))]);
}
def recMakeArray(at: JawaArrayType, dims: Array<int>, index: int) -> JawaObject {
	var length = dims[index];
	var next = index + 1;
	if (next == dims.length) {
		if (JawaPrimType.?(at.elem)) {
			// Primitive array; dispatch to primitive type to allocate
			return JawaPrimType.!(at.elem).prim.newarray(length);
		} else {
			// Reference array; all null elements
			return JawaRefArrayObject.new(at, Array<JawaObject>.new(length));
		}
	}
	var elems = Array<JawaObject>.new(length);
	var et = JawaArrayType.!(at.elem);
	for (i < length) {
		elems[i] = recMakeArray(et, dims, next);
	}
	return JawaRefArrayObject.new(at, elems);
}
def eval_NEW(ct: JawaClassType, args: Array<Value>) -> HostResult {
	return HostResult.Value([Value.ExternRef(JawaInstanceObject.new(ct))]);
}
def eval_PUTFIELD(f: JawaField, args: Array<Value>) -> HostResult {
	var obj = JawaInstanceObject.!(Value.ExternRef.!(args[0]).val);
	if (obj == null) return JawaTraps.NullPointerException;
	obj.fields[f.index] = args[1]; // TODO: narrowing stores
	return VOID;
}
def eval_PUTSTATIC(ct: JawaClassType, f: JawaField, args: Array<Value>) -> HostResult {
	ct.staticStorage[f.index] = args[0]; // TODO: narrowing stores
	return VOID;
}

component JawaTraps {
	def ArrayIndexOutOfBoundsException = HostResult.Error("ArrayIndexOutOfBoundsException");
	def NullPointerException = HostResult.Error("NullPointerException");
	def NegativeArraySizeException = HostResult.Error("NegativeArraySizeException");
	def ClassCastException = HostResult.Error("ClassCastException");
}

class JawaHostFunction extends HostFunction {
	def name: string;
	new(name, sig: SigDecl, invoke: Array<Value> -> HostResult) super(sig, invoke) { }
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("jawa.").puts(name);
	}
}

class JawaHostTypeLens extends JawaWasmLens<JawaType, ValueType> {
	def toWasm(t: JawaType) -> ValueType {
		match (t) {
			x: JawaPrimType => return x.prim.valueType;
			_ => return ValueType.Host(t);
		}
	}
}
class JawaHostStringLens extends JawaWasmLens<JawaString, Value> {
	def toWasm(s: JawaString) -> Value {
		return Value.ExternRef(s.toObject());
	}
	def fromWasm(v: Value) -> JawaString {
		if (!Value.ExternRef.?(v)) return null;
		var obj = Value.ExternRef.!(v).val;
		if (!JawaStringObject.?(obj)) return null;
		return JawaStringObject.!(obj).rep;
	}
}
class JawaHostClassLens extends JawaWasmLens<JawaClassType, Value> {
	def toWasm(ct: JawaClassType) -> Value {
		return Value.ExternRef(ct.toObject());
	}
	def fromWasm(v: Value) -> JawaClassType {
		if (!Value.ExternRef.?(v)) return null;
		var obj = Value.ExternRef.!(v).val;
		if (!JawaClassObject.?(obj)) return null;
		return JawaClassObject.!(obj).rep;
	}
}
class JawaHostInterfaceLens extends JawaWasmLens<JawaInterfaceType, Value> {
	def toWasm(it: JawaInterfaceType) -> Value {
		return Value.ExternRef(it.toObject());
	}
	def fromWasm(v: Value) -> JawaInterfaceType {
		if (!Value.ExternRef.?(v)) return null;
		var obj = Value.ExternRef.!(v).val;
		if (!JawaInterfaceObject.?(obj)) return null;
		return JawaInterfaceObject.!(obj).rep;
	}
}
