// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Processes a module's imports and supplies Jawa types, functions, and globals.
def OUT = Trace.OUT;
class JawaImportProcessor(env: JawaEnvironment, runtime: JawaRuntime, error: ErrorGen) extends ImportProcessor("jawa") {
	def decoder = Decoder.new(null, error);
	def classDefs = Vector<JawaClassType>.new();
	def interfaceDefs = Vector<JawaInterfaceType>.new();
	var import_args: Array<Exportable>;
	var import_arg_index: int;
	var import_pos = -1;

	def preprocess(module: Module, imports: Array<Exportable>) {
		import_pos = -1;
		var jawaTypes = Array<JawaType>.new(module.abstypes.length);
		for (i < module.imports.length) {
			var decl = module.imports[i];
			if (!Strings.equal("jawa", decl.imp.module_name)) continue;
			match (decl) {
				x: AbsTypeDecl => {
					var name = decl.imp.field_name;
					setImportArgDecls(name, decl.imp.args, jawaTypes);
					var t = preprocessAbsType(name);
					jawaTypes[x.abstype_index] = t;
				}
				x: ImportCommandDecl => {
					var name = decl.imp.field_name;
					setImportArgDecls(name, decl.imp.args, jawaTypes);
					preprocessCommand(name);
				}
			}
		}
		import_pos = -1;
	}
	def extractMainExport(instance: Instance) -> Function {
		var module = instance.module;
		var exports = module.exports;
		var found: Function;
		for (j < exports.length) {
			var mex = module.exports[j];
			var iex = instance.exports[j];
			if (Strings.equal("main", mex.0) && Function.?(iex)) return Function.!(iex);
		}
		return null;
	}
	def preprocessCommand(name: string) {
		if (name.length < 1) return err1("empty command", ());
		decoder.reset(name, 1, name.length);
		var opcode = name[0];
		match (opcode) {
			JawaCommandOpcode.DEF_CLASS.code => {
				var t = read_class();
				if (t == null) return;
				if (t.defined()) return err1("class %q already defined", t.name.render);

				var count: int;
				// read instance fields
				count = read_ji4();
				var start = 0, instanceFields: Array<JawaField>;
				if (t.parent != null) {
					var pf = t.parent.instanceFields;
					start = pf.length;
					instanceFields = Arrays.grow(pf, pf.length + count);
				} else {
					instanceFields = Array<JawaField>.new(count);
				}
				for (i < count) {
					var j = i + start;
					instanceFields[j] = read_field_decl(j);
					if (error.error()) return;
				}
				// read instance methods
				count = read_ji4();
				var instanceMethods = Array<JawaMethod>.new(count);
				for (i < count) {
					instanceMethods[i] = read_method_def(i, t);
					if (error.error()) return;
				}
				// read static fields
				count = read_ji4();
				var staticFields = Array<JawaField>.new(count);
				for (i < count) {
					staticFields[i] = read_field_decl(i);
					if (error.error()) return;
				}
				// read static methods
				count = read_ji4();
				var staticMethods = Array<JawaMethod>.new(count);
				for (i < count) {
					staticMethods[i] = read_method_def(i, null);
					if (error.error()) return;
				}
				if (error.error()) return;

				// Only build the class if there are no errors
				t.instanceFields = instanceFields;
				t.instanceMethods = instanceMethods;
				t.staticFields = staticFields;
				t.staticMethods = staticMethods;
				t.staticStorage = Arrays.map(staticFields, JawaField.defaultValue);
				t.finish(error);
			}
			JawaCommandOpcode.DEF_INTERFACE.code => {
				var t = read_interface();
				if (t == null) return;
				if (t.defined()) return err1("interface %q already defined", t.name.render);
				var count: int;
				// read instance methods
				count = read_ji4();
				var instanceMethods = t.instanceMethods = Array.new(count);
				for (i < count) {
					instanceMethods[i] = read_method_decl(i);
					if (error.error()) return;
				}
			}
		}
	}
	def processCommand(name: string, args: Array<Exportable>) -> Exportable {
		setImportArgs(name, args);
		var opcode = name[0];
		match (opcode) {
			JawaCommandOpcode.DEF_CLASS.code => {
				var t = read_class();
				if (t == null) return null;
				for (m in t.instanceMethods) check_method_def(t, m);
				for (m in t.staticMethods) check_method_def(null, m);
			}
		}
		return null;
	}
	def processFunction(name: string, args: Array<Exportable>, decl: FuncDecl) -> Exportable {
		setImportArgs(name, args);
		if (name.length < 1) return err("expected opcode for function import");
		decoder.reset(name, 1, name.length);
		var opcode = name[0];
		match (opcode) {
			JawaFuncOpcode.AALOAD.code => {
				var at = read_ref_array();
				if (at == null) return null;
				return runtime.AALOAD(at);
			}
			JawaFuncOpcode.AASTORE.code => {
				var at = read_ref_array();
				if (at == null) return null;
				return runtime.AASTORE(at);
			}
			JawaFuncOpcode.ACMPEQ.code => {
				return runtime.ACMPEQ();
			}
			JawaFuncOpcode.ANEWARRAY.code => {
				var at = read_ref_array();
				if (at == null) return null;
				return runtime.ANEWARRAY(at);
			}
			JawaFuncOpcode.ARRAYLENGTH.code => {
				var at = read_array();
				if (at == null) return null;
				return runtime.ARRAYLENGTH(at);
			}
			JawaFuncOpcode.ATHROW.code => return TODO();
			JawaFuncOpcode.BALOAD.code => return runtime.ALOAD<i8>(JawaTypes.BYTE_ARRAY_PAIR);
			JawaFuncOpcode.BASTORE.code => return runtime.ASTORE<i8>(JawaTypes.BYTE_ARRAY_PAIR);
			JawaFuncOpcode.CALOAD.code => return runtime.ALOAD<u16>(JawaTypes.CHAR_ARRAY_PAIR);
			JawaFuncOpcode.CASTORE.code => return runtime.ASTORE<u16>(JawaTypes.CHAR_ARRAY_PAIR);
			JawaFuncOpcode.CHECKCAST.code => {
				var t = read_ref_type();
				if (t == null) return null;
				return runtime.CHECKCAST(t);
			}
			JawaFuncOpcode.DALOAD.code => return runtime.ALOAD<double>(JawaTypes.DOUBLE_ARRAY_PAIR);
			JawaFuncOpcode.DASTORE.code => return runtime.ASTORE<double>(JawaTypes.DOUBLE_ARRAY_PAIR);
			JawaFuncOpcode.DCMPG.code => return runtime.DCMPG();
			JawaFuncOpcode.DCMPL.code => return runtime.DCMPL();
			JawaFuncOpcode.DREM.code => return runtime.DREM();
			JawaFuncOpcode.FALOAD.code => return runtime.ALOAD<float>(JawaTypes.FLOAT_ARRAY_PAIR);
			JawaFuncOpcode.FASTORE.code => return runtime.ASTORE<float>(JawaTypes.FLOAT_ARRAY_PAIR);
			JawaFuncOpcode.FCMPG.code => return runtime.FCMPG();
			JawaFuncOpcode.FCMPL.code => return runtime.FCMPL();
			JawaFuncOpcode.FREM.code => return runtime.FREM();
			JawaFuncOpcode.GETFIELD.code => {
				var t = read_class_field_selector(JawaClassType.instanceFields);
				var ct = t.0, f = t.1;
				if (f != null) return runtime.GETFIELD(ct, f);
			}
			JawaFuncOpcode.GETSTATIC.code => {
				var t = read_class_field_selector(JawaClassType.staticFields);
				var ct = t.0, f = t.1;
				if (f != null) return runtime.GETSTATIC(ct, f);
			}
			JawaFuncOpcode.IALOAD.code => return runtime.ALOAD<int>(JawaTypes.INT_ARRAY_PAIR);
			JawaFuncOpcode.IASTORE.code => return runtime.ASTORE<int>(JawaTypes.INT_ARRAY_PAIR);
			JawaFuncOpcode.INSTANCEOF.code => {
				var t = read_ref_type();
				if (t == null) return null;
				return runtime.INSTANCEOF(t);
			}
			JawaFuncOpcode.INVOKEDYNAMIC.code => {
				return TODO();
			}
			JawaFuncOpcode.INVOKEINTERFACE.code => {
				var t = read_interface_method_selector();
				var ct = t.0, m = t.1;
				if (t.1 == null) return null;
				return runtime.INVOKEINTERFACE(t);
			}
			JawaFuncOpcode.INVOKESPECIAL.code => {
				var t = read_class_method_selector(JawaClassType.instanceMethods);
				var ct = t.0, m = t.1;
				if (t.1 == null) return null;
				return runtime.INVOKESPECIAL(t);
			}
			JawaFuncOpcode.INVOKESTATIC.code => {
				var t = read_class_method_selector(JawaClassType.staticMethods);
				var ct = t.0, m = t.1;
				if (t.1 == null) return null;
				return runtime.INVOKESTATIC(t);
			}
			JawaFuncOpcode.INVOKEVIRTUAL.code => {
				var t = read_class_method_selector(JawaClassType.instanceMethods);
				var ct = t.0, m = t.1;
				if (t.1 == null) return null;
				return runtime.INVOKEVIRTUAL(t);
			}
			JawaFuncOpcode.LALOAD.code => return runtime.ALOAD<long>(JawaTypes.LONG_ARRAY_PAIR);
			JawaFuncOpcode.LASTORE.code => return runtime.ASTORE<long>(JawaTypes.LONG_ARRAY_PAIR);
			JawaFuncOpcode.MONITORENTER.code => return runtime.MONITORENTER();
			JawaFuncOpcode.MONITOREXIT.code => return runtime.MONITOREXIT();
			JawaFuncOpcode.MULTIANEWARRAY.code => {
				var dims = read_ji4();
				if (dims == 0) return err("0-dimensional multianewarray");
				var rtype = read_array();
				if (rtype == null) return null;
				var rank = rtype.rank();
				if (rank < dims) return err(Strings.format2("expected maximum %d dimensions, got %d", rank, int.!(dims)));
				return runtime.MULTIANEWARRAY(dims, rtype);
			}
			JawaFuncOpcode.NEW.code => {
				var t = read_defined_class();
				if (t == null) return null;
				return runtime.NEW(t);
			}
			JawaFuncOpcode.NEWARRAY.code => {
				var at = read_array();
				if (at == null) return null;
				return runtime.NEWARRAY(at);
			}
			JawaFuncOpcode.ISNULL.code => {
				return runtime.ISNULL();
			}
			JawaFuncOpcode.PUTFIELD.code => {
				var t = read_class_field_selector(JawaClassType.instanceFields);
				var ct = t.0, f = t.1;
				if (f != null) return runtime.PUTFIELD(ct, f);
			}
			JawaFuncOpcode.PUTSTATIC.code => {
				var t = read_class_field_selector(JawaClassType.staticFields);
				var ct = t.0, f = t.1;
				if (f != null) return runtime.PUTSTATIC(ct, f);
			}
			JawaFuncOpcode.SALOAD.code => return runtime.ALOAD<short>(JawaTypes.SHORT_ARRAY_PAIR);
			JawaFuncOpcode.SASTORE.code => return runtime.ASTORE<short>(JawaTypes.SHORT_ARRAY_PAIR);
			JawaFuncOpcode.SYSCALL.code => {
				var str = read_name();
				if (str == null) return null;
				var f = JawaSysFuncs.lookup(str);
				if (f == null) return err1("unknown syscall %q", str.render);
				return f;
			}
			JawaFuncOpcode.ZALOAD.code => return runtime.ALOAD<bool>(JawaTypes.BOOL_ARRAY_PAIR);
			JawaFuncOpcode.ZASTORE.code => return runtime.ASTORE<bool>(JawaTypes.BOOL_ARRAY_PAIR);
			_ => return err1("invalid function opcode 0x%x", opcode);
		}
		return null;
	}
	def processGlobal(name: string, args: Array<Exportable>, decl: GlobalDecl) -> Exportable {
		setImportArgs(name, args);
		if (name.length < 1) return err("import of empty global");
		decoder.reset(name, 1, name.length);
		var opcode = name[0];
		match (opcode) {
			JawaGlobalOpcode.CLASS_CONST.code => {
				var ct = read_class();
				if (ct == null) return null;
				return runtime.classToGlobal(ct);
			}
			JawaGlobalOpcode.INTERFACE_CONST.code => {
				var it = read_interface();
				if (it == null) return null;
				return runtime.interfaceToGlobal(it);
			}
			JawaGlobalOpcode.STRING_CONST.code => {
				var str = read_string();
				if (str == null) return null;
				return runtime.intern(str);
			}
			_ => return err1("invalid global opcode 0x%x", opcode);
		}
	}
	def preprocessAbsType(name: string) -> JawaRefType {
		if (name.length < 1) return err1("import of empty type", ());
		decoder.reset(name, 1, name.length);
		return processAbsType0(name[0]);
	}
	def processAbsType(name: string, args: Array<Exportable>, decl: AbsTypeDecl) -> Exportable {
		setImportArgs(name, args);
		if (name.length < 1) return err("import of empty type");
		decoder.reset(name, 1, name.length);
		var jt = processAbsType0(name[0]);
		return if(jt != null, runtime.toExportedType(jt));
	}
	def processAbsType0(opcode: byte) -> JawaRefType {
		match (opcode) {
			JawaTypeOpcode.BYTE_ARRAY.code => return JawaTypes.BYTE_ARRAY;
			JawaTypeOpcode.BOOL_ARRAY.code => return JawaTypes.BOOL_ARRAY;
			JawaTypeOpcode.CHAR_ARRAY.code => return JawaTypes.CHAR_ARRAY;
			JawaTypeOpcode.SHORT_ARRAY.code => return JawaTypes.SHORT_ARRAY;
			JawaTypeOpcode.INT_ARRAY.code => return JawaTypes.INT_ARRAY;
			JawaTypeOpcode.LONG_ARRAY.code => return JawaTypes.LONG_ARRAY;
			JawaTypeOpcode.FLOAT_ARRAY.code => return JawaTypes.FLOAT_ARRAY;
			JawaTypeOpcode.DOUBLE_ARRAY.code => return JawaTypes.DOUBLE_ARRAY;
			JawaTypeOpcode.EXT_CLASS.code => {
				var str = read_name();
				if (str == null) return null;
				var c = env.lookup(str);
				if (c == null) return err1("class not found: %q", str.render);
				if (!JawaClassType.?(c)) return err1("not a class: %q", str.render);
				return c;
			}
			JawaTypeOpcode.EXT_INTERFACE.code => {
				var str = read_name();
				if (str == null) return null;
				var i = env.lookup(str);
				if (i == null) return err1("interface not found: %q", str.render);
				if (!JawaInterfaceType.?(i)) return err1("not an interface: %q", str.render);
				return i;
			}
			JawaTypeOpcode.DECL_CLASS.code => {
				var str = read_name();
				if (str == null) return null;
				var attrs = read_class_attrs();
				var sup = read_class();
				if (sup == null) return null;
				var count = read_ji4();
				var intfs = Array<JawaInterfaceType>.new(count);
				for (i < count) {
					var intf = read_interface();
					if (intf == null) return null;
					intfs[i] = intf;
				}
				var cl = env.declareClass(str, attrs, sup, intfs);
				classDefs.put(cl);
				return cl;
			}
			JawaTypeOpcode.DECL_INTERFACE.code => {
				var str = read_name();
				if (str == null) return null;
				var count = read_ji4();
				var intfs = Array<JawaInterfaceType>.new(count);
				for (i < count) {
					var intf = read_interface();
					if (intf == null) return null;
					intfs[i] = intf;
				}
				var cl = env.declareInterface(str, intfs);
				interfaceDefs.put(cl);
				return cl;
			}
			JawaTypeOpcode.REF_ARRAY.code => {
				var elem = read_ref_type();
				if (elem == null) return null;
				return elem.arrayOf();
			}
			_ => return err1("invalid type opcode 0x%x", opcode);
		}
	}

	def read_class_field_selector(fields: JawaClassType -> Array<JawaField>) -> (JawaClassType, JawaField) {
		var t = read_defined_class();
		if (t == null) return (null, null);
		var name = read_name();
		if (name == null) return (null, null);
		for (x = t; x != null; x = x.parent) {
			var af = fields(x);
			for (j = af.length - 1; j >= 0; j--) {
				var f = af[j];
				if (name.equals(f.name)) return (t, f);
			}
		}
		err(Strings.format2("class field %q.%q not found", t.render, name.render));
		return (null, null);
	}
	def read_class_method_selector(methods: JawaClassType -> Array<JawaMethod>) -> (JawaClassType, JawaMethod) {
		var t = read_defined_class();
		if (t == null) return (null, null);
		var name = read_name();
		if (name == null) return (null, null);
		var sig = read_sig();
		if (sig == null) return (null, null);
		for (x = t; x != null; x = x.parent) {
			var am = methods(x);
			for (j = am.length - 1; j >= 0; j--) {
				var m = am[j];
				if (m.matchNameAndSig(name, sig)) return (t, m);
			}
		}
		err(Strings.format2("class method %q.%q not found", t.render, name.render));
		return (null, null);
	}
	def read_interface_method_selector() -> (JawaInterfaceType, JawaMethod) {
		var t = read_defined_interface();
		if (t == null) return (null, null);
		var name = read_name();
		if (name == null) return (null, null);
		var sig = read_sig();
		if (sig == null) return (null, null);
		for (m in t.instanceMethods) {
			if (m.matchNameAndSig(name, sig)) return (t, m);
		}
		err(Strings.format2("interface method %q.%q not found", t.render, name.render));
		return (null, null);
	}

	def read_string() -> JawaString {
		// Jawa strings are a length (4-byte Jawa int), followed by {length} UTF-8 bytes
		// that encode a UTF-16 string.
		var length = read_ji4();
		if (!decoder.checkN(length)) return null;
		var chars = read_utf8_to_utf16(length);
		return if(chars != null, JawaString.new(chars));
	}
	def read_name() -> JawaString {
		// Jawa names are a length (2-byte Jawa int), followed by {length} UTF-8 bytes
		// that encode a UTF-16 string.
		var length = read_ji2();
		if (!decoder.checkN(length)) return null;
		var chars = read_utf8_to_utf16(length);
		return if(chars != null, JawaString.new(chars));
	}
	def read_ji4() -> u28 {
		// Jawa ints are 4 little-endian 7-bit bytes for 28 bits total.
		// The upper bit of each byte must be 0 so that the int passes through UTF-8.
		return read_jiN(4);
	}
	def read_ji2() -> u28 {
		return read_jiN(2);
	}
	def read_jiN(max: int) -> u28 {
		var result: u32, shift = 0;
		for (i < max) {
			var b = decoder.read1();
			if ((b & 0x80) != 0) {
				error.at(decoder).set("Jawa int byte should not have upper bit set");
				return 0;
			}
			result = result | (u32.!(b) << u5.!(shift));
			shift += 7;
			if (decoder.pos >= decoder.limit) break; // truncated int of at least 1 byte
		}
		return u28.view(result);
	}
	def read_utf8_to_utf16(length: int) -> Array<u16> {
		if (!decoder.checkN(length)) return null;
		var chars = Utf8.decodeUtf16(decoder.data, decoder.pos, decoder.pos + length);
		if (chars.1 >= 0) {
			err("invalid UTF-8 string");
			return null;
		}
		decoder.skipN(length);
		return chars.0;
	}
	def read_interface() -> JawaInterfaceType {
		return read_type<JawaInterfaceType>("interface");
	}
	def read_class() -> JawaClassType {
		return read_type<JawaClassType>("class");
	}
	def read_defined_class() -> JawaClassType {
		var t = read_class();
		if (t == null) return null;
		if (t.defined()) return t;
		defined_err("class", classDefs, t, t.render);
		return null;
	}
	def read_defined_interface() -> JawaInterfaceType {
		var t = read_interface();
		if (t == null) return null;
		if (t.defined()) return t;
		defined_err("interface", interfaceDefs, t, t.render);
		return null;
	}
	def read_array() -> JawaArrayType {
		return read_type<JawaArrayType>("array");
	}
	def read_ref_array() -> JawaArrayType {
		var at = read_type<JawaArrayType>("refarray");
		if (at == null) return null;
		if (JawaRefType.?(at.elem)) return at;
		type_err("refarray", at, -1);
		return null;
	}
	def read_ref_type() -> JawaRefType {
		return read_type<JawaRefType>("ref");
	}
	def read_type<T>(kind: string) -> T {
		var d: T;
		if (import_arg_index >= import_args.length) {
			type_err(kind, null, import_arg_index);
			return d;
		}
		var t = import_args[import_arg_index++];
		match (t) {
			x: T => return x;
			x: ExportedValueType => if (T.?(x.src)) return T.!(x.src);
		}
		type_err(kind, t, import_arg_index-1);
		return d;
	}
	def read_return_type() -> JawaType {
		return read_type_ref("return");
	}
	def read_nonvoid_type() -> JawaType {
		var t = read_type_ref("field");
		if (t == null) return null;
		if (t.kind != JawaKind.VOID) return t;
		return err1("expected non-void type, got %q", t.render);
	}
	def read_type_ref(kind: string) -> JawaType {
		var b = decoder.read1();
		match (b) {
			'V' => return JawaTypes.VOID;
			'B' => return JawaTypes.BYTE;
			'Z' => return JawaTypes.BOOL;
			'C' => return JawaTypes.CHAR;
			'S' => return JawaTypes.SHORT;
			'I' => return JawaTypes.INT;
			'J' => return JawaTypes.LONG;
			'F' => return JawaTypes.FLOAT;
			'D' => return JawaTypes.DOUBLE;
			'L' => return read_type<JawaType>(kind);
			_ => err("invalid type character");
		}
		return null;
	}
	def read_field_decl(index: int) -> JawaField {
		if (Trace.jawa) OUT.put1("  field %d: ", index).outln();
		var name = read_name();
		if (name == null) return null;
		var attrs = read_field_attrs();
		var typ = read_nonvoid_type();
		if (typ == null) return null;
		var decl = JawaField.new(name, attrs, index, typ);
		if (Trace.jawa) OUT.put1("    => %q", decl.render).outln();
		return decl;
	}
	def read_method_def(index: int, recv: JawaRefType) -> JawaMethod {
		var decl = read_method_decl(index);
		if (import_arg_index >= import_args.length) {
			err("expected function for method definition");
			return null;
		}
		decl.impl_index = import_arg_index++;
		return decl;
	}
	def check_method_def(recv: JawaType, decl: JawaMethod) {
		var t = import_args[decl.impl_index];
		if (!Function.?(t)) {
			err("expected function for method definition");
			return;
		}
		var meth = Function.!(t);
		var sig = decl.sig.sig(recv, runtime.toWasmType);
		if (!meth.sig.isAssignableSig(sig)) {
			err(Strings.format2("expected function of type %q, got %q", sig.render, meth.sig.render));
		}
		decl.impl = meth;
	}
	def read_method_decl(index: int) -> JawaMethod {
		if (Trace.jawa) OUT.put1("  method %d: ", index).outln();
		var name = read_name();
		if (name == null) return null;
		var attrs = read_method_attrs();
		var sig = read_sig();
		if (sig == null) return null;
		var decl = JawaMethod.new(name, attrs, sig, null);
		if (Trace.jawa) OUT.put1("    => %q", decl.render).outln();
		return decl;
	}
	def read_sig() -> JawaMethodSig {
		var count: int = read_ji2();
		if (count > MAX_JAWA_PARAM_COUNT) {
			err("exceeded maximum parameter count");
			return null;
		}
		var params = Array<JawaType>.new(count);
		for (i < count) params[i] = read_nonvoid_type();

		var ret = read_return_type();
		if (ret == null) return null;
		return JawaMethodSig.new(params, ret);
	}
	def read_class_attrs() -> JawaClassAttr.set {
		var attrs: JawaClassAttr.set;
		var ac = read_ji2();
		for (a in JawaClassAttr) {
			if (ac == 0) break;
			if ((a.code & ac) == a.code) {
				attrs |= a;
				ac &= ~(a.code);
			}
		}
		return attrs;
	}
	def read_method_attrs() -> JawaMethodAttr.set {
		var attrs: JawaMethodAttr.set;
		var ac = read_ji2();
		for (a in JawaMethodAttr) {
			if (ac == 0) break;
			if ((a.code & ac) == a.code) {
				attrs |= a;
				ac &= ~(a.code);
			}
		}
		return attrs;
	}
	def read_field_attrs() -> JawaFieldAttr.set {
		var attrs: JawaFieldAttr.set;
		var ac = read_ji2();
		for (a in JawaFieldAttr) {
			if (ac == 0) break;
			if ((a.code & ac) == a.code) {
				attrs |= a;
				ac &= ~(a.code);
			}
		}
		return attrs;
	}

	// Tracing and error handling helpers
	def setImportArgDecls(name: string, args: Array<Decl>, reftypes: Array<JawaType>) {
		this.import_args = Array.new(args.length);
		this.import_arg_index = 0;
		this.import_pos++;
		for (i < args.length) {
			match (args[i]) {
				x: AbsTypeDecl => {
					var t: JawaType;
					if (x.abstype_index <= reftypes.length)	t = reftypes[x.abstype_index];
					import_args[i] = ExportedValueType.new(t, ValueType.Abstract(x));
				}
			}
		}
		if (Trace.jawa) traceImport(name, true);
	}
	def setImportArgs(name: string, args: Array<Exportable>) {
		this.import_args = args;
		this.import_arg_index = 0;
		this.import_pos++;
		if (Trace.jawa) traceImport(name, false);
	}
	def traceImport(name: string, pre: bool) {
		OUT.put2("jawa %simport #%d:", if(pre, "pre-", ""), import_pos);
		if (name.length > 0) {
			var b = name[0], opname = JawaOpcodes.names[b];
			if (opname == null) opname = "invalid";
			OUT.put2(" %x (%s)", b, opname);
		}
		for (i = 1; i < name.length; i++) OUT.put1(" %x", name[i]);
		if (import_args.length > 0) {
			OUT.puts(" <");
			for (i < import_args.length) {
				if (i > 0) OUT.sp();
				var a = import_args[i];
				if (a != null) a.render(OUT);
				else OUT.puts("null");
			}
			OUT.puts(">");
		}
		OUT.outln();
	}
	def traceByte(thing: string) {
		if (Trace.jawa) {
			OUT.put3("  @+%d %s = %x", decoder.pos, thing, u8.view(decoder.peek1()));
			OUT.outln();
		}
	}
	def TODO() -> Exportable {
		return err("unimplemented");
	}
	def err(s: string) -> Exportable {
		error.atimport(import_pos).set(s);
		return null;
	}
	def err1<T, R>(s: string, p: T) -> R {
		error.atimport(import_pos).set(Strings.format1(s, p));
		var d: R;
		return d;
	}
	def err2<T, U>(s: string, p: T, q: U) -> Exportable {
		error.atimport(import_pos).set(Strings.format2(s, p, q));
		return null;
	}
	def defined_err<T>(decl: string, vec: Vector<T>, t: T, render: StringBuilder -> StringBuilder) {
		for (i < vec.length) {
			if (t == vec[i]) {
				err2("%s %q declared but not defined", decl, render);
				return;
			}
		}
		err2("%s %q not defined", decl, render);
	}
	def type_err(kind: string, got: Exportable, type_index: int) {
		var msg_render = if(got == null, Strings.puts("<null>"), got.render);
		if (type_index >= 0) {
			err(Strings.format3("expected jawa %s type, got %q @ module.types[%d]", kind, msg_render, type_index));
		} else {
			err(Strings.format2("expected jawa %s type, got %q", kind, msg_render));
		}
	}
}

def MAX_JAWA_PARAM_COUNT = 255;
