// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Processes a module's imports and supplies Jawa types, functions, and globals.
class JawaImportProcessor(error: ErrorGen, module: Module, result: Array<Exportable>) {
	def process() {
		var imports = module.imports;
		for (i < imports.length) {
			var imp = imports[i];
			error.abs(i);
			if (!Strings.equals("jawa", imp.modname)) continue; // not Jawa
			if (result[i] != null) continue; // import already bound
			var exp: Exportable;
			match (imp.details) {
				Function(decl) => exp = processFunction(imp.name, decl);
				Global(decl) =>  exp = processGlobal(imp.name, decl);
				Type(constraints) =>  exp = processType(imp.name, constraints);
				_ => error.set(Strings.format1("invalid import of kind %s", imp.details.name));
			}
			if (exp == null) return;
			result[i] = exp;
		}
	}
	def processFunction(name: string, decl: FunctionDecl) -> Exportable {
		if (name.length < 1) error.set("import of empty function");
		var opcode = name[0];
		match (opcode) {
			JawaFunctions.AALOAD.code => ; // TODO
			JawaFunctions.AASTORE.code => ;
			JawaFunctions.ANEWARRAY.code => ;
			JawaFunctions.ARRAYLENGTH.code => ;
			JawaFunctions.ATHROW.code => ;
			JawaFunctions.BALOAD.code => ;
			JawaFunctions.CALOAD.code => ;
			JawaFunctions.IALOAD.code => ;
			JawaFunctions.FALOAD.code => ;
			JawaFunctions.DALOAD.code => ;
			JawaFunctions.CHECKCAST.code => ;
			JawaFunctions.D2I.code => ;
			JawaFunctions.D2L.code => ;
			JawaFunctions.DCMPG.code => ;
			JawaFunctions.DCMPL.code => ;
			JawaFunctions.DREM.code => ;
			JawaFunctions.F2I.code => ;
			JawaFunctions.F2L.code => ;
			JawaFunctions.FCMPG.code => ;
			JawaFunctions.FCMPL.code => ;
			JawaFunctions.FREM.code => ;
			JawaFunctions.GETFIELD.code => ;
			JawaFunctions.GETSTATIC.code => ;
			JawaFunctions.ACMPEQ.code => ;
			JawaFunctions.ACMPNE.code => ;
			JawaFunctions.NONNULL.code => ;
			JawaFunctions.NULL.code => ;
			JawaFunctions.INSTANCEOF.code => ;
			JawaFunctions.INVOKEDYNAMIC.code => ;
			JawaFunctions.INVOKEINTERFACE.code => ;
			JawaFunctions.INVOKESPECIAL.code => ;
			JawaFunctions.INVOKESTATIC.code => ;
			JawaFunctions.INVOKEVIRTUAL.code => ;
			JawaFunctions.MONITORENTER.code => ;
			JawaFunctions.MONITOREXIT.code => ;
			JawaFunctions.MULTIANEWARRAY.code => ;
			JawaFunctions.NEW.code => ;
			JawaFunctions.NEWARRAY.code => ;
			JawaFunctions.PUTFIELD.code => ;
			JawaFunctions.PUTSTATIC.code => ;
			_ => error.set(Strings.format1("invalid function opcode 0x%x", opcode));
		}
		return null;
	}
	def processGlobal(name: string, decl: GlobalDecl) -> Exportable {
		if (name.length < 1) error.set("import of empty global");
		var opcode = name[0];
		match (opcode) {
			JawaGlobals.STRING_CONST.code => ; // TODO
			_ => error.set(Strings.format1("invalid global opcode 0x%x", opcode));
		}
		return null;
	}
	def processType(name: string, constraints: Array<TypeConstraint>) -> Exportable {
		if (name.length < 1) error.set("import of empty type");
		var opcode = name[0];
		match (opcode) {
			JawaTypes.BYTE_ARRAY.code => ; // TODO
			JawaTypes.BOOL_ARRAY.code => ;
			JawaTypes.CHAR_ARRAY.code => ;
			JawaTypes.SHORT_ARRAY.code => ;
			JawaTypes.INT_ARRAY.code => ;
			JawaTypes.LONG_ARRAY.code => ;
			JawaTypes.FLOAT_ARRAY.code => ;
			JawaTypes.DOUBLE_ARRAY.code => ;
			JawaTypes.EXT_CLASS.code => ;
			JawaTypes.EXT_INTERFACE.code => ;
			JawaTypes.FW_CLASS_DECL.code => ;
			JawaTypes.FW_INTERFACE_DECL.code => ;
			JawaTypes.REF_ARRAY.code => ;
			JawaTypes.DEF_CLASS.code => ;
			JawaTypes.DEF_INTERFACE.code => ;
			_ => error.set(Strings.format1("invalid type opcode 0x%x", opcode));
		}
		return null;
	}
}

// Codes and immediates for functions that can be imported into a Jawa module.
enum JawaFunctions(code: byte, imm: JawaImmKind) {
	AALOAD		(0x00, JawaImmKind.REF_TYPE),
	AASTORE		(0x01, JawaImmKind.REF_TYPE),
	ANEWARRAY	(0x02, JawaImmKind.REF_TYPE),
	ARRAYLENGTH	(0x03, JawaImmKind.ELEM_TYPE),
	ATHROW		(0x04, JawaImmKind.NONE),
	BALOAD		(0x05, JawaImmKind.NONE),
	CALOAD		(0x06, JawaImmKind.NONE),
	IALOAD		(0x07, JawaImmKind.NONE),
	FALOAD		(0x08, JawaImmKind.NONE),
	DALOAD		(0x09, JawaImmKind.NONE),
	CHECKCAST	(0x0A, JawaImmKind.REF_TYPE_REF_TYPE),
	D2I		(0x0B, JawaImmKind.NONE),
	D2L		(0x0C, JawaImmKind.NONE),
	DCMPG		(0x0D, JawaImmKind.NONE),
	DCMPL		(0x0E, JawaImmKind.NONE),
	DREM		(0x0F, JawaImmKind.NONE),
	F2I		(0x10, JawaImmKind.NONE),
	F2L		(0x11, JawaImmKind.NONE),
	FCMPG		(0x12, JawaImmKind.NONE),
	FCMPL		(0x13, JawaImmKind.NONE),
	FREM		(0x14, JawaImmKind.NONE),
	GETFIELD	(0x15, JawaImmKind.INSTANCE_FIELD_SELECTOR),
	GETSTATIC	(0x16, JawaImmKind.STATIC_FIELD_SELECTOR),
	ACMPEQ		(0x17, JawaImmKind.REF_TYPE),
	ACMPNE		(0x18, JawaImmKind.REF_TYPE),
	NONNULL		(0x19, JawaImmKind.REF_TYPE),
	NULL		(0x1A, JawaImmKind.REF_TYPE),
	INSTANCEOF	(0x1B, JawaImmKind.REF_TYPE_REF_TYPE),
	INVOKEDYNAMIC	(0x1C, JawaImmKind.INSTANCE_METHOD_SELECTOR),
	INVOKEINTERFACE	(0x1D, JawaImmKind.INTERFACE_METHOD_SELECTOR),
	INVOKESPECIAL	(0x1E, JawaImmKind.INSTANCE_METHOD_SELECTOR),
	INVOKESTATIC	(0x1F, JawaImmKind.STATIC_METHOD_SELECTOR),
	INVOKEVIRTUAL	(0x20, JawaImmKind.INSTANCE_METHOD_SELECTOR),
	MONITORENTER	(0x21, JawaImmKind.REF_TYPE),
	MONITOREXIT	(0x22, JawaImmKind.REF_TYPE),
	MULTIANEWARRAY	(0x23, JawaImmKind.INT_REF_TYPE),
	NEW		(0x24, JawaImmKind.CLASS_TYPE),
	NEWARRAY	(0x25, JawaImmKind.ELEM_TYPE),
	PUTFIELD	(0x26, JawaImmKind.INSTANCE_FIELD_SELECTOR),
	PUTSTATIC	(0x27, JawaImmKind.STATIC_FIELD_SELECTOR),
}

// Codes and immediates for types that can be imported into a Jawa module.
enum JawaTypes(code: byte, imm: JawaImmKind) {
	BYTE_ARRAY		(0x00, JawaImmKind.NONE),
	BOOL_ARRAY		(0x01, JawaImmKind.NONE),
	CHAR_ARRAY		(0x02, JawaImmKind.NONE),
	SHORT_ARRAY		(0x03, JawaImmKind.NONE),
	INT_ARRAY		(0x04, JawaImmKind.NONE),
	LONG_ARRAY		(0x05, JawaImmKind.NONE),
	FLOAT_ARRAY		(0x06, JawaImmKind.NONE),
	DOUBLE_ARRAY		(0x07, JawaImmKind.NONE),
	EXT_CLASS		(0x08, JawaImmKind.STRING),
	EXT_INTERFACE		(0x09, JawaImmKind.STRING),
	FW_CLASS_DECL		(0x0A, JawaImmKind.STRING),
	FW_INTERFACE_DECL	(0x0B, JawaImmKind.STRING),
	REF_ARRAY		(0x0C, JawaImmKind.REF_TYPE),
	DEF_CLASS		(0x0D, JawaImmKind.CLASS_BODY),
	DEF_INTERFACE		(0x0E, JawaImmKind.INTERFACE_BODY),
}

// Codes and immediates for globals that can be imported into a Jawa module.
enum JawaGlobals(code: byte, imm: JawaImmKind) {
	STRING_CONST	(0x00, JawaImmKind.STRING)
}

// The immediate kinds for imports.
enum JawaImmKind {
	NONE,
	STRING,
	CLASS_TYPE,
	REF_TYPE,
	REF_TYPE_REF_TYPE,
	ELEM_TYPE,
	INSTANCE_FIELD_SELECTOR,
	STATIC_FIELD_SELECTOR,
	INTERFACE_METHOD_SELECTOR,
	INSTANCE_METHOD_SELECTOR,
	STATIC_METHOD_SELECTOR,
	INT,
	INT_REF_TYPE,
	CLASS_BODY,
	INTERFACE_BODY
}
