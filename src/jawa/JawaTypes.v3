// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// All of the possible Jawa types.
type JawaType {
	case None;
	case BYTE;
	case BOOL;
	case CHAR;
	case SHORT;
	case INT;
	case LONG;
	case FLOAT;
	case DOUBLE;
	case Class(decl: JawaClass);
	case Interface(decl: JawaInterface);
	case Array(elem: JawaType);

	def isRef() -> bool {
		match (this) {
			Class, Interface, Array => return true;
			_ => return false;
		}
	}
	def isSubtype(that: JawaType) -> bool {
		if (this == that) return true; // handle all trivial equalities
		match (this) {
			Class(decl) => {
				match (that) {
					Class(decl2) => {
						var d = decl.parent;
						while (d != null) { // search inheritance chain
							if (d == decl2) return true;
						}
					}
					Interface(decl2) => {
						for (i in decl.interfaces) { // search implemented interfaces
							if (i.isSubtype(that)) return true;
						}
					}
					_ => ;
				}
			}
			Interface(decl) => {
				for (i in decl.interfaces) { // search super-interfaces
					if (i.isSubtype(that)) return true;
				}
			}
			Array(elem) => {
				match (that) {
					Class(decl2) => return decl2.parent == null; // subtype of Object
					Array(elem2) => return elem.isSubtype(elem2); // co-variant arrays
					_ => ;
				}
			}
			_ => ;
		}
		return false;
	}
}

// Wrapper around a Jawa exported type that allows it to be imported/exported to wasm.
class JawaExportedType(t: JawaType) extends ExportedType(ValueType.EXTERNREF) { }

// Global top-level Jawa types.
component JawaTypes {
	def BYTE_ARRAY = array(JawaType.BYTE);
	def BOOL_ARRAY = array(JawaType.BOOL);
	def CHAR_ARRAY = array(JawaType.CHAR);
	def SHORT_ARRAY = array(JawaType.SHORT);
	def INT_ARRAY = array(JawaType.INT);
	def LONG_ARRAY = array(JawaType.LONG);
	def FLOAT_ARRAY = array(JawaType.FLOAT);
	def DOUBLE_ARRAY = array(JawaType.DOUBLE);

	def array(elem: JawaType) -> JawaExportedType {
		return JawaExportedType.new(JawaType.Array(elem));
	}
}
