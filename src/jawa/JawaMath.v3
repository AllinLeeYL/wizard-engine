// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Math functions.
component JawaMath {
	def exp = exp0;
}

def hiword(x: double) -> u32 {
	return u32.view(u64.view(x) >> 32);
}
def loword(x: double) -> u32 {
	return u32.view(u64.view(x));
}

def one		= 1.0;
def half	= [0.5, -0.5];
def huge	= 1.0e+300;
def twom1000	= 9.33263618503218878990e-302; /* 2**-1000=0x01700000,0*/
def o_threshold	= 7.09782712893383973096e+2;  /* 0x40862E42, 0xFEFA39EF */
def u_threshold	= -7.45133219101941108420e+2; /* 0xc0874910, 0xD52D3051 */
def ln2HI	= [
	6.93147180369123816490e-1, /* 0x3fe62e42, 0xfee00000 */
	-6.93147180369123816490e-1 /* 0xbfe62e42, 0xfee00000 */
];
def ln2LO 	= [
	1.90821492927058770002e-10,  /* 0x3dea39ef, 0x35793c76 */
	-1.90821492927058770002e-10  /* 0xbdea39ef, 0x35793c76 */
];
def invln2	= 1.44269504088896338700e+0;  /* 0x3ff71547, 0x652b82fe */
def P1		=  1.66666666666666019037e-1; /* 0x3FC55555, 0x5555553E */
def P2		= -2.77777777770155933842e-3; /* 0xBF66C16C, 0x16BEBD93 */
def P3		=  6.61375632143793436117e-5; /* 0x3F11566A, 0xAF25DE2C */
def P4		= -1.65339022054652515390e-6; /* 0xBEBBBD41, 0xC5D26BF1 */
def P5		=  4.13813679705723846039e-8; /* 0x3E663769, 0x72BEA4D0 */

def exp0(x: double) -> double {
	var hx  = hiword(x);	/* high word of x */
	var xsb = u1.view(hx >> 31);   /* sign bit of x */
	hx &= 0x7fffffff;       /* high word of |x| */

	/* filter out non-finite argument */
	if (hx >= 1082535490) {			/* if |x| >= 709.78... */
		if (hx >= 0x7ff00000) {
			if (((hx & 0xfffff) | loword(x)) != 0) return x + x; /* NaN */
			else return if(xsb == 0, x, 0.0d);	/* exp(+-inf) = {inf,0} */
		}
		if (x > o_threshold) return huge * huge; /* overflow */
		if (x < u_threshold) return twom1000 * twom1000; /* underflow */
	}

	var hi = 0d, lo = 0d, k = 0;

	/* argument reduction */
	if (hx > 1071001154) {		 /* if |x| > 0.5 ln2 */
		if (hx < 0x3FF0A2B2) {	    /* and |x| < 1.5 ln2 */
			hi = x - ln2HI[xsb];
			lo = ln2LO[xsb];
			k = 1 - xsb - xsb;
		} else {
			k  = int.truncd(invln2 * x + half[xsb]);
			var t: double = k;
			hi = x - t * ln2HI[0];	/* t * ln2HI is exact here */
			lo = t * ln2LO[0];
		}
		x  = hi - lo;
	} else if (hx < 0x3e300000)  {	 /* when |x| < 2**-28 */
		if (huge + x > one) return one + x; /* trigger inexact */
	} else {
		k = 0;
	}

	/* x is now in primary range */
	var t = x * x;
	var c = x - t * (P1 + t * (P2 + t * (P3 + t * (P4 + t * P5))));

	if (k == 0) return one - ((x * c) / (c - 2.0) - x);

	var y = one - ((lo - (x * c) / (2.0 - c)) - hi);

	if (k >= -1021) {
		var nh = int.view(hiword(y)) + (k << 20); /* add k to y's exponent */
		return double.view(u64.view(nh) << 32 | loword(y));
	} else {
		var nh = int.view(hiword(y)) + ((k + 1000) << 20); /* add k to y's exponent */
		return double.view(u64.view(nh) << 32 | loword(y));
	}
}
