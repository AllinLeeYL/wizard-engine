// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An environment (i.e. mapping from strings to classes/interfaces) for Jawa.
class JawaEnvironment(parent: JawaEnvironment) {
	private def decls = HashMap<JawaString, JawaDeclType>.new(JawaString.hashCode, JawaString.equals);
	private def strings = HashMap<JawaString, Global>.new(JawaString.hashCode, JawaString.equals);

	def add(c: JawaDeclType) {
		decls[c.name] = c;
	}
	def lookup(name: JawaString) -> JawaDeclType {
		return decls[name];
	}
	def declareClass(name: JawaString, sup: JawaClassType, intfs: Array<JawaInterfaceType>) -> JawaClassType {
		var prev = decls[name];
		if (prev != null) return null;
		var r = JawaClassType.new(name, sup, intfs);
		decls[name] = r;
		return r;
	}
	def declareInterface(name: JawaString, intfs: Array<JawaInterfaceType>) -> JawaInterfaceType {
		var prev = decls[name];
		if (prev != null) return null;
		var r = JawaInterfaceType.new(name, intfs);
		decls[name] = r;
		return r;
	}
	def internStringAsGlobal(str: JawaString) -> Global {
		var g = strings[str];
		if (g == null) {
			// XXX: cache global decl for string constants?
			var t = JawaTypes.STRING;
			var decl = GlobalDecl.new(0, ValueType.Host(t), false, InitExpr.ExternRefNull);
			strings[str] = g = Global.new(decl);
			g.value = Value.ExternRef(str);
		}
		return g;
	}
	def isStringType(t: JawaType) -> bool {
		return t == JawaTypes.STRING;
	}
}
