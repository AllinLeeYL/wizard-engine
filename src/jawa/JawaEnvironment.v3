// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An environment (i.e. mapping from strings to classes/interfaces) for Jawa.
class JawaEnvironment(parent: JawaEnvironment) {
	def compounds = HashMap<JawaString, JawaCompound>.new(JawaString.hashCode, JawaString.equals);
	def strings = HashMap<JawaString, Global>.new(JawaString.hashCode, JawaString.equals);

	def lookup(name: JawaString) -> JawaCompound {
		return compounds[name];
	}
	def declareClass(name: JawaString, sup: JawaClass, intfs: Array<JawaInterface>) -> JawaClass {
		var prev = compounds[name];
		if (prev != null) return null;
		var cl = JawaClass.new(name, sup, Arrays.map(intfs, JawaInterfaceType.new));
		compounds[name] = cl;
		return cl;
	}
	def add(c: JawaCompound) {
		compounds[c.name] = c;
	}
	def declareInterface(name: JawaString, intfs: Array<JawaInterface>) -> JawaInterface {
		var prev = compounds[name];
		if (prev != null) return null;
		var it = JawaInterface.new(name, Arrays.map(intfs, JawaInterfaceType.new));
		compounds[name] = it;
		return it;
	}
	def internStringAsGlobal(str: JawaString) -> Global {
		var g = strings[str];
		if (g == null) {
			// XXX: cache global decl for string constants?
			var t = JawaTypes.STRING;
			var decl = GlobalDecl.new(0, ValueType.Host(t), false, InitExpr.ExternRefNull);
			strings[str] = g = Global.new(decl);
			g.value = Value.ExternRef(str);
		}
		return g;
	}
	def getArrayType(elem: JawaType) -> JawaArrayType {
		return JawaArrayType.new(elem); // XXX: cache array types
	}
	def exportClass(c: JawaClass) -> JawaClassType {
		return JawaClassType.new(c); // XXX: cache class types
	}
	def exportInterface(i: JawaInterface) -> JawaInterfaceType {
		return JawaInterfaceType.new(i); // XXX: cache class exported types
	}
	def isStringType(t: JawaType) -> bool {
		match (t) {
			ct: JawaClassType => return ct.decl == JawaClasses.STRING;
			_ => return false;
		}
	}
}

// Base class of compound types, i.e. class and interface.
class JawaCompound(name: JawaString) { }

// Contains declared members of classes.
class JawaClass extends JawaCompound {
	def parent: JawaClass;
	def interfaces: Array<JawaInterfaceType>;
	var instanceFields: Array<JawaField>;
	var instanceMethods: Array<JawaMethod>;
	var staticFields: Array<JawaField>;
	var staticMethods: Array<JawaMethod>;

	new(name: JawaString, parent, interfaces) super(name) { }

	def complete() -> bool {
		return instanceFields != null;
	}
}

// Contains declared members of interfaces.
class JawaInterface extends JawaCompound {
	def interfaces: Array<JawaInterfaceType>;
	var instanceMethods: Array<JawaMethod>;

	new(name: JawaString, interfaces) super(name) { }

	def complete() -> bool {
		return instanceMethods != null;
	}

}

class JawaField(name: JawaString, typ: JawaType) { }
class JawaMethod(name: JawaString, params: Array<JawaType>, ret: JawaType) { }

// All built-in classes in Jawa.
component JawaClasses {
	def NO_INTERFACES: Array<JawaInterfaceType> = [];
	def OBJECT = JawaClass.new(ascii("jawa/lang/Object"), null, NO_INTERFACES);
	def STRING = JawaClass.new(ascii("jawa/lang/String"), OBJECT, NO_INTERFACES);

	def add(env: JawaEnvironment) {
		env.add(OBJECT);
		env.add(STRING);
	}

	def ascii(s: string) -> JawaString {
		var chars = Array<u16>.new(s.length);
		for (i < s.length) chars[i] = s[i];
		return JawaString.new(chars);
	}
}