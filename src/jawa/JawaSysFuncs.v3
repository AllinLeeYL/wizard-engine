// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// All the system functions supported by Jawa in the "SYSTEM" bytecode.
enum JawaSysFunc(sig: SigDecl, eval: Array<Value> -> HostResult) {
	puts(SigDecl.new(ValueTypes.NO_HEAPTYPES, [ValueType.Host(JawaTypes.STRING)], SigCache.arr_v), eval_puts),
	puti(SigCache.i_v, eval_puti),
	millis(SigCache.v_i, eval_millis),
	micros(SigCache.v_i, eval_micros),
	random(SigCache.v_l, eval_random),
	exp(SigCache.d_d, eval_exp),
	log(SigCache.d_d, eval_log),
	sqrt(SigCache.d_d, eval_sqrt),
	idhash(SigDecl.new(ValueTypes.NO_HEAPTYPES, [ValueType.Host(JawaTypes.OBJECT)], SigCache.arr_i), eval_idhash)
}

// System functions that can be imported by code.
component JawaSysFuncs {
	private def funcs = Array<HostFunction>.new(JawaSysFunc.idhash.tag + 1);

	new() {
		for (f in JawaSysFunc) {
			funcs[f.tag] = HostFunctionN.new(f.name, f.sig, f.eval);
		}
	}

	// Lookup a system call by name.
	def lookup(s: JawaString) -> HostFunction {
		for (f in JawaSysFunc) {
			if (s.equalsB(f.name)) return funcs[f.tag];
		}
		return null;
	}

	def addEntropyForRandom(l: long) {
		seed ^= (seed << 13) | (l * multiplier);
	}
	def getRandomLong() -> long {
		var n1 = (seed * multiplier + 0xB);
		seed = n1;
		var n2 = (seed * multiplier + 0xB);
		seed = n2;
		return n2 ^ (n1 >> 16);
	}
}

// Random number generator state.
var seed = 8682522807148012L;
def multiplier = 0x5DEECE66DL;

def VOID = HostResult.Value0;
def buf = StringBuilder.new();

def eval_puts(args: Array<Value>) -> HostResult {
	var obj = JawaStringObject.!(Value.Ref.!(args[0]).val).rep;
	if (obj == null) return JawaTraps.NullPointerException;
	obj.render(buf.reset());
	buf.out(Trace.STDOUT);
	buf.reset();
	return VOID;
}
def eval_puti(args: Array<Value>) -> HostResult {
	System.puti(Values.v_i(args[0]));
	return VOID;
}
def eval_millis(args: Array<Value>) -> HostResult {
	return HostResult.Value1(Value.I32(u32.view(System.ticksMs())));
}
def eval_micros(args: Array<Value>) -> HostResult {
	return HostResult.Value1(Value.I32(u32.view(System.ticksUs())));
}
def eval_random(args: Array<Value>) -> HostResult {
	return HostResult.Value1(Value.I64(u64.view(JawaSysFuncs.getRandomLong())));
}
def eval_exp(args: Array<Value>) -> HostResult {
	var x = double.view(Value.F64.!(args[0]).bits);
	var y = JawaMath.exp(x);
	return HostResult.Value1(Value.F64(u64.view(y)));
}
def eval_log(args: Array<Value>) -> HostResult {
	var x = double.view(Value.F64.!(args[0]).bits);
	var y = JawaMath.log(x);
	return HostResult.Value1(Value.F64(u64.view(y)));
}
def eval_sqrt(args: Array<Value>) -> HostResult {
	var x = double.view(Value.F64.!(args[0]).bits);
	var y = double.sqrt(x);
	return HostResult.Value1(Value.F64(u64.view(y)));
}
def eval_idhash(args: Array<Value>) -> HostResult {
	var obj = JawaObject.!(Value.Ref.!(args[0]).val);
	if (obj == null) return JawaTraps.NullPointerException;
	return HostResult.Value1(Value.I32(obj.hashCode()));
}
