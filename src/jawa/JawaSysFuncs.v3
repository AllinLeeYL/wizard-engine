// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// System functions that can be imported by code.
component JawaSysFuncs {
	private def VOID = HostResult.Value([]);
	private def buf = StringBuilder.new();
	private var seed = 8682522807148012L;
	private def multiplier = 0x5DEECE66DL;
	private def addend = 0xBL;

	// Lookup a system call by name.
	def lookup(s: JawaString) -> HostFunction {
		if (s.equals(nPUTS)) return PUTS;
		if (s.equals(nPUTI)) return PUTI;
		if (s.equals(nMILLIS)) return MILLIS;
		if (s.equals(nMICROS)) return MICROS;
		if (s.equals(nRANDOM)) return RANDOM;
		if (s.equals(nEXP)) return EXP;
		return null;
	}

	def setRandomSeed(l: long) {
		seed = l;
	}
	def addEntropyForRandom(l: long) {
		seed ^= (seed << 13) | (l * multiplier);
	}
	def getRandomLong() -> long {
		var n1 = (seed * multiplier + addend);
		seed = n1;
		var n2 = (seed * multiplier + addend);
		seed = n2;
		return n2 ^ (n1 >> 16);
	}
//-------------------------------------------------------------------------------------------------
	private def nPUTS = JawaStrings.of("puts");
	private def PUTS = JawaHostFunction.new("PUTS",
		SigDecl.new([ValueType.Host(JawaTypes.STRING)], SigCache.arr_v), eval_PUTS);
	private def eval_PUTS(args: Array<Value>) -> HostResult {
		var obj = JawaStringObject.!(Value.Ref.!(args[0]).val).rep;
		if (obj == null) return JawaTraps.NullPointerException;
		obj.render(buf.reset());
		buf.out(Trace.STDOUT);
		buf.reset();
		return VOID;
	}
//-------------------------------------------------------------------------------------------------
	private def nPUTI = JawaStrings.of("puti");
	private def PUTI = JawaHostFunction.new("PUTI", SigCache.i_v, eval_PUTI);
	private def eval_PUTI(args: Array<Value>) -> HostResult {
		System.puti(Values.v_i(args[0]));
		return VOID;
	}
//-------------------------------------------------------------------------------------------------
	private def nMILLIS = JawaStrings.of("millis");
	private def MILLIS = JawaHostFunction.new("MILLIS", SigCache.v_i, eval_MILLIS);
	private def eval_MILLIS(args: Array<Value>) -> HostResult {
		return HostResult.Value([Value.I32(u32.view(System.ticksMs()))]);
	}
//-------------------------------------------------------------------------------------------------
	private def nMICROS = JawaStrings.of("micros");
	private def MICROS = JawaHostFunction.new("MICROS", SigCache.v_i, eval_MICROS);
	private def eval_MICROS(args: Array<Value>) -> HostResult {
		return HostResult.Value([Value.I32(u32.view(System.ticksUs()))]);
	}
//-------------------------------------------------------------------------------------------------
	private def nRANDOM = JawaStrings.of("random");
	private def RANDOM = JawaHostFunction.new("RANDOM", SigCache.v_l, eval_RANDOM);
	private def eval_RANDOM(args: Array<Value>) -> HostResult {
		return HostResult.Value([Value.I64(u64.view(getRandomLong()))]);
	}
//-------------------------------------------------------------------------------------------------
	private def nEXP = JawaStrings.of("exp");
	private def EXP = JawaHostFunction.new("EXP", SigCache.d_d, eval_EXP);

	private def eval_EXP(args: Array<Value>) -> HostResult {
		var x = double.view(Value.F64.!(args[0]).bits);
		var y = JawaMath.exp(x);
		return HostResult.Value([Value.F64(u64.view(y))]);
	}
}
