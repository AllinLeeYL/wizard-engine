// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Additional floating point subroutines not provided by Virgil but
// needed to implement the portable interpreter.
component Float {
	def fabs(a: float) -> float {
		var aa = 0x7fffffffu & u32.view(a);
		return float.view(aa);
	}
	def fneg(a: float) -> float {
		return float.view(0x80000000u ^ u32.view(a));
	}
	def ftrunc(a: float) -> float {
		if (a < 0f) return 0f - float.floor(0f - a);
		return float.floor(a);
	}
	def fnearest(a: float) -> float; // TODO
	def fmin(a: float, b: float) -> float; // TODO
	def fmax(a: float, b: float) -> float; // TODO
	def fcopysign(a: float, b: float) -> float {
		var aa = 0x7fffffffu & u32.view(a);
		var bb = 0x80000000u & u32.view(b);
		return float.view(aa | bb);
	}

	def dabs(a: double) -> double {
		var aa = 0x7fffffffffffffffuL & u64.view(a);
		return double.view(aa);
	}
	def dneg(a: double) -> double {
		return double.view(0x8000000000000000uL ^ u64.view(a));
	}
	def dtrunc(a: double) -> double {
		if (a < 0d) return 0d - double.floor(0d - a);
		return double.floor(a);
	}
	def dnearest(a: double) -> double; // TODO
	def dmin(a: double, b: double) -> double; // TODO
	def dmax(a: double, b: double) -> double; // TODO
	def dcopysign(a: double, b: double) -> double {
		var aa = 0x7fffffffffffffffuL & u64.view(a);
		var bb = 0x8000000000000000uL & u64.view(b);
		return double.view(aa | bb);
	}
}