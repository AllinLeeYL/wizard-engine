// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A Wasm-specific error generator that tracks additional context for more
// usefule error messages, as well as an error code for programmatic matching.
class WasmErrorGen(filename: string) extends ErrorGen {
	var section: BpSection;		// current section
	var index: int = -1;		// current index into section
	var error_section: BpSection;	// section where error ocurred
	var error_index: int;		// index where error ocurred
	var error_code: WasmError;	// wasm error code

	def fail(pos: int, code: WasmError, msg: string) {
		if (set(pos, msg)) setc(code, msg);
	}
	def fail1<A>(pos: int, code: WasmError, msg: string, a: A) {
		if (set(pos, msg)) setc(code, Strings.format1(msg, a));
	}
	def fail2<A, B>(pos: int, code: WasmError, msg: string, a: A, b: B) {
		if (set(pos, msg)) setc(code, Strings.format2(msg, a, b));
	}
	def fail3<A, B, C>(pos: int, code: WasmError, msg: string, a: A, b: B, c: C) {
		if (set(pos, msg)) setc(code, Strings.format3(msg, a, b, c));
	}
	def setc(code: WasmError, msg: string) {
		error_section = section;
		error_index = index;
		error_code = code;
		error_msg = msg;
	}
}

// Enumeration of all different error classes, which allows programmatic
// matching in unit tests.
enum WasmError {
	NONE,
	// Decoder errors.
	EOF,
	LEB_ERROR,
	// Wasm binary decoding errors.
	INVALID_HEADER,
	INCOMPLETE_SECTION,
	DUPLICATE_SECTION,
	EXCEEDED_LIMIT,
	OOB_INDEX,
	FUNC_COUNT_MISMATCH,
	INVALID_SECTION,
	SECTION_SIZE_MISMATCH,
	INVALID_TYPE,
	INVALID_IMPORT_KIND,
	EXPECTED_ZERO_BYTE,
	EXPECTED_MAXIMUM,
	ILLEGAL_TABLE_TYPE,
	ILLEGAL_INIT_EXPR,
	INVALID_INIT_EXPR,
	INVALID_BLOCK_TYPE,
	ILLEGAL_BLOCK_TYPE,
	ILLEGAL_TYPE,
	// Code validation errors.
	TYPE_MISMATCH,
	MISMATCHED_ELSE,
	UNTERMINATED_BODY,
	OOB_LABEL,
	// Module instantiation errors.
	IMPORT_COUNT_MISMATCH,
	OOM_TABLE,
	OOM_MEMORY,
	IMPORT_KIND_MISMATCH,
	IMPORT_TYPE_MISMATCH,
	OOB_TABLE_ELEMS,
	OOB_DATA_INIT
}
