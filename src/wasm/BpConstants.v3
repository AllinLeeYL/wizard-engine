// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Section codes.
enum BpSection(code: byte) {
	Unknown(0),
	Type(1),
	Import(2),
	Function(3),
	Table(4),
	Memory(5),
	Global(6),
	Export(7),
	Start(8),
	Element(9),
	Code(10),
	Data(11),
}
// Import/export kind codes.
enum BpImportExportKind(code: byte) {
	Function(0),
	Table(1),
	Memory(2),
	Global(3)
}
// Type constructor codes.
enum BpTypecon(code: byte) {
	I32(0x7F),
	I64(0x7E),
	F32(0x7D),
	F64(0x7C),
	VEC128(0x7B), // ext:simd
	AnyFunc(0x70),
	AnyRef(0x6F), // ext:reference-types
	Function(0x60),
	EmptyBlock(0x40)
}
component BpConstants {
	def WASM_MAGIC = 0x6d736100u;
	def WASM_VERSION = 0x01u;
	def valid_section = Array<bool>.new(256);
	def enum_section = Array<BpSection>.new(256);
	new() {
		for (s in BpSection) {
			valid_section[s.code] = true;
			enum_section[s.code] = s;
		}
	}
	def renderSectionName(buf: StringBuilder, b: byte) -> StringBuilder {
		var s = "unknown";
		match (b) {
			BpSection.Type.code => s = "type";
			BpSection.Import.code => s = "import";
			BpSection.Function.code => s = "function";
			BpSection.Table.code => s = "table";
			BpSection.Memory.code => s = "memory";
			BpSection.Global.code => s = "global";
			BpSection.Export.code => s = "export";
			BpSection.Start.code => s = "start";
			BpSection.Element.code => s = "element";
			BpSection.Code.code => s = "code";
			BpSection.Data.code => s = "data";
		}
		return buf.puts(s);
	}
}
