// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Superclass of all import/exportable objects.
class Exportable {
}
// Interpreter callback interface for functions provided by the host.
class Executor {
	def trap(reason: TrapReason);
	def pause();
}
// Host objects must extend this class to be extern refs.
class HostObject { }
// Abstract base class of host and wasm functions.
class Function(sig: ValueType.Function) extends Exportable {
}
class HostFunction extends Function {
	def invoke: (Executor, Array<Value>) -> Result;
	new(sig: ValueType.Function, invoke) super(sig) { }
}
// A function from a wasm instance.
class WasmFunction(instance: Instance, decl: FunctionDecl) extends Function {
	new() super(decl.sig) { }
}
class Table(decl: TableDecl) extends Exportable {
	var oom = false;
	def grow(more: u32, val: Value) -> int;
	def fill(dst_offset: u32, val: Value, size: u32) -> TrapReason;
	def copyT(dst_offset: u32, src: Table, src_offset: u32, size: u32) -> TrapReason;
	def copyE(instance: Instance, dst_offset: u32, elem: ElemDecl, src_offset: u32, size: u32) -> TrapReason;
	def size() -> int;
}
def v2f(v: Value) -> Function {
	return if(Value.FuncRef.?(v), Value.FuncRef.!(v).val);
}
def initFunc(instance: Instance, e: InitExpr) -> Function {
	var val = instance.evalInitExpr(e);
	return if(Value.FuncRef.?(val), Value.FuncRef.!(val).val);
}
class FunctionTable extends Table {
	var elems: Array<Function>;
	new(decl: TableDecl) super(decl) {
		elems = Array.new(decl.initial);
	}
	def grow(more: u32, val: Value) -> int {
		var total = i64.!(elems.length) + more;
		if (total > EngineLimits.limit_table_size) return -1;
		if (decl.maximum >= 0 && total > decl.maximum) return -1;
		var prev = elems.length, nlength = int.!(total);
		var nelems = Arrays.grow(elems, nlength);
		var fv = v2f(val);
		for (i = prev; i < nlength; i++) nelems[i] = fv;
		elems = nelems;
		return prev;
	}
	def fill(dst_offset: u32, val: Value, size: u32) -> TrapReason {
		var i = Arrays.boundsCheck(elems, 0, dst_offset, size);
		if (i < 0) return TrapReason.TABLE_OUT_OF_BOUNDS;
		var f = v2f(val);
		for (k < int.!(size)) elems[i + k] = f;
		return TrapReason.NONE;
	}
	def copyT(dst_offset: u32, src: Table, src_offset: u32, size: u32) -> TrapReason {
		var r: bool;
		match (src) {
			ft: FunctionTable => r = Arrays.safeCopy(elems, dst_offset, ft.elems, src_offset, size);
			vt: ValueTable => r = Arrays.safeCopyF(elems, dst_offset, vt.elems, src_offset, size, v2f);
		}
		return if(r, TrapReason.NONE, TrapReason.TABLE_OUT_OF_BOUNDS);
	}
	def copyE(instance: Instance, dst_offset: u32, elem: ElemDecl, src_offset: u32, size: u32) -> TrapReason {
		if (elem == null) {
			if (Arrays.boundsCheck(elems, dst_offset, 0, size) < 0) return TrapReason.TABLE_OUT_OF_BOUNDS;
			if (Arrays.boundsCheck<byte>(null, src_offset, 0, size) < 0) return TrapReason.TABLE_OUT_OF_BOUNDS;
			return TrapReason.NONE;
		}
		var r: bool;
		match (elem.details) {
			FuncRefs(vals) => r = Arrays.safeCopyF(elems, dst_offset, vals, src_offset, size, instance.getFunction);
			Exprs(vals) => r = Arrays.safeCopyF(elems, dst_offset, vals, src_offset, size, initFunc(instance, _));
		}
		return if(r, TrapReason.NONE, TrapReason.TABLE_OUT_OF_BOUNDS);
	}
	def size() -> int { return elems.length; }
}
class ValueTable extends Table {
	var elems: Array<Value>;
	new(decl: TableDecl) super(decl) {
		elems = Array.new(decl.initial);
	}
	def grow(more: u32, val: Value) -> int {
		var total = i64.!(elems.length) + more;
		if (total > EngineLimits.limit_table_size) return -1;
		if (decl.maximum >= 0 && total > decl.maximum) return -1;
		var prev = elems.length, nlength = int.!(total);
		var nelems = Arrays.grow(elems, nlength);
		for (i = prev; i < nlength; i++) nelems[i] = val;
		elems = nelems;
		return prev;
	}
	def fill(dst_offset: u32, val: Value, size: u32) -> TrapReason {
		var i = Arrays.boundsCheck(elems, 0, dst_offset, size);
		if (i < 0) return TrapReason.TABLE_OUT_OF_BOUNDS;
		for (k < int.!(size)) elems[i + k] = val;
		return TrapReason.NONE;
	}
	def copyT(dst_offset: u32, src: Table, src_offset: u32, size: u32) -> TrapReason {
		var r: bool;
		match (src) {
			ft: FunctionTable => r = Arrays.safeCopyF(elems, dst_offset, ft.elems, src_offset, size, Value.FuncRef);
			vt: ValueTable => r = Arrays.safeCopy(elems, dst_offset, vt.elems, src_offset, size);
		}
		return if(r, TrapReason.NONE, TrapReason.TABLE_OUT_OF_BOUNDS);
	}
	def copyE(instance: Instance, dst_offset: u32, elem: ElemDecl, src_offset: u32, size: u32) -> TrapReason {
		if (elem == null) {
			if (Arrays.boundsCheck(elems, dst_offset, 0, size) < 0) return TrapReason.TABLE_OUT_OF_BOUNDS;
			if (Arrays.boundsCheck<byte>(null, src_offset, 0, size) < 0) return TrapReason.TABLE_OUT_OF_BOUNDS;
			return TrapReason.NONE;
		}
		var r: bool;
		match (elem.details) {
			FuncRefs(vals) => r = Arrays.safeCopyF(elems, dst_offset, vals, src_offset, size, instance.getFunctionAsVal);
			Exprs(vals) => r = Arrays.safeCopyF(elems, dst_offset, vals, src_offset, size, instance.evalInitExpr);
		}
		return if(r, TrapReason.NONE, TrapReason.TABLE_OUT_OF_BOUNDS);
	}
	def size() -> int { return elems.length; }
}
class Global(decl: GlobalDecl) extends Exportable {
	var value: Value;
}
class ExportedType(t: ValueType) extends Exportable {
}
// An instantiated module, including memories, tables, functions, etc.
class Instance(module: Module, imports: Array<Exportable>) {
	def memories = Array<Memory>.new(module.memories.size());
	private def functions = Array<Function>.new(module.functions.size());  // lazily allocated
	def globals = Array<Global>.new(module.globals.size());
	def tables = Array<Table>.new(module.tables.size());
	def exports = Array<Exportable>.new(module.exports.length);
	def types = Array<ValueType>.new(module.types.size());
	def dropped_elems = Array<bool>.new(module.elems.length);
	def dropped_data = Array<bool>.new(module.data.length);

	// Lazily allocates and caches functions for this instance.
	def getFunction(index: int) -> Function {
		var f = functions[index];
		if (f == null) {
			f = functions[index] = WasmFunction.new(this, module.functions[index]);
		}
		return f;
	}
	def getFunctionAsVal(index: int) -> Value.FuncRef {
		return Value.FuncRef(getFunction(index));
	}
	def getFunctions() -> Array<Function> {
		return functions;
	}
	def evalInitExpr(init: InitExpr) -> Value {
		match (init) {
			I32(val) => return Value.I32(u32.!(val));
			I64(val) => return Value.I64(u64.!(val));
			F32(val) => return Value.F32(val);
			F64(val) => return Value.F64(val);
			Null(vtype) => return Value.Null;
			Global(global_index, g) => {
				return globals[global_index].value;
			}
			FuncRef(func_index, f) => {
				return Value.FuncRef(getFunction(func_index));
			}
		}
	}
}

// Creates {Instance} objects, given a module and a list of imports.
class Instantiator(extensions: Extension.set, module: Module, imports: Array<Exportable>) {
	private def instance = Instance.new(module, imports);
	def err = WasmErrorGen.new(module.filename);
	var trap_reason: TrapReason;
	def run() -> Instance {
		if (imports.length != module.imports.length) return fail("import count mismatch");

		// Check and organize imports.
		var func_index = 0;
		var table_index = 0;
		var memory_index = 0;
		var global_index = 0;
		var type_index = 0;

		var functions = instance.getFunctions();
		var tables = instance.tables;
		var memories = instance.memories;
		var globals = instance.globals;
		var types = instance.types;
		for (i < imports.length) {
			var imp = imports[i];
			var decl = module.imports[i];
			match (decl.details) {
				Function(decl) =>
					functions[func_index++] = checkFunction(decl, imp);
				Table(decl) =>
					tables[table_index++] = checkTable(decl, imp);
				Memory(decl) =>
					memories[memory_index++] = checkMemory(decl, imp);
				Global(decl) =>
					globals[global_index++] = checkGlobal(decl, imp);
				Type(constraints) =>
					types[type_index++] = checkType(constraints, imp);
			}
			if (err.error()) return null;
		}

		// Instantiate memories, tables, globals, etc.
		for (i < module.tables.declared.length) {
			var decl = module.tables.declared[i];
			var t = if(decl.elemtype == ValueType.FUNCREF,
					FunctionTable.new(decl),
					ValueTable.new(decl));
			tables[table_index++] = t;
			if (t.oom) return fail("out of memory allocating table");
		}
		for (i < module.memories.declared.length) {
			var m = Memory.new(module.memories.declared[i]);
			memories[memory_index++] = m;
			if (m.oom) return fail("out of memory allocating memory");
		}
		for (i < module.globals.declared.length) {
			var d = module.globals.declared[i];
			var g = Global.new(d);
			globals[global_index++] = g;
			g.value = instance.evalInitExpr(d.init);
		}

		if (!extensions.BULK_MEMORY) {
			// Bounds-check element segments before performing any initialization.
			for (i < module.elems.length) {
				var e = module.elems[i];
				match (e.mode) {
					Active(index, offset) => checkElemBounds(index, offset, e.details);
					_ => ;
				}
			}
			if (err.error()) return null;

			// Bounds-check any data segments before loading.
			for (i < module.data.length) {
				var d = module.data[i];
				match (d.mode) {
					Active(index, offset) => checkDataBounds(index, offset, d.data.length);
					_ => ;
				}
			}
			if (err.error()) return null;
		}

		// Load element segments.
		for (i < module.elems.length) {
			var e = module.elems[i];
			match (e.mode) {
				Passive => ;
				Active(index, offset) => {
					loadElems(index, offset, e);
					instance.dropped_elems[i] = true;
					if (err.error()) return null;
				}
				Declarative => {
					instance.dropped_elems[i] = true;
				}
			}
		}
		// Load data segments.
		for (i < module.data.length) {
			var d = module.data[i];
			match (d.mode) {
				Passive => ;
				Active(index, offset) => {
					loadData(index, offset, d);
					instance.dropped_data[i] = true;
					if (err.error()) return null;
				}
				Declarative => {
					instance.dropped_data[i] = true;
				}
			}
		}


		// Organize exports
		var exports = instance.exports;
		for (i < module.exports.length) {
			var exp = module.exports[i];
			var v: Exportable;
			match (exp.details) {
				Function(index) => v = instance.getFunction(index);
				Table(index) => v = tables[index];
				Memory(index) => v = memories[index];
				Global(index) => v = globals[index];
			}
			exports[i] = v;
		}
		return instance;
	}
	private def fail(msg: string) -> Instance {
		err.error_msg = msg;
		err.error_pos = 0;
		clear();
		return null;
	}
	private def checkFunction(decl: FunctionDecl, imp: Exportable) -> Function {
		if (!Function.?(imp)) {
			fail("expected function import");
			return null;
		}
		var func = Function.!(imp);
		if (!ValueTypes.isAssignableSig(decl.sig, func.sig)) fail("function sig mismatch");
		return func;
	}
	private def checkTable(decl: TableDecl, imp: Exportable) -> Table {
		if (!Table.?(imp)) {
			fail("expected table import");
			return null;
		}
		var table = Table.!(imp);
		if (!checkLimits(table.decl.initial, table.decl.maximum, decl.initial, decl.maximum)) {
			fail("table limits mismatch");
		}
		if (table.decl.elemtype != decl.elemtype) {
			fail("table element type mismatch");
		}
		return table;
	}
	private def checkMemory(decl: MemoryDecl, imp: Exportable) -> Memory {
		if (!Memory.?(imp)) {
			fail("expected import");
			return null;
		}
		var memory = Memory.!(imp);
		if (!checkLimits(memory.decl.initial, memory.decl.maximum, decl.initial, decl.maximum)) {
			fail("memory limits mismatch");
		}
		if (memory.decl.shared != decl.shared) {
			fail("memory sharing mismatch");
		}
		return memory;
	}
	private def checkGlobal(decl: GlobalDecl, imp: Exportable) -> Global {
		if (!Global.?(imp)) {
			fail("expected global import");
			return null;
		}
		var global = Global.!(imp);
		if (decl.mutable != global.decl.mutable) {
			fail("global immutability mismatch");
		}
		if (!ValueTypes.isAssignable(global.decl.valtype, decl.valtype)) {
			fail("global type mismatch");
		}
		if (!decl.mutable &&!ValueTypes.isAssignable(global.decl.valtype, decl.valtype)) {
			fail("global type mismatch");
		}
		return global;
	}
	private def checkType(constraints: Array<TypeConstraint>, imp: Exportable) -> ValueType;
	// Upon error, clear internal fields to prevent retaining garbage.
	private def clear() {
		for (i = module.memories.imported.length; i < instance.memories.length; i++) {
			var m = instance.memories[i];
			if (m != null) m.deallocate();	// explicitly deallocate memory
		}
		Arrays.clear(instance.memories);
		Arrays.clear(instance.getFunctions());
		Arrays.clear(instance.globals);
		Arrays.clear(instance.tables);
	}
	private def checkLimits(fmin: int, fmax: int, tmin: int, tmax: int) -> bool {
		if (fmin < tmin) return false;
		if (tmax >= 0) {
			if (fmax < 0) return false;
			if (fmax > tmax) return false;
			if (fmin > tmax) return false;
		}
		return true;
	}
	private def checkBounds(offset: u32, count: int, length: int, trap: TrapReason) -> bool {
		var end = u64.!(offset) + u64.!(count);
		if (end < offset || end > length) {
			fail("out of bounds in initialization");
			if (extensions.REFERENCE_TYPES || extensions.BULK_MEMORY) trap_reason = trap;
			return false;
		}
		return true;
	}
	private def checkElemBounds(index: int, offset: InitExpr, details: ElemDetails) {
		var offset = Value.I32.!(instance.evalInitExpr(offset)).val;
		var size = instance.tables[index].size();
		match (details) {
			FuncRefs(vals) => checkBounds(offset, vals.length, size, TrapReason.TABLE_OUT_OF_BOUNDS);
			Exprs(vals) => checkBounds(offset, vals.length, size, TrapReason.TABLE_OUT_OF_BOUNDS);
		}
	}
	private def checkDataBounds(index: int, offset: InitExpr, dlength: int) {
		var offset = Value.I32.!(instance.evalInitExpr(offset)).val;
		var memory = instance.memories[index];
		var mlength = if(memory != null, memory.data.length);
		checkBounds(offset, dlength, mlength, TrapReason.MEM_OUT_OF_BOUNDS);
	}
	private def loadElems(index: int, offset: InitExpr, elems: ElemDecl) {
		var dst_offset = Values.v_u(instance.evalInitExpr(offset));
		var table = instance.tables[index];
		var r = table.copyE(instance, dst_offset, elems, 0, u32.view(elems.details.length()));
		if (r != TrapReason.NONE) {
			fail("out of bounds in initialization");
			trap_reason = r;
		}
	}
	private def loadData(index: int, offset: InitExpr, ddecl: DataDecl) {
		var dst_offset = Values.v_u(instance.evalInitExpr(offset));
		var memory = instance.memories[index];
		var r = memory.copyD(dst_offset, ddecl, 0, u32.view(ddecl.data.length));
		if (r != TrapReason.NONE) {
			fail("out of bounds in initialization");
			trap_reason = r;
		}
	}
}