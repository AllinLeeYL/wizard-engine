// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses the binary format of WebAssembly and produces an in-memory module
// representation. The parser uses a "push" model which allows the creator
// to input segments of data into the parser incrementally, e.g. if streaming
// it over a network.
class BinParser {
	def filename: string;
	def err = WasmErrorGen.new(filename);
	def module = Module.new(filename);
	def extensions: Extension.set;
	def limits: Limits;
	var validate_code = true;
	var validator: CodeValidator;
	var parser: WasmParser;

	new(extensions, limits, filename) {
		var callback = BinParserCallback.new(this);
		fsm = BpFsm.new(extensions, limits, err, callback);
		parser = WasmParser.new(extensions, limits, module, err, fsm.decoder);
	}

	private var fsm: BpFsm;
	private var seen_sections = Array<bool>.new(BpSection.Data.tag + 3);
	private var total_module_size: int;

	// Push new data into the parser from the specified range. The given array is
	// not modified or retained by this call; internal copies of data are made
	// if necessary. However, do not pass an array that could be concurrently modified,
	// as it may be decoded in place.
	def push(x: Array<byte>, xpos: int, xlength: int) -> this {
		if (xlength == 0) return; // nothing to do
		if (err.error()) return;  // already hit an error
		fsm.push(x, xpos, xlength);
	}

	// Finish the decoding of the pushed bytes, returning a valid module upon
	// success, or an error.
	def finish() -> BinParserResult {
		var func_count = module.functions.declared.length;
		if (func_count > 0 && !seen_sections[BpSection.Code.code]) {
			err.fail1(parser.decoder.pos, WasmError.FUNC_COUNT_MISMATCH,
					"expected %d function bodies, missing code section", func_count);
		}
		return fsm.finish();
	}

	def decodeSection(kind: BpSection, size: u32, d: Decoder) {
		var start = d.pos;
		parser.decoder = d;
		parser.traceBuffer();
		if (kind != BpSection.Unknown) {
			if (seen_sections[kind.code]) {
				return err.fail1(d.abs(d.pos-1), WasmError.DUPLICATE_SECTION,
					"duplicate %q section", renderSectionName(_, kind.code));
			} else {
				seen_sections[kind.code] = true;
			}
		}
		match (kind) {
			Unknown => readCustomSection(size);
			Type => readMultiple("types", size,
				limits.max_num_types, module.types.declared,
				parser.readTypeDecl);
			Import => readMultiple("imports", size,
				limits.max_num_imports, module.imports,
				parser.readImportDecl);
			Function => readMultiple("functions", size,
				limits.max_num_functions, module.functions.declared,
				parser.readFunctionDecl);
			Table => readMultiple("tables", size,
				limits.max_num_tables, module.tables.declared,
				parser.readTableDecl);
			Memory => readMultiple("memories", size,
				limits.max_num_memories, module.memories.declared,
				parser.readMemoryDecl);
			Global => readMultiple("globals", size,
				limits.max_num_globals, module.globals.declared,
				parser.readGlobalDecl);
			Export => readMultiple("exports", size,
				limits.max_num_exports, module.exports,
				parser.readExportDecl);
			Start =>
				readStartSection();
			Element => readMultiple("elements", size,
				limits.max_num_table_entries, module.elems,
				parser.readElemDecl);
			Data => readMultiple("data", size,
				limits.max_num_data_segments, module.data,
				parser.readDataDecl);
			_ => return err.fail1(d.abs(d.pos), WasmError.INVALID_SECTION,
				"unexpected section code 0x%x", kind.code);
		}
		var read = d.pos - start;
		if (read < size) {
			err.fail2(d.abs(d.pos),
				WasmError.INCOMPLETE_SECTION,
				"expected section size of %d, read %d bytes",
				size, read);
		}
	}
	def beginCodeSection(abspos: int, count: u32) {
		var kind = BpSection.Code;
		if (seen_sections[kind.code]) {
			return err.fail1(abspos - 1, WasmError.DUPLICATE_SECTION,
				"duplicate %q section", renderSectionName(_, kind.code));
		} else {
			seen_sections[kind.code] = true;
			var expected = module.functions.declared.length;
			if (count != expected) {
				err.fail2(abspos, WasmError.FUNC_COUNT_MISMATCH,
					"expected %d function bodies, got %d", expected, count);
			}
		}
	}

	def readCustomSection(size: u32) {
		var decoder = parser.decoder;
		var start = decoder.pos;
		var name = parser.readUtf8String("custom section name");
		var payload_len = int.!(size) - (decoder.pos - start);
		if (payload_len < 0) {
			return err.fail2(start, WasmError.OVERFLOW_SECTION,
				"custom section name length %d exceeds section size %d", name.length, size);
		}
		var payload = decoder.read_bytes(payload_len);
		module.custom_sections.put(CustomSection.new(name, payload));
	}
	def readMultiple<T>(thing_name: string, size: u32,
		max: u32, vec: Vector<T>, read: int -> T) {
		var decoder = parser.decoder;
		var count = parser.readU32(thing_name, 0, max);
		if (!err.ok()) return;
		if (count < MAX_GROW_SIZE) vec.grow(int.!(count));
		for (index < int.!(count)) {
			if (parser.trace != null) {
				parser.trace.put2("==>%s #%d\n", thing_name, index);
				parser.flush();
			}
			if (err.error()) break;
			var thing = read(index);
			vec.set(index, thing);
		}
	}
	def readStartSection() {
		var decoder = parser.decoder;
		var pt = decoder.pos;
		var t = parser.readFunc(), index = t.0, func = t.1;
		module.start_function = t.0;
		if (func != null &&
			(func.sig.params.length > 0 || func.sig.results.length > 0)) {
			err.fail(decoder.abs(pt), WasmError.ILLEGAL_TYPE,
				"start function must have no params or results");
		}
	}

	def decodeFunctionBody(index: u32, size: u32, d: Decoder) {
		var decoder = parser.decoder = d;
		var start = decoder.pos;
		var body = decoder.read_bytes(int.!(size));
		var f = module.functions.declared[int.!(index)];
		decoder.pos = start;
		f.code = FunctionCode.new(body);
		if (!validate_code) return;
		if (validator == null) validator = CodeValidator.new(extensions, limits, module, err);
		validator.validate(f, d);
	}
}
class BinParserCallback(mp: BinParser) extends BpFsmCallback(mp.module) {
	def decodeSection(kind: BpSection, size: u32, d: Decoder) {
		mp.decodeSection(kind, size, d);
	}
	def beginCodeSection(abspos: int, count: u32) {
		mp.beginCodeSection(abspos, count);
	}
	def decodeFunctionBody(index: u32, size: u32, d: Decoder) {
		mp.decodeFunctionBody(index, size, d);
	}
}

type BinParserResult {
	case Ok(module: Module) { }
	case Error(code: WasmError, filename: string, error_pos: int, error_msg: string) { }
}
// Internal constants.
def MAX_GROW_SIZE = 1000000;
// Header constants.
def WASM_MAGIC = 0x6d736100u;
def WASM_VERSION = 0x01u;
def renderSectionName(buf: StringBuffer, b: byte) -> StringBuffer {
	var s = "unknown";
	match (b) {
		BpSection.Type.code => s = "type";
		BpSection.Import.code => s = "import";
		BpSection.Function.code => s = "function";
		BpSection.Table.code => s = "table";
		BpSection.Memory.code => s = "memory";
		BpSection.Global.code => s = "global";
		BpSection.Export.code => s = "export";
		BpSection.Start.code => s = "start";
		BpSection.Element.code => s = "element";
		BpSection.Code.code => s = "code";
		BpSection.Data.code => s = "data";
	}
	return buf.puts(s);
}
def renderImportKind(buf: StringBuffer, b: byte) -> StringBuffer {
	var s = "unknown";
	match (b) {
		BpImportExportKind.Function.code => s = "function";
		BpImportExportKind.Table.code => s = "table";
		BpImportExportKind.Memory.code => s = "memory";
		BpImportExportKind.Global.code => s = "global";
	}
	return buf.puts(s);
}
def renderTypecon(buf: StringBuffer, b: byte) -> StringBuffer {
	var s = "unknown";
	match (b) {
		BpTypecon.I32.code => s = "i32";
		BpTypecon.I64.code => s = "i64";
		BpTypecon.F32.code => s = "f32";
		BpTypecon.F64.code => s = "f64";
		BpTypecon.VEC128.code => s = "vec128";
		BpTypecon.AnyFunc.code => s = "anyfunc";
		BpTypecon.AnyRef.code => s = "anyref";
		BpTypecon.Function.code => s = "func";
		BpTypecon.EmptyBlock.code => s = "empty";
	}
	return buf.puts(s);
}
def renderNone(buf: StringBuffer, b: byte) -> StringBuffer {
	return buf;
}
def renderMemFlags(buf: StringBuffer, v: u32) -> StringBuffer {
	return buf.put1("align=%d", v);
}
def renderGlobalFlags(buf: StringBuffer, b: byte) -> StringBuffer {
	if ((b & 1) == 1) buf.puts("mutable");
	return buf;
}
def renderLimitFlags(buf: StringBuffer, b: byte) -> StringBuffer {
	if ((b & 1) == 1) buf.puts("has_max");
	if ((b & 2) == 2) buf.puts(" shared");
	return buf;
}
def EMPTY: Array<ValueType> = [];
def FUNC_VEC128 = TypeDecl.Function(EMPTY, [ValueType.VEC128]);
def FUNC_ANYREF = TypeDecl.Function(EMPTY, [ValueType.ANYREF]);
// Contains common routines for the module parser and function body parser.
class WasmParser(extensions: Extension.set, limits: Limits, module: Module,
	err: WasmErrorGen, var decoder: Decoder) {
	def trace = if(Trace.binparse, StringBuffer.new());
	var eof = false;

	def eof_set_flag(d: Decoder, pos: int, size: int, msg: string) {
		eof = true;
	}
	def readTableIndex() -> int {
		return readIndex("table index", module.tables).0;
	}
	def readTableImm() -> int {
		var pt = decoder.pos;
		if (extensions.REFERENCE_TYPES) {
			return readTableIndex();
		} else {
			var b = readByte("table index", StringBuffer.putd);
			if (b != 0) {
				err.fail1(pt, WasmError.EXPECTED_ZERO_BYTE,
					"expected zero byte for table index, got 0x%x", b);
			}
			checkIndex(pt, "table index", 0, module.tables.size());
			return 0;
		}
	}
	def readSig() -> (int, TypeDecl.Function) {
		var pt = decoder.pos;
		var r = readIndex("signature index", module.types);
		if (TypeDecl.Function.?(r.1)) {
			return (r.0, TypeDecl.Function.!(r.1));
		} else {
			var d: TypeDecl.Function;
			err.fail1(pt, WasmError.ILLEGAL_TYPE,
				"expected type index %d to be a function", r.0);
			return (r.0, d);
		}
	}
	def readFunc() -> (int, FunctionDecl) {
		return readIndex("function index", module.functions);
	}
	def readMemoryIndex() -> int {
		return readIndex("memory index", module.memories).0;
	}
	def readMemoryImm() -> int {
		var pt = decoder.pos;
		if (extensions.MULTI_MEMORY) {
			return readMemoryIndex();
		} else {
			var b = readByte("memory index", StringBuffer.putd);
			if (b != 0) {
				err.fail1(pt, WasmError.EXPECTED_ZERO_BYTE,
					"expected zero byte for memory index, got 0x%x", b);
			}
			checkIndex(pt, "memory index", 0, module.memories.size());
			return 0;
		}
	}
	def readGlobal() -> (int, GlobalDecl) {
		return readIndex("global index", module.globals);
	}
	def readIndex<T>(quantity: string, space: IndexSpace<T>) -> (int, T) {
		var t = readAndCheckIndex(quantity, space.size());
		return (t.1, if(t.0, space[t.1]));
	}
	def readAndCheckIndex(quantity: string, max: int) -> (bool, int) {
		var pt = decoder.pos;
		var index = decoder.read_u32leb();
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.putd(index).ln();
			flush();
		}
		return checkIndex(pt, quantity, index, max);
	}
	def checkIndex(pt: int, quantity: string, index: u32, max: int) -> (bool, int) {
		if (index >= max) {
			err.fail3(pt, WasmError.OOB_INDEX,
				"%s %d exceeds maximum %d", quantity, index, max);
			return (false, int.!(index));
		}
		return (true, int.!(index));
	}
	def readValueType() -> ValueType {
		var pt = decoder.pos, b = readByte("type constructor", renderTypecon);
		match (b) {
			BpTypecon.I32.code => return ValueType.I32;
			BpTypecon.I64.code => return ValueType.I64;
			BpTypecon.F32.code => return ValueType.F32;
			BpTypecon.F64.code => return ValueType.F64;
			BpTypecon.VEC128.code => return ValueType.VEC128;
			BpTypecon.AnyRef.code => return ValueType.ANYREF;
		}
		err.fail1(pt, WasmError.INVALID_TYPE,
			"invalid value type 0x%x", b);
		return ValueType.I32;
	}
	def readU32(quantity: string, min: u32, max: u32) -> u32 {
		var pt = decoder.pos;
		var val = decoder.read_u32leb();
		if (eof) return 0;
		if (val < min) err.fail3(pt, WasmError.EXCEEDED_LIMIT,
			"%s %d exceeds minimum %d", quantity, val, min);
		if (val > max) err.fail3(pt, WasmError.EXCEEDED_LIMIT,
			"%s %d exceeds maximum %d", quantity, val, max);
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.putd(val).ln();
			flush();
		}
		return val;
	}
	def readU64(quantity: string) -> u64 {
		var pt = decoder.pos;
		var val = decoder.read_u64leb();
		if (eof) return 0;
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.putd(val).ln();
			flush();
		}
		return val;
	}
	def readUtf8String(quantity: string) -> string {
		var len = readU32("string length", 0, limits.max_module_size);
		var pt = decoder.pos;
		var str = decoder.read_bytes(int.!(len));
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.puts("\"");
			var max = 24;
			var count = decoder.pos - pt;
			for (i = 0; i < count && i < max; i++) {
				trace.put1("%c", toPrintableChar(decoder.data[pt + i]));
			}
			trace.puts("\"\n");
			flush();
		}
		if (!Utf8.validate(str)) err.fail(pt, WasmError.INVALID_UTF8_STRING, "invalid utf-8 string");
		return str;
	}
	def invalidUtf8(pt: int, str: string) -> string {
		err.fail(pt, WasmError.INVALID_UTF8_STRING, "invalid utf-8 string");
		return str;
	}
	def readByte(quantity: string, render: (StringBuffer, byte) -> StringBuffer) -> byte {
		var pt = decoder.pos;
		var r = decoder.read_u8();
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.put2("%d (%q)\n", r, render(_, r));
			flush();
		}
		return r;
	}

	// skip an immediate of the given kind and return its size
	def skipImm(kind: ImmKind) -> int {
		var pt = decoder.pos;
		match (kind) {
			NONE => ;
			BLOCK_TYPE => readBlockType();
			LABEL => readLabel();
			LABELS => readLabels();
			FUNC_INDEX => readFunc();
			SIG_TABLE_INDEX => { readSig(); readTableIndex(); }
			LOCAL_INDEX => readLocalIndex();
			GLOBAL_INDEX => readGlobal();
			MEMORY_INDEX => readMemoryIndex();
			MEMARG => readMemoryArg();
			I32 => readI32();
			I64 => readI64();
			F32 => readF32();
			F64 => readF64();
		}
		return decoder.pos - pt;
	}
	def readBlockType() -> TypeDecl.Function {
		var pt = decoder.pos, b = readByte("block type", renderTypecon);
		match (b) {
			BpTypecon.EmptyBlock.code => return SigCache.v_v;
			BpTypecon.I32.code => return SigCache.v_i;
			BpTypecon.I64.code => return SigCache.v_l;
			BpTypecon.F32.code => return SigCache.v_f;
			BpTypecon.F64.code => return SigCache.v_d;
			BpTypecon.VEC128.code => return FUNC_VEC128;
			BpTypecon.AnyRef.code => return FUNC_ANYREF;
		}
		decoder.at(pt); // backup and try again as full signed LEB
		var index = decoder.read_i32leb(), r = SigCache.v_v;
		if (index < 0 || index > module.types.size()) {
			err.fail1(pt, WasmError.INVALID_BLOCK_TYPE,
				"invalid block type %d", index);
			return r;
		}
		var t = module.types[index];
		if (TypeDecl.Function.?(t)) {
			return TypeDecl.Function.!(t);
		} else {
			var d: TypeDecl.Function;
			err.fail1(pt, WasmError.ILLEGAL_BLOCK_TYPE,
				"expected type index %d to be a function", index);
			return r;
		}
	}
	def readLabel() -> u32 {
		var depth = decoder.read_u32leb();
		return depth;
	}
	def readLabels() -> Array<u32> {
		var pt = decoder.pos;
		var count = decoder.read_u32leb(), max = limits.max_func_size;
		if (count > max) {
			err.fail2(pt, WasmError.EXCEEDED_LIMIT,
				"target count %d exceeds maximum %d", count, max);
			return null;
		}
		var length = int.!(count + 1);
		var result = Array<u32>.new(length);
		for (i < length) result[i] = decoder.read_u32leb();
		return result;
	}
	def readLocalIndex() -> u32 {
		var index = decoder.read_u32leb();
		return index;
	}
	def readMemoryArg() -> (u32, int, u32) {
		var pt = decoder.pos;
		var flags = readU32("memarg flags", 0, u32.max); // TODO render
		var mem_index = 0;
		if (extensions.MULTI_MEMORY && (flags & 0x40) != 0) {
			mem_index = readMemoryIndex();
			flags ^= 0x40;  // flip flag back
		} else {
			checkIndex(pt, "memory index", 0, module.memories.size());
		}
		var offset = readU32("memarg offset", 0, u32.max);
		return (flags, mem_index, offset);
	}
	def readI32() -> i32 {
		var val = decoder.read_i32leb();
		return val;
	}
	def readI64() -> i64 {
		var val = decoder.read_i64leb();
		return val;
	}
	def readF32() -> u32 {
		var val = decoder.read_u32();
		return val;
	}
	def readF64() -> u64 {
		var val = decoder.read_u64();
		return val;
	}
	def readLimits(quantity: string, limit: u32) -> (int, int) {
		var flags = readByte("flags", renderLimitFlags);
		var min = readU32("initial", 0, limit);
		var has_max = (flags & 1) == 1;
		var max = -1;
		if (has_max) {
			var pt = decoder.pos;
			max = int.!(readU32("maximum", min, limit));
		}
		return (int.!(min), max);
	}
	def readMemoryLimits(quantity: string, limit: u32) -> (int, int, bool) {
		var pt = decoder.pos;
		var flags = readByte("flags", renderLimitFlags);
		var min = readU32("initial", 0, limit);
		var has_max = (flags & 1) == 1;
		var max = -1, shared = false;
		if (has_max) {
			var pt = decoder.pos;
			max = int.!(readU32("maximum", min, limit));
		}
		if (extensions.ATOMICS) {
			shared = (flags & 2) == 2;
			if (shared && !has_max) {
				err.fail(pt, WasmError.EXPECTED_MAXIMUM,
					"shared memory must have maximum");
			}
		}
		return (int.!(min), max, shared);
	}
	def readElemType() -> ElemType {
		var pt = decoder.pos;
		var b = readByte("element type", renderTypecon);
		var et: ElemType;
		match (b) {
			BpTypecon.AnyFunc.code => et = ElemType.FuncRef;
			BpTypecon.AnyRef.code => et = ElemType.AnyRef;
			_ => err.fail1(pt, WasmError.ILLEGAL_TYPE,
				"invalid table element type 0x%x", b);
		}
		return et;
	}
	def readI32Expr(quantity: string) -> InitExpr {
		var pt = decoder.pos;
		var init = readInitExpr(quantity), vt = init.1;
		if (!ValueTypes.isAssignable(vt, ValueType.I32)) {
			err.fail1(pt, WasmError.TYPE_MISMATCH,
				"expected i32 init expr, got %q",
				ValueTypes.render(_, vt));
		}
		return init.0;
	}
	def readInitExpr(quantity: string) -> (InitExpr, ValueType) {
		var pt = decoder.pos, expr: InitExpr;
		def opcode = readByte("opcode", Opcodes.render);
		var vt: ValueType;
		match (opcode) {
			Opcode.I32_CONST.code => {
				var val = readI32();
				expr = InitExpr.I32(int.!(val));
				vt = ValueType.I32;
			}
			Opcode.I64_CONST.code => {
				var val = readI64();
				expr = InitExpr.I64(long.!(val));
				vt = ValueType.I64;
			}
			Opcode.F32_CONST.code => {
				var val = decoder.read_u32();
				expr = InitExpr.F32(val);
				vt = ValueType.F32;
			}
			Opcode.F64_CONST.code => {
				var val = decoder.read_u64();
				expr = InitExpr.F64(val);
				vt = ValueType.F64;
			}
			Opcode.GLOBAL_GET.code => {
				var g = readGlobal();
				expr = InitExpr.Global(g);
				if (g.1 != null) vt = g.1.valtype;
			}
			_ => {
				err.fail2(pt, WasmError.INVALID_INIT_EXPR,
					"unexpected opcode 0x%x (%q) in init expression", opcode,
					Opcodes.render(_, opcode));
			}
		}
		pt = decoder.pos;
		var end = readByte("end opcode", Opcodes.render);
		if (end != Opcode.END.code) {
			err.fail2(pt, WasmError.INVALID_INIT_EXPR,
				"expected 0x%x (END) opcode, got 0x%x", Opcode.END.code, end);
		}
		return (expr, vt);
	}
	def readTypeDecl(index: int) -> TypeDecl {
		var pt = decoder.pos, invalid: TypeDecl;
		var form = readByte("type constructor", renderTypecon);
		if (form != BpTypecon.Function.code) {
			err.fail2(pt, WasmError.INVALID_TYPE,
				"invalid type 0x%x, expected function (0x%x)",
				form, BpTypecon.Function.code);
			return invalid;
		}
		pt = decoder.pos;
		var param_count = readU32("param count", 0, limits.max_num_func_params);
		if (!err.ok()) return invalid;
		var ptypes = Array<ValueType>.new(int.!(param_count));
		for (j < param_count) {
			ptypes[int.!(j)] = readValueType();
		}
		var ret_count = readU32("result count", 0, limits.max_num_func_results);
		if (!err.ok()) return invalid;
		var rtypes = Array<ValueType>.new(int.!(ret_count));
		for (j < ret_count) {
			rtypes[int.!(j)] = readValueType();
		}
		return TypeDecl.Function(ptypes, rtypes);
	}
	def readImportDecl(index: int) -> ImportDecl {
		var module_name = readUtf8String("import module name");
		var field_name = readUtf8String("import field name");
		var pt = decoder.pos;
		var kind = readByte("import kind", renderImportKind);
		var result: ImportDecl;
		var details: ImportDetails;
		match (kind) {
			BpImportExportKind.Function.code => {
				var sig = readSig();
				var decl = FunctionDecl.new(module.functions.size(), sig.0, sig.1);
				module.functions.imported.put(decl);
				details = ImportDetails.Function(decl);
			}
			BpImportExportKind.Table.code => {
				checkMaxNumTables(pt);
				var et = readElemType();
				var l = readLimits("table", limits.max_table_size);
				var decl = TableDecl.new(module.tables.size(), et, l.0, l.1);
				module.tables.imported.put(decl);
				details = ImportDetails.Table(decl);
			}
			BpImportExportKind.Memory.code => {
				checkMaxNumMemories(pt);
				var l = readMemoryLimits("memory", limits.max_memory_pages);
				var decl = MemoryDecl.new(module.memories.size(), l.0, l.1, l.2);
				module.memories.imported.put(decl);
				details = ImportDetails.Memory(decl);
			}
			BpImportExportKind.Global.code => {
				var t = readValueType();
				var mut = readGlobalFlags();
				var decl = GlobalDecl.new(module.globals.size(), t, mut, InitExpr.I32(0));
				module.globals.imported.put(decl);
				details = ImportDetails.Global(decl);
			}
			_ => err.fail1(pt, WasmError.INVALID_IMPORT_KIND,
				"invalid import kind 0x%x", kind);
		}
		return ImportDecl.new(module_name, field_name, details);
	}
	def readFunctionDecl(index: int) -> FunctionDecl {
		var pt = decoder.pos;
		var sig = readSig();
		return FunctionDecl.new(module.functions.size(), sig.0, sig.1);
	}
	def readTableDecl(index: int) -> TableDecl {
		checkMaxNumTables(decoder.pos);
		var et = readElemType();
		var l = readLimits("table", limits.max_table_size);
		return TableDecl.new(module.tables.size(), et, l.0, l.1);
	}
	def readMemoryDecl(index: int) -> MemoryDecl {
		checkMaxNumMemories(decoder.pos);
		var l = readMemoryLimits("memory", limits.max_memory_pages);
		return MemoryDecl.new(module.memories.size(), l.0, l.1, l.2);
	}
	def readGlobalDecl(index: int) -> GlobalDecl {
		var vt = readValueType();
		var mut = readGlobalFlags();
		var pos = decoder.pos;
		var init = readInitExpr("global initializer"), vti = init.1;
		if (!ValueTypes.isAssignable(vti, vt)) {
			err.fail2(decoder.abs(pos), WasmError.TYPE_MISMATCH,
				"expected type %q in global initializer, got %q",
				ValueTypes.render(_, vt), ValueTypes.render(_, vti));
		}
		return GlobalDecl.new(module.globals.size(), vt, mut, init.0);
	}
	def readGlobalFlags() -> bool {
		var pos = decoder.pos;
		var flags = readByte("flags", renderGlobalFlags);
		if ((flags & 0xFE) != 0) {
			err.fail1(decoder.abs(pos),
				WasmError.INVALID_GLOBAL_FLAGS,"invalid global flags 0x%x", flags);
		}
		return (flags & 1) != 0;
	}
	def readExportDecl(index: int) -> ExportDecl {
		var name = readUtf8String("export name");
		var pt = decoder.pos;
		var kind = readByte("export kind", renderImportKind);
		var details: ExportDetails;
		match (kind) {
			BpImportExportKind.Function.code => {
				var index = readFunc().0;
				details = ExportDetails.Function(index);
			}
			BpImportExportKind.Table.code => {
				var index = readTableIndex();
				details = ExportDetails.Table(index);
			}
			BpImportExportKind.Memory.code => {
				var index = readMemoryIndex();
				details = ExportDetails.Memory(index);
			}
			BpImportExportKind.Global.code => {
				var index = readGlobal().0;
				details = ExportDetails.Global(index);
			}
			_ => err.fail1(pt, WasmError.INVALID_IMPORT_KIND,
				"invalid export kind 0x%x", kind);
		}
		return ExportDecl.new(name, details);
	}
	def readElemDecl(index: int) -> ElemDecl {
		var pt = decoder.pos;
		var flags = readByte("data flags", renderNone);
		var active = true, table_index = 0, init_exprs = false;
		if (extensions.BULK_MEMORY) {
			if ((flags & 1) == 1) active = false;
			if ((flags & 2) == 2) table_index = readTableIndex();
			if ((flags & 4) == 4) init_exprs = true;
		} else if (flags != 0) {
			err.fail1(pt, WasmError.EXPECTED_ZERO_BYTE,
				"expected zero byte for elements, got 0x%x", flags);
		} else {
			table_index = checkIndex(pt, "table index", 0, module.tables.size()).1;
		}
		var offset = readI32Expr("elements offset");
		var count = readU32("element count", 0, limits.max_num_table_entries);
		var details: ElemDetails;
		if (init_exprs) { // init expressions
			var array = Array<InitExpr>.new(int.!(count));
			for (i < int.!(count)) {
				// TODO: typecheck init exprs for elements
				array[i] = readInitExpr("element").0;
			}
			details = ElemDetails.Exprs(array);
		} else {  // function indices
			var array = Array<int>.new(int.!(count));
			for (i < int.!(count)) {
				array[i] = readFunc().0;
			}
			details = ElemDetails.FuncRefs(array);
		}
		return ElemDecl.new(table_index, offset, details, active);
	}
	def readDataDecl(index: int) -> DataDecl {
		var pt = decoder.pos;
		var flags = readByte("data flags", renderNone);
		var active = true, mem_index = 0;
		if (extensions.BULK_MEMORY) {
			if ((flags & 1) == 1) {
				active = false;
				mem_index = readMemoryIndex();
			}
		} else if (flags != 0) {
			err.fail1(pt, WasmError.EXPECTED_ZERO_BYTE,
				"expected zero byte for data segment, got 0x%x", flags);
		}
		checkIndex(pt, "memory index", u32.!(mem_index), module.memories.size());
		var offset = readI32Expr("data element offset");
		var len = readU32("data segment size", 0, limits.max_data_segment_size);
		var data = decoder.read_bytes(int.!(len));
		return DataDecl.new(mem_index, offset, data, active);
	}
	def traceBytes(pt: int, quantity: string) -> StringBuffer {
		if (quantity == null) return trace;
		var count = decoder.pos - pt;
		trace.put1("%x: ", decoder.abs(pt));
		for (i < count) {
			if (i > 0 && (i % 8) == 0) trace.puts("\n          ");
			trace.put1("%x ", decoder.data[pt + i]);
		}
		var rounded = ((count + 7) / 8) * 8;
		for (i < rounded - count) trace.puts("   ");
		trace.put1(" %s = ", quantity);
		return trace;
	}
	def checkMaxNumTables(pt: int) {
		var max = limits.max_num_tables;
		if (module.tables.size() >= max) {
			err.fail1(decoder.abs(pt), WasmError.EXCEEDED_LIMIT,
				"exceeded maximum of %d total tables", max);
		}
	}
	def checkMaxNumMemories(pt: int) {
		var max = limits.max_num_memories;
		if (module.memories.size() >= max) {
			err.fail1(decoder.abs(pt), WasmError.EXCEEDED_LIMIT,
				"exceeded maximum of %d total memories", max);
		}
	}

	def traceBuffer() {
		if (trace == null) return;
		trace.put2("[buf@+%d limit=%d ", decoder.pos, decoder.limit);
		if (eof) trace.puts("eof ");
		if (err.error_pos < int.max) {
			trace.put1("err@+%d ", err.error_pos);
		}
		if (err.error_msg != null) {
			trace.put1("msg=\"%s\"", err.error_msg);
		}
		trace.putc(']').ln();
		flush();
	}

	def toPrintableChar(b: byte) -> byte {
		if (b < ' ' || b > 127) b = '.';
		return b;
	}
	def flush() {
		trace.out(Trace.STDOUT);
		trace.reset();
	}
}
def EMPTY_BYTES = Array<byte>.new(0);

// A finite state machine that implements a push-based parser for binary
// modules. This class handles the decoding of complete sections and
// complete function bodies, invoking callbacks when sections, bodies,
// and the overall module is finished.
class BpFsm extends WasmParser {
	def callback: BpFsmCallback;
	var section_decoder: Decoder;
	var function_decoder: Decoder;

	// Internal state
	var state: BpFsmState;
	var current_pos: int;
	var more = true;
	var accept = false;

	/* TODO: move state from BpFsmState enum to fields here.
	var current_section: BpSection;
	var section_start: int;
	var section_end: int;
	var function_body_count: u32;
	var current_function_body: u32;
	*/
	new(extensions: Extension.set, limits: Limits, err: WasmErrorGen, callback: BpFsmCallback)
			super(extensions, limits, callback.module,
				err,
				Decoder.new(EMPTY_BYTES, err)) {
		decoder.eof_behavior = eof_set_flag;
		section_decoder = Decoder.new(EMPTY_BYTES, err);
		section_decoder.eof_behavior = eof_is_section_overflow;
		function_decoder = Decoder.new(EMPTY_BYTES, err);
		function_decoder.eof_behavior = eof_is_function_overflow;
	}

	def push(x: Array<byte>, xpos: int, xlength: int) {
		eof = false;
		decoder.append(0, x, xpos, xlength);
		decodeLoop();
	}
	def finish() -> BinParserResult {
		eof = false;
		more = false;
		decodeLoop();
		if (accept && err.ok()) return BinParserResult.Ok(callback.module);
		return BinParserResult.Error(err.error_code, callback.module.filename,
				err.error_pos, err.error_msg);
	}

	private def decodeLoop() {
		while (true) {
			advance();
			if (eof) return;
			if (accept) return;
			if (err.error()) return;
		}
	}
	private def advance() {
		current_pos = decoder.pos;
		if (trace != null) {
			trace.put3("@+%d [%d bytes] BpFsm.state=%s\n", abs(),
				decoder.available(), state.name);
			flush();
		}
		match (state) {
			MAGIC => {
				var magic = decoder.read_u32();
				if (eof) return if(!retry(), err.fail(abs(), WasmError.INVALID_HEADER, "EOF: expecting magic word"));
				if (magic != WASM_MAGIC) err.fail2(abs(), WasmError.INVALID_HEADER, "expected magic word %x, got %x", WASM_MAGIC, magic);
				state = BpFsmState.VERSION;
			}
			VERSION => {
				var version = decoder.read_u32();
				if (eof) return if(!retry(), err.fail(abs(), WasmError.INVALID_HEADER, "EOF: expecting wasm version"));
				if (version != WASM_VERSION) err.fail2(abs(), WasmError.INVALID_HEADER, "expected wasm version %x, got %x", WASM_VERSION, version);
				state = BpFsmState.SECTION_START;
			}
			SECTION_START => {
				var b = readByte("section code", renderSectionName);
				if (eof) {
					if (!retry()) accept = true;
					return;
				}
				state = BpFsmState.SECTION(checkSectionCode(b));
			}
			SECTION(kind) => {
				var size = readU32("section size", 0, limits.max_module_size);
				if (eof) return if(!retry(), err_incomplete_section(kind, -1));
				state = BpFsmState.SECTION_WITH_SIZE(kind, size);
			}
			SECTION_WITH_SIZE(kind, size) => {
				match (kind) {
					Code => {
						var count = readU32("function body count", 0, limits.max_num_functions);
						if (eof) return if(!retry(), err_incomplete_section(kind, int.!(size)));
						var abspos = abs();
						callback.beginCodeSection(abspos, count);
						var end = u32.!(abspos) + size;
						if (count == 0) {
							checkSectionLength("code", decoder.abs(decoder.pos), end);
							state = BpFsmState.SECTION_START;
						} else {
							state = BpFsmState.BODY(end, count, 0);
						}
					}
					_ => {
						decoder.sub_bytes(section_decoder, int.!(size));
						if (eof) return if(!retry(), err_incomplete_section(kind, int.!(size)));
						callback.decodeSection(kind, size, section_decoder);
						state = BpFsmState.SECTION_START;
					}
				}
			}
			BODY(end, count, index) => {
				var size = readU32("function body size", 0, limits.max_func_size);
				if (eof) return if(!retry(), err_incomplete_function(index, -1));
				state = BpFsmState.BODY_WITH_SIZE(end, count, index, size);
			}
			BODY_WITH_SIZE(end, count, index, size) => {
				decoder.sub_bytes(function_decoder, int.!(size));
				if (eof) return if(!retry(), err_incomplete_function(index, int.!(size)));
				callback.decodeFunctionBody(index, size, function_decoder);
				var next = index + 1;
				if (next == count) {
					checkSectionLength("code", decoder.abs(decoder.pos), end);
					state = BpFsmState.SECTION_START;
				} else {
					state = BpFsmState.BODY(end, count, index + 1);
				}
			}
		}
	}
	def checkSectionLength(which: string, abs: int, end: u32) {
		if (abs < end) err.fail1(abs, WasmError.INCOMPLETE_SECTION, "%s section shorter than expected", which);
		if (abs > end) err.fail1(abs, WasmError.OVERFLOW_SECTION, "%s section longer than expected", which);
	}
	def retry() -> bool {
		if (more) {
			decoder.pos = current_pos;
			return true;
		}
		return false;
	}
	def checkSectionCode(b: byte) -> BpSection {
		if (!BpConstants.valid_section[b]) {
			err.fail1(abs(),
				WasmError.INVALID_SECTION, "unknown section code 0x%x", b);
		}
		return BpConstants.enum_section[b];
	}
	def eof_is_section_overflow(d: Decoder, pos: int, size: int, msg: string) {
		var buf = StringBuffer.new();
		buf.puts("section overflow: "); // TODO: which section
		buf.put1(msg, size);
		err.fail(d.abs(pos), WasmError.OVERFLOW_SECTION, buf.extract());
	}
	def eof_is_function_overflow(d: Decoder, pos: int, size: int, msg: string) {
		var buf = StringBuffer.new();
		buf.puts("function overflow: "); // TODO: which function
		buf.put1(msg, size);
		err.fail(d.abs(pos), WasmError.OVERFLOW_FUNCTION, buf.extract());
	}
	def abs() -> int {
		return decoder.abs(current_pos);
	}
	def err_incomplete_section(kind: BpSection, size: int) {
		if (size < 0) err.fail1(abs(), WasmError.INCOMPLETE_SECTION, "EOF: incomplete %q section, expected length", renderSectionName(_, kind.code));
		else err.fail2(abs(), WasmError.INCOMPLETE_SECTION, "EOF: incomplete %q section, expected %d bytes", renderSectionName(_, kind.code), size);
	}
	def err_incomplete_function(index: u32, size: int) {
		if (size < 0) err.fail1(abs(), WasmError.INCOMPLETE_FUNCTION_BODY, "EOF: incomplete function body #%d, expected length", index);
		else err.fail2(abs(), WasmError.INCOMPLETE_FUNCTION_BODY, "EOF: incomplete function body #%d, expected %d bytes", index, size);
	}
}
// The callbacks for sections, function bodies, and finishing a module.
class BpFsmCallback(module: Module) {
	def decodeSection(kind: BpSection, size: u32, d: Decoder);
	def beginCodeSection(abspos: int, count: u32) {}
	def decodeFunctionBody(index: u32, size: u32, d: Decoder);
}
// The states for the module parser finite state machine.
type BpFsmState {
	case MAGIC;
	case VERSION;
	case SECTION_START;
	case SECTION(kind: BpSection);
	case SECTION_WITH_SIZE(kind: BpSection, size: u32);
	case BODY(end: u32, count: u32, index: u32);
	case BODY_WITH_SIZE(end: u32, count: u32, index: u32, size: u32);

}
