// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses the binary format of WebAssembly and produces an in-memory module
// representation. The parser uses a "push" model which allows the creator
// to input segments of data into the parser incrementally, e.g. if streaming
// it over a network.
class BinParser(verbose: Verbosity, filename: string) {
	private def module = Module.new();
        private var state = BpState.HEADER;
        private var cur_function: int;
        private var decoder = Decoder.new([]);
        private var size_estimate: int;
        private var declared_code_size: int;
        private var seen_sections = Array<bool>.new(BpSection.Data.tag + 3);
        private var total_module_size: int;
	private var current_section: byte;
	private def V = verbose.tag > Verbosity.SILENT.tag;
	private def buf = StringBuffer.new();

	// Checks whether any error has occured yet and returns {true} if not.
	def ok() -> bool { return decoder.ok() || decoder.eof; }
	// Checks whether any error has occurred yet and returns {true} if so.
        def error() -> bool { return decoder.error() && !decoder.eof; }

	// Push new data into the parser from the specified range. The given array is
        // not modified or retained by this call; internal copies of data are made
        // if necessary. However, do not pass an array that could be concurrently modified.
	def push(x: Array<byte>, xpos: int, xlength: int) -> this {
        	if (decoder.error() && !decoder.eof) return;  // Already hit a non-EOF error.

		total_module_size += xlength;
		if (total_module_size > Limits.max_module_size) {
                	// Enforce maximum module size.
                        FAIL1(decoder.pos, "maximum module size of %d exceeded", Limits.max_module_size);
                	return;
                }
        	if (decoder.available() > 0) {
                	// If there is a remainder, append the new data into it.
                        decoder = decoder.append(size_estimate, x, xpos, xlength);
                } else {
                	// No remainder from previous decoding, decode in-place from caller's buffer.
                        var skipped = decoder.skipped;
                        decoder = Decoder.new(x);
                        decoder.pos = xpos;
                        decoder.limit = xpos + xlength;
                        decoder.skipped = skipped - xpos;
                }

		// Run the decode loop.
        	var prev = decoder.pos;
        	while (decoder.more()) {
			traceBuffer();
	        	match (state) {
        	        	HEADER => readHeader();
                	        SECTIONS => readSection();
                        	FUNCTIONS => readFunctionBody();
	                }
                        if (decoder.eof) break;
                }

		if (decoder.data == x) {
			// If this was an in-place decoding, copy out the remainder into a buffer.
                        decoder = decoder.extract(size_estimate);
                }
        }

	// Finish the decoding of the pushed bytes, returning a valid module
	def finish() -> Decoded<Module> {
		traceBuffer();
		if (!decoder.ok() && !decoder.eof) {
			return Decoded<Module>.new(filename, decoder.error_pos, 0, null,
							decoder.error_msg);
		}
        	match (state) {
                	HEADER => FAIL1(decoder.pos, "incomplete header", ());
                        FUNCTIONS => FAIL1(decoder.pos, "incomplete code section", ());
                        SECTIONS => {
		        	if (decoder.more()) {
                                	FAIL1(decoder.pos, "incomplete %q section", renderSectionName(_, current_section));
		                } else {
                                	checkSectionConstraints();
                                }
                        }
                }
		return Decoded<Module>.new(filename, int.max, total_module_size, module, null);
        }

	private def readHeader() {
        	var p1 = decoder.pos, magic = decoder.read_u32();
		if (decoder.eof) return rewind(p1, 4);                
                if (magic != WASM_MAGIC) {
                	FAIL2(p1, "incorrect Wasm magic word %x, expected %x", magic, WASM_MAGIC);
                        return;
                }
                var p2 = decoder.pos, version = decoder.read_u32();
		if (decoder.eof) return rewind(p2, 4);                
                if (version != WASM_VERSION) {
                	FAIL2(p2, "incorrect Wasm version %d, expected %d", version, magic);
                        return;
                }
                if (decoder.ok()) state = BpState.SECTIONS;
        }

	private def rewind(pos: int, expect: int) {
		if (V) {
			buf.put2("[rewind to +%d, expecting %d]\n", pos, expect);
			flush();
		}
        	decoder.at(pos);
               	size_estimate = if (expect > 0, if (expect < MAX_SIZE_ESTIMATE, expect, MAX_SIZE_ESTIMATE));
        }

	private def readSection() {
        	var start = decoder.pos;
        	var code = readByte("section code", renderSectionName);
		var size = readU32("section size", 0, Limits.max_module_size);
		if (V) {
			buf.put3("=>section code=%d (%q), size=%d\n",
				code, renderSectionName(_, code), size);
			flush();
		}
                if (decoder.eof) return rewind(start, 5);  // size not available yet

		current_section = code;
		var body = decoder.pos;
		// Check for duplicate sections
                if (code != 0 && code < seen_sections.length && seen_sections[code]) {
                	FAIL1(start, "duplicate %s section", renderSectionName(_, code));
                }

                // The code section has a special state; function bodies are handled individually.
                if (code == BpSection.Code.code) {
                	// Transition into reading code section
			start = decoder.pos;
	        	var num_functions = readU32("function body count", 0, Limits.max_num_functions);
                        if (decoder.eof) return rewind(start, 0);
        	        if (num_functions != module.functions.declared.size()) {
                		FAIL2(start, "number of function bodies (%d) != function declarations (%d)",
						num_functions, module.functions.declared.size());
                        	return;
	                }
        	        state = BpState.FUNCTIONS;
                        seen_sections[code] = true;
                        declared_code_size = int.!(size);
			return;
                }
                
                // For all other sections, rewind if they are not complete.
                if (!decoder.check_bytes(int.!(size))) return rewind(start, int.!(size));

		// For valid sections, record that the section has now been seen.
                if (code >= 0 && code < seen_sections.length) {
	                seen_sections[code] = true;
                }
                
                match (code) {
                        0 => readCustomSection(size);
			BpSection.Type.code => readMultiple("types", Limits.max_num_types,
							module.types.declared, readTypeDecl);
			BpSection.Import.code => readMultiple("imports", Limits.max_num_imports,
							module.imports, readImportDecl);
			BpSection.Function.code => readMultiple("functions", Limits.max_num_functions,
							module.functions.declared, readFunctionDecl);
			BpSection.Table.code => readMultiple("tables", Limits.max_num_tables,
							module.tables.declared, readTableDecl);
			BpSection.Memory.code => readMultiple("memories", Limits.max_num_memories,
							module.memories.declared, readMemoryDecl);
			BpSection.Global.code => readMultiple("globals", Limits.max_num_globals,
							module.globals.declared, readGlobalDecl);
			BpSection.Export.code => readMultiple("exports", Limits.max_num_exports,
							module.exports, readExportDecl);
			BpSection.Start.code => readStartSection();
			BpSection.Element.code => readMultiple("elements", Limits.max_num_table_entries,
							module.elems, readElemDecl);
			BpSection.Data.code => readMultiple("data", Limits.max_num_data_segments,
							module.data, readDataDecl);
                        _ => FAIL1(start, "unknown section code %x", code);
               }

		// Check that the size of bytes read equals the section's declared size
                var read = decoder.pos - body;
		traceBuffer();
                if (read < size) {
                	FAIL2(decoder.pos, "section is shorter (%d bytes) than declared size of %d bytes", read, size);
                } else if (read > size) {
                	FAIL2(decoder.pos, "section is longer (%d bytes) than declared size of %d bytes", read, size);
                }
        }

	private def readCustomSection(size: u32) {
        	var start = decoder.pos;
        	var name_len = readU32("name length", 0, Limits.max_module_size);
                var name = decoder.read_bytes(int.!(name_len));
                var payload_len = int.!(size) - (decoder.pos - start);
                var payload = decoder.read_bytes(payload_len);
                module.custom_sections.add(CustomSection.new(name, payload));
        }
	private def readMultiple<T>(thing_name: string, max: u32, vec: Vector<T>, read: int -> T) {
		var count = readU32(thing_name, 0, max);
		if (!decoder.ok()) return;
		if (count < MAX_GROW_SIZE) vec.grow(int.!(count));
		for (index < int.!(count)) {
			if (V) {
				buf.put2("==>%s #%d\n", thing_name, index);
				flush();
			}
			var thing = read(index);
			vec.set(index, thing);
		}
	}
	private def readTypeDecl(index: int) -> TypeDecl {
		var pt = decoder.pos, invalid: TypeDecl;
		var form = readByte("type constructor", renderTypecon);
		if (form != BpTypecon.Function.code) {
			FAIL1(pt, "invalid type %x, expected function (%x)", form);
			return invalid;
		}
		pt = decoder.pos;
		var param_count = readU32("param count", 0, Limits.max_num_func_params);
		if (!decoder.ok()) return invalid;
		var ptypes = Array<ValueType>.new(int.!(param_count));
		for (j < param_count) {
			ptypes[int.!(j)] = readValueType();
		}
		var ret_count = readU32("result count", 0, Limits.max_num_func_results);
		if (!decoder.ok()) return invalid;
		var rtypes = Array<ValueType>.new(int.!(ret_count));
		for (j < ret_count) {
			rtypes[int.!(j)] = readValueType();
		}
		return TypeDecl.Function(ptypes, rtypes);
	}
	private def readValueType() -> ValueType {
		var pt = decoder.pos, b = readByte("type constructor", renderTypecon);
		match (b) {
			BpTypecon.I32.code => return ValueType.I32;
			BpTypecon.I64.code => return ValueType.I64;
			BpTypecon.F32.code => return ValueType.F32;
			BpTypecon.F64.code => return ValueType.F64;
			BpTypecon.VEC128.code => return ValueType.VEC128;
			BpTypecon.AnyRef.code => return ValueType.ANYREF;
		}
		FAIL1(pt, "invalid value type %x", b);
		return ValueType.I32;
	}
	private def readImportDecl(index: int) -> ImportDecl {
		var module_name = readString("import module name");
		var field_name = readString("import field name");
		var pt = decoder.pos;
		var kind = readByte("import kind", renderImportKind);
		var result: ImportDecl;
		var details: ImportDetails;
		match (kind) {
			BpImportExportKind.Function.code => {
				var sig = readSigIndex();
				var decl = FunctionDecl.new(true, sig.0, sig.1);
				module.functions.imported.add(decl);
				details = ImportDetails.Function(decl);
			}
			BpImportExportKind.Table.code => {
				var et = readElemType();
				var l = readLimits("table", Limits.max_table_size);
				var decl = TableDecl.new(true, et, l.0, l.1);
				module.tables.imported.add(decl);
				details = ImportDetails.Table(decl);
			}
			BpImportExportKind.Memory.code => {
				var l = readLimits("memory", Limits.max_memory_pages); // TODO: shared flag
				var decl = MemoryDecl.new(true, l.0, l.1, false);
				module.memories.imported.add(decl);
				details = ImportDetails.Memory(decl);
			}
			BpImportExportKind.Global.code => {
				var t = readValueType();
				var mut = readByte("flags", renderGlobalFlags) != 0;
				var decl = GlobalDecl.new(true, t, mut, InitExpr.I32(0));
				module.globals.imported.add(decl);
				details = ImportDetails.Global(decl);
			}
			_ => FAIL1(pt, "invalid import kind %x", kind);
		}
		return ImportDecl.new(module_name, field_name, details);
	}
	private def readFunctionDecl(index: int) -> FunctionDecl {
		var pt = decoder.pos;
		var sig = readSigIndex();
		return FunctionDecl.new(false, sig.0, sig.1);
	}
	private def readTableDecl(index: int) -> TableDecl {
		var et = readElemType();
		var l = readLimits("table", Limits.max_table_size);
		return TableDecl.new(false, et, l.0, l.1);
	}
	private def readMemoryDecl(index: int) -> MemoryDecl {
		var l = readLimits("memory", Limits.max_memory_pages); // TODO: shared flag
		return MemoryDecl.new(false, l.0, l.1, false);
	}
	private def readGlobalDecl(index: int) -> GlobalDecl {
		var vt = readValueType();
		var mut = readByte("flags", renderGlobalFlags) != 0;
		var init = readInitExpr("global initializer");
		return GlobalDecl.new(false, vt, mut, init);
	}
	private def readExportDecl(index: int) -> ExportDecl {
		var name = readString("export name");
		var pt = decoder.pos;
		var kind = readByte("export kind", renderImportKind);
		var details: ExportDetails;
		match (kind) {
			BpImportExportKind.Function.code => {
				var index = readFuncIndex();
				details = ExportDetails.Function(index);
			}
			BpImportExportKind.Table.code => {
				var index = readTableIndex();
				details = ExportDetails.Table(index);
			}
			BpImportExportKind.Memory.code => {
				var index = readMemoryIndex();
				details = ExportDetails.Memory(index);
			}
			BpImportExportKind.Global.code => {
				var index = readGlobalIndex();
				details = ExportDetails.Global(index);
			}
			_ => FAIL1(pt, "invalid export kind %x", kind);
		}
		return ExportDecl.new(name, details);
	}
	private def readElemDecl(index: int) -> ElemDecl {
		var table_index = readTableIndex();
		var offset = readI32Expr("elements offset");
		var count = readU32("element count", 0, Limits.max_num_table_entries);
		var array = Array<int>.new(int.!(count));
		for (i < int.!(count)) {
			array[i] = readFuncIndex(); // TODO: support init expressions
		}
		var details = ElemDetails.FuncRefs(array);
		var active = true; // TODO(bulk-memory)
		return ElemDecl.new(table_index, offset, details, active);
	}
	private def readDataDecl(index: int) -> DataDecl {
		var mem_index = readMemoryIndex();
		var offset = readI32Expr("data element offset");
		var len = readU32("data segment size", 0, Limits.max_data_segment_size);
		var data = decoder.read_bytes(int.!(len));
		var active = true; // TODO(bulk-memory)
		return DataDecl.new(mem_index, offset, data, active);
	}
	private def readStartSection() {
		module.start_function = readFuncIndex();
	}

	def readU32(quantity: string, min: u32, max: u32) -> u32 {
		var pt = decoder.pos;
		var val = decoder.read_u32leb();
		if (decoder.eof) return 0;
		if (val < min) FAIL2(pt, "exceeded %s minimum %d", quantity, min);
		if (val > max) FAIL2(pt, "exceeded %s maximum %d", quantity, max);
		if (V) {
			outbytes(pt, quantity);
			buf.putd(val).ln();
			flush();
		}
		return val;
	}
	def readU64(quantity: string) -> u64 {
		var pt = decoder.pos;
		var val = decoder.read_u64leb();
		if (decoder.eof) return 0;
		if (V) {
			outbytes(pt, quantity);
			buf.putd(val).ln();
			flush();
		}
		return val;
	}
	def readString(quantity: string) -> string {
		var len = readU32("string length", 0, Limits.max_module_size);
		var str = decoder.read_bytes(int.!(len));
		return str;
	}
	def readLimits(quantity: string, limit: u32) -> (int, int) { // TODO: return (u32, bool, u32)
		var flags = readByte("flags", renderLimitFlags);
		var min = readU32("minimum", 0, limit);
		var has_max = (flags & 1) != 0;
		var max = -1;
		if (has_max) {
			var pt = decoder.pos;
			var m = readU32("maximum", min, limit);
			max = int.!(max);
		}
		return (int.!(min), max);
	}
	def readTableIndex() -> int {
		return readIndex("table index", module.tables).0;
	}
	def readSigIndex() -> (int, TypeDecl.Function) {
		var r = readIndex("signature index", module.types);
		var t = if(TypeDecl.Function.?(r.1), TypeDecl.Function.!(r.1));
		return (r.0, t);
	}
	def readFuncIndex() -> int {
		return readIndex("function index", module.functions).0;
	}
	def readMemoryIndex() -> int {
		return readIndex("memory index", module.memories).0;
	}
	def readGlobalIndex() -> int {
		return readIndex("global index", module.globals).0;
	}
	def readIndex<T>(quantity: string, space: IndexSpace<T>) -> (int, T) {
		var pt = decoder.pos;
		var index = readU32(quantity, 0, u32.!(space.size()));
		var t = if(index < space.size(), space[int.!(index)]);
		return (int.!(index), t);
	}
	def readElemType() -> ElemType {
		var pt = decoder.pos;
		var b = readByte("element type", renderTypecon);
		var et: ElemType;
		match (b) {
			BpTypecon.AnyFunc.code => et = ElemType.FuncRef;
			BpTypecon.AnyRef.code => et = ElemType.AnyRef;
			_ => FAIL1(pt, "invalid table element type %x", b);
		}
		return et;
	}
	def readI32Expr(quantity: string) -> InitExpr {
		var pt = decoder.pos;
		var init = readInitExpr(quantity);
		match (init) {
			I32(val) => ;
			Global(global_index) => {
				var g = module.globals[global_index];
				if (g == null || g.valtype != ValueType.I32) {
					FAIL1(pt, "expected i32 init expr", ());
				}
			}
			_ => FAIL1(pt, "expected i32 init expr", ());
		}
		return init;
	}
	def readInitExpr(quantity: string) -> InitExpr {
		var pt = decoder.pos, expr: InitExpr;
		def opcode = readByte("opcode", WasmOpcodes.render);
		match (opcode) {
			WasmOpcode.I32_CONST.code => {
				var val = readU32("i32 constant", 0, u32.max);
				expr = InitExpr.I32(int.!(val));
			}
			WasmOpcode.I64_CONST.code => {
				var val = readU64("i64 constant");
				expr = InitExpr.I64(long.!(val));
			}
			WasmOpcode.F32_CONST.code => {
				var val = decoder.read_u32();
				expr = InitExpr.F32(val);
			}
			WasmOpcode.F64_CONST.code => {
				var val = decoder.read_u64();
				expr = InitExpr.F64(val);
			}
			WasmOpcode.GLOBAL_GET.code => {
				var val = readGlobalIndex();
				expr = InitExpr.Global(val);
			}
			_ => {
				FAIL2(pt, "unexpected opcode %x (%q) in init expression", opcode,
					WasmOpcodes.render(_, opcode));
			}
		}
		pt = decoder.pos;
		var end = readByte("end opcode", WasmOpcodes.render);
		if (end != WasmOpcode.END.code) {
			FAIL2(pt, "expected %x (END) opcode, got %x", WasmOpcode.END.code, end);
		}
		return expr;
	}
	def readByte(quantity: string, render: (StringBuffer, byte) -> StringBuffer) -> byte {
		var pt = decoder.pos;
		var r = decoder.read_u8();
		if (V) {
			outbytes(pt, quantity);
			buf.put2("%d (%q)\n", r, render(_, r));
			flush();
		}
		return r;
	}

	def outbytes(pt: int, quantity: string) -> StringBuffer {
		if (quantity == null) return buf;
		var count = decoder.pos - pt;
		buf.put1("%x: ", pt + decoder.skipped);
		for (i < count) {
			if (i > 0 && (i % 8) == 0) buf.puts("\n         ");
			buf.put1("%x ", decoder.data[pt + i]); 
		}
		var rounded = ((count + 7) / 8) * 8;
		for (i < rounded - count) buf.puts("   ");
		buf.put1(" %s = ", quantity);
		return buf;
	}

	private def readFunctionBody() {
        	var start = decoder.pos;
        	var size = readU32("function size", 0, Limits.max_func_size);
                if (decoder.eof) return rewind(start, 5);
		var body = decoder.read_bytes(int.!(size));
		if (decoder.eof) return rewind(start, int.!(size));
                var f = module.functions.declared[cur_function++];
                f.body = body;
                if (cur_function == module.functions.declared.size()) {
                	state = BpState.SECTIONS;
                        // TODO: check size of code section against declared size
                }
        }

	private def checkSectionConstraints() {
		// TODO
        }
	private def traceBuffer() {
		buf.put2("[buf@+%d limit=%d", decoder.pos, decoder.limit);
		if (decoder.eof) buf.puts("eof ");
		if (decoder.error_pos < int.max) {
			buf.put1(" err@+%d", decoder.error_pos);
		}
		if (decoder.error_msg != null) {
			buf.put1(" msg=\"%s\"", decoder.error_msg);
		}
		buf.putc(']').ln();
		flush();
	}
	def FAIL1<T>(pt: int, fmt: string, arg: T) {
		decoder.fail_at(pt, fmt, arg);
	}
	def FAIL2<T, U>(pt: int, fmt: string, arg1: T, arg2: U) {
		var msg = Strings.format2(fmt, arg1, arg2);
		decoder.fail_at(pt, msg, ());
	}
	def flush() {
		System.puts(buf.extract());
	}
}
// Internal constants.
def MAX_SIZE_ESTIMATE = 16 * 1024 * 1024;
def MAX_GROW_SIZE = 1000000;
// Header constants.
def WASM_MAGIC = 0x6d736100u;
def WASM_VERSION = 0x01u;
// Selects the amount of tracing output printed by the decoder.
enum Verbosity {
	SILENT,     // no output
	DIAGNOSTIC, // summarizes sections prior to error, verbose near error
	VERBOSE	    // details for everything printed
}
// Used internally in the binary parser.
enum BpState {
	HEADER,
        SECTIONS,
        FUNCTIONS
}
// Section codes.
enum BpSection(code: byte) {
	Unknown(0),
	Type(1),
	Import(2),
	Function(3),
	Table(4),
	Memory(5),
	Global(6),
	Export(7),
	Start(8),
	Element(9),
	Code(10),
	Data(11),
}
def renderSectionName(buf: StringBuffer, b: byte) -> StringBuffer {
	var s = "unknown";
	match (b) {
		BpSection.Type.code => s = "type";
		BpSection.Import.code => s = "import";
		BpSection.Function.code => s = "function";
		BpSection.Table.code => s = "table";
		BpSection.Memory.code => s = "memory";
		BpSection.Global.code => s = "global";
		BpSection.Export.code => s = "export";
		BpSection.Start.code => s = "start";
		BpSection.Element.code => s = "element";
		BpSection.Code.code => s = "code";
		BpSection.Data.code => s = "data";
	}
	return buf.puts(s);
}
// Import/export kind codes.
enum BpImportExportKind(code: byte) {
	Function(0),
	Table(1),
	Memory(2),
	Global(3)
}
def renderImportKind(buf: StringBuffer, b: byte) -> StringBuffer {
	var s = "unknown";
	match (b) {
		BpImportExportKind.Function.code => s = "function";
		BpImportExportKind.Table.code => s = "table";
		BpImportExportKind.Memory.code => s = "memory";
		BpImportExportKind.Global.code => s = "global";
	}
	return buf.puts(s);
}
// Type constructor codes.
enum BpTypecon(code: byte) {
	I32(0x7F),
        I64(0x7E),
        F32(0x7D),
        F64(0x7C),
        VEC128(0x7B), // ext:simd
	AnyFunc(0x70),
        AnyRef(0x6F), // ext:reference-types
	Function(0x60),
	EmptyBlock(0x40)
}
def renderTypecon(buf: StringBuffer, b: byte) -> StringBuffer {
	var s = "unknown";
	match (b) {
		BpTypecon.I32.code => s = "i32";
		BpTypecon.I64.code => s = "i64";
		BpTypecon.F32.code => s = "f32";
		BpTypecon.F64.code => s = "f64";
		BpTypecon.VEC128.code => s = "vec128";
		BpTypecon.AnyFunc.code => s = "anyfunc";
		BpTypecon.AnyRef.code => s = "anyref";
		BpTypecon.Function.code => s = "func";
		BpTypecon.EmptyBlock.code => s = "empty";
	}
	return buf.puts(s);
}
def renderNone(buf: StringBuffer, b: byte) -> StringBuffer {
	return buf;
}
def renderGlobalFlags = renderNone; // TODO
def renderLimitFlags(buf: StringBuffer, b: byte) -> StringBuffer {
	if ((b & 1) == 1) buf.puts("has_max");
	return buf;
}
