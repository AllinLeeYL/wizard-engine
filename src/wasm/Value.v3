// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// WebAssembly program values.
type Value {
	case Null;
	case ExternRef(val: HostObject);
	case FuncRef(val: Function);
	case I32(val: u32);
	case I64(val: u64);
	case F32(bits: u32);
	case F64(bits: u64);
}
// Reasons a WebAssembly execution has trapped.
enum TrapReason {
	NONE,
	UNREACHABLE,
	MEM_OUT_OF_BOUNDS,
	UNALIGNED_ACCESS,
	DIV_BY_ZERO,
	DIV_UNREPRESENTABLE,
	REM_BY_ZERO,
	FLOAT_UNREPRESENTABLE,
	FUNC_INVALID,
	FUNC_SIG_MISMATCH,
	DATA_SEGMENT_DROPPED,
	ELEM_SEGMENT_DROPPED,
	TABLE_OUT_OF_BOUNDS,
	TABLE_INDEX_OUT_OF_BOUNDS,
	STACK_OVERFLOW,
	UNIMPLEMENTED,
	ERROR
}
// Utilities associated with values.
component Values {
	def I32_1 = Value.I32(1);
	def I32_0 = Value.I32(0);
	def I64_0 = Value.I64(0);
	def F32_0 = Value.F32(0);
	def F64_0 = Value.F64(0);
	def F32_minus_0 = Value.F32(0x80000000);
	def F64_minus_0 = Value.F64(0x8000000000000000);
	def F32_nan = Value.F32(0x7fc00000);
	def F64_nan = Value.F64(0x7ff8000000000000);
	def F32_infinity = Value.F32(0x7f800000);
	def F64_infinity = Value.F64(0x7ff0000000000000);
	def F32_minus_infinity = Value.F32(0xff800000);
	def F64_minus_infinity = Value.F64(0xfff0000000000000);
	def NONE = Array<Value>.new(0);

	def render(buf: StringBuilder, v: Value) -> StringBuilder {
		match (v) {
			Null => buf.puts("<null>");
			ExternRef(val) => buf.puts("<externref>");
			FuncRef(val) => {
				if (WasmFunction.?(val)) {
					var wf = WasmFunction.!(val);
					buf.put1("<funcref: #%d>", wf.decl.index);
				} else if (HostFunction.?(val)) {
					buf.puts("<funcref: host>");
				} else {
					buf.puts("<funcref: null>");
				}
			}
			I32(val) => buf.put1("%d", val);
			I64(val) => buf.put1("%duL", val);
			F32(val) => buf.put1("f32:%x", val);
			F64(val) => buf.put1("f64:%x", val);
		}
		return buf;
	}
	def default(t: ValueType) -> Value {
		var v: Value;
		match (t) {
			I32 => v = I32_0;
			I64 => v = I64_0;
			F32 => v = F32_0;
			F64 => v = F64_0;
			VEC128 => v = Value.Null;  // TODO: default value for SIMD
			FUNCREF, EXTERNREF => v = Value.Null;
			Function(p, r) => v = Value.Null;
		}
		return v;
	}
	def v_i(v: Value) -> i32 { return i32.view(Value.I32.!(v).val); }
	def v_u(v: Value) -> u32 { return Value.I32.!(v).val; }
	def v_f(v: Value) -> u32 { return Value.F32.!(v).bits; }
	def v_d(v: Value) -> u64 { return Value.F64.!(v).bits; }
	def v_l(v: Value) -> i64 { return i64.view(Value.I64.!(v).val); }
	def v_w(v: Value) -> u64 { return Value.I64.!(v).val; }

	def i_v(v: i32) -> Value { return Value.I32(u32.!(v)); }
	def u_v(v: u32) -> Value { return Value.I32(v); }
	def l_v(v: i64) -> Value { return Value.I64(u64.!(v)); }
	def w_v(v: u64) -> Value { return Value.I64(v); }

	def f32(sign: int, exp: int, mantissa: u32) -> Value.F32 {
		var bits = if(sign != 0, 0x80000000u);
		if (exp < -149) return Value.F32(bits);
		if (exp <= -127) {
			// subnormal; make implicit 1 explicit and shift right
			mantissa = 0x80000000u | mantissa >> 1;
			mantissa = mantissa >> u5.view(-127 - exp);
			exp = -127;
		} else if (exp >= 128) {
			// saturate large exponents to infinity
			return if (sign != 0, F32_minus_infinity, F32_infinity);
		}
		bits |= (u32.view(u8.view(exp + 127)) << 23);
		bits |= u32.view(mantissa >> 9);
		return Value.F32(bits);
	}
	def f64(sign: int, exp: int, mantissa: u64) -> Value.F64 {
		var bits = if(sign != 0, 0x8000000000000000ul);
		if (exp < -1076) return Value.F64(bits);
		if (exp <= -1023) {
			// subnormal; make implicit 1 explicit and shift right
			mantissa = 0x8000000000000000ul | mantissa >> 1;
			mantissa = mantissa >> u6.view(-1023 - exp);
			exp = -1023;
		} else if (exp >= 1024) {
			// saturate large exponents to infinity
			return if (sign != 0, F64_minus_infinity, F64_infinity);
		}
		bits |= (u64.view(u11.view(exp + 1023)) << 52);
		bits |= mantissa >> 12;
		return Value.F64(bits);
	}
	def f32nan(sign: int, mantissa: u32) -> Value.F32 {
		var bits = if(sign != 0, 0x80000000u);
		bits |= (u32.view(u8.view(255)) << 23);
		bits |= u32.view(mantissa >> 9);
		return Value.F32(bits);
	}
	def f64nan(sign: int, mantissa: u64) -> Value.F64 {
		var bits = if(sign != 0, 0x8000000000000000ul);
		bits |= (u64.view(u11.view(2047)) << 52);
		bits |= mantissa >> 12;
		return Value.F64(bits);
	}
}
