// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

type Value {
	case Nil;
	case I32(val: u32);
	case I64(val: u64);
	case F32(bits: u32);
	case F64(bits: u64);
}
enum TrapReason {
	NONE,
	UNREACHABLE,
	MEM_OUT_OF_BOUNDS,
	UNALIGNED_ACCESS,
	DIV_BY_ZERO,
	DIV_UNREPRESENTABLE,
	REM_BY_ZERO,
	FLOAT_UNREPRESENTABLE,
	FUNC_INVALID,
	FUNC_SIG_MISMATCH,
	DATA_SEGMENT_DROPPED,
	ELEM_SEGMENT_DROPPED,
	TABLE_OUT_OF_BOUNDS,
	ERROR
}
component Values {
	def I32_1 = Value.I32(1);
	def I32_0 = Value.I32(0);
	def I64_0 = Value.I64(0);
	def F32_0 = Value.F32(0);
	def F64_0 = Value.F64(0);

	def render(buf: StringBuffer, v: Value) -> StringBuffer {
		match (v) {
			Nil => buf.puts("(nil)");
			I32(val) => buf.put1("%d", val);
			I64(val) => buf.put1("%duL", val);
			F32(val) => buf.put1("f32:%x", val);
			F64(val) => buf.put1("f64:%x", val);
		}
		return buf;
	}
	def default(t: ValueType) -> Value {
		var v: Value;
		match (t) {
			I32 => v = I32_0;
			I64 => v = I64_0;
			F32 => v = F32_0;
			F64 => v = F64_0;
			_ => v = Value.Nil;
		}
		return v;
	}
	def v_i(v: Value) -> i32 { return i32.!(Value.I32.!(v).val); }
	def v_u(v: Value) -> u32 { return Value.I32.!(v).val; }
	def v_l(v: Value) -> i64 { return i64.!(Value.I64.!(v).val); }
	def v_w(v: Value) -> u64 { return Value.I64.!(v).val; }

	def i_v(v: i32) -> Value { return Value.I32(u32.!(v)); }
	def u_v(v: u32) -> Value { return Value.I32(v); }
	def l_v(v: i64) -> Value { return Value.I64(u64.!(v)); }
	def w_v(v: u64) -> Value { return Value.I64(v); }
}