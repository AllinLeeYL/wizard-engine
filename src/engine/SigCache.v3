// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Caches commonly-used signatures for convenience and to save memory.
// Type abbreviations:
//    i=i32    l=i64   f=f32   d=f64   e=externref   g=funcref
component SigCache {
	def none: ValueType.Function;

	def arr_v: Array<ValueType> = [];
	def arr_ii: Array<ValueType> = [ValueType.I32, ValueType.I32];
	def arr_iii: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32];
	def arr_il: Array<ValueType> = [ValueType.I32, ValueType.I64];
	def arr_if: Array<ValueType> = [ValueType.I32, ValueType.F32];
	def arr_id: Array<ValueType> = [ValueType.I32, ValueType.F64];
	def arr_i: Array<ValueType> = [ValueType.I32];
	def arr_e: Array<ValueType> = [ValueType.EXTERNREF];
	def arr_g: Array<ValueType> = [ValueType.FUNCREF];

	def arr_ll: Array<ValueType> = [ValueType.I64, ValueType.I64];
	def arr_l: Array<ValueType> = [ValueType.I64];

	def arr_ff: Array<ValueType> = [ValueType.F32, ValueType.F32];
	def arr_f: Array<ValueType> = [ValueType.F32];

	def arr_dd: Array<ValueType> = [ValueType.F64, ValueType.F64];
	def arr_d: Array<ValueType> = [ValueType.F64];

	def v_v = ValueType.Function(arr_v, arr_v);

	def i_v = ValueType.Function(arr_i, arr_v);
	def l_v = ValueType.Function(arr_l, arr_v);

	def v_i = ValueType.Function(arr_v, arr_i);
	def v_l = ValueType.Function(arr_v, arr_l);
	def v_f = ValueType.Function(arr_v, arr_f);
	def v_d = ValueType.Function(arr_v, arr_d);

	def i_i = ValueType.Function(arr_i, arr_i);
	def i_l = ValueType.Function(arr_i, arr_l);
	def i_f = ValueType.Function(arr_i, arr_f);
	def i_d = ValueType.Function(arr_i, arr_d);
	def ii_i = ValueType.Function(arr_ii, arr_i);
	def iii_i = ValueType.Function(arr_iii, arr_i);
	def iii_v = ValueType.Function(arr_iii, arr_v);
	def ii_v = ValueType.Function(arr_ii, arr_v);
	def il_v = ValueType.Function(arr_il, arr_v);
	def if_v = ValueType.Function(arr_if, arr_v);
	def id_v = ValueType.Function(arr_id, arr_v);

	def l_l = ValueType.Function(arr_l, arr_l);
	def l_i = ValueType.Function(arr_l, arr_i);
	def l_f = ValueType.Function(arr_l, arr_f);
	def l_d = ValueType.Function(arr_l, arr_d);
	def ll_l = ValueType.Function(arr_ll, arr_l);
	def ll_i = ValueType.Function(arr_ll, arr_i);

	def f_i = ValueType.Function(arr_f, arr_i);
	def f_l = ValueType.Function(arr_f, arr_l);
	def f_f = ValueType.Function(arr_f, arr_f);
	def f_d = ValueType.Function(arr_f, arr_d);
	def ff_f = ValueType.Function(arr_ff, arr_f);
	def ff_i = ValueType.Function(arr_ff, arr_i);

	def d_i = ValueType.Function(arr_d, arr_i);
	def d_l = ValueType.Function(arr_d, arr_l);
	def d_f = ValueType.Function(arr_d, arr_f);
	def d_d = ValueType.Function(arr_d, arr_d);
	def dd_d = ValueType.Function(arr_dd, arr_d);
	def dd_i = ValueType.Function(arr_dd, arr_i);

	def v_e = ValueType.Function(arr_v, arr_e);
	def v_g = ValueType.Function(arr_v, arr_g);
	def e_v = ValueType.Function(arr_e, arr_v);
	def g_v = ValueType.Function(arr_g, arr_v);
	def e_i = ValueType.Function(arr_e, arr_i);
	def g_i = ValueType.Function(arr_g, arr_i);
}
