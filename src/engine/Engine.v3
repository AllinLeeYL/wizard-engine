// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A WebAssembly engine instance that contains a list of extensions and options.
class Engine {
	var extensions: Extension.set;
	def filterOptions(args: Array<string>) {
		for (i < args.length) {
			if (parseOption(args[i])) args[i] = null;
		}
	}
	def parseOption(arg: string) -> bool {
		if (arg == null) return false;
		if (arg.length < 1 || arg[0] != '-') return false;
		if (Trace.parseOption(arg)) return true;
		if (Strings.startsWith(arg, "-ext:")) {
			if (Strings.endsWithFrom(arg, 5, "all")) {
				extensions = Extension.set.all;
				return true;
			}
			for (e in Extension) {
				if (Strings.endsWithFrom(arg, 5, e.short_name)) {
					extensions |= e;
					return true;
				}
			}
		}
		return false;
	}
	def loadWasmFile(path: string) -> FileLoadResult {
		var data = System.fileLoad(path);
		if (data == null) return FileLoadResult.FileNotFound(path);
		var limits = Limits.new().set(extensions);
		var r = BinParser.new(extensions, limits, path)
			.push(data, 0, data.length)
			.finish();
		match (r) {
			Ok(module) =>
				return FileLoadResult.Ok(module);
			Error(code, filename, error_pos, error_msg) =>
				return FileLoadResult.ParseError(code, filename, error_pos, error_msg);
		}
	}
}
type FileLoadResult {
	case Ok(module: Module);
	case FileNotFound(path: string);
	case ParseError(code: WasmError, path: string, error_pos: int, error_msg: string);
}