// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def sig: SigCache;
// An enumeration of the WebAssembly opcodes, including their mnenomic names,
// the kind of immediate expected, and the (monomorphic) operator signature.
enum Opcode(prefix: u8, code: u8, mnemonic: string, imms: Array<ImmKind>, sig: SigDecl) {
	// Control and calls.
	UNREACHABLE		(0x00, 0x00, "unreachable", ImmSigs.NONE, null),
	NOP			(0x00, 0x01, "nop", ImmSigs.NONE, SigCache.v_v),
	BLOCK			(0x00, 0x02, "block", ImmSigs.BLOCKT, null),
	LOOP			(0x00, 0x03, "loop", ImmSigs.BLOCKT, null),
	IF			(0x00, 0x04, "if", ImmSigs.BLOCKT, null),
	ELSE			(0x00, 0x05, "else", ImmSigs.NONE, null),
	TRY			(0x00, 0x06, "try", ImmSigs.BLOCKT, null),
	CATCH			(0x00, 0x07, "catch", ImmSigs.NONE, null),
	THROW			(0x00, 0x08, "throw", ImmSigs.EVENT, null),
	RETHROW			(0x00, 0x09, "rethrow", ImmSigs.NONE, null),
	BR_ON_EXN		(0x00, 0x0A, "br_on_exn", ImmSigs.LABEL_EVENT, null),
	END			(0x00, 0x0B, "end", ImmSigs.NONE, null),
	BR			(0x00, 0x0C, "br", ImmSigs.LABEL, null),
	BR_IF			(0x00, 0x0D, "br_if", ImmSigs.LABEL, null),
	BR_TABLE		(0x00, 0x0E, "br_table", ImmSigs.LABELS, null),
	RETURN			(0x00, 0x0F, "return", ImmSigs.NONE, null),
	CALL			(0x00, 0x10, "call", ImmSigs.FUNC, null),
	CALL_INDIRECT		(0x00, 0x11, "call_indirect", ImmSigs.SIG_TABLE, null),
	RETURN_CALL		(0x00, 0x12, "return_call", ImmSigs.FUNC, null),
	RETURN_CALL_INDIRECT	(0x00, 0x13, "return_call_indirect", ImmSigs.SIG_TABLE, null),
	CALL_REF		(0x00, 0x14, "call_ref", ImmSigs.NONE, null),
	RETURN_CALL_REF		(0x00, 0x15, "return_call_ref", ImmSigs.NONE, null),
	FUNC_BIND		(0x00, 0x16, "func.bind", ImmSigs.SIG, null),
	LET			(0x00, 0x17, "let", ImmSigs.BLOCKT_LOCDECL, null),
	DROP			(0x00, 0x1A, "drop", ImmSigs.NONE, null),
	SELECT			(0x00, 0x1B, "select", ImmSigs.NONE, null),
	SELECT_T		(0x00, 0x1C, "select", ImmSigs.VALTS, null),
	// Locals.
	LOCAL_GET		(0x00, 0x20, "local.get", ImmSigs.LOCAL, null),
	LOCAL_SET		(0x00, 0x21, "local.set", ImmSigs.LOCAL, null),
	LOCAL_TEE		(0x00, 0x22, "local.tee", ImmSigs.LOCAL, null),
	// Globals.
	GLOBAL_GET		(0x00, 0x23, "global.get", ImmSigs.GLOBAL, null),
	GLOBAL_SET		(0x00, 0x24, "global.set", ImmSigs.GLOBAL, null),
	// Table elems.
	TABLE_GET		(0x00, 0x25, "table.get", ImmSigs.TABLE, null),
	TABLE_SET		(0x00, 0x26, "table.set", ImmSigs.TABLE, null),
	// Loads and stores.
	I32_LOAD		(0x00, 0x28, "i32.load", ImmSigs.MEMARG, sig.i_i),
	I64_LOAD		(0x00, 0x29, "i64.load", ImmSigs.MEMARG, sig.i_l),
	F32_LOAD		(0x00, 0x2A, "f32.load", ImmSigs.MEMARG, sig.i_f),
	F64_LOAD		(0x00, 0x2B, "f64.load", ImmSigs.MEMARG, sig.i_d),
	I32_LOAD8_S		(0x00, 0x2C, "i32.load8_s", ImmSigs.MEMARG, sig.i_i),
	I32_LOAD8_U		(0x00, 0x2D, "i32.load8_u", ImmSigs.MEMARG, sig.i_i),
	I32_LOAD16_S		(0x00, 0x2E, "i32.load16_s", ImmSigs.MEMARG, sig.i_i),
	I32_LOAD16_U		(0x00, 0x2F, "i32.load16_u", ImmSigs.MEMARG, sig.i_i),
	I64_LOAD8_S		(0x00, 0x30, "i64.load8_s", ImmSigs.MEMARG, sig.i_l),
	I64_LOAD8_U		(0x00, 0x31, "i64.load8_u", ImmSigs.MEMARG, sig.i_l),
	I64_LOAD16_S		(0x00, 0x32, "i64.load16_s", ImmSigs.MEMARG, sig.i_l),
	I64_LOAD16_U		(0x00, 0x33, "i64.load16_u", ImmSigs.MEMARG, sig.i_l),
	I64_LOAD32_S		(0x00, 0x34, "i64.load32_s", ImmSigs.MEMARG, sig.i_l),
	I64_LOAD32_U		(0x00, 0x35, "i64.load32_u", ImmSigs.MEMARG, sig.i_l),
	I32_STORE		(0x00, 0x36, "i32.store", ImmSigs.MEMARG, sig.ii_v),
	I64_STORE		(0x00, 0x37, "i64.store", ImmSigs.MEMARG, sig.il_v),
	F32_STORE		(0x00, 0x38, "f32.store", ImmSigs.MEMARG, sig.if_v),
	F64_STORE		(0x00, 0x39, "f64.store", ImmSigs.MEMARG, sig.id_v),
	I32_STORE8		(0x00, 0x3A, "i32.store8", ImmSigs.MEMARG, sig.ii_v),
	I32_STORE16		(0x00, 0x3B, "i32.store16", ImmSigs.MEMARG, sig.ii_v),
	I64_STORE8		(0x00, 0x3C, "i64.store8", ImmSigs.MEMARG, sig.il_v),
	I64_STORE16		(0x00, 0x3D, "i64.store16", ImmSigs.MEMARG, sig.il_v),
	I64_STORE32		(0x00, 0x3E, "i64.store32", ImmSigs.MEMARG, sig.il_v),
	// Misc memory.
	MEMORY_SIZE		(0x00, 0x3F, "memory.size", ImmSigs.MEMORY, sig.v_i),
	MEMORY_GROW		(0x00, 0x40, "memory.grow", ImmSigs.MEMORY, sig.i_i),
	// Constants.
	I32_CONST		(0x00, 0x41, "i32.const", ImmSigs.I32, null),
	I64_CONST		(0x00, 0x42, "i64.const", ImmSigs.I64, null),
	F32_CONST		(0x00, 0x43, "f32.const", ImmSigs.F32, null),
	F64_CONST		(0x00, 0x44, "f64.const", ImmSigs.F64, null),
	// Comparisons.
	I32_EQZ			(0x00, 0x45, "i32.eqz", ImmSigs.NONE, sig.i_i),
	I32_EQ			(0x00, 0x46, "i32.eq", ImmSigs.NONE, sig.ii_i),
	I32_NE			(0x00, 0x47, "i32.ne", ImmSigs.NONE, sig.ii_i),
	I32_LT_S		(0x00, 0x48, "i32.lt_s", ImmSigs.NONE, sig.ii_i),
	I32_LT_U		(0x00, 0x49, "i32.lt_u", ImmSigs.NONE, sig.ii_i),
	I32_GT_S		(0x00, 0x4A, "i32.gt_s", ImmSigs.NONE, sig.ii_i),
	I32_GT_U		(0x00, 0x4B, "i32.gt_u", ImmSigs.NONE, sig.ii_i),
	I32_LE_S		(0x00, 0x4C, "i32.le_s", ImmSigs.NONE, sig.ii_i),
	I32_LE_U		(0x00, 0x4D, "i32.le_u", ImmSigs.NONE, sig.ii_i),
	I32_GE_S		(0x00, 0x4E, "i32.ge_s", ImmSigs.NONE, sig.ii_i),
	I32_GE_U		(0x00, 0x4F, "i32.ge_u", ImmSigs.NONE, sig.ii_i),
	I64_EQZ			(0x00, 0x50, "i64.eqz", ImmSigs.NONE, sig.l_i),
	I64_EQ			(0x00, 0x51, "i64.eq", ImmSigs.NONE, sig.ll_i),
	I64_NE			(0x00, 0x52, "i64.ne", ImmSigs.NONE, sig.ll_i),
	I64_LT_S		(0x00, 0x53, "i64.lt_s", ImmSigs.NONE, sig.ll_i),
	I64_LT_U		(0x00, 0x54, "i64.lt_u", ImmSigs.NONE, sig.ll_i),
	I64_GT_S		(0x00, 0x55, "i64.gt_s", ImmSigs.NONE, sig.ll_i),
	I64_GT_U		(0x00, 0x56, "i64.gt_u", ImmSigs.NONE, sig.ll_i),
	I64_LE_S		(0x00, 0x57, "i64.le_s", ImmSigs.NONE, sig.ll_i),
	I64_LE_U		(0x00, 0x58, "i64.le_u", ImmSigs.NONE, sig.ll_i),
	I64_GE_S		(0x00, 0x59, "i64.ge_s", ImmSigs.NONE, sig.ll_i),
	I64_GE_U		(0x00, 0x5A, "i64.ge_u", ImmSigs.NONE, sig.ll_i),
	F32_EQ			(0x00, 0x5B, "f32.eq", ImmSigs.NONE, sig.ff_i),
	F32_NE			(0x00, 0x5C, "f32.ne", ImmSigs.NONE, sig.ff_i),
	F32_LT			(0x00, 0x5D, "f32.lt", ImmSigs.NONE, sig.ff_i),
	F32_GT			(0x00, 0x5E, "f32.gt", ImmSigs.NONE, sig.ff_i),
	F32_LE			(0x00, 0x5F, "f32.le", ImmSigs.NONE, sig.ff_i),
	F32_GE			(0x00, 0x60, "f32.ge", ImmSigs.NONE, sig.ff_i),
	F64_EQ			(0x00, 0x61, "f64.eq", ImmSigs.NONE, sig.dd_i),
	F64_NE			(0x00, 0x62, "f64.ne", ImmSigs.NONE, sig.dd_i),
	F64_LT			(0x00, 0x63, "f64.lt", ImmSigs.NONE, sig.dd_i),
	F64_GT			(0x00, 0x64, "f64.gt", ImmSigs.NONE, sig.dd_i),
	F64_LE			(0x00, 0x65, "f64.le", ImmSigs.NONE, sig.dd_i),
	F64_GE			(0x00, 0x66, "f64.ge", ImmSigs.NONE, sig.dd_i),
	// I32 arithmetic.
	I32_CLZ			(0x00, 0x67, "i32.clz", ImmSigs.NONE, sig.i_i),
	I32_CTZ			(0x00, 0x68, "i32.ctz", ImmSigs.NONE, sig.i_i),
	I32_POPCNT		(0x00, 0x69, "i32.popcnt", ImmSigs.NONE, sig.i_i),
	I32_ADD			(0x00, 0x6A, "i32.add", ImmSigs.NONE, sig.ii_i),
	I32_SUB			(0x00, 0x6B, "i32.sub", ImmSigs.NONE, sig.ii_i),
	I32_MUL			(0x00, 0x6C, "i32.mul", ImmSigs.NONE, sig.ii_i),
	I32_DIV_S		(0x00, 0x6D, "i32.div_s", ImmSigs.NONE, sig.ii_i),
	I32_DIV_U		(0x00, 0x6E, "i32.div_u", ImmSigs.NONE, sig.ii_i),
	I32_REM_S		(0x00, 0x6F, "i32.rem_s", ImmSigs.NONE, sig.ii_i),
	I32_REM_U		(0x00, 0x70, "i32.rem_u", ImmSigs.NONE, sig.ii_i),
	I32_AND			(0x00, 0x71, "i32.and", ImmSigs.NONE, sig.ii_i),
	I32_OR			(0x00, 0x72, "i32.or", ImmSigs.NONE, sig.ii_i),
	I32_XOR			(0x00, 0x73, "i32.xor", ImmSigs.NONE, sig.ii_i),
	I32_SHL			(0x00, 0x74, "i32.shl", ImmSigs.NONE, sig.ii_i),
	I32_SHR_S		(0x00, 0x75, "i32.shr_s", ImmSigs.NONE, sig.ii_i),
	I32_SHR_U		(0x00, 0x76, "i32.shr_u", ImmSigs.NONE, sig.ii_i),
	I32_ROTL		(0x00, 0x77, "i32.rotl", ImmSigs.NONE, sig.ii_i),
	I32_ROTR		(0x00, 0x78, "i32.rotr", ImmSigs.NONE, sig.ii_i),
	// I64 arithmetic.
	I64_CLZ			(0x00, 0x79, "i64.clz", ImmSigs.NONE, sig.l_l),
	I64_CTZ			(0x00, 0x7A, "i64.ctz", ImmSigs.NONE, sig.l_l),
	I64_POPCNT		(0x00, 0x7B, "i64.popcnt", ImmSigs.NONE, sig.l_l),
	I64_ADD			(0x00, 0x7C, "i64.add", ImmSigs.NONE, sig.ll_l),
	I64_SUB			(0x00, 0x7D, "i64.sub", ImmSigs.NONE, sig.ll_l),
	I64_MUL			(0x00, 0x7E, "i64.mul", ImmSigs.NONE, sig.ll_l),
	I64_DIV_S		(0x00, 0x7F, "i64.div_s", ImmSigs.NONE, sig.ll_l),
	I64_DIV_U		(0x00, 0x80, "i64.div_u", ImmSigs.NONE, sig.ll_l),
	I64_REM_S		(0x00, 0x81, "i64.rem_s", ImmSigs.NONE, sig.ll_l),
	I64_REM_U		(0x00, 0x82, "i64.rem_u", ImmSigs.NONE, sig.ll_l),
	I64_AND			(0x00, 0x83, "i64.and", ImmSigs.NONE, sig.ll_l),
	I64_OR			(0x00, 0x84, "i64.or", ImmSigs.NONE, sig.ll_l),
	I64_XOR			(0x00, 0x85, "i64.xor", ImmSigs.NONE, sig.ll_l),
	I64_SHL			(0x00, 0x86, "i64.shl", ImmSigs.NONE, sig.ll_l),
	I64_SHR_S		(0x00, 0x87, "i64.shr_s", ImmSigs.NONE, sig.ll_l),
	I64_SHR_U		(0x00, 0x88, "i64.shr_u", ImmSigs.NONE, sig.ll_l),
	I64_ROTL		(0x00, 0x89, "i64.rotl", ImmSigs.NONE, sig.ll_l),
	I64_ROTR		(0x00, 0x8A, "i64.rotr", ImmSigs.NONE, sig.ll_l),
	// F32 arithmetic.
	F32_ABS			(0x00, 0x8B, "f32.abs", ImmSigs.NONE, sig.f_f),
	F32_NEG			(0x00, 0x8C, "f32.neg", ImmSigs.NONE, sig.f_f),
	F32_CEIL		(0x00, 0x8D, "f32.ceil", ImmSigs.NONE, sig.f_f),
	F32_FLOOR		(0x00, 0x8E, "f32.floor", ImmSigs.NONE, sig.f_f),
	F32_TRUNC		(0x00, 0x8F, "f32.trunc", ImmSigs.NONE, sig.f_f),
	F32_NEAREST		(0x00, 0x90, "f32.nearest", ImmSigs.NONE, sig.f_f),
	F32_SQRT		(0x00, 0x91, "f32.sqrt", ImmSigs.NONE, sig.f_f),
	F32_ADD			(0x00, 0x92, "f32.add", ImmSigs.NONE, sig.ff_f),
	F32_SUB			(0x00, 0x93, "f32.sub", ImmSigs.NONE, sig.ff_f),
	F32_MUL			(0x00, 0x94, "f32.mul", ImmSigs.NONE, sig.ff_f),
	F32_DIV			(0x00, 0x95, "f32.div", ImmSigs.NONE, sig.ff_f),
	F32_MIN			(0x00, 0x96, "f32.min", ImmSigs.NONE, sig.ff_f),
	F32_MAX			(0x00, 0x97, "f32.max", ImmSigs.NONE, sig.ff_f),
	F32_COPYSIGN		(0x00, 0x98, "f32.copysign", ImmSigs.NONE, sig.ff_f),
	// F64 arithmetic.
	F64_ABS			(0x00, 0x99, "f64.abs", ImmSigs.NONE, sig.d_d),
	F64_NEG			(0x00, 0x9A, "f64.neg", ImmSigs.NONE, sig.d_d),
	F64_CEIL		(0x00, 0x9B, "f64.ceil", ImmSigs.NONE, sig.d_d),
	F64_FLOOR		(0x00, 0x9C, "f64.floor", ImmSigs.NONE, sig.d_d),
	F64_TRUNC		(0x00, 0x9D, "f64.trunc", ImmSigs.NONE, sig.d_d),
	F64_NEAREST		(0x00, 0x9E, "f64.nearest", ImmSigs.NONE, sig.d_d),
	F64_SQRT		(0x00, 0x9F, "f64.sqrt", ImmSigs.NONE, sig.d_d),
	F64_ADD			(0x00, 0xA0, "f64.add", ImmSigs.NONE, sig.dd_d),
	F64_SUB			(0x00, 0xA1, "f64.sub", ImmSigs.NONE, sig.dd_d),
	F64_MUL			(0x00, 0xA2, "f64.mul", ImmSigs.NONE, sig.dd_d),
	F64_DIV			(0x00, 0xA3, "f64.div", ImmSigs.NONE, sig.dd_d),
	F64_MIN			(0x00, 0xA4, "f64.min", ImmSigs.NONE, sig.dd_d),
	F64_MAX			(0x00, 0xA5, "f64.max", ImmSigs.NONE, sig.dd_d),
	F64_COPYSIGN		(0x00, 0xA6, "f64.copysign", ImmSigs.NONE, sig.dd_d),
	// Conversions and casts.
	I32_WRAP_I64		(0x00, 0xA7, "i32.wrap_i64", ImmSigs.NONE, sig.l_i),
	I32_TRUNC_F32_S		(0x00, 0xA8, "i32.trunc_f32_s", ImmSigs.NONE, sig.f_i),
	I32_TRUNC_F32_U		(0x00, 0xA9, "i32.trunc_f32_u", ImmSigs.NONE, sig.f_i),
	I32_TRUNC_F64_S		(0x00, 0xAA, "i32.trunc_f64_s", ImmSigs.NONE, sig.d_i),
	I32_TRUNC_F64_U		(0x00, 0xAB, "i32.trunc_f64_u", ImmSigs.NONE, sig.d_i),
	I64_EXTEND_I32_S	(0x00, 0xAC, "i64.extend_i32_s", ImmSigs.NONE, sig.i_l),
	I64_EXTEND_I32_U	(0x00, 0xAD, "i64.extend_i32_u", ImmSigs.NONE, sig.i_l),
	I64_TRUNC_F32_S		(0x00, 0xAE, "i64.trunc_f32_s", ImmSigs.NONE, sig.f_l),
	I64_TRUNC_F32_U		(0x00, 0xAF, "i64.trunc_f32_u", ImmSigs.NONE, sig.f_l),
	I64_TRUNC_F64_S		(0x00, 0xB0, "i64.trunc_f64_s", ImmSigs.NONE, sig.d_l),
	I64_TRUNC_F64_U		(0x00, 0xB1, "i64.trunc_f64_u", ImmSigs.NONE, sig.d_l),
	F32_CONVERT_I32_S	(0x00, 0xB2, "f32.convert_i32_s", ImmSigs.NONE, sig.i_f),
	F32_CONVERT_I32_U	(0x00, 0xB3, "f32.convert_i32_u", ImmSigs.NONE, sig.i_f),
	F32_CONVERT_I64_S	(0x00, 0xB4, "f32.convert_i64_s", ImmSigs.NONE, sig.l_f),
	F32_CONVERT_I64_U	(0x00, 0xB5, "f32.convert_i64_u", ImmSigs.NONE, sig.l_f),
	F32_DEMOTE_F64		(0x00, 0xB6, "f32.demote_f64", ImmSigs.NONE, sig.d_f),
	F64_CONVERT_I32_S	(0x00, 0xB7, "f64.convert_i32_s", ImmSigs.NONE, sig.i_d),
	F64_CONVERT_I32_U	(0x00, 0xB8, "f64.convert_i32_u", ImmSigs.NONE, sig.i_d),
	F64_CONVERT_I64_S	(0x00, 0xB9, "f64.convert_i64_s", ImmSigs.NONE, sig.l_d),
	F64_CONVERT_I64_U	(0x00, 0xBA, "f64.convert_i64_u", ImmSigs.NONE, sig.l_d),
	F64_PROMOTE_F32		(0x00, 0xBB, "f64.promote_f32", ImmSigs.NONE, sig.f_d),
	I32_REINTERPRET_F32	(0x00, 0xBC, "i32.reinterpret_f32", ImmSigs.NONE, sig.f_i),
	I64_REINTERPRET_F64	(0x00, 0xBD, "i64.reinterpret_f64", ImmSigs.NONE, sig.d_l),
	F32_REINTERPRET_I32	(0x00, 0xBE, "f32.reinterpret_i32", ImmSigs.NONE, sig.i_f),
	F64_REINTERPRET_I64	(0x00, 0xBF, "f64.reinterpret_i64", ImmSigs.NONE, sig.l_d),
	// Sign extensions.
	I32_EXTEND8_S		(0x00, 0xC0, "i32.extend8_s", ImmSigs.NONE, sig.i_i),
	I32_EXTEND16_S		(0x00, 0xC1, "i32.extend16_s", ImmSigs.NONE, sig.i_i),
	I64_EXTEND8_S		(0x00, 0xC2, "i64.extend8_s", ImmSigs.NONE, sig.l_l),
	I64_EXTEND16_S		(0x00, 0xC3, "i64.extend16_s", ImmSigs.NONE, sig.l_l),
	I64_EXTEND32_S		(0x00, 0xC4, "i64.extend32_s", ImmSigs.NONE, sig.l_l),
	// Reference instructions.
	REF_NULL		(0x00, 0xD0, "ref.null", ImmSigs.REFNULLT, null),
	REF_IS_NULL		(0x00, 0xD1, "ref.is_null", ImmSigs.NONE, null),
	REF_FUNC		(0x00, 0xD2, "ref.func", ImmSigs.FUNC, null),
	REF_AS_NON_NULL		(0x00, 0xD3, "ref.as_non_null", ImmSigs.NONE, null),
	BR_ON_NULL		(0x00, 0xD4, "br_on_null", ImmSigs.LABEL, null),
	REF_EQ			(0x00, 0xD5, "ref.eq", ImmSigs.NONE, null),
	// 0xFB prefix: gc proposal opcodes.
	STRUCT_NEW			(0xFB, 0x00, "struct.new", ImmSigs.STRUCTT, null),
	STRUCT_NEW_WITH_RTT		(0xFB, 0x01, "struct.new_with_rtt", ImmSigs.STRUCTT, null),
	STRUCT_NEW_DEFAULT_WITH_RTT	(0xFB, 0x02, "struct.new_default_with_rtt", ImmSigs.STRUCTT, null),
	STRUCT_GET			(0xFB, 0x03, "struct.get", ImmSigs.STRUCTT_FIELD, null),
	STRUCT_GET_S			(0xFB, 0x04, "struct.get_s", ImmSigs.STRUCTT_FIELD, null),
	STRUCT_GET_U			(0xFB, 0x05, "struct.get_u", ImmSigs.STRUCTT_FIELD, null),
	STRUCT_SET			(0xFB, 0x06, "struct.set", ImmSigs.STRUCTT_FIELD, null),
	ARRAY_NEW			(0xFB, 0x10, "array.new", ImmSigs.ARRAYT, null),
	ARRAY_NEW_WITH_RTT		(0xFB, 0x11, "array.new_with_rtt", ImmSigs.ARRAYT, null),
	ARRAY_NEW_DEFAULT_WITH_RTT	(0xFB, 0x12, "array.new_default_with_rtt", ImmSigs.ARRAYT, null),
	ARRAY_GET			(0xFB, 0x13, "array.get", ImmSigs.ARRAYT, null),
	ARRAY_GET_S			(0xFB, 0x14, "array.get_s", ImmSigs.ARRAYT, null),
	ARRAY_GET_U			(0xFB, 0x15, "array.get_u", ImmSigs.ARRAYT, null),
	ARRAY_SET			(0xFB, 0x16, "array.set", ImmSigs.ARRAYT, null),
	ARRAY_LEN			(0xFB, 0x17, "array.len", ImmSigs.ARRAYT, null),
	I31_NEW				(0xFB, 0x20, "i31.new", ImmSigs.NONE, null),
	I31_GET_S			(0xFB, 0x21, "i31.get_s", ImmSigs.NONE, null),
	I31_GET_U			(0xFB, 0x22, "i31.get_u", ImmSigs.NONE, null),
	RTT_CANON			(0xFB, 0x30, "rtt.canon", ImmSigs.HEAPT, null),
	RTT_SUB				(0xFB, 0x31, "rtt.sub", ImmSigs.SUPER_HEAPT_HEAPT, null),
	REF_TEST			(0xFB, 0x40, "ref.test", ImmSigs.HEAPT_HEAPT, null),
	REF_CAST			(0xFB, 0x41, "ref.cast", ImmSigs.HEAPT_HEAPT, null),
	BR_ON_CAST			(0xFB, 0x42, "br_on_cast", ImmSigs.LABEL_HEAPT_HEAPT, null),
	// 0xFC prefix: saturating truncations.
	I32_TRUNC_SAT_F32_S	(0xFC, 0x00, "i32.trunc_sat_f32_s", ImmSigs.NONE, sig.f_i),
	I32_TRUNC_SAT_F32_U	(0xFC, 0x01, "i32.trunc_sat_f32_u", ImmSigs.NONE, sig.f_i),
	I32_TRUNC_SAT_F64_S	(0xFC, 0x02, "i32.trunc_sat_f64_s", ImmSigs.NONE, sig.d_i),
	I32_TRUNC_SAT_F64_U	(0xFC, 0x03, "i32.trunc_sat_f64_u", ImmSigs.NONE, sig.d_i),
	I64_TRUNC_SAT_F32_S	(0xFC, 0x04, "i64.trunc_sat_f32_s", ImmSigs.NONE, sig.f_l),
	I64_TRUNC_SAT_F32_U	(0xFC, 0x05, "i64.trunc_sat_f32_u", ImmSigs.NONE, sig.f_l),
	I64_TRUNC_SAT_F64_S	(0xFC, 0x06, "i64.trunc_sat_f64_s", ImmSigs.NONE, sig.d_l),
	I64_TRUNC_SAT_F64_U	(0xFC, 0x07, "i64.trunc_sat_f64_u", ImmSigs.NONE, sig.d_l),
	// 0xFC prefix: bulk-memory and references.
	MEMORY_INIT		(0xFC, 0x08, "memory.init", ImmSigs.DATA_MEMORY, null),
	DATA_DROP		(0xFC, 0x09, "data.drop", ImmSigs.DATA, null),
	MEMORY_COPY		(0xFC, 0x0A, "memory.copy", ImmSigs.MEMORY_MEMORY, null),
	MEMORY_FILL		(0xFC, 0x0B, "memory.fill", ImmSigs.MEMORY, null),
	TABLE_INIT		(0xFC, 0x0C, "table.init", ImmSigs.ELEM_TABLE, null),
	ELEM_DROP		(0xFC, 0x0D, "elem.drop", ImmSigs.ELEM, null),
	TABLE_COPY		(0xFC, 0x0E, "table.copy", ImmSigs.TABLE_TABLE, null),
	TABLE_GROW		(0xFC, 0x0F, "table.grow", ImmSigs.TABLE, null),
	TABLE_SIZE		(0xFC, 0x10, "table.size", ImmSigs.TABLE, null),
	TABLE_FILL		(0xFC, 0x11, "table.fill", ImmSigs.TABLE, null),
	// 0xFE prefix: atomics.
	MEMORY_ATOMIC_NOTIFY		(0xFE, 0x00, "memory.atomic.notify", ImmSigs.MEMARG, sig.ii_v),
	MEMORY_ATOMIC_WAIT32		(0xFE, 0x01, "memory.atomic.wait32", ImmSigs.MEMARG, sig.iii_i),
	MEMORY_ATOMIC_WAIT64		(0xFE, 0x02, "memory.atomic.wait64", ImmSigs.MEMARG, sig.ili_i),
	ATOMIC_FENCE			(0xFE, 0x03, "atomic.fence", ImmSigs.ZEROB, sig.v_v),
	I32_ATOMIC_LOAD			(0xFE, 0x10, "i32.atomic.load", ImmSigs.MEMARG, sig.i_i),
	I64_ATOMIC_LOAD			(0xFE, 0x11, "i64.atomic.load", ImmSigs.MEMARG, sig.i_l),
	I32_ATOMIC_LOAD8_U		(0xFE, 0x12, "i32.atomic.load8_u", ImmSigs.MEMARG, sig.i_i),
	I32_ATOMIC_LOAD16_U		(0xFE, 0x13, "i32.atomic.load16_u", ImmSigs.MEMARG, sig.i_i),
	I64_ATOMIC_LOAD8_U		(0xFE, 0x14, "i64.atomic.load8_u", ImmSigs.MEMARG, sig.i_l),
	I64_ATOMIC_LOAD16_U		(0xFE, 0x15, "i64.atomic.load16_u", ImmSigs.MEMARG, sig.i_l),
	I64_ATOMIC_LOAD32_U		(0xFE, 0x16, "i64.atomic.load32_u", ImmSigs.MEMARG, sig.i_l),
	I32_ATOMIC_STORE		(0xFE, 0x17, "i32.atomic.store", ImmSigs.MEMARG, sig.ii_v),
	I64_ATOMIC_STORE		(0xFE, 0x18, "i64.atomic.store", ImmSigs.MEMARG, sig.il_v),
	I32_ATOMIC_STORE8		(0xFE, 0x19, "i32.atomic.store8", ImmSigs.MEMARG, sig.ii_v),
	I32_ATOMIC_STORE16		(0xFE, 0x1A, "i32.atomic.store16", ImmSigs.MEMARG, sig.ii_v),
	I64_ATOMIC_STORE8		(0xFE, 0x1B, "i64.atomic.store8", ImmSigs.MEMARG, sig.il_v),
	I64_ATOMIC_STORE16		(0xFE, 0x1C, "i64.atomic.store16", ImmSigs.MEMARG, sig.il_v),
	I64_ATOMIC_STORE32		(0xFE, 0x1D, "i64.atomic.store32", ImmSigs.MEMARG, sig.il_v),
	I32_ATOMIC_RMW_ADD		(0xFE, 0x1E, "i32.atomic.rmw.add", ImmSigs.MEMARG, sig.ii_i),
	I64_ATOMIC_RMW_ADD		(0xFE, 0x1F, "i64.atomic.rmw.add", ImmSigs.MEMARG, sig.il_l),
	I32_ATOMIC_RMW8_ADD_U		(0xFE, 0x20, "i32.atomic.rmw8.add_u", ImmSigs.MEMARG, sig.ii_i),
	I32_ATOMIC_RMW16_ADD_U		(0xFE, 0x21, "i32.atomic.rmw16.add_u", ImmSigs.MEMARG, sig.ii_i),
	I64_ATOMIC_RMW8_ADD_U		(0xFE, 0x22, "i64.atomic.rmw8.add_u", ImmSigs.MEMARG, sig.il_l),
	I64_ATOMIC_RMW16_ADD_U		(0xFE, 0x23, "i64.atomic.rmw16.add_u", ImmSigs.MEMARG, sig.il_l),
	I64_ATOMIC_RMW32_ADD_U		(0xFE, 0x24, "i64.atomic.rmw32.add_u", ImmSigs.MEMARG, sig.il_l),
	I32_ATOMIC_RMW_SUB		(0xFE, 0x25, "i32.atomic.rmw.sub", ImmSigs.MEMARG, sig.ii_i),
	I64_ATOMIC_RMW_SUB		(0xFE, 0x26, "i64.atomic.rmw.sub", ImmSigs.MEMARG, sig.il_l),
	I32_ATOMIC_RMW8_SUB_U		(0xFE, 0x27, "i32.atomic.rmw8.sub_u", ImmSigs.MEMARG, sig.ii_i),
	I32_ATOMIC_RMW16_SUB_U		(0xFE, 0x28, "i32.atomic.rmw16.sub_u", ImmSigs.MEMARG, sig.ii_i),
	I64_ATOMIC_RMW8_SUB_U		(0xFE, 0x29, "i64.atomic.rmw8.sub_u", ImmSigs.MEMARG, sig.il_l),
	I64_ATOMIC_RMW16_SUB_U		(0xFE, 0x2A, "i64.atomic.rmw16.sub_u", ImmSigs.MEMARG, sig.il_l),
	I64_ATOMIC_RMW32_SUB_U		(0xFE, 0x2B, "i64.atomic.rmw32.sub_u", ImmSigs.MEMARG, sig.il_l),
	I32_ATOMIC_RMW_AND		(0xFE, 0x2C, "i32.atomic.rmw.and", ImmSigs.MEMARG, sig.ii_i),
	I64_ATOMIC_RMW_AND		(0xFE, 0x2D, "i64.atomic.rmw.and", ImmSigs.MEMARG, sig.il_l),
	I32_ATOMIC_RMW8_AND_U		(0xFE, 0x2E, "i32.atomic.rmw8.and_u", ImmSigs.MEMARG, sig.ii_i),
	I32_ATOMIC_RMW16_AND_U		(0xFE, 0x2F, "i32.atomic.rmw16.and_u", ImmSigs.MEMARG, sig.ii_i),
	I64_ATOMIC_RMW8_AND_U		(0xFE, 0x30, "i64.atomic.rmw8.and_u", ImmSigs.MEMARG, sig.il_l),
	I64_ATOMIC_RMW16_AND_U		(0xFE, 0x31, "i64.atomic.rmw16.and_u", ImmSigs.MEMARG, sig.il_l),
	I64_ATOMIC_RMW32_AND_U		(0xFE, 0x32, "i64.atomic.rmw32.and_u", ImmSigs.MEMARG, sig.il_l),
	I32_ATOMIC_RMW_OR		(0xFE, 0x33, "i32.atomic.rmw.or", ImmSigs.MEMARG, sig.ii_i),
	I64_ATOMIC_RMW_OR		(0xFE, 0x34, "i64.atomic.rmw.or", ImmSigs.MEMARG, sig.il_l),
	I32_ATOMIC_RMW8_OR_U		(0xFE, 0x35, "i32.atomic.rmw8.or_u", ImmSigs.MEMARG, sig.ii_i),
	I32_ATOMIC_RMW16_OR_U		(0xFE, 0x36, "i32.atomic.rmw16.or_u", ImmSigs.MEMARG, sig.ii_i),
	I64_ATOMIC_RMW8_OR_U		(0xFE, 0x37, "i64.atomic.rmw8.or_u", ImmSigs.MEMARG, sig.il_l),
	I64_ATOMIC_RMW16_OR_U		(0xFE, 0x38, "i64.atomic.rmw16.or_u", ImmSigs.MEMARG, sig.il_l),
	I64_ATOMIC_RMW32_OR_U		(0xFE, 0x39, "i64.atomic.rmw32.or_u", ImmSigs.MEMARG, sig.il_l),
	I32_ATOMIC_RMW_XOR		(0xFE, 0x3A, "i32.atomic.rmw.xor", ImmSigs.MEMARG, sig.ii_i),
	I64_ATOMIC_RMW_XOR		(0xFE, 0x3B, "i64.atomic.rmw.xor", ImmSigs.MEMARG, sig.il_l),
	I32_ATOMIC_RMW8_XOR_U		(0xFE, 0x3C, "i32.atomic.rmw8.xor_u", ImmSigs.MEMARG, sig.ii_i),
	I32_ATOMIC_RMW16_XOR_U		(0xFE, 0x3D, "i32.atomic.rmw16.xor_u", ImmSigs.MEMARG, sig.ii_i),
	I64_ATOMIC_RMW8_XOR_U		(0xFE, 0x3E, "i64.atomic.rmw8.xor_u", ImmSigs.MEMARG, sig.il_l),
	I64_ATOMIC_RMW16_XOR_U		(0xFE, 0x3F, "i64.atomic.rmw16.xor_u", ImmSigs.MEMARG, sig.il_l),
	I64_ATOMIC_RMW32_XOR_U		(0xFE, 0x40, "i64.atomic.rmw32.xor_u", ImmSigs.MEMARG, sig.il_l),
	I32_ATOMIC_RMW_XCHG		(0xFE, 0x41, "i32.atomic.rmw.xchg", ImmSigs.MEMARG, sig.ii_i),
	I64_ATOMIC_RMW_XCHG		(0xFE, 0x42, "i64.atomic.rmw.xchg", ImmSigs.MEMARG, sig.il_l),
	I32_ATOMIC_RMW8_XCHG_U		(0xFE, 0x43, "i32.atomic.rmw8.xchg_u", ImmSigs.MEMARG, sig.ii_i),
	I32_ATOMIC_RMW16_XCHG_U		(0xFE, 0x44, "i32.atomic.rmw16.xchg_u", ImmSigs.MEMARG, sig.ii_i),
	I64_ATOMIC_RMW8_XCHG_U		(0xFE, 0x45, "i64.atomic.rmw8.xchg_u", ImmSigs.MEMARG, sig.il_l),
	I64_ATOMIC_RMW16_XCHG_U		(0xFE, 0x46, "i64.atomic.rmw16.xchg_u", ImmSigs.MEMARG, sig.il_l),
	I64_ATOMIC_RMW32_XCHG_U		(0xFE, 0x47, "i64.atomic.rmw32.xchg_u", ImmSigs.MEMARG, sig.il_l),
	I32_ATOMIC_RMW_CMPXCHG		(0xFE, 0x48, "i32.atomic.rmw.cmpxchg", ImmSigs.MEMARG, sig.iii_i),
	I64_ATOMIC_RMW_CMPXCHG		(0xFE, 0x49, "i64.atomic.rmw.cmpxchg", ImmSigs.MEMARG, sig.ill_l),
	I32_ATOMIC_RMW8_CMPXCHG_U	(0xFE, 0x4A, "i32.atomic.rmw8.cmpxchg_u", ImmSigs.MEMARG, sig.iii_i),
	I32_ATOMIC_RMW16_CMPXCHG_U	(0xFE, 0x4B, "i32.atomic.rmw16.cmpxchg_u", ImmSigs.MEMARG, sig.iii_i),
	I64_ATOMIC_RMW8_CMPXCHG_U	(0xFE, 0x4C, "i64.atomic.rmw8.cmpxchg_u", ImmSigs.MEMARG, sig.ill_l),
	I64_ATOMIC_RMW16_CMPXCHG_U	(0xFE, 0x4D, "i64.atomic.rmw16.cmpxchg_u", ImmSigs.MEMARG, sig.ill_l),
	I64_ATOMIC_RMW32_CMPXCHG_U	(0xFE, 0x4E, "i64.atomic.rmw32.cmpxchg_u", ImmSigs.MEMARG, sig.ill_l),
}

// Enumeration of the different kinds of immediates to opcodes.
enum ImmKind {
	ARRAY_TYPE_INDEX,	// ARRAYT
	BLOCK_TYPE,		// BLOCKT
	DATA_INDEX,		// DATA
	ELEM_INDEX,		// ELEM
	EVENT_INDEX,		// EVENT
	FIELD_INDEX,		// FIELD
	FUNC_INDEX,		// FUNC
	GLOBAL_INDEX,		// GLOBAL
	HEAP_TYPE_INDEX,	// HEAPT
	LABEL,			// LABEL
	LABELS,			// LABELs
	LOCAL_DECL,		// LOCDECL
	LOCAL_INDEX,		// LOCAL
	MEMARG,			// MEMARG
	MEMORY_INDEX,		// MEMORY
	PARAM_INDEX,		// PARAM
	REF_NULL_TYPE,		// REFNULLT
	SIG_INDEX,		// SIG
	STRUCT_TYPE_INDEX,	// STRUCTT
	SUPER_COUNT,		// SUPER
	TABLE_INDEX,		// TABLE
	VALUE_TYPES,		// VALTs
	ZERO_BYTE,		// ZEROB
	I32,			// I32
	I64,			// I64
	F32,			// F32
	F64			// F64
}
// Cached immediate signatures
component ImmSigs {
	def NONE = Array<ImmKind>.new(0);
	// Singleton immediate signatures.
	def ARRAYT = [ImmKind.ARRAY_TYPE_INDEX];
	def BLOCKT = [ImmKind.BLOCK_TYPE];
	def DATA = [ImmKind.DATA_INDEX];
	def ELEM = [ImmKind.ELEM_INDEX];
	def EVENT = [ImmKind.EVENT_INDEX];
	def FUNC = [ImmKind.FUNC_INDEX];
	def GLOBAL = [ImmKind.GLOBAL_INDEX];
	def HEAPT = [ImmKind.HEAP_TYPE_INDEX];
	def LABEL = [ImmKind.LABEL];
	def LABELS = [ImmKind.LABELS];
	def LOCAL = [ImmKind.LOCAL_INDEX];
	def MEMARG = [ImmKind.MEMARG];
	def MEMORY = [ImmKind.MEMORY_INDEX];
	def REFNULLT = [ImmKind.REF_NULL_TYPE];
	def SIG = [ImmKind.SIG_INDEX];
	def STRUCTT = [ImmKind.STRUCT_TYPE_INDEX];
	def TABLE = [ImmKind.TABLE_INDEX];
	def VALTS = [ImmKind.VALUE_TYPES];
	def ZEROB = [ImmKind.ZERO_BYTE];
	def I32 = [ImmKind.I32];
	def I64 = [ImmKind.I64];
	def F32 = [ImmKind.F32];
	def F64 = [ImmKind.F64];
	// Combination signatures.
	def STRUCTT_FIELD = [ImmKind.STRUCT_TYPE_INDEX, ImmKind.FIELD_INDEX];
	def DATA_MEMORY = [ImmKind.DATA_INDEX, ImmKind.MEMORY_INDEX];
	def ELEM_TABLE = [ImmKind.ELEM_INDEX, ImmKind.TABLE_INDEX];
	def HEAPT_HEAPT = [ImmKind.HEAP_TYPE_INDEX, ImmKind.HEAP_TYPE_INDEX];
	def MEMORY_MEMORY = [ImmKind.MEMORY_INDEX, ImmKind.MEMORY_INDEX];
	def TABLE_TABLE = [ImmKind.TABLE_INDEX, ImmKind.TABLE_INDEX];
	def BLOCKT_LOCDECL = [ImmKind.BLOCK_TYPE, ImmKind.LOCAL_DECL];
	def SIG_TABLE = [ImmKind.SIG_INDEX, ImmKind.TABLE_INDEX];
	def SUPER_HEAPT_HEAPT = [ImmKind.SUPER_COUNT, ImmKind.HEAP_TYPE_INDEX, ImmKind.HEAP_TYPE_INDEX];
	def LABEL_HEAPT_HEAPT = [ImmKind.LABEL, ImmKind.HEAP_TYPE_INDEX, ImmKind.HEAP_TYPE_INDEX];
	def LABEL_EVENT = [ImmKind.LABEL, ImmKind.EVENT_INDEX];
}

// Internal opcodes used by the interpreter.
enum InternalOpcode(code: u8) {
	START(0x1D),	// Used as a marker to start execution in the top frame
	BREAK(0x1E),	// Used to overwrite a bytecode where a breakpoint is
}
// Various computed attributes about opcodes.
enum OpcodeAttribute {
	SHORT_OP,
	PREFIX,
	VALID
}
// A 256-entry page for dealing with prefixed opcodes.
class OpcodePage(prefix: byte) {
	private def valid = Array<u32>.new(8);  // bitmap for valid
	private def opcodes = Array<Opcode>.new(256);

	def put(opcode: Opcode) {
		valid[opcode.code >> 5] |= 1u << u5.view(opcode.code);
		opcodes[opcode.code] = opcode;
	}
	def isValid(code: u32) -> bool {
		if (code >= opcodes.length) return false;
		var entry = valid[u8.view(code >> 5)];
		return (entry & (1u << u5.view(code))) != 0;
	}
	def get(code: u32) -> Opcode {
		if (code >= opcodes.length) return Opcode.NOP;
		return opcodes[u8.view(code)];
	}
}

// Utilities for Wasm opcodes.
component Opcodes {
	// attributes, signatures, and opcode for non-prefixed opcodes
	def signatures = Array<SigDecl>.new(256);
	def attributes = Array<OpcodeAttribute.set>.new(256);
	def opcodes = Array<Opcode>.new(256);
	// Prefixed opcodes each get their own page.
	def code_pages = [OpcodePage.new(0xFB), OpcodePage.new(0xFC), OpcodePage.new(0xFE)];

	new() {
		for (op in Opcode) init(op);
	}
	def init(opcode: Opcode) {
		if (opcode.prefix == 0) {
			// Record non-prefixed opcode
			var c = opcode.code;
			signatures[c] = opcode.sig;
			opcodes[c] = opcode;
			attributes[c] |= OpcodeAttribute.VALID;
			if (opcode.sig != null && opcode.imms.length == 0) attributes[c] |= OpcodeAttribute.SHORT_OP;
			return;
		}
		attributes[opcode.prefix] |= OpcodeAttribute.PREFIX;
		for (page in code_pages) {
			if (page.prefix == opcode.prefix) return page.put(opcode);
		}
		System.error("OpcodesInitError", Strings.format2("no page found for %s, prefix=%x", opcode.name, opcode.prefix));
	}

	// Render a single-byte opcode.
	def render(buf: StringBuilder, code: byte) -> StringBuilder {
		if (attributes[code].VALID) {
			return buf.puts(opcodes[code].mnemonic);
		} else if (attributes[code].PREFIX) {
			return buf.put1("%x (prefix)", code);
		} else {
			return buf.put1("%x (invalid)", code);
		}
	}
	// Lookup an opcode, if it exists. Returns {Opcode.UNREACHABLE} if not.
	def find(prefix: byte, code: u32) -> Opcode {
		if (prefix == 0) return opcodes[code];
		for (page in code_pages) {
			if (page.prefix == prefix) return page.get(code);
		}
		return Opcode.UNREACHABLE;
	}
}

// Renders instructions as text.
class InstrTracer extends TraceBuilder {
	def err = ErrorGen.new("");
	def codeptr = CodePtr.new([]);
	def all = Extension.set.all;
	def limits = Limits.new().set(Extension.set.all);
	var parser: WasmParser;

	def putInstr(module: Module, d: DataReader) -> this {
		codeptr.reset(d.data, d.pos, d.limit);
		d = null;

		if (parser == null || parser.module != module) {
			// TODO: instr tracer leaks last module
			parser = WasmParser.new(all, limits, module, err, codeptr);
		}

		var b = codeptr.read1();
		var opcode: Opcode;
		if (Opcodes.attributes[b].PREFIX) {
			var b2 = codeptr.read1();
			opcode = Opcodes.find(b, b2);
			if (opcode == Opcode.UNREACHABLE) put2("%x %x (invalid)", b, b2);
			else puts(opcode.mnemonic);
		} else if (Opcodes.attributes[b].VALID) {
			opcode = Opcodes.opcodes[b];
			puts(opcode.mnemonic);
		} else if (b == InternalOpcode.BREAK.code) {
			put1("<break>", b);
			return;
		} else if (b == InternalOpcode.START.code) {
			put1("<start>", b);
			return;
		} else {
			put1("%x (invalid)", b);
			return;
		}

		if (opcode.imms.length > 0) putc('[');
		var imms = opcode.imms;
		for (i < imms.length) {
			if (i > 0) putc(',');
			match (imms[i]) {
				BLOCK_TYPE => {
					var sig = parser.readBlockType();
					var pl = sig.params.length, rl = sig.results.length;
					if (pl == 0 && rl == 0) {
						// do nothing
					} else if (pl == 0 && rl == 1) {
						sig.results[0].render(this);
					} else {
						sig.render(this);
					}
				}
				LABEL => put1("depth=%d", parser.readLabel());
				LABELS => {
					var labels = parser.readLabels();
					put1("%d...", labels.length);
				}
				REF_NULL_TYPE => put1("type=%q", parser.readRefNullType().render);
				VALUE_TYPES => {
					var at = parser.readValueTypes("select count", u32.max, 0);
					for (i < at.length) {
						if (i > 0) puts(" ");
						at[i].render(this);
					}
				}
				FUNC_INDEX => put1("func=%d", codeptr.read_uleb32());
				TABLE_INDEX => put1("table=%d", codeptr.read_uleb32());
				PARAM_INDEX => put1("param=%d", codeptr.read_uleb32());
				LOCAL_INDEX => put1("%d", codeptr.read_uleb32());
				GLOBAL_INDEX => put1("%d", codeptr.read_uleb32());
				MEMORY_INDEX => put1("%d", codeptr.read_uleb32());
				ELEM_INDEX => put1("elem=%d", codeptr.read_uleb32());
				EVENT_INDEX => put1("event=%d", codeptr.read_uleb32());
				DATA_INDEX => put1("data=%d", codeptr.read_uleb32());
				I32 => put1("%d", codeptr.read_sleb32());
				I64 => put1("%d", codeptr.read_sleb64());
				F32 => put1("0x%x", parser.readF32());
				F64 => put1("0x%x", parser.readF64());
				MEMARG => {
					var mem = parser.readMemoryArg(), mem_index = mem.1, offset = mem.2;
					var align = 1 << byte.!(mem.0 >> 1);
					if (mem_index > 0) put1("memory=%d,", mem_index);
					put2("align=%d,offset=%d", align, offset);
				}
				FIELD_INDEX => put1("field=%d", codeptr.read_uleb32());
				LOCAL_DECL => puts("<locals>");
				SIG_INDEX => put1("sig=%d", codeptr.read_uleb32());
				STRUCT_TYPE_INDEX,
				ARRAY_TYPE_INDEX,
				HEAP_TYPE_INDEX => put1("type=%d", codeptr.read_uleb32()); // XXX: render heap type ref?
				SUPER_COUNT => put1("super=%d", codeptr.read_uleb32());
				ZERO_BYTE => codeptr.read1();
			}
		}
		if (opcode.imms.length > 0) putc(']');
	}
}
