// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Extension point for import processing. An {ImportProcessor} lookups or materializes
// an {Exportable} for a given name and import kind. It can use the {binder} as a
// callback to access parts of the module that need polymorphic substitution.
class ImportProcessor(name: string) {
	def preprocess(module: Module) { }
	def processCommand(name: string, args: Array<Exportable>) -> Exportable { return null; }
	def processAbsType(name: string, args: Array<Exportable>, decl: AbsTypeDecl) -> Exportable { return null; }
	def processFunction(name: string, args: Array<Exportable>, decl: FuncDecl) -> Exportable { return null; }
	def processTable(name: string, args: Array<Exportable>, decl: TableDecl) -> Exportable { return null; }
	def processMemory(name: string, args: Array<Exportable>, decl: MemoryDecl) -> Exportable { return null; }
	def processGlobal(name: string, args: Array<Exportable>, decl: GlobalDecl) -> Exportable { return null; }
}

def NO_IMPORT_ARGS: Array<Exportable> = [];
// Creates {Instance} objects, given a module and a list of imports.
class Instantiator(extensions: Extension.set, module: Module, imports: Array<Exportable>, error: WasmErrorGen) {
	def instance = Instance.new(module, imports);
	def processors = Vector<ImportProcessor>.new();
	var trap_reason: TrapReason;
	var import_pos: int;

	def run() -> Instance {
		if (module.imports.length > 0) {
			if (imports == null) return fail("no imports provided");
			if (imports.length < module.imports.length) {
				return fail(Strings.format2("expected %d imports, got %d", module.imports.length, imports.length));
			}
		}
		for (i < processors.length) {
			processors[i].preprocess(module);
		}
		var needSigIds = false;
		for (j < module.decls.length) {
			if (error.error()) return null;
			var d = module.decls[j];
			if (d.imp != null) {  // imported declaration
				var r = imports[d.imp.import_index];
				match (d) {
					decl: ImportCommandDecl => {
						processImport(decl, ImportProcessor.processCommand);
					}
					decl: AbsTypeDecl => {
						var i = decl.abstype_index;
						var t = importAbsType(decl, r);
						instance.abstypes[i] = t;
						match (t) {
							x: ExportedValueType => instance.defvals[i] = Values.default(x.vt);
							_ => instance.defvals[i] = Values.REF_NULL;
						}
					}
					decl: FuncDecl => {
						instance.functions[decl.func_index] = importFunction(decl, r);
					}
					decl: TableDecl => {
						var t =  importTable(decl, r);
						instance.tables[decl.table_index] = t;
						if (t != null && t.funcs != null) needSigIds = true;
					}
					decl: MemoryDecl => {
						instance.memories[decl.memory_index] = importMemory(decl, r);
					}
					decl: GlobalDecl => {
						instance.globals[decl.global_index] = importGlobal(decl, r);
					}
					decl: EventDecl => ; // TODO: import event
				}
				continue;
			}

			match (d) { // non-imported declaration
				decl: SigDecl => {
					instance.sigs[decl.sig_index] = mapSig(decl);
				}
				decl: StructDecl => {
					// TODO: instantiate polymorphic struct type if necessary
					instance.rtts[decl.struct_index] = RttObject.new(decl, Values.NO_SUPERS);
				}
				decl: ArrayDecl => {
					// TODO: instantiate polymorphic array type if necessary
					instance.rtts[decl.array_index] = RttObject.new(decl, Values.NO_SUPERS);
				}
				decl: AbsTypeDecl => {
					var t = ExportedValueType.new(null, ValueType.Abstract(decl));
					instance.abstypes[decl.abstype_index] = t;
				}
				decl: FuncDecl => {
					var i = decl.func_index;
					var f = WasmFunction.new(instance, mapFuncDecl(i));
					instance.functions[i] = f;
				}
				decl: TableDecl => {
					var t = Table.new(mapType(decl.elemtype), decl);
					if (t.oom) return fail("out of memory allocating table");
					instance.tables[decl.table_index] = t;
					if (t.funcs != null) needSigIds = true;
				}
				decl: MemoryDecl => {
					var i = decl.memory_index;
					var m = Target.newMemory(module.memories[i]);
					if (m.oom) return fail("out of memory allocating memory");
					instance.memories[i] = m;
				}
				decl: GlobalDecl => {
					var g = Global.new(mapType(decl.valtype), decl);
					instance.globals[decl.global_index] = g;
					g.value = instance.evalInitExpr(decl.init);
				}
				decl: EventDecl => ; // TODO: instantiate event
			}
		}
		if (error.error()) return null;
		if (needSigIds) {
			for (i < instance.heaptypes.length) {
				match (instance.heaptypes[i]) {
					x: SigDecl => instance.sig_ids[i] = Canon.sigId(x);
					_ => instance.sig_ids[i] = -1;
				}
			}
		}

		// Load element segments.
		for (i < module.elems.length) {
			var e = module.elems[i];
			match (e.mode) {
				Passive => ;
				Active(index, offset) => {
					loadElems(index, offset, e);
					instance.dropped_elems[i] = true;
					if (error.error()) return null;
				}
				Declarative => {
					instance.dropped_elems[i] = true;
				}
			}
		}
		// Load data segments.
		for (i < module.data.length) {
			var d = module.data[i];
			match (d.mode) {
				Passive => ;
				Active(index, offset) => {
					loadData(index, offset, d);
					instance.dropped_data[i] = true;
					if (error.error()) return null;
				}
				Declarative => {
					instance.dropped_data[i] = true;
				}
			}
		}

		// Organize exports
		var exports = instance.exports;
		for (i < module.exports.length) {
			exports[i] = getDecl(module.exports[i].1);
		}

		return instance;
	}
	def importAbsType(decl: AbsTypeDecl, r: Exportable) -> ExportedType {
		if (r == null) r = processImport(decl, ImportProcessor.processAbsType(_, _, _, decl));
		var xt: ExportedType, vt: ValueType;
		match (r) {
			x: HostType => { xt = x; vt = ValueType.Host(x); }
			x: ExportedValueType => { xt = x; vt = x.vt; }
			_ => { fail("expected type"); return null; }
		}
		for (c in decl.assignable) {
			var ct = mapType(c);
			if (!ValueTypes.isAssignable(vt, ct)) {
				fail(Strings.format2("type %q does not match constraint %q", vt.render, ct.render));
			}
		}
		return xt;
	}
	def importFunction(decl: FuncDecl, r: Exportable) -> Function {
		if (r == null) r = processImport(decl, ImportProcessor.processFunction(_, _, _, decl));
		match (r) {
			func: Function => {
				var expected_sig = getSigDecl(decl.sig.sig_index);
				if (!func.sig.isAssignableSig(expected_sig)) {
					fail(Strings.format2("expected function with signature %q, got %q", expected_sig.render, func.sig.render));
				}
				return func;
			}
		}
		fail("expected function import");
		return null;
	}
	def importTable(decl: TableDecl, r: Exportable) -> Table {
		if (r == null) r = processImport(decl, ImportProcessor.processTable(_, _, _, decl));
		match (r) {
			table: Table => {
				if (!checkLimits(table.decl.initial, table.decl.maximum, decl.initial, decl.maximum)) {
					fail("table limits mismatch");
				}
				var expected_type = mapType(decl.elemtype);
				var got_type = table.decl.elemtype;
				if (got_type != expected_type) {  // TODO: proper equality check
					fail("table element type mismatch");
				}
				return table;
			}
		}
		fail("expected table import");
		return null;
	}
	def importMemory(decl: MemoryDecl, r: Exportable) -> Memory {
		if (r == null) r = processImport(decl, ImportProcessor.processMemory(_, _, _, decl));
		match (r) {
			memory: Memory => {
				if (!checkLimits(memory.size(), memory.decl.maximum, decl.initial, decl.maximum)) {
					fail("memory limits mismatch");
				}
				if (memory.decl.shared != decl.shared) {
					fail("memory sharing mismatch");
				}
				return memory;
			}
		}
		fail("expected memory import");
		return null;
	}
	def importGlobal(decl: GlobalDecl, r: Exportable) -> Global {
		if (r == null) r = processImport(decl, ImportProcessor.processGlobal(_, _, _, decl));
		match (r) {
			global: Global => {
				if (decl.mutable != global.decl.mutable) {
					fail("global immutability mismatch");
				}
				var expected_type = mapType(decl.valtype);
				var got_type = global.valtype;
				if (decl.mutable) {
					if (!ValueTypes.isEquivalent(got_type, expected_type)) fail("global type mismatch");
				} else {
					if (!ValueTypes.isAssignable(got_type, expected_type)) 	fail("global type mismatch");
				}
				return global;
			}
		}
		fail("expected global import");
		return null;
	}
	def processImport(decl: Decl, f: (ImportProcessor, string, Array<Exportable>) -> Exportable) -> Exportable {
		var i = decl.imp;
		import_pos = i.import_index;
		var modname = i.module_name, fieldname = i.field_name;
		var args = NO_IMPORT_ARGS;
		if (i.args.length > 0) {
			args = Array<Exportable>.new(i.args.length);
			for (j < args.length) args[j] = getDecl(i.args[j]);
		}
		for (i < processors.length) {
			var p = processors[i];
			if (Strings.equal(modname, p.name)) {
				var r = f(p, fieldname, args);
				if (r != null) {
					imports[decl.imp.import_index] = r;
					return r;
				}
			}
		}
		return null;
	}

	def getDecl(d: Decl) -> Exportable {
		match (d) {
			x: AbsTypeDecl => return instance.abstypes[x.abstype_index];
			x: FuncDecl => return instance.functions[x.func_index];
			x: TableDecl => return instance.tables[x.table_index];
			x: MemoryDecl => return instance.memories[x.memory_index];
			x: GlobalDecl => return instance.globals[x.global_index];
		}
		return null;
	}
	def getSigDecl(sig_index: int) -> SigDecl {
		if (u32.view(sig_index) >= instance.sigs.length) return null;
		return instance.sigs[sig_index];
	}

	// Substitution utilities.
	def mapFuncDecl(func_index: int) -> FuncDecl {
		if (!module.isAbstract()) return module.functions[func_index];
		var orig = module.functions[func_index];
		var sig_decl = getSigDecl(orig.sig.sig_index);
		sig_decl.sig_index = orig.sig.sig_index;
		sig_decl.decl_index = orig.sig.decl_index;
		var func = FuncDecl.new(sig_decl);
		func.func_index = func_index;
		func.decl_index = orig.decl_index;
		func.code = orig.code;
		return func;
	}
	def mapSig(sig: SigDecl) -> SigDecl {
		if (!module.isAbstract()) return sig;
		if (sig == null) return null;
		var p = Arrays.map(sig.params, mapType);
		var r = Arrays.map(sig.results, mapType);
		return SigDecl.new(p, r);
	}
	def mapType(t: ValueType) -> ValueType {
		if (!module.isAbstract()) return t;
		match (t) {
			RefFunc(nullable, sig) => return ValueType.RefFunc(nullable, mapSig(sig));
			Abstract(it) => {
				match (instance.abstypes[it.abstype_index]) {
					x: HostType => return ValueType.Host(x);
					x: ExportedValueType => return x.vt;
					_ => return ValueType.Abstract(residual(it));
				}
			}
			_ => return t;
		}
	}
	def residual(it: AbsTypeDecl) -> AbsTypeDecl {
		if (it.assignable.length == 0) return it;
		var assignable = Arrays.map(it.assignable, mapType);
		var nt = AbsTypeDecl.new(it.has_default, it.is_externref, assignable);
		nt.imp = it.imp;
		nt.abstype_index = it.abstype_index;
		return nt;
	}

	private def fail(msg: string) -> Instance {
		error.abs(import_pos).set(msg);
		return null;
	}
	private def checkLimits(fmin: u32, fmax: Max, tmin: u32, tmax: Max) -> bool {
		if (fmin < tmin) return false;
		match (tmax) {
			None => return true;
			Set(tmax_val) => match (fmax) {
				None => return false;
				Set(fmax_val) => return fmax_val <= tmax_val;
			}
		}
	}
	private def checkBounds(offset: u32, count: int, length: int, trap: TrapReason) -> bool {
		var end = u64.!(offset) + u64.!(count);
		if (end < offset || end > length) {
			fail("out of bounds in initialization");
			trap_reason = trap;
			return false;
		}
		return true;
	}
	private def checkElemBounds(index: int, offset: InitExpr, details: ElemDetails) {
		var offset = Value.I32.!(instance.evalInitExpr(offset)).val;
		var size = instance.tables[index].elems.length;
		match (details) {
			FuncRefs(vals) => checkBounds(offset, vals.length, size, TrapReason.TABLE_OUT_OF_BOUNDS);
			Exprs(vals) => checkBounds(offset, vals.length, size, TrapReason.TABLE_OUT_OF_BOUNDS);
		}
	}
	private def checkDataBounds(index: int, offset: InitExpr, dlength: int) {
		var offset = Value.I32.!(instance.evalInitExpr(offset)).val;
		var memory = instance.memories[index];
		var mlength = if(memory != null, memory.length());
		checkBounds(offset, dlength, int.view(mlength), TrapReason.MEM_OUT_OF_BOUNDS);
	}
	private def loadElems(index: int, offset: InitExpr, elems: ElemDecl) {
		var dst_offset = Values.v_u(instance.evalInitExpr(offset));
		var table = instance.tables[index];
		var r = table.copyE(instance, dst_offset, elems, 0, u32.view(elems.details.length()));
		if (r != TrapReason.NONE) {
			fail("out of bounds in initialization");
			trap_reason = r;
		}
	}
	private def loadData(index: int, offset: InitExpr, ddecl: DataDecl) {
		var dst_offset = Values.v_u(instance.evalInitExpr(offset));
		var memory = instance.memories[index];
		var r = memory.copyIn(dst_offset, if(ddecl != null, ddecl.data), 0, u32.view(ddecl.data.length));
		if (r != TrapReason.NONE) {
			fail("out of bounds in initialization");
			trap_reason = r;
		}
	}
}