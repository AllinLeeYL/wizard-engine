// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Host objects must extend this class to be extern refs.
class HostObject extends Object {
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("<hostobj>");
	}
}
type HostResult {
	case Trap(reason: TrapReason);
	case Error(msg: string);
	case Value(vals: Array<Value>);
	case TailCall(func: Function, args: Array<Value>);
//TODO	case Raise(event: Event);
}

// Host functions must extend this class to be func refs.
class HostFunction extends Function {
	def invoke: Array<Value> -> HostResult;
	new(sig: SigDecl, invoke) super(sig) { }
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("<hostfunc>");
	}
}

// Host types must extend this class to be importable.
class HostType extends ExportedType {
	def isAssignableTo(t: ValueType) -> bool {
		match (t) {
			Host(host) => return this == host;
			EXTERNREF => return true;
			_ => return false;
		}
	}
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("<hosttype>");
	}
}
