// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component X86_64Frames {
	// Convert a machine stack pointer into a reference to the frame.
	def fromSp(sp: Pointer) -> Ref<X86_64InterpreterFrame> {
		return Ref<X86_64InterpreterFrame>.of(CiRuntime.forgeRange<byte>(sp, X86_64InterpreterFrame.size));
	}
}

layout X86_64InterpreterFrame {
	+0	wasm_func	: i64;	// WasmFunction
	+8	mem0_base	: i64;	// Pointer
	+16	vfp		: i64;	// Pointer
	+24	vsp		: i64;	// Pointer
	+32	sidetable	: i64;	// Array<int>
	+40	stp		: i64;	// Pointer
	+48	code		: i64;	// Array<byte>
	+56	ip		: i64;	// Pointer
	+64	eip		: i64;	// Pointer
	+72	func_decl	: i64;	// FuncDecl
	+80	instance	: i64;	// Instance
	+88	curpc		: int;
	+96	accessor	: i64;	// FrameAccessor
	=104;
}

// Native frame states used in the implementation of {FrameStateAccessor}. Since a frame
// can be optimized or deoptimized in place, the frame state accessor has to check the
// state for every call.
enum X86_64FrameState {
	INVALID, INTERPRETER, SPC, SPC_TRAPS_STUB
}
// Implements access to interpreter and SPC frames.
class X86_64FrameAccessor(stack: X86_64Stack, sp: Pointer, decl: FuncDecl) extends FrameAccessor {
	var writer: X86_64FrameWriter; // non-null if any writes have been made
	var cached_depth = -1;
	var cached_ip: Pointer;
	var cached_pc: int;

	// Returns {true} if this frame has been unwound, either due to returning, a trap, or exception.
	def isUnwound() -> bool {
		if (FeatureDisable.frameAccess) return false; // TODO: proper is-frame-unwound check
		return this != (sp + X86_64InterpreterFrame.accessor.offset).load<X86_64FrameAccessor>();
	}
	// Returns the Wasm function in this frame.
	def func() -> WasmFunction {
		checkNotUnwound();
		return (sp + X86_64InterpreterFrame.wasm_func.offset).load<WasmFunction>();
	}
	// Returns the current program counter.
	def pc() -> int {
		checkNotUnwound();
		var ip = readIp();
		if (ip == cached_ip) return cached_pc;
		cached_ip = ip;
		var code = RiRuntime.findUserCode(ip);
		match (code) {
			x: X86_64SpcModuleCode => cached_pc = x.lookupPc(ip, true);
			x: X86_64InterpreterCode => cached_pc = X86_64Interpreter.computePCFromFrame(sp);
			x: X86_64SpcTrapsStub => cached_pc = (sp + X86_64InterpreterFrame.curpc.offset).load<int>();
			_ => cached_pc = -1;
		}
		return cached_pc;
	}
	// Returns {true} if this frame is currently the top executing frame, {false} if the
	// frame has called another function or been unwound.
	def isTop() -> bool {
		return true; // TODO?
	}
	// Returns the call depth of this frame within its segment, with the bottom frame being #0.
	def depth() -> int {
		checkNotUnwound();
		if (cached_depth < 0) cached_depth = computeDepth();
		return cached_depth;
	}
	private def computeDepth() -> int {
		var depth = 0;
		var next_sp = sp;
		while (true) {
			next_sp = next_sp + X86_64InterpreterFrame.size + Pointer.SIZE;
			var retip = (next_sp + -Pointer.SIZE).load<Pointer>();
			var code = RiRuntime.findUserCode(retip);
			match (code) {
				x: X86_64InterpreterCode => ;
				x: X86_64SpcCode => ;
				_ => return depth;
			}
			depth++;
		}
		return 0;
	}
	def caller() -> FrameLoc {
		checkNotUnwound();
		var frame = TargetFrame(callerSp());
		var accessor = frame.getFrameAccessor();
		if (accessor == null) return FrameLoc.None;
		return FrameLoc.Wasm(accessor.func(), accessor.pc(), frame);
	}
	def stp() -> int {
		checkNotUnwound();
		var ip = readIp();
		var code = RiRuntime.findUserCode(ip);
		match (code) {
			x: X86_64InterpreterCode => {
				var stp = (sp + X86_64InterpreterFrame.stp.offset).load<Pointer>();
				var stp0 = Pointer.atContents(func().decl.sidetable.entries);
				return int.!((stp - stp0) / 4);
			}
			_ => return -1;
		}
	}
	// Get the number of local variables in this frame.
	def numLocals() -> int {
		checkNotUnwound();
		return decl.num_locals;
	}
	// Get the value of local variable {i}.
	def getLocal(i: int) -> Value {
		checkNotUnwound();
		checkLocalBounds(i);
		var vfp = (sp + X86_64InterpreterFrame.vfp.offset).load<Pointer>();
		return stack.readValue(vfp, i);
	}
	// Get the number of operand stack elements.
	def numOperands() -> int {
		checkNotUnwound();
		var vfp = (sp + X86_64InterpreterFrame.vfp.offset).load<Pointer>();
		var vsp = (sp + X86_64InterpreterFrame.vsp.offset).load<Pointer>();
		var diff = int.!((vsp - vfp) / Target.tagging.slot_size);
		return diff - decl.num_locals;
	}
	// Get operand at depth {i}, with 0 being the top of the stack, -1 being one lower, etc.
	def getOperand(i: int) -> Value {
		checkNotUnwound();
		var vsp = (sp + X86_64InterpreterFrame.vsp.offset).load<Pointer>();
		return stack.readValue(vsp, i - 1);
	}
	// Get the frame writer.
	def getWriter() -> X86_64FrameWriter {
		return if(writer != null, writer, writer = X86_64FrameWriter.new(this));
	}

	// Read the return address from the frame.
	def readRetAddr() -> Pointer {
		return (sp + X86_64InterpreterFrame.size).load<Pointer>();
	}
	// Read the instruction pointer from the frame.
	private def readIp() -> Pointer {
		return (sp + -Pointer.SIZE).load<Pointer>();
	}
	// Compute the caller frame's stack pointer.
	def callerSp() -> Pointer {
		return sp + X86_64InterpreterFrame.size + Pointer.SIZE;
	}
	def isSpc() -> bool {
		var ip = readIp();
		var code = RiRuntime.findUserCode(ip);
		return X86_64SpcCode.?(code);
	}

	private def checkNotUnwound() {
		if (isUnwound()) System.error("FrameAccessorError", "frame has been unwound");
	}
	private def checkLocalBounds(i: int) {
		if (u32.view(i) >= decl.num_locals) System.error("FrameAccessorError", "local index out-of-bounds");
	}
	private def deoptToInterpreter() {
		var wf = func(), func = wf.decl, code = func.cur_bytecode;
		var pc = this.pc();
		(sp + X86_64InterpreterFrame.func_decl.offset)	.store<FuncDecl>(func);
		(sp + X86_64InterpreterFrame.curpc.offset)		.store<int>(pc);
		(sp + X86_64InterpreterFrame.code.offset)		.store<Array<byte>>(code);
		(sp + X86_64InterpreterFrame.ip.offset)		.store<Pointer>(Pointer.atElement(code, pc));
		(sp + X86_64InterpreterFrame.eip.offset)		.store<Pointer>(Pointer.atEnd(code));
		var map = SidetableMap.new(func); // TODO: cache in FuncDecl?
		var stp = map[pc];
		(sp + X86_64InterpreterFrame.stp.offset)		.store<Pointer>(Pointer.atElement(func.sidetable.entries, stp));
		var ic = X86_64PreGenStubs.getInterpreterCode();
		(sp + -Pointer.SIZE)			.store<Pointer>(ic.start + ic.header.deoptReentryOffset);
	}
}
private class X86_64FrameWriter extends FrameWriter {
	private def accessor: X86_64FrameAccessor;

	new(accessor) { }

	// Set the value of a local variable. (dynamically typechecked).
	def setLocal(i: int, v: Value) {
		accessor.checkNotUnwound();
		accessor.checkLocalBounds(i);	
		var vfp = (accessor.sp + X86_64InterpreterFrame.vfp.offset).load<Pointer>();
		accessor.stack.writeValue(vfp, i, v);
		if (accessor.isSpc()) accessor.deoptToInterpreter();
	}
}
