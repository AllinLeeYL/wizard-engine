// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Runtime functions called by the interpreter and JITed code.
def I: X86_64Interpreter;
component X86_64Gc {
	def runtime_STRUCT_NEW_CANON(instance: Instance, index: u32) { // XXX: unify with V3Interpreter
		var decl = StructDecl.!(instance.heaptypes[index]);
		var fields = Array<Value>.new(decl.field_types.length);
		for (i = fields.length - 1; i >= 0; i--) {
			fields[i] = I.valueStack.pop(decl.field_types[i].valtype);
		}
		I.valueStack.push(Value.Ref(HeapStruct.new(decl, fields)));
	}
	def runtime_STRUCT_NEW_CANON_DEFAULT(instance: Instance, index: u32) { // XXX: unify with V3Interpreter
		var decl = StructDecl.!(instance.heaptypes[index]);
		var fields = Array<Value>.new(decl.field_types.length);
		for (i < fields.length) {
			fields[i] = Values.default(decl.field_types[i].valtype);
		}
		I.valueStack.push(Value.Ref(HeapStruct.new(decl, fields)));
	}
	def runtime_STRUCT_GET(instance: Instance, sindex: u32, findex: u32) -> AbruptReturn { // XXX: unify with V3Interpreter
		var obj = HeapStruct.!(I.valueStack.popObject());
		if (obj == null) return I.doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		I.valueStack.push(obj.vals[findex]);
		return null;
	}
	def runtime_STRUCT_GET_S(instance: Instance, sindex: u32, findex: u32) -> AbruptReturn { // XXX: unify with V3Interpreter
		var obj = HeapStruct.!(I.valueStack.popObject());
		var decl = StructDecl.!(instance.heaptypes[int.view(sindex)]);
		if (obj == null) return I.doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		I.valueStack.push(V3Eval.signExtend(decl.field_types[findex], obj.vals[findex]));
		return null;
	}
	def runtime_STRUCT_GET_U(instance: Instance, sindex: u32, findex: u32) -> AbruptReturn { // XXX: unify with V3Interpreter
		var obj = HeapStruct.!(I.valueStack.popObject());
		var decl = StructDecl.!(instance.heaptypes[int.view(sindex)]);
		if (obj == null) return I.doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		I.valueStack.push(V3Eval.zeroExtend(decl.field_types[findex], obj.vals[findex]));
		return null;
	}
	def runtime_STRUCT_SET(instance: Instance, sindex: u32, findex: u32) -> AbruptReturn { // XXX: unify with V3Interpreter
		var decl = StructDecl.!(instance.heaptypes[int.view(sindex)]);
		var val = I.valueStack.pop(decl.field_types[findex].valtype);
		var obj = HeapStruct.!(I.valueStack.popObject());
		if (obj == null) return I.doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		obj.vals[findex] = val;
		return null;
	}
	def runtime_ARRAY_NEW_CANON(instance: Instance, index: u32) -> AbruptReturn {
		var decl = ArrayDecl.!(instance.heaptypes[index]);
		var len = I.valueStack.popu();
		var elem = I.valueStack.pop(decl.elem_types[0].valtype);
		if (len > Execute.limits.max_array_length) return I.doTrap(TrapReason.OOM, CiRuntime.callerSp());
		var length = int.view(len);
		var vals = Array<Value>.new(length);
		for (i < vals.length) vals[i] = elem;
		I.valueStack.push(Value.Ref(HeapArray.new(decl, vals)));
		return null;
	}
	def runtime_ARRAY_NEW_CANON_DEFAULT(instance: Instance, index: u32) -> AbruptReturn {
		var decl = ArrayDecl.!(instance.heaptypes[index]);
		var len = I.valueStack.popu();
		if (len > Execute.limits.max_array_length) return I.doTrap(TrapReason.OOM, CiRuntime.callerSp());
		var length = int.view(len);
		var vals = Array<Value>.new(length);
		var elem = Values.default(decl.elem_types[0].valtype);
		for (i < vals.length) vals[i] = elem;
		I.valueStack.push(Value.Ref(HeapArray.new(decl, vals)));
		return null;
	}
	def runtime_ARRAY_GET(instance: Instance, ignore: u32) -> AbruptReturn {
		var index = I.valueStack.popu();
		var obj = HeapArray.!(I.valueStack.popObject());
		if (obj == null) return I.doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		if (index >= u32.view(obj.vals.length)) return I.doTrap(TrapReason.ARRAY_INDEX_OOB, CiRuntime.callerSp());
		I.valueStack.push(obj.vals[index]);
		return null;
	}
	def runtime_ARRAY_GET_S(instance: Instance, aindex: u32) -> AbruptReturn {
		var decl = ArrayDecl.!(instance.heaptypes[aindex]);
		var index = I.valueStack.popu();
		var obj = HeapArray.!(I.valueStack.popObject());
		if (obj == null) return I.doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		if (index >= u32.view(obj.vals.length)) return I.doTrap(TrapReason.ARRAY_INDEX_OOB, CiRuntime.callerSp());
		I.valueStack.push(V3Eval.signExtend(decl.elem_types[0], obj.vals[index]));
		return null;
	}
	def runtime_ARRAY_GET_U(instance: Instance, aindex: u32) -> AbruptReturn {
		var decl = ArrayDecl.!(instance.heaptypes[aindex]);
		var index = I.valueStack.popu();
		var obj = HeapArray.!(I.valueStack.popObject());
		if (obj == null) return I.doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		if (index >= u32.view(obj.vals.length)) return I.doTrap(TrapReason.ARRAY_INDEX_OOB, CiRuntime.callerSp());
		I.valueStack.push(V3Eval.zeroExtend(decl.elem_types[0], obj.vals[index]));
		return null;
	}
	def runtime_ARRAY_SET(instance: Instance, aindex: u32) -> AbruptReturn {
		var decl = ArrayDecl.!(instance.heaptypes[aindex]);
		var val = I.valueStack.pop(decl.elem_types[0].valtype);
		var index = I.valueStack.popu();
		var obj = HeapArray.!(I.valueStack.popObject());
		if (obj == null) return I.doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		if (index >= u32.view(obj.vals.length)) return I.doTrap(TrapReason.ARRAY_INDEX_OOB, CiRuntime.callerSp());
		obj.vals[index] = val;
		return null;
	}
	def runtime_ARRAY_NEW_CANON_FIXED(instance: Instance, index: u32, len: u32) -> AbruptReturn {
		var decl = ArrayDecl.!(instance.heaptypes[index]);
		if (len > Execute.limits.max_array_length) return I.doTrap(TrapReason.OOM, CiRuntime.callerSp());
		var length = int.view(len);
		var vals = Array<Value>.new(length);
		var t = decl.elem_types[0].valtype;
		for (i = vals.length - 1; i >= 0; i--) vals[i] = I.valueStack.pop(t);
		I.valueStack.push(Value.Ref(HeapArray.new(decl, vals)));
		return null;
	}
}