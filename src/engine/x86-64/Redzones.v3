// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Collects all red zones in the system
component RedZones {
	var list: RedZone;
	
	// Add a red zone by protecting a range in the given mapping and registering it
	def addRedZone(mapping: Mapping, offset: u32, size: u32) -> bool {
		var rzStart = mapping.range.start + offset;
		var rzEnd = rzStart + size;
		var ok = Mmap.protect(rzStart, u64.view(size), Mmap.PROT_NONE);
		if (!ok) return false;
		var link = RedZone.new(rzStart, rzEnd, null, list);
		if (list != null) list.prev = link;
		list = link;
		RiGc.registerFinalizer(mapping, link.remove);
		return true;
	}
	// Check if the given address is in any red zone
	def isInRedZone(addr: Pointer) -> bool {
		if (addr >= RiRuntime.stackRedZoneStart && addr < RiRuntime.stackRedZoneEnd) {
			return true;
		}
		for (l = list; l != null; l = l.next) {
			if (addr >= l.start && addr < l.end) return true;
		}
		return false;
	}
}
// Links in the chain of red zones
class RedZone(start: Pointer, end: Pointer, var prev: RedZone, var next: RedZone) {
	def remove() {
		// finalizer called upon GC of a mapping
		if (RedZones.list == this) RedZones.list = next;
		if (prev != null) prev.next = this.next;
		if (next != null) next.prev = this.prev;
	}
}
