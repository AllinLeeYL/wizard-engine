// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Contains target-specific factory functions.
component Target {
	def V3_PARAM_GPRS = [X86_64Regs.RDI, X86_64Regs.RSI, X86_64Regs.RDX, X86_64Regs.RCX, X86_64Regs.R8, X86_64Regs.R9]; 		// System-V
	def V3_RET_GPRS = [X86_64Regs.RAX, X86_64Regs.RDX, X86_64Regs.RCX, X86_64Regs.RSI]; 			// System-V + 2

	def limit_memory_pages = 65536u;
	def newMemory = X86_64Memory.new;
	def forceGC = RiGc.forceGC;
	def reset = X86_64Interpreter.reset;
	def call = X86_64Interpreter.run;
	var asmSpcEntry: (Pointer, WasmFunction, Pointer) -> AbruptReturn;
	var globalCode: Mapping;
	def tagging = Tagging.new(true, false);

	new() {
		Execute.probes.onEnable = X86_64Interpreter.onProbeEnable;
		Execute.probes.onDisable = X86_64Interpreter.onProbeDisable;
	}

	def setMode(m: EngineMode) -> bool {
		match (m) {
			JIT => {
				Execute.mode = Mode.JIT;
				return true;
			}
			FAST => {
				Execute.mode = Mode.MIXED;
				return true;
			}
			INT, DEBUG => {
				// x86-64 target has only one execution mode; interpreter only
				Execute.mode = Mode.INTERPRETER;
				return true;
			}
		}
	}
	def modeHelp(m: EngineMode) -> string {
		match (m) {
			JIT => return "ahead-of-time compile all modules with the single-pass compiler (spc)";
			FAST => return "mixed mode with the fast interpreter (fast-int) and (spc)";
			INT, DEBUG => return "fast interpreter only (fast-int)";
		}
	}
	def finishModule(module: Module, err: ErrorGen) {
		if (Execute.mode == Mode.INTERPRETER) return; // interpreter needs no post-processing for a module
		spcCompileModule(module, err);
	}
	def spcCompileModule(module: Module, err: ErrorGen) {
		ensureSpcEntry();

		var extensions = Extension.set.all; // TODO
		var limits = Limits.new();
		var compiler = X86_64SinglePassCompiler.new(extensions, limits, X86_64Regs2.CONFIG, module);
		var w = compiler.w;
		w.put_b32(0xFFDDEECC); // ensure non-zero offset

		// generate code for all functions
		var starts = Array<int>.new(module.functions.length);
		for (i < module.functions.length) {
			var f = module.functions[i];
			if (f.imported()) continue;
			starts[i] = w.atEnd().pos;
			var compiled = compiler.gen(f);
			if (!compiled) {
				err.abs(i).FailedToCompile(i);
				starts[i] = -1;
			}
		}
		// emit handlers for signal-generated traps
		var masm = X86_64MacroAssembler.!(compiler.masm);
		var oobMemoryHandlerLabel = masm.newTrapLabel(TrapReason.MEM_OUT_OF_BOUNDS);
		var divZeroHandlerLabel = masm.newTrapLabel(TrapReason.DIV_BY_ZERO);
		var stackOverflowHandlerLabel = masm.newTrapLabel(TrapReason.STACK_OVERFLOW);

		// emit shared sequences for all trap returns
		// XXX: share trap return sequences across all modules
		for (reason in TrapReason) {
			var label = masm.getTrapLabel(reason);
			if (label != null) compiler.emitTrapReturn(label, reason);
		}

		// copy and map code
		var mapping = mapCode(masm.asm, masm.prepareToCopyInto);
		for (i < starts.length) {
			if (starts[i] > 0) {
				var addr = mapping.range.start + starts[i];
				if (Trace.compiler) Trace.OUT.put2("func[%d].spc_entry: break *0x%x", i, addr - Pointer.NULL).outln();
				setTargetCode(module.functions[i], addr);
			}
		}
		var code = X86_64SpcCode.new(mapping);
		code.oobMemoryHandlerOffset = oobMemoryHandlerLabel.offset;
		code.divZeroHandlerOffset = divZeroHandlerLabel.offset;
		code.stackOverflowHandlerOffset = stackOverflowHandlerLabel.offset;

		module.target_module = TargetModule(code);
		RiRuntime.registerUserCode(code);
		module.target_module.code.keepAlive();
	}
	def setTargetCode(f: FuncDecl, addr: Pointer) {
		f.target_code = TargetCode(addr);
	}
	def callSpcEntry(wf: WasmFunction) -> AbruptReturn {
		var valueStack = X86_64Interpreter.valueStack;
		return asmSpcEntry(valueStack.sp, wf, wf.decl.target_code.spc_entry);
	}
	def ensureSpcEntry() {
		if (asmSpcEntry == null) {
			var w = DataWriter.new();
			var asm = X86_64Assemblers.create64(w);
			var c = X86_64Regs2.CONFIG;
			def G = X86_64Regs2.toGpr;
			asm.movq_r_r(G(c.regs.vsp), Target.V3_PARAM_GPRS[1]); // vsp
			asm.movq_r_r(G(c.regs.func_arg), Target.V3_PARAM_GPRS[2]); // function
			asm.ijmp_r(Target.V3_PARAM_GPRS[3]);
			globalCode = mapCode(asm, null);
			asmSpcEntry = CiRuntime.forgeClosure<void, (Pointer, WasmFunction, Pointer), AbruptReturn>(globalCode.range.start, ());
			if (Trace.compiler) Trace.OUT.put1("spc_entry: break *0x%x", globalCode.range.start - Pointer.NULL).outln();
		}
	}
	def genInterpreterIntoFile(filename: string) -> ErrorBuilder {
		var data = System.fileLoad(filename);
		var err = ErrorBuilder.new().puts("interpreter generator: ");
		if (data == null) return err.put1("could not load executable %s\n", filename);
		var ok = X86_64Interpreter.serializeInterpreterCodeIntoExecutable(data);
		if (ok == false) return err.put1("could not patch executable %s\n", filename);
		var fd = System.fileOpen(filename, false);
		if (fd < 0) return err.put1("could not write executable: %s\n", filename);
		System.fileWriteK(fd, data, 0, data.length);
		System.fileClose(fd);
		return null;
	}
}

type TargetCode(spc_entry: Pointer) #unboxed { }
type TargetModule(code: X86_64SpcCode) #unboxed { }
type TargetFrame(sp: Pointer) #unboxed {
	def getFrameAccessor() -> FrameAccessor {
		var a: FrameAccessor = X86_64Interpreter.getFrameAccessor(sp);
		if (a == null) ; // TODO: check for JIT code
		return a;
	}
}

def mapCode(asm: X86_64Assembler, prepare: (X86_64Assembler, u64) -> void) -> Mapping {
	var w = asm.w;
	var length = u64.view(w.atEnd().pos);
	var mapping = Mmap.reserve(length, Mmap.PROT_WRITE), range = mapping.range;
	if (prepare != null) prepare(asm, u64.view(range.start - Pointer.NULL));
	var t = range.start;
	var f = Pointer.atContents(w.data);
	for (i = 0; i < length; i += Pointer.SIZE) { // XXX: manual memcopy
		t.store<Pointer>(f.load<Pointer>());
		t += Pointer.SIZE;
		f += Pointer.SIZE;
	}
	Mmap.protect(range.start, u64.!(range.end - range.start), Mmap.PROT_READ | Mmap.PROT_EXEC);
	return mapping;
}
