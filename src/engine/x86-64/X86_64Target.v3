// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Contains target-specific factory functions.
component Target {
	def limit_memory_pages = 65536u;
	private var i: X86_64Interpreter;

	def newMemory = X86_64Memory.new;
	def forceGC = RiGc.forceGC;
	private def interp() -> X86_64Interpreter {
		if (i == null) {
			i = X86_64Interpreter.new();
			Execute.probes.onEnable = i.onProbeEnable;
			Execute.probes.onDisable = i.onProbeDisable;
			if (Execute.probes.elem != null) i.onProbeEnable();
		}
		return i;
	}
	def reset() {
		if (i != null) i.reset();
	}
	def call(wf: WasmFunction, args: Array<Value>) -> Result {
		return interp().run(wf, args);
	}
	def getWasmTopFrame() -> Frame {
		return if(i != null, i.getTopFrame());
	}
	def getWasmCallStack() -> ArrayStack<Frame> {
		return if(i != null, i.getCallStack());
	}
}