// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A Wasm memory implemented using mmap/mprotect.
// XXX: factor out as a native 64-bit memory with guard regions.
class X86_64Memory extends Memory {
	var mapping: Mapping;
	var start: Pointer;
	var limit: Pointer;
	var end: Pointer;

	new(decl: MemoryDecl) super(decl) {
		if (decl == null) return;
		var bytes = u64.!(decl.initial) << PAGE_SHIFT;
		if (bytes > int.max || decl.initial > Target.limit_memory_pages) {
			oom = true;
		} else {
			// Reserve memory, unmapped, inaccessible
			mapping = Mmap.reserve(EIGHT_GB, Mmap.PROT_NONE);
			if (mapping == null) {
				oom = true; // fail out of memory
				return;
			}
			start = mapping.range.start;
			end = mapping.range.end;
			limit = start + long.view(bytes);
			// adjust permissions on guard region pages
			if (!Mmap.protect(start, bytes, Mmap.PROT_READ | Mmap.PROT_WRITE)) {
				deallocate();
				oom = true;
				return;
			}
		}
		if (Trace.memory) {
			TraceBuilder.new()
				.put3("new memory ([0x%x ... 0x%x] ... 0x%x)", start - Pointer.NULL, limit - Pointer.NULL, end - Pointer.NULL)
				.outln();
		}
	}
	def size() -> u32 {
		return u32.view((limit - start) >> PAGE_SHIFT);
	}
	def length() -> u64 {
		return u64.view(limit - start);
	}
	def deallocate() {
		mapping.range.unmap();
		mapping = null;
		start = limit = end = Pointer.NULL;
	}
	def grow(pages: u32) -> int {
		var current = u64.!(size());
		if (pages == 0) return int.!(current); // degenerate case
		var nsize = current + pages;
		if (nsize > decl.maximum.min(Target.limit_memory_pages)) return -1; // exceeded maximum
		// adjust permissions on guard region pages
		var bytes = u64.view(pages) << PAGE_SHIFT;
		if (!Mmap.protect(limit, bytes, Mmap.PROT_READ | Mmap.PROT_WRITE)) return -1;
		limit += i64.view(bytes);
		return int.!(current);
	}
	def read1(offset: u32, index: u32) -> (TrapReason, u8) {
		var i = boundsCheck(offset, index, 1);
		if (i < 0) return (TrapReason.MEM_OUT_OF_BOUNDS, 0);
		var val = (start + i).load<u8>();
		return (TrapReason.NONE, val);
	}
	def read_u16(offset: u32, index: u32) -> (TrapReason, u16) {
		var i = boundsCheck(offset, index, 2);
		if (i < 0) return (TrapReason.MEM_OUT_OF_BOUNDS, 0);
		var val = (start + i).load<u16>();
		return (TrapReason.NONE, val);
	}
	def read_u32(offset: u32, index: u32) -> (TrapReason, u32) {
		var i = boundsCheck(offset, index, 4);
		if (i < 0) return (TrapReason.MEM_OUT_OF_BOUNDS, 0);
		var val = (start + i).load<u32>();
		return (TrapReason.NONE, val);
	}
	def read_u64(offset: u32, index: u32) -> (TrapReason, u64) {
		var i = boundsCheck(offset, index, 8);
		if (i < 0) return (TrapReason.MEM_OUT_OF_BOUNDS, 0);
		var val = (start + i).load<u64>();
		return (TrapReason.NONE, val);
	}
	def write_u8(offset: u32, index: u32, val: u8) -> TrapReason {
		var i = boundsCheck(offset, index, 8);
		if (i < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		(start + i).store<u8>(val);
		return TrapReason.NONE;
	}
	def write_u16(offset: u32, index: u32, val: u16) -> TrapReason {
		var i = boundsCheck(offset, index, 2);
		if (i < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		(start + i).store<u16>(val);
		return TrapReason.NONE;
	}
	def write_u32(offset: u32, index: u32, val: u32) -> TrapReason {
		var i = boundsCheck(offset, index, 4);
		if (i < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		(start + i).store<u32>(val);
		return TrapReason.NONE;
	}
	def write_u64(offset: u32, index: u32, val: u64) -> TrapReason {
		var i = boundsCheck(offset, index, 8);
		if (i < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		(start + i).store<u64>(val);
		return TrapReason.NONE;
	}
	def extract(offset: u32, len: u32) -> Array<byte> {
		var i = boundsCheck(0, offset, len);
		if (i < 0) return null;
		var r = Array<byte>.new(int.view(len));
		for (j < len) r[j] = (start + i + j).load<u8>(); // XXX: word-by-word copy
		return r;
	}
	def copyIn(dst_offset: u32, src: Array<byte>, src_offset: u32, size: u32) -> TrapReason {
		var i = boundsCheck(0, dst_offset, size);
		if (i < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		var j = ArrayUtil.boundsCheck(src, src_offset, 0, size);
		if (j < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		for (k < size) {
			(start + i + k).store<u8>(src[u32.view(j) + k]);
		}
		return TrapReason.NONE;
	}
	def fill(dest: u32, val: u8, size: u32) -> TrapReason {
		var i = boundsCheck(0, dest, size);
		if (i < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		var p = start + i, e = p + size;
		if (size >= 8) {
			var val64: u64 = val;
			val64 = (val64 << 8) | val64;
			val64 = (val64 << 16) | val64;
			val64 = (val64 << 32) | val64;
			var ea = e + -(long.view(size) & 0x7);
			while (p < ea) {
				p.store<u64>(val64); // word-by-word fill
				p += 8;
			}
		}
		while (p < e) {
			p.store<u8>(val); // byte-by-byte fill
			p++;
		}
		return TrapReason.NONE;
	}
	def copyM(dst_offset: u32, src: Memory, src_offset: u32, size: u32) -> TrapReason {
		if (src == null) return TrapReason.MEM_OUT_OF_BOUNDS;
		var that = X86_64Memory.!(src);
		var i = this.boundsCheck(0, dst_offset, size);
		if (i < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		var j = that.boundsCheck(0, src_offset, size);
		if (j < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		if (this == that && i > j) { // potentially overlapping, copy in reverse
			var s = this.start + i;
			var p = this.start + (i + size - 1u);
			var q = that.start + (j + size - 1u);
			while (p >= s) {
				p.store<u8>(q.load<u8>());
				p += -1;
				q += -1;
			}
		} else {
			memcopy(this.start + i, that.start + j, size);
		}
		return TrapReason.NONE;
	}
	private def memcopy(p: Pointer, q: Pointer, size: u32) {
		var end = p + size;
		if (size >= 8 && u64.view(q - p) >= 8) {
			var ea = end + -(long.view(size) & 0x7);
			while (p < ea) {
				p.store<u64>(q.load<u64>()); // word-by-word copy
				p += 8;
				q += 8;
			}
		}
		while (p < end) {
			p.store<u8>(q.load<u8>());
			p++;
			q++;
		}
	}
}
def PAGE_SIZE = 65536u;
def PAGE_SHIFT: u5 = 16;
def EIGHT_GB = 8uL * 1024u * 1024u * 1024u;
