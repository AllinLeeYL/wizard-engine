// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A Wasm memory implemented using mmap/mprotect.
// XXX: factor out as a native 64-bit memory with guard regions.
class X86_64Memory extends Memory {
	var mapping: Mapping;
	var start: Pointer;
	var limit: Pointer;
	var end: Pointer;

	new(decl: MemoryDecl) super(decl) {
		if (decl == null) return;
		var bytes = u64.!(decl.initial) << PAGE_SHIFT;
		if (bytes > int.max || decl.initial > Target.limit_memory_pages) {
			oom = true;
		} else {
			// Reserve memory, unmapped, inaccessible
			mapping = Mmap.reserve(EIGHT_GB, Mmap.PROT_NONE);
			if (mapping == null) {
				oom = true; // fail out of memory
				return;
			}
			start = mapping.range.start;
			end = mapping.range.end;
			limit = start + long.view(bytes);
			platform_specific_setData(CiRuntime.forgeRange<byte>(start, int.!(bytes)));
			// adjust permissions on guard region pages
			if (!Mmap.protect(start, bytes, Mmap.PROT_READ | Mmap.PROT_WRITE)) {
				deallocate();
				oom = true;
				return;
			}
		}
		if (Trace.memory) {
			Trace.OUT
				.put3("new memory ([0x%x ... 0x%x] ... 0x%x)", start - Pointer.NULL, limit - Pointer.NULL, end - Pointer.NULL)
				.ln();
		}
	}
	def deallocate() {
		mapping.range.unmap();
		mapping = null;
		start = limit = end = Pointer.NULL;
	}
	def grow(pages: u32) -> int {
		var cur_bytes = this.length();
		var cur_pages = cur_bytes >> PAGE_SHIFT;
		if (Trace.memory) {
			Trace.OUT
				.put3("grow memory [0x%x ..+ (%d pages)] by %d pages", start - Pointer.NULL, cur_pages, pages)
				.ln();
		}
		if (pages == 0) return int.!(cur_pages); // degenerate case
		var new_pages = cur_pages + pages;
		if (new_pages > decl.maximum.min(Target.limit_memory_pages)) return -1; // exceeded maximum
		// adjust permissions on guard region pages
		var add_bytes = u64.view(pages) << PAGE_SHIFT;
		if (!Mmap.protect(limit, add_bytes, Mmap.PROT_READ | Mmap.PROT_WRITE)) return -1;
		limit += i64.view(add_bytes);
		platform_specific_setData(CiRuntime.forgeRange<byte>(start, int.!(cur_bytes + add_bytes)));
		return int.!(cur_pages);
	}
}
def PAGE_SIZE = 65536u;
def PAGE_SHIFT: u5 = 16;
def EIGHT_GB = 8uL * 1024u * 1024u * 1024u;
