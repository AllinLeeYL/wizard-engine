// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Canonicalizes signatures and structural types.
component Canon {
	private def map = HashMap<SigDecl, SigDecl>.new(SigDecl.hash, equalSigDecl);
	private var count = 0;

	def sigId(sig: SigDecl) -> int {
		if (sig.canon_id >= 0) return sig.canon_id;
		var prev = map[sig];
		if (prev != null) return prev.canon_id;
		map[sig] = sig;
		return sig.canon_id = ++count;
	}
	def hashSigDecl(sig: SigDecl) -> int {
		if (sig.hash >= 0) return sig.hash;
		var h = sig.params.length;
		for (t in sig.params) h = h * 31 + hashValueType(t);
		for (t in sig.results) h = h * 31 + hashValueType(t);
		return sig.hash = h & 0x7FFFFFFF;
	}
	def equalSigDecl(a: SigDecl, b: SigDecl) -> bool {
		return ValueTypes.isEquivalentArray(a.params, b.params) && ValueTypes.isEquivalentArray(a.results, b.results);
	}
	def hashValueType(t: ValueType) -> int {
		var h = int.view(t.tag);
		match (t) {
			Ref(nullable, heap) => {
				if (nullable) h *= 3;
				match (heap) {
					Struct(sdecl) => {
						for (st in sdecl.field_types) {
							h = h * 31 + st.valtype.tag + st.packing.tag + if(st.mutable, 33);
						}
					}
					Array(array) => {
						for (st in array.elem_types) {
							h = h * 31 + st.valtype.tag + st.packing.tag + if(st.mutable, 33);
						}
					}
					Func(sig) => {
						h += hashSigDecl(sig);
					}
					Rtt(depth, heaptype) => {
						h += depth; // XXX: more hash bits for RTT
					}
					_ => {
						h += heap.tag;
					}
				}
			}
			_ => ;
		}
		return h;
	}
	def getRtt(decl: HeapTypeDecl) -> RttObject {
		return RttObject.new(decl, Values.NO_SUPERS); // TODO: canonicalize
	}
}