// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses the binary format of WebAssembly and produces an in-memory module
// representation. The parser uses a "push" model which allows the creator to
// input segments of data into the parser incrementally, e.g. if streaming it
// over a network.
class BinParser(extensions: Extension.set, limits: Limits, filename: string) {
	def err = WasmErrorGen.new(filename);
	def module = Module.new(filename);
	var validate_code = true;
	var validator: CodeValidator;
	var parser: WasmParser;

	private var fsm: BpFsm;
	private var seen_sections = Array<bool>.new(BpSection.Data.tag + 3);
	private var declared_func_count: u32;
	private var func_body_cursor: int;

	new() {
		var callback = BinParserCallback.new(this);
		fsm = BpFsm.new(extensions, limits, err, callback);
		parser = WasmParser.new(extensions, limits, module, err, fsm.decoder);
	}

	// Push new data into the parser from the specified range. The given
	// array is not modified or retained by this call; internal copies of
	// data are made if necessary. However, do not pass an array that could
	// be concurrently modified, as it may be decoded in place.
	def push(x: Array<byte>, xpos: int, xlength: int) -> this {
		if (xlength == 0) return; // nothing to do
		if (err.error()) return;  // already hit an error
		fsm.push(x, xpos, xlength);
	}
	// Finish the decoding of the pushed bytes, returning a valid module
	// upon success, or an error.
	def finish() -> BinParserResult {
		var func_count = declared_func_count;
		if (func_count > 0 && !seen_sections[BpSection.Code.code]) {
			err.at(parser.decoder).MissingCodeSection(func_count);
		}
		var data_count = module.explicit_data_count;
		if (data_count > 0 && !seen_sections[BpSection.Data.code]) {
			err.at(parser.decoder).MissingDataSection(data_count);
		}
		return fsm.finish();
	}

	def decodeSection(kind: BpSection, size: u32, d: DataReader) {
		var start = d.pos;
		parser.decoder = d;
//		parser.debugBuffer();
		if (kind != BpSection.Unknown) {
			if (seen_sections[kind.code]) {
				if (!extensions.REPEAT_SECTIONS) return err.rel(d, d.pos-1).DuplicateSection(kind);
			} else {
				seen_sections[kind.code] = true;
			}
		}
		match (kind) {
			Unknown => readCustomSection(size);
			Type => {
				var before = module.heaptypes.length;
				var count = parser.readCountAndReserve("types", module.heaptypes, limits.max_num_types);
				var max_fw_index = u32.view(before) + count;
				readLoop("type", count, WasmParser.readHeapTypeDef(_, _, max_fw_index));
				elimFwRefs(before);
			}
			Import => {
				var count = parser.readCountAndReserve("imports", module.imports, limits.max_num_imports);
				readLoop("imports", count, WasmParser.readImportDecl);
			}
			Function => {
				var count = parser.readCountAndReserve("functions", module.functions, limits.max_num_functions);
				declared_func_count = count;
				readLoop("functions", count, WasmParser.readFuncDecl);
			}
			Table => {
				var count = parser.readCountAndReserve("tables", module.tables, limits.max_num_tables);
				readLoop("tables", count, WasmParser.readTableDecl);
			}
			Memory => {
				var count = parser.readCountAndReserve("memories", module.memories, limits.max_num_memories);
				readLoop("memories", count, WasmParser.readMemoryDecl);
			}
			Global => {
				var count = parser.readCountAndReserve("globals", module.globals, limits.max_num_globals);
				readLoop("globals", count, WasmParser.readGlobalDecl);
			}
			Export => {
				var count = parser.readCountAndReserve("exports", module.exports, limits.max_num_exports);
				var set = StringSet.new(int.!(count));
				readLoop("exports", count, WasmParser.readExportDecl(_, _, set));
			}
			Data => {
				var pos = parser.decoder.pos;
				var count = parser.readCountAndReserve("data segments", module.data, limits.max_num_data_segments);
				if (module.explicit_data_count >= 0 && count != module.explicit_data_count) {
					return err.rel(parser.decoder, pos).DataCountMismatch(module.explicit_data_count, count);
				}
				readLoop("data segments", count, WasmParser.readDataDecl);
			}
			Element => {
				var count = parser.readCountAndReserve("elements", module.elems, limits.max_num_table_entries);
				readLoop("elements", count, WasmParser.readElemDecl);
			}
			Start => readStartSection();
			DataCount => readDataCountSection();
			_ => return err.at(d).InvalidSectionCode(kind.code);
		}
		var read = d.pos - start;
		if (read < size) {
			err.at(d).IncompleteSection(kind.code, read, size);
		}
	}
	def elimFwRefs(before: int) {
		for (i = before; i < module.heaptypes.length; i++) {
			match (module.heaptypes[i]) {
				x: SigDecl => {
					elimFwRefsInArray(x.params);
					elimFwRefsInArray(x.results);
				}
				x: StructDecl => {
					elimFwRefsInStorageArray(x.field_types);
				}
				x: ArrayDecl => {
					elimFwRefsInStorageArray(x.elem_types);
				}
			}
		}
	}
	def elimFwRefsInArray(vts: Array<ValueType>) {
		for (i < vts.length) {
			match (vts[i]) {
				FwRef(nullable, index) => {
					vts[i] = module.getRefType(nullable, int.view(index));
				}
				_ => ;
			}
		}
	}
	def elimFwRefsInStorageArray(sts: Array<StorageType>) {
		for (ft in sts) {
			match (ft.valtype) {
				FwRef(nullable, index) => {
					ft.valtype = module.getRefType(nullable, int.view(index));
				}
				_ => ;
			}
		}
	}
	def beginCodeSection(abspos: int, count: u32) {
		var kind = BpSection.Code;
		if (seen_sections[kind.code]) {
			if (!extensions.REPEAT_SECTIONS) return err.abs(abspos - 1).DuplicateSection(kind);
		} else {
			seen_sections[kind.code] = true;
			if (count != declared_func_count) {
				// TODO: count >= remaining_func_count ?
				err.abs(abspos).FuncCountMismatch(declared_func_count, count);
			}
		}
	}
	def readCustomSection(size: u32) {
		var decoder = parser.decoder;
		var start = decoder.pos;
		var name = parser.readUtf8String("custom section name");
		var payload_len = int.!(size) - (decoder.pos - start);
		if (payload_len < 0) {
			return err.rel(decoder, start).CustomSectionNameLengthTooLong(name.length, size);
		}
		var payload = decoder.readN(payload_len);
		module.custom_sections.put(CustomSection.new(name, payload));
		if (Strings.equal("name", name)) module.names = NameSection.new(module, payload);
	}
	def readLoop(thing_name: string, count: u32, read: (WasmParser, int) -> void) {
		var p = parser;
		for (i < int.!(count)) {
			if (err.error()) break;
			if (parser.trace != null) parser.trace.put2("==>%s #%d", thing_name, i).outln();
			read(p, i);
		}
	}
	def readStartSection() {
		var decoder = parser.decoder;
		var pt = decoder.pos;
		var f = parser.readFuncRef();
		if (f != null) {
			module.start_function = f.func_index;
			var sig = f.sig;
			if (sig.params.length > 0 || sig.results.length > 0) {
				err.rel(decoder, pt).IllegalStartFunctionType(sig);
			}
		}
	}
	def readDataCountSection() {
		var count = parser.readU32("data count", limits.max_num_data_segments);
		if (count < limits.max_grow_size) module.data.grow(int.!(count));
		module.explicit_data_count = int.!(count);
	}
	def decodeFunctionBody(index: u32, size: u32, decoder: DataReader) {
		if (parser.trace != null) parser.trace.put1("==>body #%d", func_body_cursor).outln();
		parser.decoder = decoder;
		var start = decoder.pos;
		var f: FuncDecl, i = func_body_cursor;
		while (true) {
			if (i >= module.functions.length) {
				err.at(decoder).FuncCountMismatch(declared_func_count, index);
				return;
			}
			f = module.functions[i++];
			if (!f.imported()) break;
		}
		func_body_cursor = i;
		var body = decoder.readN(int.!(size));
		decoder.at(start);
		f.code = Code.new(body);
		if (!validate_code) return;
		if (validator == null) validator = CodeValidator.new(extensions, limits, module, err);
		validator.validate(f, decoder);
	}
}

class BinParserCallback(mp: BinParser) extends BpFsmCallback(mp.module) {
	def decodeSection(kind: BpSection, size: u32, d: DataReader) {
		mp.decodeSection(kind, size, d);
	}
	def beginCodeSection(abspos: int, count: u32) {
		mp.beginCodeSection(abspos, count);
	}
	def decodeFunctionBody(index: u32, size: u32, d: DataReader) {
		mp.decodeFunctionBody(index, size, d);
	}
}

type BinParserResult {
	case Ok(module: Module) { }
	case Error(code: WasmError, filename: string, error_pos: int, error_msg: string) { }
}

// Contains common routines for the module parser and function body parser.
class WasmParser(extensions: Extension.set, limits: Limits, module: Module,
	err: WasmErrorGen, var decoder: DataReader) {
	def trace = if(Trace.binparse, TraceBuilder.new());
	var eof = false;

	def eof_set_flag(d: DataReader, pos: int, size: int, msg: string) {
		eof = true;
	}
	def readTableRef() -> TableDecl {
		return readIndex("table", module.tables);
	}
	def readTableIndex() -> int {
		return readAndCheckIndex("table", module.tables.length).1;
	}
	def readTableImm() -> int {
		return readTableIndex();
	}
	def readSigRef() -> SigDecl {
		var pt = decoder.pos;
		var ht = readIndex("signature", module.heaptypes);
		if (SigDecl.?(ht)) return SigDecl.!(ht);
		err.rel(decoder, pt).ExpectedSignature(ht);
		return null;
	}
	def readFuncRef() -> FuncDecl {
		return readIndex("function", module.functions);
	}
	def readFuncIndex() -> int {
		return readAndCheckIndex("function", module.functions.length).1;
	}
	def readMemoryRef() -> MemoryDecl {
		return readIndex("memory", module.memories);
	}
	def readMemoryIndex() -> int {
		return readAndCheckIndex("memory", module.memories.length).1;
	}
	def readDataIndex() -> int {
		var max = module.data.length, ex = module.explicit_data_count;
		if (ex > max) max = ex;
		return readAndCheckIndex("data", max).1;
	}
	def readElemRef() -> ElemDecl {
		return readIndex("elem", module.elems);
	}
	def readMemoryImm() -> int {
		var pt = decoder.pos;
		if (extensions.MULTI_MEMORY) {
			return readMemoryIndex();
		} else {
			var b = readByte("memory index", StringBuilder.putd);
			if (b != 0) err.rel(decoder, pt).ExpectedMemoryIndexZeroByte(b);
			checkIndex(pt, "memory", 0, module.memories.length);
			return 0;
		}
	}
	def readGlobalRef() -> GlobalDecl {
		return readIndex("global", module.globals);
	}
	def readAbsTypeRef() -> AbsTypeDecl {
		return readIndex("abstract type", module.abstypes);
	}
	def readIndex<T>(quantity: string, space: Vector<T>) -> T {
		var t = readAndCheckIndex(quantity, space.length);
		return if(t.0, space[t.1]);
	}
	def readAndCheckIndex(quantity: string, max: int) -> (bool, int) {
		var pt = decoder.pos;
		var index = decoder.read_uleb32();
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.putd(index).outln();
		}
		return checkIndex(pt, quantity, index, max);
	}
	def checkIndex(pt: int, quantity: string, index: u32, max: int) -> (bool, int) {
		if (index >= max) {
			err.rel(decoder, pt).OobIndex(quantity, index, u32.!(max));
			return (false, int.!(index));
		}
		return (true, int.!(index));
	}
	def readValueType(max_fw_index: u32) -> ValueType {
		var pt = decoder.pos, b = readByte("value type", BpConstants.renderTypecon);
		match (b) {
			BpTypecon.I32.code => return ValueType.I32;
			BpTypecon.I64.code => return ValueType.I64;
			BpTypecon.F32.code => return ValueType.F32;
			BpTypecon.F64.code => return ValueType.F64;
			BpTypecon.VEC128.code => if (extensions.SIMD) {
				return ValueType.VEC128;
			}
			BpTypecon.FUNCREF.code => return ValueType.FUNCREF;
			BpTypecon.EXTERNREF.code => return ValueType.EXTERNREF;
			BpTypecon.ANYREF.code => if (extensions.GC) {
				return ValueType.ANYREF;
			}
			BpTypecon.RefT.code => {
				return readRefTypeIndex(false, max_fw_index);
			}
			BpTypecon.RefNullT.code => {
				return readRefTypeIndex(true, max_fw_index);
			}
			BpTypecon.I31REF.code => if (extensions.GC) {
				return ValueType.I31REF;
			}
			BpTypecon.Rtt.code => {
				var depth = readU32("rtt depth", limits.max_rtt_depth);
				var pt = decoder.pos;
				var index = readU32("type index", u32.max);
				var def_length = u32.view(module.heaptypes.length);
				if (index >= def_length) {
					err.rel(decoder, pt).OobIndex("type index", index, def_length);
					return ValueType.I32;
				}
				return ValueType.Rtt(int.!(depth), module.heaptypes[int.view(index)]);
			}
			BpTypecon.AbstractT.code => if (extensions.TYPE_IMPORTS) {
				var pt = decoder.pos;
				var at = readIndex("type", module.abstypes);
				if (at != null) return ValueType.Abstract(at);
				return ValueType.I32;
			}
		}

		err.rel(decoder, pt).InvalidValueTypecon(b);
		return ValueType.I32;
	}
	def readRefType(isTable: bool) -> ValueType {
		var pt = decoder.pos, b = readByte("reftype", BpConstants.renderTypecon);
		match (b) {
			BpTypecon.FUNCREF.code => return ValueType.FUNCREF;
			BpTypecon.EXTERNREF.code => return ValueType.EXTERNREF;
			BpTypecon.ANYREF.code => return ValueType.ANYREF;
			BpTypecon.RefT.code => return readRefTypeIndex(false, 0);
			BpTypecon.RefNullT.code => return readRefTypeIndex(true, 0);
		}
		if (isTable) err.rel(decoder, pt).IllegalTableElementType(b);
		else err.rel(decoder, pt).InvalidRefTypecon(b);
		return ValueType.I32;
	}
	def readRefNullType() -> ValueType {
		var pt = decoder.pos, b = decoder.peek1();
		match (b) {
			BpTypecon.FUNCREF.code => {
				readByte("reftype", BpConstants.renderTypecon);
				return ValueType.FUNCREF;
			}
			BpTypecon.EXTERNREF.code => {
				readByte("reftype", BpConstants.renderTypecon);
				return ValueType.EXTERNREF;
			}
			BpTypecon.ANYREF.code => {
				readByte("reftype", BpConstants.renderTypecon);
				return ValueType.ANYREF;
			}
		}
		if (extensions.FUNCTION_REFERENCES) return readRefTypeIndex(true, 0);
		err.rel(decoder, pt).InvalidRefTypecon(byte.view(b));
		return ValueType.I32;
	}
	def readRefTypeIndex(nullable: bool, max_fw_index: u32) -> ValueType {
		var NONE: Extension.set;
		if ((extensions & (Extension.FUNCTION_REFERENCES | Extension.GC)) == NONE) {
			var b = if(nullable, BpTypecon.RefNullT.code, BpTypecon.RefT.code);
			err.rel(decoder, decoder.pos - 1).InvalidRefTypecon(b);
			return ValueType.I32;
		}
		var pt = decoder.pos;
		var index = readU32("type index", u32.max);
		var def_length = u32.view(module.heaptypes.length);
		if (index >= def_length) {
			if (index < max_fw_index) return ValueType.FwRef(nullable, index);
			if (max_fw_index > def_length) def_length = max_fw_index;
			err.rel(decoder, pt).OobIndex("type index", index, def_length);
			return ValueType.I32;
		}
		return module.getRefType(nullable, int.view(index));
	}
	def readHeapType() -> HeapTypeDecl {
		return readIndex("type index", module.heaptypes);
	}
	def readStructType(nullable: bool) -> ValueType.RefStruct {
		var pt = decoder.pos;
		var ht = readIndex("struct", module.heaptypes);
		if (StructDecl.?(ht)) return ValueType.RefStruct(nullable, StructDecl.!(ht));
		err.rel(decoder, pt).ExpectedStructType(ht);
		return ValueType.RefStruct(false, null);
	}
	def readFieldIndex(sdecl: StructDecl) -> int {
		var pt = decoder.pos;
		var index = readU32("field index", limits.max_num_struct_fields);
		if (sdecl == null) return -1;
		var max = u32.view(sdecl.field_types.length);
		if (index >= max) {
			err.rel(decoder, pt).OobIndex("field index", index, max);
			return -1;
		}
		return int.view(index);
	}
	def readArrayType(nullable: bool) -> ValueType.RefArray {
		var pt = decoder.pos;
		var ht = readIndex("array", module.heaptypes);
		if (ArrayDecl.?(ht)) return ValueType.RefArray(nullable, ArrayDecl.!(ht));
		err.rel(decoder, pt).ExpectedArrayType(ht);
		return ValueType.RefArray(false, null);
	}
	def readU32(quantity: string, max: u32) -> u32 {
		var pt = decoder.pos;
		var val = decoder.read_uleb32();
		if (eof) return 0;
		if (val > max) err.rel(decoder, pt).QuantityExceededMaximum(quantity, val, max);
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.putd(val).outln();
		}
		return val;
	}
	def readUtf8String(quantity: string) -> string {
		var len = readU32("string length", limits.max_module_size);
		var pt = decoder.pos;
		var str = decoder.readN(int.!(len));
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.puts("\"");
			var max = 24;
			var count = decoder.pos - pt;
			for (i = 0; i < count && i < max; i++) {
				trace.put1("%c", toPrintableChar(decoder.data[pt + i]));
			}
			trace.puts("\"").outln();
		}
		if (!Utf8.validate(str)) err.rel(decoder, pt).InvalidUtf8String();
		return str;
	}
	def readByte(quantity: string, render: (StringBuilder, byte) -> StringBuilder) -> byte {
		var pt = decoder.pos;
		var r = decoder.read1();
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.put2("%d (%q)", r, render(_, r)).outln();
		}
		return r;
	}
	def readBlockType() -> SigDecl {
		var pt = decoder.pos, b = readByte("block type", BpConstants.renderTypecon);
		match (b) {
			BpTypecon.EmptyBlock.code => return SigCache.v_v;
			BpTypecon.I32.code => return SigCache.v_i;
			BpTypecon.I64.code => return SigCache.v_l;
			BpTypecon.F32.code => return SigCache.v_f;
			BpTypecon.F64.code => return SigCache.v_d;
			BpTypecon.VEC128.code => return SigCache.v_s;
			BpTypecon.FUNCREF.code => return SigCache.v_g;
			BpTypecon.EXTERNREF.code => return SigCache.v_e;
			BpTypecon.ANYREF.code => return SigCache.v_r;
			BpTypecon.RefT.code => {
				var vt = readRefTypeIndex(false, 0);
				return SigDecl.new(SigCache.arr_v, [vt]);
			}
			BpTypecon.RefNullT.code => {
				var vt = readRefTypeIndex(true, 0);
				return SigDecl.new(SigCache.arr_v, [vt]);
			}
			BpTypecon.I31REF.code => if (extensions.GC) {
				return SigCache.v_h;
			}
			BpTypecon.AbstractT.code => if (extensions.TYPE_IMPORTS) {
				var pt = decoder.pos;
				var at = readIndex("type", module.abstypes);
				if (at != null) return SigDecl.new(SigCache.arr_v, [ValueType.Abstract(at)]);
				return SigCache.v_v;
			}
		}
		decoder.at(pt); // backup and try again as full signed LEB
		var index = decoder.read_sleb32();
		if (index >= 0 && index < module.heaptypes.length) {
			match (module.heaptypes[index]) {
				x: SigDecl => return x;
			}
		}
		err.rel(decoder, pt).InvalidBlockType(index);
		return SigCache.v_v;
	}
	def readLabel() -> u32 {
		var depth = decoder.read_uleb32();
		return depth;
	}
	def readLabels() -> Array<u32> {
		var pt = decoder.pos;
		var count = decoder.read_uleb32(), max = limits.max_func_size;
		if (count > max) {
			err.rel(decoder, pt).QuantityExceededMaximum("label count", count, max);
			return null;
		}
		var length = int.!(count + 1);
		var result = Array<u32>.new(length);
		for (i < length) result[i] = decoder.read_uleb32();
		return result;
	}
	def readLocalIndex() -> u32 {
		var index = decoder.read_uleb32();
		return index;
	}
	def readMemoryArg() -> (u32, int, u32) {
		var pt = decoder.pos;
		var flags = readU32("memarg flags", u32.max); // TODO render
		var mem_index = 0;
		if (extensions.MULTI_MEMORY && ((flags & BpConstants.MEMARG_INDEX_FLAG)) != 0) {
			mem_index = readMemoryIndex();
			flags ^= 0x40;  // flip flag back
		} else {
			checkIndex(pt, "memory", 0, module.memories.length);
		}
		var offset = readU32("memarg offset", u32.max);
		return (flags, mem_index, offset);
	}
	def readI32() -> i32 {
		var pt = decoder.pos;
		var val = decoder.read_sleb32();
		if (trace != null) {
			traceBytes(pt, "i32 leb");
			trace.putd(val).outln();
		}
		return val;
	}
	def readI64() -> i64 {
		var pt = decoder.pos;
		var val = decoder.read_sleb64();
		if (trace != null) {
			traceBytes(pt, "i64 leb");
			trace.putd(val).outln();
		}
		return val;
	}
	def readF32() -> u32 {
		var pt = decoder.pos;
		var val = decoder.read_u32();
		if (trace != null) {
			traceBytes(pt, "f32 bytes");
			trace.outln();
		}
		return val;
	}
	def readF64() -> u64 {
		var pt = decoder.pos;
		var val = decoder.read_u64();
		if (trace != null) {
			traceBytes(pt, "f64 bytes");
			trace.outln();
		}
		return val;
	}
	def readTableLimits() -> (u32, Max) {
		var pt = decoder.pos;
		var flags = readByte("table flags", BpConstants.renderTableFlags);
		if ((flags & ~(limits.ok_table_flags)) != 0) WasmErrorGen.InvalidTableFlags(err.rel(decoder, pt), flags);
		var initial = readU32("initial", limits.max_num_table_entries);
		var has_max = (flags & BpMemoryFlag.HasMax.mask) != 0;
		var max: Max = Max.None;
		if (has_max) {
			var pt = decoder.pos;
			var val = readU32("maximum", limits.max_num_table_entries);
			if (val < initial) err.rel(decoder, pt).MaximumLessThanInitial("table", val, initial);
			max = Max.Set(val);
		}
		return (initial, max);

	}
	def readMemoryLimits() -> (u32, Max, bool) {
		var pt = decoder.pos;
		var flags = readByte("memory flags", BpConstants.renderMemoryFlags);
		if ((flags & ~(limits.ok_memory_flags)) != 0) WasmErrorGen.InvalidMemoryFlags(err.rel(decoder, pt), flags);
		var initial = readU32("initial", limits.max_memory_pages);
		var has_max = (flags & BpMemoryFlag.HasMax.mask) != 0;
		var max: Max = Max.None;
		if (has_max) {
			var pt = decoder.pos;
			var val = readU32("maximum", limits.max_memory_pages);
			if (val < initial) err.rel(decoder, pt).MaximumLessThanInitial("memory", val, initial);
			max = Max.Set(val);
		}
		var shared = (flags & BpMemoryFlag.Shared.mask) != 0;
		if (shared && !has_max) err.rel(decoder, pt).ExpectedSharedMemoryMaximum();
		return (initial, max, shared);
	}
	def readElemType() -> ValueType {
		return readRefType(true);
	}
	def readI32Expr(quantity: string) -> InitExpr {
		var pt = decoder.pos;
		var init = readInitExpr(quantity), vt = init.1;
		if (!ValueTypes.isAssignable(vt, ValueType.I32)) {
			err.rel(decoder, pt).ExpectedI32InitExpr(vt);
		}
		return init.0;
	}
	def readInitExpr(quantity: string) -> (InitExpr, ValueType) {
		var pt = decoder.pos, expr: InitExpr;
		def opcode = readByte("opcode", Opcodes.render);
		var vt: ValueType;
		match (opcode) {
			Opcode.I32_CONST.code => {
				var val = readI32();
				expr = InitExpr.I32(int.view(val));
				vt = ValueType.I32;
			}
			Opcode.I64_CONST.code => {
				var val = readI64();
				expr = InitExpr.I64(long.view(val));
				vt = ValueType.I64;
			}
			Opcode.F32_CONST.code => {
				var val = decoder.read_u32();
				expr = InitExpr.F32(val);
				vt = ValueType.F32;
			}
			Opcode.F64_CONST.code => {
				var val = decoder.read_u64();
				expr = InitExpr.F64(val);
				vt = ValueType.F64;
			}
			Opcode.REF_NULL.code => {
				vt = readRefNullType();
				match (vt) {
					EXTERNREF,
					ANYREF => expr = InitExpr.ExternRefNull;
					FUNCREF,
					RefFunc => expr = InitExpr.FuncRefNull;
					_ => ;
				}
			}
			Opcode.REF_FUNC.code => {
				var f = readFuncRef();
				vt = ValueType.FUNCREF;
				if (f != null) {
					f.reffed = true;
					expr = InitExpr.FuncRef(f.func_index, f);
					vt = ValueType.RefFunc(false, f.sig);
				}
			}
			Opcode.GLOBAL_GET.code => {
				var g = readGlobalRef();
				if (g != null) {
					if (g.mutable) err.rel(decoder, pt).ExpectedImmutableGlobalInInit(g);
					expr = InitExpr.Global(g.global_index, g);
					vt = g.valtype;
				}
			}
			_ => {
				err.rel(decoder, pt).UnexpectedOpcodeInInit(opcode);
			}
		}
		pt = decoder.pos;
		var end = readByte("end opcode", Opcodes.render);
		if (end != Opcode.END.code) {
			err.rel(decoder, pt).ExpectedEndInInit(end);
		}
		return (expr, vt);
	}
	def readHeapTypeDef(index: int, max_fw_index: u32) {
		var pt = decoder.pos;
		var code = readByte("type decl code", BpConstants.renderTypeDecl);
		var decl: Decl;
		match (code) {
			BpHeapType.Function.code => {
				pt = decoder.pos;
				var ptypes = readValueTypes("param count", limits.max_num_func_params, max_fw_index);
				if (!err.ok()) return;
				var rtypes = readValueTypes("result count", limits.max_num_func_results, max_fw_index);
				if (!err.ok()) return;
				decl = SigDecl.new(ptypes, rtypes);
			}
			BpHeapType.Struct.code => if (extensions.GC) {
				var count = readU32("field count", limits.max_num_struct_fields);
				if (!err.ok()) return;
				var field_types = Array<StorageType>.new(int.!(count));
				for (j < field_types.length) {
					field_types[j] = readStorageType(max_fw_index);
				}
				if (!err.ok()) return;
				decl = StructDecl.new(field_types);
			}
			BpHeapType.Array.code => if (extensions.GC) {
				var elem_type = readStorageType(max_fw_index);
				if (!err.ok()) return;
				decl = ArrayDecl.new([elem_type]);
			}
		}
		if (decl == null) err.rel(decoder, pt).InvalidTypeDeclCode(code);
		else module.addDecl(decl);
	}
	def readStorageType(max_fw_index: u32) -> StorageType {
		var vt = readValueType(max_fw_index); // TODO: parse packed types
		var mut = readMutability();
		return StorageType.new(vt, Packedness.UNPACKED, mut);
	}
	def readValueTypes(quantity: string, limit: u32, max_fw_index: u32) -> Array<ValueType> {
		var count = readU32(quantity, limit);
		if (!err.ok()) return ValueTypes.NONE;
		var types = Array<ValueType>.new(int.!(count));
		for (j < types.length) {
			types[j] = readValueType(max_fw_index);
		}
		return types;
	}
	def readImportDecl(index: int) {
		var module_name = readUtf8String("import module name");
		var field_name = readUtf8String("import field name");
		var pt = decoder.pos;
		var kind = readByte("import kind", BpConstants.renderImportKind);
		var decl: Decl;
		var args = Modules.NO_IMPORT_ARGS;
		if (extensions.TYPE_IMPORTS && kind == BpImportExportKind.Args.code) {
			var count = readU32("import arg count", limits.max_num_exports);
			if (!err.ok()) return;
			args = Array<Decl>.new(int.!(count));
			for (i < count) args[i] = readExportWithoutName();
			kind = readByte("import kind", BpConstants.renderImportKind);
		}
		match (kind) {
			BpImportExportKind.Function.code => {
				reserveOne(pt, "functions", module.functions, limits.max_num_functions);
				var sig = readSigRef();
				decl = FuncDecl.new(sig);
			}
			BpImportExportKind.Table.code => {
				reserveOne(pt, "tables", module.tables, limits.max_num_tables);
				var et = readElemType();
				var l = readTableLimits();
				decl = TableDecl.new(et, l.0, l.1);
			}
			BpImportExportKind.Memory.code => {
				reserveOne(pt, "memories", module.memories, limits.max_num_memories);
				var l = readMemoryLimits();
				decl = MemoryDecl.new(l.0, l.1, l.2);
			}
			BpImportExportKind.Global.code => {
				reserveOne(pt, "globals", module.globals, limits.max_num_globals);
				var t = readValueType(0);
				var mut = readMutability();
				decl = GlobalDecl.new(t, mut, InitExpr.I32(0));
			}
			BpImportExportKind.AbsType.code => if (extensions.TYPE_IMPORTS) {
				var flags = readByte("flags", BpConstants.renderAbsTypeFlags);
				var has_default = (flags & BpAbsTypeFlag.HasDefault.mask) != 0;
				var is_externref = (flags & BpAbsTypeFlag.IsExternRef.mask) != 0;
				var count = readU32("constraint count", limits.max_num_type_constraints);
				var vec = Vector<ValueType>.new();
				if (count < limits.max_grow_size) vec.grow(int.!(count));
				for (i < count) {
					var b = readByte("constraint type", BpConstants.renderNone);
					if (b != 0) err.rel(decoder, pt).InvalidTypeConstraint(b);
					var t = readValueType(0);
					vec.put(t);
				}
				decl = AbsTypeDecl.new(has_default, is_externref, vec.extract());
			}
			BpImportExportKind.Command.code => if (extensions.TYPE_IMPORTS) {
				decl = ImportCommandDecl.new();
			}
		}
		if (decl == null) err.rel(decoder, pt).InvalidImportKind(kind);
		else module.addImport(module_name, field_name, args, decl);
	}
	def readFuncDecl(index: int) {
		var pt = decoder.pos;
		var sig = readSigRef();
		var decl = FuncDecl.new(sig);
		module.addDecl(decl);
	}
	def readTableDecl(index: int) {
		var pt = decoder.pos;
		var et = readElemType();
		var l = readTableLimits();
		var decl = TableDecl.new(et, l.0, l.1);
		if (!ValueTypes.hasDefaultValue(et)) {
			err.rel(decoder, pt).ExpectedTypeWithDefaultValue(et);
		}
		module.addDecl(decl);
	}
	def readMemoryDecl(index: int) {
		var l = readMemoryLimits();
		var decl = MemoryDecl.new(l.0, l.1, l.2);
		module.addDecl(decl);
	}
	def readGlobalDecl(index: int) {
		var vt = readValueType(0);
		var mut = readMutability();
		var pos = decoder.pos;
		var init = readInitExpr("global initializer"), vti = init.1;
		if (!ValueTypes.isAssignable(vti, vt)) {
			return err.at(decoder).TypeMismatchInGlobalInit(vt, vti);
		}
		var decl = GlobalDecl.new(vt, mut, init.0);
		module.addDecl(decl);
	}
	def readMutability() -> bool {
		var pt = decoder.pos;
		var flags = readByte("mutability", BpConstants.renderMutability);
		if ((flags & 0xFE) != 0) {
			err.rel(decoder, pt).InvalidGlobalFlags(flags);
		}
		return (flags & BpGlobalFlag.Mutable.mask) != 0;
	}
	def readExportDecl(index: int, exportSet: StringSet) {
		var pt = decoder.pos;
		var name = readUtf8String("export name");
		if (exportSet != null && exportSet.add(name)) {
			err.rel(decoder, pt).DuplicateExport(index);
		}
		var decl = readExportWithoutName();
		module.exports.put(name, decl);
	}
	def readExportWithoutName() -> Decl {
		var pt = decoder.pos;
		var kind = readByte("export kind", BpConstants.renderImportKind);
		var decl: Decl;
		match (kind) {
			BpImportExportKind.Function.code => decl = readFuncRef();
			BpImportExportKind.Table.code => decl = readTableRef();
			BpImportExportKind.Memory.code => decl = readMemoryRef();
			BpImportExportKind.Global.code => decl = readGlobalRef();
			BpImportExportKind.AbsType.code => decl = readAbsTypeRef();
			_ => err.rel(decoder, pt).InvalidExportKind(kind);
		}
		return decl;
	}
	def readElemDecl(index: int) {
		var pt = decoder.pos;
		var flags = readByte("elem flags", BpConstants.renderNone);
		var vt: ValueType = ValueType.FUNCREF, mode: SegmentMode, details: ElemDetails;
		match (flags) {
			0 => {
				var table_index = checkIndex(pt, "table", 0, module.tables.length).1;
				var offset = readI32Expr("elements offset");
				mode = SegmentMode.Active(table_index, offset);
				details = readElemFuncIndexes(table_index);
			}
			1 => {
				mode = SegmentMode.Passive;
				readElemKind();
				details = readElemFuncIndexes(int.max);
			}
			2 => {
				var table_index = readTableIndex();
				var offset = readI32Expr("elements offset");
				readElemKind();
				mode = SegmentMode.Active(table_index, offset);
				details = readElemFuncIndexes(table_index);
			}
			3 => {
				mode = SegmentMode.Declarative;
				readElemKind();
				details = readElemFuncIndexes(int.max);
			}
			4 => {
				var table_index = checkIndex(pt, "table", 0, module.tables.length).1;
				var offset = readI32Expr("elements offset");
				mode = SegmentMode.Active(table_index, offset);
				details = readElemInitExprs(ValueType.FUNCREF);
			}
			5 => {
				mode = SegmentMode.Passive;
				vt = readRefType(false);
				details = readElemInitExprs(vt);
			}
			6 => {
				var table_index = readTableIndex();
				var offset = readI32Expr("elements offset");
				mode = SegmentMode.Active(table_index, offset);
				vt = readRefType(false);
				details = readElemInitExprs(vt);
			}
			7 => {
				mode = SegmentMode.Declarative;
				vt = readRefType(false);
				details = readElemInitExprs(vt);
			}
			_ => {
				err.rel(decoder, pt).InvalidElemFlags(flags);
			}
		}
		var d = ElemDecl.new(vt, mode, details);
		module.elems.put(d);
	}
	def readElemKind() {
		var pt = decoder.pos;
		var elem_kind = readByte("elem kind", BpConstants.renderNone);
		if (elem_kind != 0) err.rel(decoder, pt).ExpectedElemKindZeroByte(elem_kind);
	}
	def readElemFuncIndexes(table_index: int) -> ElemDetails.FuncRefs {
		var count = readU32("element count", limits.max_num_table_entries);
		var elemType: ValueType, expected_sig: SigDecl;
		if (table_index < module.tables.length) {
			elemType = module.tables[table_index].elemtype;
			match (elemType) {
				FUNCREF => ;
				RefFunc(nullable, sig) => expected_sig = sig;
				_ => err.at(decoder).TypeMismatchInElemInit(elemType, ValueType.FUNCREF);
			}
		}
		var array = Array<int>.new(int.!(count));
		for (i < array.length) {
			var pt = decoder.pos;
			var f = readFuncRef();
			if (f != null) {
				f.reffed = true;
				array[i] = f.func_index;
				if (expected_sig != null && !f.sig.isAssignableSig(expected_sig)) {
					err.rel(decoder, pt).TypeMismatchInElemInit(elemType, ValueType.RefFunc(false, f.sig));
				}
			}
		}
		return ElemDetails.FuncRefs(array);
	}
	def readElemInitExprs(elemType: ValueType) -> ElemDetails.Exprs {
		var count = readU32("element count", limits.max_num_table_entries);
		var array = Array<InitExpr>.new(int.!(count));
		for (i < array.length) {
			var pt = decoder.pos;
			var t = readInitExpr("element");
			if (!ValueTypes.isAssignable(t.1, elemType)) {
				err.rel(decoder, pt).TypeMismatchInElemInit(elemType, t.1);
			}
			array[i] = t.0;
		}
		return ElemDetails.Exprs(array);
	}
	def readDataDecl(index: int) {
		var pt = decoder.pos;
		var flags = readByte("data flags", BpConstants.renderNone);
		var mode: SegmentMode;
		match (flags) {
			0 => {
				var mem_index = checkIndex(pt, "memory", 0, module.memories.length).1;
				var offset = readI32Expr("data element offset");
				mode = SegmentMode.Active(mem_index, offset);
			}
			1 => {
				mode = SegmentMode.Passive;
			}
			2 => {
				var mem_index = readMemoryIndex();
				var offset = readI32Expr("data element offset");
				mode = SegmentMode.Active(mem_index, offset);
			}
			_ => {
				err.rel(decoder, pt).InvalidDataFlags(flags);
			}
		}
		var len = readU32("data segment size", limits.max_data_segment_size);
		var data = decoder.readN(int.!(len));
		var d = DataDecl.new(mode, data);
		module.data.put(d);
	}
	def traceBytes(pt: int, quantity: string) -> StringBuilder {
		if (quantity == null) return trace;
		var count = decoder.pos - pt;
		trace.put1("%x: ", decoder.abs_of(pt));
		for (i < count) {
			if (i > 0 && (i % 8) == 0) trace.puts("\n          ");
			trace.put1("%x ", decoder.data[pt + i]);
		}
		var rounded = ((count + 7) / 8) * 8;
		for (i < rounded - count) trace.puts("   ");
		trace.put1(" %s = ", quantity);
		return trace;
	}

	def debugBuffer() {
		if (trace == null) return;
		trace.put2("[buf@+%d limit=%d ", decoder.pos, decoder.limit);
		if (eof) trace.puts("eof ");
		if (err.error_pos < int.max) {
			trace.put1("err@+%d ", err.error_pos);
		}
		if (err.error_msg != null) {
			trace.put1("msg=\"%s\"", err.error_msg);
		}
		trace.putc(']').outln();
	}

	def toPrintableChar(b: byte) -> byte {
		if (b < ' ' || b > 127) b = '.';
		return b;
	}
	def readCountAndReserve<T>(quantity: string, vec: Vector<T>, max: u32) -> u32 {
		var pt = decoder.pos;
		var count = readU32(quantity, max);
		var total = (u32.view(vec.length) + count);
		if (total > max) {
			err.rel(decoder, pt).TotalExceededMaximum(quantity, total, max);
		} else {
			vec.grow(int.view(total));
		}
		return count;
	}
	def reserveOne<T>(pt: int, quantity: string, vec: Vector<T>, max: u32) {
		var total = u32.view(vec.length) + 1u;
		if (total > max) {
			err.rel(decoder, pt).TotalExceededMaximum(quantity, total, max);
		}
	}
}

// A finite state machine that implements a push-based parser for binary
// modules. This class handles the decoding of complete sections and complete
// function bodies, invoking callbacks when sections, bodies, and the overall
// module is finished.
class BpFsm extends WasmParser {
	def callback: BpFsmCallback;
	var section_decoder: DataReader;
	var function_decoder: DataReader;

	// Internal state
	var state: BpFsmState;
	var current_pos: int;
	var more = true;
	var accept = false;
	var current_section: BpSection;
	var section_start: int;
	var section_size: u32;
	var function_body_count: u32;
	var current_function_body: u32;
	var function_body_start: int;
	var function_body_size: u32;

	new(extensions: Extension.set, limits: Limits, err: WasmErrorGen, callback: BpFsmCallback)
			super(extensions, limits, callback.module,
				err,
				Decoder.new(null, err)) {
		decoder.onEOF = eof_set_flag;
		section_decoder = Decoder.new(null, err);
		section_decoder.onEOF = eof_is_section_overflow;
		function_decoder = Decoder.new(null, err);
		function_decoder.onEOF = eof_is_function_overflow;
	}

	def push(x: Array<byte>, xpos: int, xlength: int) {
		eof = false;
		decoder.putk(0, x, xpos, xlength);
		decodeLoop();
	}
	def finish() -> BinParserResult {
		eof = false;
		more = false;
		decodeLoop();
		if (accept && err.ok()) return BinParserResult.Ok(callback.module);
		return BinParserResult.Error(err.error_code, callback.module.filename,
				err.error_pos, err.error_msg);
	}

	private def decodeLoop() {
		while (true) {
			advance();
			if (eof) return;
			if (accept) return;
			if (err.error()) return;
		}
	}
	private def advance() {
		current_pos = decoder.pos;
		if (trace != null) {
// TODO: this is debug code, not tracing code
//			trace.put3("@+%d [%d bytes] BpFsm.state=%s", decoder.abspos(),
//				decoder.available(), state.name).outln();
		}
		match (state) {
			MAGIC => {
				var pt = decoder.pos;
				var magic = decoder.read_u32();
				if (eof) return if(!retry(), err.at(decoder).EOFMagicWord());
				if (magic != BpConstants.WASM_MAGIC) err.rel(decoder, pt).InvalidMagicWord(magic);
				state = BpFsmState.VERSION;
			}
			VERSION => {
				var pt = decoder.pos;
				var version = decoder.read_u32();
				if (eof) return if(!retry(), err.at(decoder).EOFWasmVersion());
				if (version != BpConstants.WASM_VERSION) err.rel(decoder, pt).InvalidWasmVersion(version);
				state = BpFsmState.SECTION_START;
			}
			SECTION_START => {
				var b = readByte("section code", BpConstants.renderSectionName);
				if (eof) {
					if (!retry()) accept = true;
					return;
				}
				current_section = checkSectionCode(b);
				state = BpFsmState.SECTION;
			}
			SECTION => {
				var pt = decoder.pos;
				section_size = readU32("section size", limits.max_module_size);
				if (eof) return if(!retry(), err_incomplete_section(decoder.abs_of(pt), 0));
				section_start = decoder.abspos();
				state = BpFsmState.SECTION_WITH_SIZE;
			}
			SECTION_WITH_SIZE => {
				match (current_section) {
					Code => {  // code section handled specially, one function body at a time
						function_body_count = readU32("function body count", limits.max_num_functions);
						if (eof) return if(!retry(), err_incomplete_section(section_start, section_size));
						function_body_start = decoder.abspos();
						current_function_body = 0;
						state = BpFsmState.BODY;
						callback.beginCodeSection(function_body_start, function_body_count);
					}
					_ => {
						decoder.sub_bytes(section_decoder, int.!(section_size));
						if (eof) return if(!retry(), err_incomplete_section(section_start, section_size));
						callback.decodeSection(current_section, section_size, section_decoder);
						state = BpFsmState.SECTION_START;
					}
				}
			}
			BODY => {
				if (current_function_body == function_body_count) { // already read N bodies
					var read = decoder.abspos() - section_start;
					if (read < section_size) err.at(decoder).IncompleteSection(BpSection.Code.code, read, section_size);
					if (read > section_size) err.at(decoder).OverflowSection(BpSection.Code.code, read, section_size);
					state = BpFsmState.SECTION_START;
				} else {
					function_body_size = readU32("function body size", limits.max_func_size);
					if (eof) return if(!retry(), err_incomplete_function(current_function_body, 0));
					state = BpFsmState.BODY_WITH_SIZE;
				}
			}
			BODY_WITH_SIZE => {
				decoder.sub_bytes(function_decoder, int.!(function_body_size));
				var next_start = decoder.abspos();
				if (eof) return if(!retry(), err_incomplete_function(current_function_body, function_body_size));
				callback.decodeFunctionBody(current_function_body, function_body_size, function_decoder);
				function_body_start = next_start;
				current_function_body++;
				state = BpFsmState.BODY;
			}
		}
	}
	def retry() -> bool {
		if (more) {
			decoder.at(current_pos);
			return true;
		}
		return false;
	}
	def checkSectionCode(b: byte) -> BpSection {
		if (!BpConstants.valid_section[b]) {
			err.at(decoder).InvalidSectionCode(b);
		}
		return BpConstants.enum_section[b];
	}
	def eof_is_section_overflow(d: DataReader, pos: int, size: int, msg: string) {
		var kind = current_section.code;
		var read = d.abs_of(pos) - section_start;
		var size = section_size;
		err.rel(d, pos).OverflowSection(kind, read, size);
	}
	def eof_is_function_overflow(d: DataReader, pos: int, size: int, msg: string) {
		var read = d.abs_of(pos) - function_body_start;
		var size = function_body_size;
		err.rel(d, pos).OverflowFunctionBody(read, size);
	}
	def err_incomplete_section(abs: int, size: u32) {
		var kind = current_section;
		var read = decoder.abspos() - abs;
		err.at(decoder).IncompleteSection(kind.code, read, size);
	}
	def err_incomplete_function(index: u32, size: u32) {
		var read = decoder.abspos() - function_body_start;
		err.at(decoder).IncompleteFunctionBody(read, size);
	}
}
// The callbacks for sections, function bodies, and finishing a module.
class BpFsmCallback(module: Module) {
	def decodeSection(kind: BpSection, size: u32, d: DataReader);
	def beginCodeSection(abspos: int, count: u32) {}
	def decodeFunctionBody(index: u32, size: u32, d: DataReader);
}
// The states for the module parser finite state machine.
enum BpFsmState {
	MAGIC,
	VERSION,
	SECTION_START,
	SECTION,
	SECTION_WITH_SIZE,
	BODY,
	BODY_WITH_SIZE
}
