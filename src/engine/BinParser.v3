// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses the binary format of WebAssembly and produces an in-memory module
// representation. The parser uses a "push" model which allows the creator to
// input segments of data into the parser incrementally, e.g. if streaming it
// over a network.
class BinParser {
	def filename: string;
	def err = WasmErrorGen.new(filename);
	def module = Module.new(filename);
	def extensions: Extension.set;
	def limits: Limits;
	var validate_code = true;
	var validator: CodeValidator;
	var parser: WasmParser;

	new(extensions, limits, filename) {
		var callback = BinParserCallback.new(this);
		fsm = BpFsm.new(extensions, limits, err, callback);
		parser = WasmParser.new(extensions, limits, module, err, fsm.decoder);
	}

	private var fsm: BpFsm;
	private var seen_sections = Array<bool>.new(BpSection.Data.tag + 3);
	private var total_module_size: int;
	private var declared_func_count: u32;
	private var func_body_cursor: int;
	private var last_count: u32;

	// Push new data into the parser from the specified range. The given
	// array is not modified or retained by this call; internal copies of
	// data are made if necessary. However, do not pass an array that could
	// be concurrently modified, as it may be decoded in place.
	def push(x: Array<byte>, xpos: int, xlength: int) -> this {
		if (xlength == 0) return; // nothing to do
		if (err.error()) return;  // already hit an error
		fsm.push(x, xpos, xlength);
	}
	// Finish the decoding of the pushed bytes, returning a valid module
	// upon success, or an error.
	def finish() -> BinParserResult {
		var func_count = declared_func_count;
		if (func_count > 0 && !seen_sections[BpSection.Code.code]) {
			err.at(parser.decoder).MissingCodeSection(func_count);
		}
		var data_count = module.explicit_data_count;
		if (data_count > 0 && !seen_sections[BpSection.Data.code]) {
			err.at(parser.decoder).MissingDataSection(data_count);
		}
		return fsm.finish();
	}

	def decodeSection(kind: BpSection, size: u32, d: Decoder) {
		var start = d.pos;
		parser.decoder = d;
		parser.traceBuffer();
		if (kind != BpSection.Unknown) {
			if (seen_sections[kind.code]) {
				if (!extensions.REPEAT_SECTIONS) return err.rel(d, d.pos-1).DuplicateSection(kind);
			} else {
				seen_sections[kind.code] = true;
			}
		}
		match (kind) {
			Unknown => readCustomSection(size);
			Type => {
				var count = parser.readU32("type count", 0, limits.max_num_types);
				readLoop("type", count, module.deftypes, WasmParser.readDefType);
			}
			Import => {
				var count = parser.readU32("import count", 0, limits.max_num_imports);
				readLoop("imports", count, module.imports, WasmParser.readImportDecl);
			}
			Function => {
				var count = parser.readU32("function count", 0, limits.max_num_functions);
				declared_func_count = count;
				readLoop("function", count, module.functions, WasmParser.readFunctionDecl);
			}
			Table => {
				var count = parser.readU32("table count", 0, limits.max_num_tables);
				readLoop("tables", count, module.tables, WasmParser.readTableDecl);
			}
			Memory => {
				var count = parser.readU32("memory count", 0, limits.max_num_memories);
				readLoop("memories", count, module.memories, WasmParser.readMemoryDecl);
			}
			Global => {
				var count = parser.readU32("global count", 0, limits.max_num_globals);
				readLoop("globals", count, module.globals, WasmParser.readGlobalDecl);
			}
			Export => {
				var count = parser.readU32("exports count", 0, limits.max_num_exports);
				var set = StringSet.new(int.!(count));
				readLoop("export", count, module.exports, WasmParser.readExportDecl(_, _, set));
			}
			Data => {
				var pos = parser.decoder.pos;
				var count = parser.readU32("data count", 0, limits.max_num_data_segments);
				if (module.explicit_data_count >= 0 && count != module.explicit_data_count) {
					return err.rel(parser.decoder, pos).DataCountMismatch(module.explicit_data_count, count);
				}
				readLoop("data segment", count, module.data, WasmParser.readDataDecl);
			}
			Element => {
				var count = parser.readU32("element count", 0, limits.max_num_table_entries);
				readLoop("elements", count, module.elems, WasmParser.readElemDecl);
			}
			Start => readStartSection();
			DataCount => readDataCountSection();
			_ => return err.at(d).InvalidSectionCode(kind.code);
		}
		var read = d.pos - start;
		if (read < size) {
			err.at(d).IncompleteSection(kind.code, read, size);
		}
	}
	def beginCodeSection(abspos: int, count: u32) {
		var kind = BpSection.Code;
		if (seen_sections[kind.code]) {
			if (!extensions.REPEAT_SECTIONS) return err.abs(abspos - 1).DuplicateSection(kind);
		} else {
			seen_sections[kind.code] = true;
			if (count != declared_func_count) {
				// TODO: count >= remaining_func_count ?
				err.abs(abspos).FuncCountMismatch(declared_func_count, count);
			}
		}
	}
	def readCustomSection(size: u32) {
		var decoder = parser.decoder;
		var start = decoder.pos;
		var name = parser.readUtf8String("custom section name");
		var payload_len = int.!(size) - (decoder.pos - start);
		if (payload_len < 0) {
			return err.rel(decoder, start).CustomSectionNameLengthTooLong(name.length, size);
		}
		var payload = decoder.read_bytes(payload_len);
		module.custom_sections.put(CustomSection.new(name, payload));
	}
	def checkAndTrace(thing_name: string, i: int) -> bool {
		if (err.error()) return false;
		if (parser.trace != null) {
			parser.trace.put2("==>%s #%d\n", thing_name, i);
			parser.flush();
		}
		return true;
	}
	def readLoop<T>(thing_name: string, count: u32, vec: Vector<T>, read: (WasmParser, int) -> T) {
		var p = parser;
		for (i < int.!(count)) {
			if (!checkAndTrace(thing_name, i)) break;
			vec.put(read(p, i));
		}
	}
	def readStartSection() {
		var decoder = parser.decoder;
		var pt = decoder.pos;
		var t = parser.readFunc(), index = t.0, func = t.1;
		module.start_function = t.0;
		if (func != null &&
			(func.sig.params.length > 0 || func.sig.results.length > 0)) {
			err.rel(decoder, pt).IllegalStartFunctionType(func.sig);
		}
	}
	def readDataCountSection() {
		if (!extensions.BULK_MEMORY) err.at(parser.decoder).InvalidSectionCode(BpSection.DataCount.code);
		var count = parser.readU32("data count", 0, limits.max_num_data_segments);
		if (count < MAX_GROW_SIZE) module.data.grow(int.!(count));
		module.explicit_data_count = int.!(count);
	}

	def decodeFunctionBody(index: u32, size: u32, d: Decoder) {
		var decoder = parser.decoder = d;
		var start = decoder.pos;
		var f: FunctionDecl, i = func_body_cursor;
		while (true) {
			if (i >= module.functions.length) {
				err.at(d).FuncCountMismatch(declared_func_count, index);
				return;
			}
			f = module.functions[i++];
			if (!f.imported) break;
		}
		func_body_cursor = i;
		var body = decoder.read_bytes(int.!(size));
		decoder.pos = start;
		f.code = FunctionCode.new(body);
		if (!validate_code) return;
		if (validator == null) validator = CodeValidator.new(extensions, limits, module, err);
		validator.validate(f, d);
	}
}
class BinParserCallback(mp: BinParser) extends BpFsmCallback(mp.module) {
	def decodeSection(kind: BpSection, size: u32, d: Decoder) {
		mp.decodeSection(kind, size, d);
	}
	def beginCodeSection(abspos: int, count: u32) {
		mp.beginCodeSection(abspos, count);
	}
	def decodeFunctionBody(index: u32, size: u32, d: Decoder) {
		mp.decodeFunctionBody(index, size, d);
	}
}

type BinParserResult {
	case Ok(module: Module) { }
	case Error(code: WasmError, filename: string, error_pos: int, error_msg: string) { }
}
// Internal constants.
def MAX_GROW_SIZE = 1000000;
// Header constants.
def renderImportKind(buf: StringBuilder, b: byte) -> StringBuilder {
	var s = "unknown";
	match (b) {
		BpImportExportKind.Function.code => s = "function";
		BpImportExportKind.Table.code => s = "table";
		BpImportExportKind.Memory.code => s = "memory";
		BpImportExportKind.Global.code => s = "global";
		BpImportExportKind.Event.code => s = "event";
		BpImportExportKind.Type.code => s = "type";
	}
	return buf.puts(s);
}
def renderTypecon(buf: StringBuilder, b: byte) -> StringBuilder {
	var s = "unknown";
	match (b) {
		BpTypecon.I32.code => s = "i32";
		BpTypecon.I64.code => s = "i64";
		BpTypecon.F32.code => s = "f32";
		BpTypecon.F64.code => s = "f64";
		BpTypecon.VEC128.code => s = "vec128";
		BpTypecon.FuncRef.code => s = "funcref";
		BpTypecon.ExternRef.code => s = "externref";
		BpTypecon.Function.code => s = "func";
		BpTypecon.EmptyBlock.code => s = "empty";
	}
	return buf.puts(s);
}
def renderNone(buf: StringBuilder, b: byte) -> StringBuilder {
	return buf;
}
def renderMemFlags(buf: StringBuilder, v: u32) -> StringBuilder {
	return buf.put1("align=%d", v);
}
def renderGlobalFlags(buf: StringBuilder, b: byte) -> StringBuilder {
	if ((b & 1) == 1) buf.puts("mutable");
	return buf;
}
def renderLimitFlags(buf: StringBuilder, b: byte) -> StringBuilder {
	if ((b & 1) == 1) buf.puts("has_max");
	if ((b & 2) == 2) buf.puts(" shared");
	return buf;
}
def EMPTY: Array<ValueType> = [];
def FUNC_VEC128 = FuncSig.new(EMPTY, [ValueType.VEC128]);
def FUNC_FUNCREF = FuncSig.new(EMPTY, [ValueType.FUNCREF]);
def FUNC_EXTERNREF = FuncSig.new(EMPTY, [ValueType.EXTERNREF]);

// Contains common routines for the module parser and function body parser.
class WasmParser(extensions: Extension.set, limits: Limits, module: Module,
	err: WasmErrorGen, var decoder: Decoder) {
	def trace = if(Trace.binparse, StringBuilder.new());
	var eof = false;

	def eof_set_flag(d: Decoder, pos: int, size: int, msg: string) {
		eof = true;
	}
	def readTable() -> (int, TableDecl) {
		return readIndex("table", module.tables);
	}
	def readTableImm() -> int {
		var pt = decoder.pos;
		if (extensions.REFERENCE_TYPES || extensions.BULK_MEMORY) {
			return readTable().0;
		} else {
			var b = readByte("table index", StringBuilder.putd);
			if (b != 0) err.rel(decoder, pt).ExpectedTableIndexZeroByte(b);
			checkIndex(pt, "table", 0, module.tables.length);
			return 0;
		}
	}
	def readSig() -> (int, FuncSig) {
		var pt = decoder.pos;
		var r = readIndexV("signature", module.deftypes);
		if (DefType.Function.?(r.1)) {
			return (r.0, DefType.Function.!(r.1).f);
		} else {
			err.rel(decoder, pt).ExpectedFunctionType(r.0);
			return (r.0, null);
		}
	}
	def readFunc() -> (int, FunctionDecl) {
		return readIndex("function", module.functions);
	}
	def readMemoryIndex() -> int {
		return readAndCheckIndex("memory", module.memories.length).1;
	}
	def readDataIndex() -> int {
		var max = module.data.length, ex = module.explicit_data_count;
		if (ex > max) max = ex;
		return readAndCheckIndex("data", max).1;
	}
	def readElem() -> (int, ElemDecl) {
		var t = readAndCheckIndex("memory", module.elems.length);
		return if(t.0, (t.1, module.elems[t.1]), (-1, null));
	}
	def readElemIndex() -> int {
		return readElem().0;
	}
	def readMemoryImm() -> int {
		var pt = decoder.pos;
		if (extensions.MULTI_MEMORY) {
			return readMemoryIndex();
		} else {
			var b = readByte("memory index", StringBuilder.putd);
			if (b != 0) err.rel(decoder, pt).ExpectedMemoryIndexZeroByte(b);
			checkIndex(pt, "memory", 0, module.memories.length);
			return 0;
		}
	}
	def readGlobal() -> (int, GlobalDecl) {
		return readIndex("global", module.globals);
	}
	def readIndex<T>(quantity: string, space: Vector<T>) -> (int, T) {
		var t = readAndCheckIndex(quantity, space.length);
		return (t.1, if(t.0, space[t.1]));
	}
	def readIndexV<T>(quantity: string, space: Vector<T>) -> (int, T) {
		var t = readAndCheckIndex(quantity, space.length);
		return (t.1, if(t.0, space[t.1]));
	}
	def readAndCheckIndex(quantity: string, max: int) -> (bool, int) {
		var pt = decoder.pos;
		var index = decoder.read_u32leb();
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.putd(index).ln();
			flush();
		}
		return checkIndex(pt, quantity, index, max);
	}
	def checkIndex(pt: int, quantity: string, index: u32, max: int) -> (bool, int) {
		if (index >= max) {
			err.rel(decoder, pt).OobIndex(quantity, index, u32.!(max));
			return (false, int.!(index));
		}
		return (true, int.!(index));
	}
	def readValueType() -> ValueType {
		var pt = decoder.pos, b = readByte("value type", renderTypecon);
		match (b) {
			BpTypecon.I32.code => return ValueType.I32;
			BpTypecon.I64.code => return ValueType.I64;
			BpTypecon.F32.code => return ValueType.F32;
			BpTypecon.F64.code => return ValueType.F64;
			BpTypecon.VEC128.code => {
				if (extensions.SIMD) return ValueType.VEC128;
			}
			BpTypecon.FuncRef.code => {
				if (extensions.REFERENCE_TYPES) return ValueType.FUNCREF;
			}
			BpTypecon.ExternRef.code => {
				if (extensions.REFERENCE_TYPES) return ValueType.EXTERNREF;
			}
			BpTypecon.RefFuncT.code => {
				if (extensions.FUNCTION_REFERENCES) return ValueType.RefFunc(readSig().1);
			}
			BpTypecon.RefNullFuncT.code => {
				if (extensions.FUNCTION_REFERENCES) return ValueType.RefNullFunc(readSig().1);
			}
			BpTypecon.ImportedT.code => {
				if (extensions.TYPE_IMPORTS) {
					var pt = decoder.pos;
					var t = readIndex("type", module.types);
					if (t.1 != null) return ValueType.Imported(t.1);
					return ValueType.I32;
				}
			}
		}

		err.rel(decoder, pt).InvalidValueTypecon(b);
		return ValueType.I32;
	}
	def readRefType(isTable: bool) -> ValueType {
		var pt = decoder.pos, b = readByte("reftype", renderTypecon);
		match (b) {
			BpTypecon.FuncRef.code => return ValueType.FUNCREF;
			BpTypecon.ExternRef.code => return ValueType.EXTERNREF;
		}
		if (isTable) err.rel(decoder, pt).IllegalTableElementType(b);
		else err.rel(decoder, pt).InvalidRefTypecon(b);
		return ValueType.I32;
	}
	def readU32(quantity: string, min: u32, max: u32) -> u32 {
		var pt = decoder.pos;
		var val = decoder.read_u32leb();
		if (eof) return 0;
		if (val < min) err.rel(decoder, pt).QuantityBelowMinimum(quantity, int.!(val), min);
		if (val > max) err.rel(decoder, pt).QuantityExceededMaximum(quantity, val, max);
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.putd(val).ln();
			flush();
		}
		return val;
	}
	def readU64(quantity: string) -> u64 {
		var pt = decoder.pos;
		var val = decoder.read_u64leb();
		if (eof) return 0;
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.putd(val).ln();
			flush();
		}
		return val;
	}
	def readUtf8String(quantity: string) -> string {
		var len = readU32("string length", 0, limits.max_module_size);
		var pt = decoder.pos;
		var str = decoder.read_bytes(int.!(len));
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.puts("\"");
			var max = 24;
			var count = decoder.pos - pt;
			for (i = 0; i < count && i < max; i++) {
				trace.put1("%c", toPrintableChar(decoder.data[pt + i]));
			}
			trace.puts("\"\n");
			flush();
		}
		if (!Utf8.validate(str)) err.rel(decoder, pt).InvalidUtf8String();
		return str;
	}
	def readByte(quantity: string, render: (StringBuilder, byte) -> StringBuilder) -> byte {
		var pt = decoder.pos;
		var r = decoder.read_u8();
		if (trace != null) {
			traceBytes(pt, quantity);
			trace.put2("%d (%q)\n", r, render(_, r));
			flush();
		}
		return r;
	}
	def readBlockType() -> FuncSig {
		var pt = decoder.pos, b = readByte("block type", renderTypecon);
		match (b) {
			BpTypecon.EmptyBlock.code => return SigCache.v_v;
			BpTypecon.I32.code => return SigCache.v_i;
			BpTypecon.I64.code => return SigCache.v_l;
			BpTypecon.F32.code => return SigCache.v_f;
			BpTypecon.F64.code => return SigCache.v_d;
			BpTypecon.VEC128.code => return FUNC_VEC128;
			BpTypecon.FuncRef.code => return FUNC_FUNCREF;
			BpTypecon.ExternRef.code => return FUNC_EXTERNREF;
		}
		decoder.at(pt); // backup and try again as full signed LEB
		var index = decoder.read_i32leb();
		if (index < 0 || index >= module.deftypes.length) {
			err.rel(decoder, pt).InvalidBlockType(index);
			return SigCache.v_v;
		}
		match (module.deftypes[index]) {
			Function(f) => return f;
		}
	}
	def readLabel() -> u32 {
		var depth = decoder.read_u32leb();
		return depth;
	}
	def readLabels() -> Array<u32> {
		var pt = decoder.pos;
		var count = decoder.read_u32leb(), max = limits.max_func_size;
		if (count > max) {
			err.rel(decoder, pt).QuantityExceededMaximum("label count", count, max);
			return null;
		}
		var length = int.!(count + 1);
		var result = Array<u32>.new(length);
		for (i < length) result[i] = decoder.read_u32leb();
		return result;
	}
	def readLocalIndex() -> u32 {
		var index = decoder.read_u32leb();
		return index;
	}
	def readMemoryArg() -> (u32, int, u32) {
		var pt = decoder.pos;
		var flags = readU32("memarg flags", 0, u32.max); // TODO render
		var mem_index = 0;
		if (extensions.MULTI_MEMORY && (flags & 0x40) != 0) {
			mem_index = readMemoryIndex();
			flags ^= 0x40;  // flip flag back
		} else {
			checkIndex(pt, "memory", 0, module.memories.length);
		}
		var offset = readU32("memarg offset", 0, u32.max);
		return (flags, mem_index, offset);
	}
	def readI32() -> i32 {
		var pt = decoder.pos;
		var val = decoder.read_i32leb();
		if (trace != null) {
			traceBytes(pt, "i32 leb");
			trace.putd(val).ln();
			flush();
		}
		return val;
	}
	def readI64() -> i64 {
		var pt = decoder.pos;
		var val = decoder.read_i64leb();
		if (trace != null) {
			traceBytes(pt, "i64 leb");
			trace.putd(val).ln();
			flush();
		}
		return val;
	}
	def readF32() -> u32 {
		var pt = decoder.pos;
		var val = decoder.read_u32();
		if (trace != null) {
			traceBytes(pt, "f32 bytes");
			trace.ln();
			flush();
		}
		return val;
	}
	def readF64() -> u64 {
		var pt = decoder.pos;
		var val = decoder.read_u64();
		if (trace != null) {
			traceBytes(pt, "f64 bytes");
			trace.ln();
			flush();
		}
		return val;
	}
	def readLimits(quantity: string, limit: u32) -> (int, int) {
		var flags = readByte("flags", renderLimitFlags);
		var min = readU32("initial", 0, limit);
		var has_max = (flags & 1) == 1;
		var max = -1;
		if (has_max) {
			var pt = decoder.pos;
			max = int.!(readU32("maximum", min, limit));
		}
		return (int.!(min), max);
	}
	def readMemoryLimits(quantity: string, limit: u32) -> (int, int, bool) {
		var pt = decoder.pos;
		var flags = readByte("flags", renderLimitFlags);
		var min = readU32("initial", 0, limit);
		var has_max = (flags & 1) == 1;
		var max = -1, shared = false;
		if (has_max) {
			var pt = decoder.pos;
			max = int.!(readU32("maximum", min, limit));
		}
		if (extensions.ATOMICS) {
			shared = (flags & 2) == 2;
			if (shared && !has_max) err.rel(decoder, pt).ExpectedSharedMemoryMaximum();
		}
		return (int.!(min), max, shared);
	}
	def readElemType() -> ValueType {
		return readRefType(true);
	}
	def readI32Expr(quantity: string) -> InitExpr {
		var pt = decoder.pos;
		var init = readInitExpr(quantity), vt = init.1;
		if (!ValueTypes.isAssignable(vt, ValueType.I32)) {
			err.rel(decoder, pt).ExpectedI32InitExpr(vt);
		}
		return init.0;
	}
	def readInitExpr(quantity: string) -> (InitExpr, ValueType) {
		var pt = decoder.pos, expr: InitExpr;
		def opcode = readByte("opcode", Opcodes.render);
		var vt: ValueType;
		match (opcode) {
			Opcode.I32_CONST.code => {
				var val = readI32();
				expr = InitExpr.I32(int.view(val));
				vt = ValueType.I32;
			}
			Opcode.I64_CONST.code => {
				var val = readI64();
				expr = InitExpr.I64(long.view(val));
				vt = ValueType.I64;
			}
			Opcode.F32_CONST.code => {
				var val = decoder.read_u32();
				expr = InitExpr.F32(val);
				vt = ValueType.F32;
			}
			Opcode.F64_CONST.code => {
				var val = decoder.read_u64();
				expr = InitExpr.F64(val);
				vt = ValueType.F64;
			}
			Opcode.REF_NULL.code => {
				vt = readRefType(false);
				if (vt == ValueType.FUNCREF) expr = InitExpr.FuncRefNull;
				else if (vt == ValueType.EXTERNREF) expr = InitExpr.ExternRefNull;
			}
			Opcode.REF_FUNC.code => {
				var f = readFunc();
				vt = ValueType.FUNCREF;
				expr = InitExpr.FuncRef(f);
				if (f.1 != null) f.1.reffed = true;
			}
			Opcode.GLOBAL_GET.code => {
				var g = readGlobal();
				expr = InitExpr.Global(g);
				if (g.1 != null) vt = g.1.valtype;
			}
			_ => {
				err.rel(decoder, pt).UnexpectedOpcodeInInit(opcode);
			}
		}
		pt = decoder.pos;
		var end = readByte("end opcode", Opcodes.render);
		if (end != Opcode.END.code) {
			err.rel(decoder, pt).ExpectedEndInInit(end);
		}
		return (expr, vt);
	}
	def readDefType(index: int) -> DefType {
		var pt = decoder.pos, invalid: DefType;
		var form = readByte("type constructor", renderTypecon);
		if (form != BpTypecon.Function.code) {
			err.rel(decoder, pt).ExpectedFunctionTypecon(form);
			return invalid;
		}
		pt = decoder.pos;
		var ptypes = readValueTypes("param count", limits.max_num_func_params);
		if (!err.ok()) return invalid;
		var rtypes = readValueTypes("result count", limits.max_num_func_results);
		if (!err.ok()) return invalid;
		return DefType.Function(FuncSig.new(ptypes, rtypes));
	}
	def readValueTypes(quantity: string, limit: u32) -> Array<ValueType> {
		var count = readU32(quantity, 0, limit);
		if (!err.ok()) return ValueTypes.NONE;
		var types = Array<ValueType>.new(int.!(count));
		for (j < types.length) {
			types[j] = readValueType();
		}
		return types;
	}
	def readImportDecl(index: int) -> ImportDecl {
		var module_name = readUtf8String("import module name");
		var field_name = readUtf8String("import field name");
		var pt = decoder.pos;
		var kind = readByte("import kind", renderImportKind);
		var result: ImportDecl;
		var details: ImportDetails;
		match (kind) {
			BpImportExportKind.Function.code => {
				var sig = readSig();
				var decl = FunctionDecl.new(true, module.functions.length, sig.0, sig.1);
				module.functions.put(decl);
				details = ImportDetails.Function(decl);
			}
			BpImportExportKind.Table.code => {
				checkMaxNumTables(pt);
				var et = readElemType();
				var l = readLimits("table", limits.max_table_size);
				var decl = TableDecl.new(module.tables.length, et, l.0, l.1);
				module.tables.put(decl);
				details = ImportDetails.Table(decl);
			}
			BpImportExportKind.Memory.code => {
				checkMaxNumMemories(pt);
				var l = readMemoryLimits("memory", limits.max_memory_pages);
				var decl = MemoryDecl.new(module.memories.length, l.0, l.1, l.2);
				module.memories.put(decl);
				details = ImportDetails.Memory(decl);
			}
			BpImportExportKind.Global.code => {
				var t = readValueType();
				var mut = readGlobalFlags();
				var decl = GlobalDecl.new(module.globals.length, t, mut, InitExpr.I32(0));
				module.globals.put(decl);
				details = ImportDetails.Global(decl);
			}
			BpImportExportKind.Type.code => {
				if (extensions.TYPE_IMPORTS) {
					var flags = decoder.read_u8();
					var count = readU32("constraint count", 0, limits.max_num_type_constraints);
					var vec = Vector<ValueType>.new();
					if (count < MAX_GROW_SIZE) vec.grow(int.!(count));
					for (i < count) {
						var b = readByte("constraint type", renderNone);
						if (b != 0) err.rel(decoder, pt).InvalidTypeConstraint(b);
						var t = readValueType();
						vec.put(t);
					}
					var t = ImportedType.new(index, module.types.length, vec.extract());
					module.types.put(t);
					details = ImportDetails.Type(t);
				} else {
					err.rel(decoder, pt).InvalidImportKind(kind);
				}
			}
			BpImportExportKind.Command.code => {
				details = ImportDetails.Command;
			}
			_ => err.rel(decoder, pt).InvalidImportKind(kind);
		}
		return ImportDecl.new(module_name, field_name, details);
	}
	def readFunctionDecl(index: int) -> FunctionDecl {
		var pt = decoder.pos;
		var sig = readSig();
		return FunctionDecl.new(false, module.functions.length, sig.0, sig.1);
	}
	def readTableDecl(index: int) -> TableDecl {
		checkMaxNumTables(decoder.pos);
		var et = readElemType();
		var l = readLimits("table", limits.max_table_size);
		return TableDecl.new(module.tables.length, et, l.0, l.1);
	}
	def readMemoryDecl(index: int) -> MemoryDecl {
		checkMaxNumMemories(decoder.pos);
		var l = readMemoryLimits("memory", limits.max_memory_pages);
		return MemoryDecl.new(module.memories.length, l.0, l.1, l.2);
	}
	def readGlobalDecl(index: int) -> GlobalDecl {
		var vt = readValueType();
		var mut = readGlobalFlags();
		var pos = decoder.pos;
		var init = readInitExpr("global initializer"), vti = init.1;
		if (!ValueTypes.isAssignable(vti, vt)) {
			err.at(decoder).TypeMismatchInGlobalInit(vt, vti);
		}
		return GlobalDecl.new(module.globals.length, vt, mut, init.0);
	}
	def readGlobalFlags() -> bool {
		var pt = decoder.pos;
		var flags = readByte("flags", renderGlobalFlags);
		if ((flags & 0xFE) != 0) {
			err.rel(decoder, pt).InvalidGlobalFlags(flags);
		}
		return (flags & 1) != 0;
	}
	def readExportDecl(index: int, exportSet: StringSet) -> ExportDecl {
		var pt = decoder.pos;
		var name = readUtf8String("export name");
		if (exportSet != null && exportSet.add(name)) {
			err.rel(decoder, pt).DuplicateExport(index);
		}
		pt = decoder.pos;
		var kind = readByte("export kind", renderImportKind);
		var details: ExportDetails;
		match (kind) {
			BpImportExportKind.Function.code => {
				var index = readFunc().0;
				details = ExportDetails.Function(index);
			}
			BpImportExportKind.Table.code => {
				var index = readTable().0;
				details = ExportDetails.Table(index);
			}
			BpImportExportKind.Memory.code => {
				var index = readMemoryIndex();
				details = ExportDetails.Memory(index);
			}
			BpImportExportKind.Global.code => {
				var index = readGlobal().0;
				details = ExportDetails.Global(index);
			}
			_ => err.rel(decoder, pt).InvalidExportKind(kind);
		}
		return ExportDecl.new(name, details);
	}
	def readElemDecl(index: int) -> ElemDecl {
		var pt = decoder.pos;
		var flags = readByte("data flags", renderNone);
		if (flags != 0 && !(extensions.REFERENCE_TYPES || extensions.BULK_MEMORY)) {
			err.rel(decoder, pt).ExpectedElementsZeroByte(flags);
			return null;
		}
		var vt: ValueType = ValueType.FUNCREF, mode: SegmentMode, details: ElemDetails;
		match (flags) {
			0 => {
				var table_index = checkIndex(pt, "table", 0, module.tables.length).1;
				var offset = readI32Expr("elements offset");
				mode = SegmentMode.Active(table_index, offset);
				details = readElemFuncIndexes(table_index);
			}
			1 => {
				mode = SegmentMode.Passive;
				readElemKind();
				details = readElemFuncIndexes(int.max);
			}
			2 => {
				var table_index = readTable().0;
				var offset = readI32Expr("elements offset");
				readElemKind();
				mode = SegmentMode.Active(table_index, offset);
				details = readElemFuncIndexes(table_index);
			}
			3 => {
				mode = SegmentMode.Declarative;
				readElemKind();
				details = readElemFuncIndexes(int.max);
			}
			4 => {
				var table_index = checkIndex(pt, "table", 0, module.tables.length).1;
				var offset = readI32Expr("elements offset");
				mode = SegmentMode.Active(table_index, offset);
				details = readElemInitExprs(ValueType.FUNCREF);
			}
			5 => {
				mode = SegmentMode.Passive;
				vt = readRefType(false);
				details = readElemInitExprs(vt);
			}
			6 => {
				var table_index = readTable().0;
				var offset = readI32Expr("elements offset");
				mode = SegmentMode.Active(table_index, offset);
				vt = readRefType(false);
				details = readElemInitExprs(vt);
			}
			7 => {
				mode = SegmentMode.Declarative;
				vt = readRefType(false);
				details = readElemInitExprs(vt);
			}
			_ => {
				err.rel(decoder, pt).InvalidElemFlags(flags);
			}
		}
		return ElemDecl.new(vt, mode, details);
	}
	def readElemKind() {
		var pt = decoder.pos;
		var elem_kind = readByte("elem kind", renderNone);
		if (elem_kind != 0) err.rel(decoder, pt).ExpectedElemKindZeroByte(elem_kind);
	}
	def readElemFuncIndexes(table_index: int) -> ElemDetails.FuncRefs {
		var count = readU32("element count", 0, limits.max_num_table_entries);
		if (table_index < module.tables.length) {
			var elemType = module.tables[table_index].elemtype;
			if (elemType != ValueType.FUNCREF) {
				err.at(decoder).TypeMismatchInElemInit(elemType, ValueType.FUNCREF);
			}
		}
		var array = Array<int>.new(int.!(count));
		for (i < array.length) {
			var t = readFunc();
			array[i] = t.0;
			if (t.1 != null) t.1.reffed = true;
		}
		return ElemDetails.FuncRefs(array);
	}
	def readElemInitExprs(elemType: ValueType) -> ElemDetails.Exprs {
		var count = readU32("element count", 0, limits.max_num_table_entries);
		var array = Array<InitExpr>.new(int.!(count));
		for (i < array.length) {
			var pt = decoder.pos;
			var t = readInitExpr("element");
			if (!ValueTypes.isAssignable(t.1, elemType)) {
				err.rel(decoder, pt).TypeMismatchInElemInit(elemType, t.1);
			}
			array[i] = t.0;
		}
		return ElemDetails.Exprs(array);
	}
	def readDataDecl(index: int) -> DataDecl {
		var pt = decoder.pos;
		var flags = readByte("data flags", renderNone);
		if (flags != 0 && !(extensions.REFERENCE_TYPES || extensions.BULK_MEMORY)) {
			err.rel(decoder, pt).ExpectedDataFlagsZeroByte(flags);
			return null;
		}
		var mode: SegmentMode;
		match (flags) {
			0 => {
				var mem_index = checkIndex(pt, "memory", 0, module.memories.length).1;
				var offset = readI32Expr("data element offset");
				mode = SegmentMode.Active(mem_index, offset);
			}
			1 => {
				mode = SegmentMode.Passive;
			}
			2 => {
				var mem_index = readMemoryIndex();
				var offset = readI32Expr("data element offset");
				mode = SegmentMode.Active(mem_index, offset);
			}
			_ => {
				err.rel(decoder, pt).InvalidDataFlags(flags);
			}
		}
		var len = readU32("data segment size", 0, limits.max_data_segment_size);
		var data = decoder.read_bytes(int.!(len));
		return DataDecl.new(mode, data);
	}
	def traceBytes(pt: int, quantity: string) -> StringBuilder {
		if (quantity == null) return trace;
		var count = decoder.pos - pt;
		trace.put1("%x: ", decoder.abs(pt));
		for (i < count) {
			if (i > 0 && (i % 8) == 0) trace.puts("\n          ");
			trace.put1("%x ", decoder.data[pt + i]);
		}
		var rounded = ((count + 7) / 8) * 8;
		for (i < rounded - count) trace.puts("   ");
		trace.put1(" %s = ", quantity);
		return trace;
	}
	def checkMaxNumTables(pt: int) {
		var max = limits.max_num_tables, size = module.tables.length;
		if (size >= max) {
			err.rel(decoder, pt).QuantityExceededMaximum("total tables", u32.!(size), max);
		}
	}
	def checkMaxNumMemories(pt: int) {
		var max = limits.max_num_memories, size = module.memories.length;
		if (size >= max) {
			err.rel(decoder, pt).QuantityExceededMaximum("total memories", u32.!(size), max);
		}
	}

	def traceBuffer() {
		if (trace == null) return;
		trace.put2("[buf@+%d limit=%d ", decoder.pos, decoder.limit);
		if (eof) trace.puts("eof ");
		if (err.error_pos < int.max) {
			trace.put1("err@+%d ", err.error_pos);
		}
		if (err.error_msg != null) {
			trace.put1("msg=\"%s\"", err.error_msg);
		}
		trace.putc(']').ln();
		flush();
	}

	def toPrintableChar(b: byte) -> byte {
		if (b < ' ' || b > 127) b = '.';
		return b;
	}
	def flush() {
		trace.out(Trace.STDOUT);
		trace.reset();
	}
}
def EMPTY_BYTES = Array<byte>.new(0);

// A finite state machine that implements a push-based parser for binary
// modules. This class handles the decoding of complete sections and complete
// function bodies, invoking callbacks when sections, bodies, and the overall
// module is finished.
class BpFsm extends WasmParser {
	def callback: BpFsmCallback;
	var section_decoder: Decoder;
	var function_decoder: Decoder;

	// Internal state
	var state: BpFsmState;
	var current_pos: int;
	var more = true;
	var accept = false;
	var current_section: BpSection;
	var section_start: int;
	var section_size: u32;
	var function_body_count: u32;
	var current_function_body: u32;
	var function_body_start: int;
	var function_body_size: u32;

	new(extensions: Extension.set, limits: Limits, err: WasmErrorGen, callback: BpFsmCallback)
			super(extensions, limits, callback.module,
				err,
				Decoder.new(EMPTY_BYTES, err)) {
		decoder.eof_behavior = eof_set_flag;
		section_decoder = Decoder.new(EMPTY_BYTES, err);
		section_decoder.eof_behavior = eof_is_section_overflow;
		function_decoder = Decoder.new(EMPTY_BYTES, err);
		function_decoder.eof_behavior = eof_is_function_overflow;
	}

	def push(x: Array<byte>, xpos: int, xlength: int) {
		eof = false;
		decoder.append(0, x, xpos, xlength);
		decodeLoop();
	}
	def finish() -> BinParserResult {
		eof = false;
		more = false;
		decodeLoop();
		if (accept && err.ok()) return BinParserResult.Ok(callback.module);
		return BinParserResult.Error(err.error_code, callback.module.filename,
				err.error_pos, err.error_msg);
	}

	private def decodeLoop() {
		while (true) {
			advance();
			if (eof) return;
			if (accept) return;
			if (err.error()) return;
		}
	}
	private def advance() {
		current_pos = decoder.pos;
		if (trace != null) {
			trace.put3("@+%d [%d bytes] BpFsm.state=%s\n", decoder.abs_pos(),
				decoder.available(), state.name);
			flush();
		}
		match (state) {
			MAGIC => {
				var pt = decoder.pos;
				var magic = decoder.read_u32();
				if (eof) return if(!retry(), err.at(decoder).EOFMagicWord());
				if (magic != BpConstants.WASM_MAGIC) err.rel(decoder, pt).InvalidMagicWord(magic);
				state = BpFsmState.VERSION;
			}
			VERSION => {
				var pt = decoder.pos;
				var version = decoder.read_u32();
				if (eof) return if(!retry(), err.at(decoder).EOFWasmVersion());
				if (version != BpConstants.WASM_VERSION) err.rel(decoder, pt).InvalidWasmVersion(version);
				state = BpFsmState.SECTION_START;
			}
			SECTION_START => {
				var b = readByte("section code", BpConstants.renderSectionName);
				if (eof) {
					if (!retry()) accept = true;
					return;
				}
				current_section = checkSectionCode(b);
				state = BpFsmState.SECTION;
			}
			SECTION => {
				var pt = decoder.pos;
				section_size = readU32("section size", 0, limits.max_module_size);
				if (eof) return if(!retry(), err_incomplete_section(decoder.abs(pt), 0));
				section_start = decoder.abs_pos();
				state = BpFsmState.SECTION_WITH_SIZE;
			}
			SECTION_WITH_SIZE => {
				match (current_section) {
					Code => {  // code section handled specially, one function body at a time
						function_body_count = readU32("function body count", 0, limits.max_num_functions);
						if (eof) return if(!retry(), err_incomplete_section(section_start, section_size));
						function_body_start = decoder.abs_pos();
						current_function_body = 0;
						state = BpFsmState.BODY;
						callback.beginCodeSection(function_body_start, function_body_count);
					}
					_ => {
						decoder.sub_bytes(section_decoder, int.!(section_size));
						if (eof) return if(!retry(), err_incomplete_section(section_start, section_size));
						callback.decodeSection(current_section, section_size, section_decoder);
						state = BpFsmState.SECTION_START;
					}
				}
			}
			BODY => {
				if (current_function_body == function_body_count) { // already read N bodies
					var read = decoder.abs_pos() - section_start;
					if (read < section_size) err.at(decoder).IncompleteSection(BpSection.Code.code, read, section_size);
					if (read > section_size) err.at(decoder).OverflowSection(BpSection.Code.code, read, section_size);
					state = BpFsmState.SECTION_START;
				} else {
					function_body_size = readU32("function body size", 0, limits.max_func_size);
					if (eof) return if(!retry(), err_incomplete_function(current_function_body, 0));
					state = BpFsmState.BODY_WITH_SIZE;
				}
			}
			BODY_WITH_SIZE => {
				decoder.sub_bytes(function_decoder, int.!(function_body_size));
				var next_start = decoder.abs_pos();
				if (eof) return if(!retry(), err_incomplete_function(current_function_body, function_body_size));
				callback.decodeFunctionBody(current_function_body, function_body_size, function_decoder);
				function_body_start = next_start;
				current_function_body++;
				state = BpFsmState.BODY;
			}
		}
	}
	def checkSectionLength(kind: byte, abs: int, size: u32) {
		var read = decoder.abs_pos() - abs;
	}
	def retry() -> bool {
		if (more) {
			decoder.pos = current_pos;
			return true;
		}
		return false;
	}
	def checkSectionCode(b: byte) -> BpSection {
		if (!BpConstants.valid_section[b]) {
			err.at(decoder).InvalidSectionCode(b);
		}
		return BpConstants.enum_section[b];
	}
	def eof_is_section_overflow(d: Decoder, pos: int, size: int, msg: string) {
		var kind = current_section.code;
		var read = d.abs(pos) - section_start;
		var size = section_size;
		err.rel(d, pos).OverflowSection(kind, read, size);
	}
	def eof_is_function_overflow(d: Decoder, pos: int, size: int, msg: string) {
		var read = d.abs(pos) - function_body_start;
		var size = function_body_size;
		err.rel(d, pos).OverflowFunctionBody(read, size);
	}
	def err_incomplete_section(abs: int, size: u32) {
		var kind = current_section;
		var read = decoder.abs_pos() - abs;
		err.at(decoder).IncompleteSection(kind.code, read, size);
	}
	def err_incomplete_function(index: u32, size: u32) {
		var read = decoder.abs_pos() - function_body_start;
		err.at(decoder).IncompleteFunctionBody(read, size);
	}
}
// The callbacks for sections, function bodies, and finishing a module.
class BpFsmCallback(module: Module) {
	def decodeSection(kind: BpSection, size: u32, d: Decoder);
	def beginCodeSection(abspos: int, count: u32) {}
	def decodeFunctionBody(index: u32, size: u32, d: Decoder);
}
// The states for the module parser finite state machine.
enum BpFsmState {
	MAGIC,
	VERSION,
	SECTION_START,
	SECTION,
	SECTION_WITH_SIZE,
	BODY,
	BODY_WITH_SIZE
}
