// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements that validation logic for the code of a function.
class CodeValidator(extensions: Extension.set, limits: Limits,
		module: Module, err: WasmErrorGen) {
	def parser = WasmParser.new(extensions, limits, module, err, null);
	var root = LocalsChunk.new(Vector.new(), null);
	var locals: LocalsChunk;
	def val_stack = Stack<ValueType>.new();
	def ctl_stack = Stack<ControlEntry>.new();
	def trace = if(Trace.validation, InstrTracer.new());
	def ctlxfer = CtlXferBuilder.new(trace);
	var ctl_top: ControlEntry;  // FAST: cache of top of control stack
	var func: FuncDecl;
	var sig: SigDecl;
	var opcode_pos: int;

	def validateFunc(f: FuncDecl) -> CodeValidatorResult {
		return validate(f, Decoder.new(f.code.orig, err));
	}
	def validate(f: FuncDecl, d: Decoder) -> CodeValidatorResult {
		func = f;
		sig = f.sig;
		if (trace != null) {
			trace.put2("validate(func #%d: %q)",
				f.func_index, sig.render).outln();
		}
		d.pos_offset = func.code.abs_start;
		parser.decoder = d;
		ctl_stack.clear();
		val_stack.clear();
		ctlxfer.reset(parser.decoder.pos);

		// setup params
		locals = root;
		locals.vec.resize(0);
		locals.vec.puta(sig.params);
		// read and initialize locals
		if (!readLocals(locals.vec, false)) return reterr();
		func.code.num_locals = locals.vec.length;

		opcode_pos = parser.decoder.pos;
		pushControl(Opcode.UNREACHABLE.code, sig, 0);
		validateCode();
		if (ctl_stack.top != 0 && err.ok()) {
			err.rel(d, f.code.orig.length).UnterminatedFunctionBody();
		}
		func.code.ctl_xfer = ctlxfer.extract();
		if (err.ok()) return CodeValidatorResult.Ok;
		return reterr();
	}
	def readLocals(vec: Vector<ValueType>, inLet: bool) -> bool {
		var start = vec.length, max = limits.max_num_locals;
		var dcount = parser.readU32("local decl count", 0, max);
		for (i < dcount) {
			var pt = parser.decoder.pos;
			var count = parser.readU32("local count", 0, max);
			var pt2 = parser.decoder.pos;
			var ltype = parser.readValueType(0);
			if (!inLet && !ValueTypes.hasDefaultValue(ltype)) {
				err.rel(parser.decoder, pt2).ExpectedTypeWithDefaultValue(ltype);
			}
			if (!err.ok()) return false;
			if (trace != null) traceLocals(count, ltype);
			vec.putn(ltype, int.!(count));
			var size = vec.length - start;
			if (size > max) {
				err.rel(parser.decoder, pt).QuantityExceededMaximumI("maximum total locals", size, max);
				return false;
			}
		}
		return true;
	}
	def reterr() -> CodeValidatorResult.Error {
		return CodeValidatorResult.Error(err.error_code, err.error_pos, err.error_msg);
	}
	def traceLocals(count: u32, ltype: ValueType) {
		trace.put2("  locals %d: %q", count, ltype.render).outln();
	}
	def err_atpc() -> WasmErrorGen {
		return err.rel(parser.decoder, opcode_pos);
	}
	def validateCode() {
		var d = parser.decoder;
		while (d.pos < d.limit) {
			opcode_pos = parser.decoder.pos;
			var opcode = parser.readByte("opcode", Opcodes.render);
			if (trace != null) { traceOpcode(); traceStack(true); }
			// FAST: Handle short operators (predictable direct branch)
			if (Opcodes.attributes[opcode].SHORT_OP) {
				checkSignature(Opcodes.signatures[opcode]);
				if (trace != null) traceStack(false);
				continue;
			}
			// Handle all other operators in the switch (indirect branch)
			match (opcode) {
				Opcode.UNREACHABLE.code => {
					setUnreachable();
				}
				Opcode.BLOCK.code => {
					var sig = parser.readBlockType();
					checkArgsAndPushControl(opcode, sig);
				}
				Opcode.LOOP.code => {
					var sig = parser.readBlockType();
					checkArgsAndPushControl(opcode, sig);
				}
				Opcode.IF.code => {
					var sig = parser.readBlockType();
					popE(ValueType.I32);
					var ctl = checkArgsAndPushControl(opcode, sig);
					ctlxfer.refV(ctl, opcode_pos, 0, 0);
					ctl_top.reachable = true; // true block now reachable
				}
				Opcode.ELSE.code => {
					if (ctl_top.start_opcode != Opcode.IF.code) {
						return err_atpc().MismatchedElse();
					}
					checkArgsAndTransfer();
					var if_branch = ctl_top.ctl_refs[0];
					// branches within if-true block go to "else"...
					ctlxfer.bind(ctl_top, opcode_pos);
					// ... except false target of "if"
					ctl_top.ctl_refs.put(if_branch);
					ctlxfer.bind(ctl_top, opcode_pos + 1);
					// "else" implicitly goes to end
					ctlxfer.refS(ctl_top, opcode_pos, val_stack);

					ctl_top.start_opcode = opcode;
					ctl_top.reachable = true;
					val_stack.top = ctl_top.val_stack_top;
					pushTypes(ctl_top.sig.params);
				}
				Opcode.END.code => {
					if (ctl_stack.top == 0) return err_atpc().EmptyControlStack();
					checkArgsAndTransfer();
					var ctl = ctl_stack.peek();
					if (ctl.start_opcode == Opcode.LOOP.code) {
						ctlxfer.bind(ctl, ctl.start_pos);
					} else if (ctl.start_opcode == Opcode.IF.code) {
						// one-armed if; simulate an empty else clause
						val_stack.top = ctl_top.val_stack_top;
						ctl_top.reachable = true;
						pushTypes(ctl.sig.params);
						checkArgsAndTransfer();
						ctlxfer.bind(ctl, opcode_pos);
					} else if (ctl.start_opcode == Opcode.LET.code) {
						locals = locals.parent;
						ctlxfer.bind(ctl, opcode_pos);
					} else {
						ctlxfer.bind(ctl, opcode_pos);
					}
					ctl_stack.pop();
					ctl_top = ctl_stack.peek();
				}
				Opcode.BR.code => {
					var depth = parser.readLabel();
					var target = getControl(depth);
					if (target == null) return;
					ctlxfer.refS(target, opcode_pos, val_stack);
					checkAndPopArgs(labelArgs(target));
					setUnreachable();
				}
				Opcode.BR_IF.code => {
					var depth = parser.readLabel();
					var target = getControl(depth);
					if (target == null) return;
					popE(ValueType.I32);
					ctlxfer.refS(target, opcode_pos, val_stack);
					checkArgs(labelArgs(target));
				}
				Opcode.BR_TABLE.code => {
					var labels = parser.readLabels();
					popE(ValueType.I32);
					ctlxfer.entries.put(ctlxfer.rel(opcode_pos),
						i23.!(labels.length), 0, 0);
					// merge argument types and check
					var args = mergeArgTypes(labels);
					checkArgs(args);
					if (err.error()) return;
					// add refs for all labels
					for (i < labels.length) {
						var target = getControl(labels[i]);
						ctlxfer.refS(target, opcode_pos + i + 1, val_stack);
					}
					setUnreachable();
				}
				Opcode.RETURN.code => {
					checkAndPopArgs(sig.results);
					setUnreachable();
				}
				Opcode.CALL.code => {
					var t = parser.readFunc(), target = t.1;
					if (target == null) return;
					checkSignature(target.sig);
				}
				Opcode.CALL_INDIRECT.code => {
					var sig = parser.readSig().1;
					var t = parser.readTableImm();
					popE(ValueType.I32);
					if (sig == null) return;
					checkSignature(sig);
				}
				Opcode.RETURN_CALL.code => {
					if (!checkExtension(Extension.TAIL_CALL, opcode)) return;
					var t = parser.readFunc(), target = t.1;
					if (target == null) return;
					checkAndPopArgs(target.sig.params);
					checkReturnSig(target.sig.results);
					setUnreachable();
				}
				Opcode.RETURN_CALL_INDIRECT.code => {
					if (!checkExtension(Extension.TAIL_CALL, opcode)) return;
					var sig = parser.readSig().1;
					var t = parser.readTableImm();
					popE(ValueType.I32);
					if (sig == null) return;
					checkAndPopArgs(sig.params);
					checkReturnSig(sig.results);
					setUnreachable();
				}
				Opcode.CALL_REF.code => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var t = popAnyFunc();
					if (t.1) checkSignature(t.0.sig);
				}
				Opcode.RETURN_CALL_REF.code => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var t = popAnyFunc();
					if (t.1) {
						checkAndPopArgs(t.0.sig.params);
						checkReturnSig(t.0.sig.results);
						setUnreachable();
					}
				}
				Opcode.FUNC_BIND.code => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var tsig = parser.readSig().1;
					if (tsig == null) return;
					var t = popAnyFunc();
					if (t.1) {
						var fsig = t.0.sig;
						var count = fsig.params.length - tsig.params.length;
						if (count < 0) return err_atpc().ArityMismatchInFuncBind(tsig, fsig);
						for (i < count) {
							var pt = fsig.params[count - i - 1];
							popE(pt);
						}
						var residual = fsig.bindLeft(count);
						if (!residual.isAssignableSig(tsig)) {
							err_atpc().TypeMismatchInFuncBind(tsig, residual);
						}
					}
					push(ValueType.RefFunc(false, tsig));
				}
				Opcode.LET.code => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var sig = parser.readBlockType();
					var vec = Vector<ValueType>.new(); // XXX: don't allocate a new vector?
					readLocals(vec, true);
					locals = LocalsChunk.new(vec, locals);
					if (!err.ok()) return;
					for (i < vec.length) popE(vec[vec.length - i - 1]);
					checkArgsAndPushControl(opcode, sig);
				}
				Opcode.DROP.code => {
					popAny();
				}
				Opcode.SELECT.code => {
					popE(ValueType.I32);
					var t = popAny();
					var rt = t.0;
					if (!ValueTypes.isNumeric(rt)) err_atpc().IllegalSelectType(rt);
					popE(rt);
					push(rt);
				}
				Opcode.SELECT_T.code => {
					var at = parser.readValueTypes("select count", limits.max_num_select_results, 0);
					if (at.length == 0) err_atpc().IllegalSelectCount();
					popE(ValueType.I32);
					checkAndPopArgs(at);
					checkAndPopArgs(at);
					pushTypes(at);
				}
				Opcode.LOCAL_GET.code => {
					var index = parser.readLocalIndex();
					var t = getLocalType(index);
					push(t);
				}
				Opcode.LOCAL_SET.code => {
					var index = parser.readLocalIndex();
					var t = getLocalType(index);
					popE(t);
				}
				Opcode.LOCAL_TEE.code => {
					var index = parser.readLocalIndex();
					var t = getLocalType(index);
					popE(t);
					push(t);
				}
				Opcode.GLOBAL_GET.code => {
					var g = parser.readGlobal().1;
					if (g == null) return;
					push(g.valtype);
				}
				Opcode.GLOBAL_SET.code => {
					var g = parser.readGlobal().1;
					if (g == null) return;
					if (!g.mutable) {
						err_atpc().IllegalAssignmentToImmutableGlobal(g.global_index);
 					}
					popE(g.valtype);
				}
				Opcode.TABLE_GET.code => {
					if (!checkExtension(Extension.REFERENCE_TYPES, opcode)) return;
					var table = parser.readTable().1;
					if (table == null) return;
					popE(ValueType.I32);
					push(table.elemtype);
				}
				Opcode.TABLE_SET.code => {
					if (!checkExtension(Extension.REFERENCE_TYPES, opcode)) return;
					var table = parser.readTable().1;
					if (table == null) return;
					popE(table.elemtype);
					popE(ValueType.I32);
				}

				Opcode.I32_LOAD8_S.code,
				Opcode.I32_LOAD8_U.code,
				Opcode.I64_LOAD8_S.code,
				Opcode.I64_LOAD8_U.code,
				Opcode.I32_STORE8.code,
				Opcode.I64_STORE8.code => checkAlignment(opcode, 0);

				Opcode.I32_LOAD16_S.code,
				Opcode.I32_LOAD16_U.code,
				Opcode.I64_LOAD16_S.code,
				Opcode.I64_LOAD16_U.code,
				Opcode.I32_STORE16.code,
				Opcode.I64_STORE16.code => checkAlignment(opcode, 1);

				Opcode.I32_LOAD.code,
				Opcode.F32_LOAD.code,
				Opcode.I64_LOAD32_S.code,
				Opcode.I64_LOAD32_U.code,
				Opcode.I32_STORE.code,
				Opcode.F32_STORE.code,
				Opcode.I64_STORE32.code => checkAlignment(opcode, 2);

				Opcode.I64_LOAD.code,
				Opcode.F64_LOAD.code,
				Opcode.I64_STORE.code,
				Opcode.F64_STORE.code => checkAlignment(opcode, 3);

				Opcode.MEMORY_SIZE.code,
				Opcode.MEMORY_GROW.code => {
					var index = parser.readMemoryImm();
					var sig = Opcodes.signatures[opcode];
					checkSignature(sig);
				}
				Opcode.I32_CONST.code => {
					parser.decoder.read_i32leb();
					push(ValueType.I32);
				}
				Opcode.I64_CONST.code => {
					parser.decoder.read_i64leb();
					push(ValueType.I64);
				}
				Opcode.F32_CONST.code => {
					parser.decoder.skip_bytes(4);
					push(ValueType.F32);
				}
				Opcode.F64_CONST.code => {
					parser.decoder.skip_bytes(8);
					push(ValueType.F64);
				}
				Opcode.REF_NULL.code => {
					if (!checkExtension(Extension.REFERENCE_TYPES, opcode)) return;
					var t = parser.readRefNullType();
					if (t == ValueType.EXTERNREF) t = ValueType.EXTERNREF_NULL;
					push(t);
				}
				Opcode.REF_IS_NULL.code => {
					if (!checkExtension(Extension.REFERENCE_TYPES, opcode)) return;
					var t = popAny();
					if (t.1) {
						if (!ValueTypes.isRef(t.0)) err_atpc().ExpectedRefType(t.0);
					}
					push(ValueType.I32);
				}
				Opcode.REF_FUNC.code => {
					if (!checkExtension(Extension.REFERENCE_TYPES, opcode)) return;
					var f = parser.readFunc(), func = f.1;
					if (func == null) return;
					if (!func.reffed) err_atpc().IllegalFuncRef(f.0);
					var ftype = if(extensions.FUNCTION_REFERENCES,
						ValueType.RefFunc(false, func.sig),
						ValueType.FUNCREF);
					push(ftype);
				}
				Opcode.REF_AS_NON_NULL.code => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var t = popAny();
					if (t.1) {
						var rt = t.0;
						match (rt) {
							FUNCREF, EXTERNREF, Host, Abstract => ;
							RefFunc(nullable, sig) => rt = ValueType.RefFunc(false, sig);
							RefStruct(nullable, struct) => rt = ValueType.RefStruct(false, struct);
							RefArray(nullable, array) => rt = ValueType.RefArray(false, array);
							_ => err_atpc().ExpectedRefType(rt);
						}
						push(rt);
					}
				}
				Opcode.BR_ON_NULL.code => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var depth = parser.readLabel();
					var target = getControl(depth);
					if (target == null) return;
					var t = popAny();
					if (t.1) {
						var rt = t.0;
						match (rt) {
							EXTERNREF, FUNCREF, Host, Abstract => ;
							RefFunc(nullable, sig) => rt = ValueType.RefFunc(false, sig);
							RefStruct(nullable, struct) => rt = ValueType.RefStruct(false, struct);
							RefArray(nullable, array) => rt = ValueType.RefArray(false, array);
							_ => err_atpc().ExpectedRefType(rt);
						}
						ctlxfer.refS(target, opcode_pos, val_stack);
						checkArgs(labelArgs(target));
						push(rt);
					}
				}
				0xFB => {
					var b2 = parser.decoder.read_u8();
					if (!checkExtensionP(Extension.GC, opcode, b2)) return;
					match (b2) {
						Opcode.STRUCT_NEW.code => {
							var st = parser.readStructType(false);
							if (st.struct == null) return;
							checkAndPopFields(st.struct.field_types);
							push(st);
						}
						Opcode.STRUCT_NEW_WITH_RTT.code => ; // TODO
						Opcode.STRUCT_NEW_DEFAULT_WITH_RTT.code => {
							var st = parser.readStructType(false);
							if (st.struct == null) return;
							if (!st.struct.defaultable) err_atpc().ExpectedDefaultableHeapType(st);
							// TODO: pop RTT
							push(st);
						}
						Opcode.STRUCT_GET.code => {
							var st = parser.readStructType(false);
							var index = parser.readFieldIndex(st.struct);
							if (index < 0) return;
							popE(st);
							var ft = st.struct.field_types[index];
							if (ft.packing != Packedness.UNPACKED) err_atpc().ExpectedUnpackedType(ft);
							push(ft.val_type);
						}
						Opcode.STRUCT_GET_S.code, // fallthrough
						Opcode.STRUCT_GET_U.code => {
							var st = parser.readStructType(false);
							var index = parser.readFieldIndex(st.struct);
							if (index < 0) return;
							popE(st);
							var ft = st.struct.field_types[index];
							if (ft.packing == Packedness.UNPACKED) err_atpc().ExpectedPackedType(ft);
							push(ft.val_type);
						}
						Opcode.STRUCT_SET.code => {
							var st = parser.readStructType(false);
							var index = parser.readFieldIndex(st.struct);
							if (index < 0) return;
							var ft = st.struct.field_types[index];
							if (!ft.mutable) {
								err_atpc().IllegalAssignmentToImmutableField(st, u32.view(index));
							}
							popE(ft.val_type);
							popE(st);
						}
						Opcode.ARRAY_NEW.code => {
							var at = parser.readArrayType(false);
							if (at.array == null) return;
							checkAndPopFields(at.array.elem_types);
							popE(ValueType.I32);
							push(at);
						}
						Opcode.ARRAY_NEW_WITH_RTT.code => ; // TODO
						Opcode.ARRAY_NEW_DEFAULT_WITH_RTT.code => {
							var at = parser.readArrayType(false);
							if (at.array == null) return;
							if (!at.array.defaultable) err_atpc().ExpectedDefaultableHeapType(at);
							// TODO: pop RTT
							popE(ValueType.I32);
							push(at);
						}
						Opcode.ARRAY_GET.code => {
							var at = parser.readArrayType(false);
							if (at.array == null) return;
							popE(ValueType.I32);
							popE(at);
							for (et in at.array.elem_types) {
								if (et.packing != Packedness.UNPACKED) err_atpc().ExpectedUnpackedType(et);
								push(et.val_type);
							}
						}
						Opcode.ARRAY_GET_S.code, // fallthrough
						Opcode.ARRAY_GET_U.code => {
							var at = parser.readArrayType(false);
							if (at.array == null) return;
							popE(ValueType.I32);
							popE(at);
							for (et in at.array.elem_types) {
								if (et.packing == Packedness.UNPACKED) err_atpc().ExpectedPackedType(et);
								push(et.val_type);
							}
						}
						Opcode.ARRAY_SET.code => {
							var at = parser.readArrayType(false);
							if (at.array == null) return;
							for (et in at.array.elem_types) popE(et.val_type);
							popE(ValueType.I32);
							popE(at);
						}
						Opcode.ARRAY_LEN.code => {
							var at = parser.readArrayType(false);
							if (at.array == null) return;
							popE(at);
							push(ValueType.I32);
						}
						Opcode.I31_NEW.code => {
							popE(ValueType.I32);
							push(ValueTypes.I31REF);
						}
						Opcode.I31_GET_S.code => {
							popE(ValueTypes.I31REF);
							push(ValueType.I32);
						}
						Opcode.I31_GET_U.code => {
							popE(ValueTypes.I31REF);
							push(ValueType.I32);
						}
						Opcode.RTT_CANON.code => ; // TODO: rtt types
						Opcode.RTT_SUB.code => ;  // TODO: rtt types
						Opcode.REF_TEST.code => ; // TODO: rtt types
						Opcode.REF_CAST.code => ; // TODO: rtt types
						Opcode.BR_ON_CAST.code => ; // TODO: rtt types
						_ => err_atpc().InvalidOpcode(opcode, b2);
					}
				}
				0xFC => {
					var b2 = parser.decoder.read_u8();
					match (b2) {
						Opcode.I32_TRUNC_SAT_F32_S.code => checkSignature(Opcode.I32_TRUNC_SAT_F32_S.sig);
						Opcode.I32_TRUNC_SAT_F32_U.code => checkSignature(Opcode.I32_TRUNC_SAT_F32_U.sig);
						Opcode.I32_TRUNC_SAT_F64_S.code => checkSignature(Opcode.I32_TRUNC_SAT_F64_S.sig);
						Opcode.I32_TRUNC_SAT_F64_U.code => checkSignature(Opcode.I32_TRUNC_SAT_F64_U.sig);
						Opcode.I64_TRUNC_SAT_F32_S.code => checkSignature(Opcode.I64_TRUNC_SAT_F32_S.sig);
						Opcode.I64_TRUNC_SAT_F32_U.code => checkSignature(Opcode.I64_TRUNC_SAT_F32_U.sig);
						Opcode.I64_TRUNC_SAT_F64_S.code => checkSignature(Opcode.I64_TRUNC_SAT_F64_S.sig);
						Opcode.I64_TRUNC_SAT_F64_U.code => checkSignature(Opcode.I64_TRUNC_SAT_F64_U.sig);
						Opcode.MEMORY_INIT.code => {
							if (!checkExtensionP(Extension.BULK_MEMORY, opcode, b2)) return;
							if (module.explicit_data_count < 0) err_atpc().MissingDataCount();
							var dindex = parser.readDataIndex();
							var mindex = parser.readMemoryIndex();
							checkAndPopArgs(SigCache.arr_iii);
						}
						Opcode.DATA_DROP.code => {
							if (!checkExtensionP(Extension.BULK_MEMORY, opcode, b2)) return;
							if (module.explicit_data_count < 0) err_atpc().MissingDataCount();
							var index = parser.readDataIndex();
						}
						Opcode.MEMORY_COPY.code => {
							if (!checkExtensionP(Extension.BULK_MEMORY, opcode, b2)) return;
							var dest = parser.readMemoryIndex();
							var src = parser.readMemoryIndex();
							checkAndPopArgs(SigCache.arr_iii);
						}
						Opcode.MEMORY_FILL.code => {
							if (!checkExtensionP(Extension.BULK_MEMORY, opcode, b2)) return;
							var index = parser.readMemoryIndex();
							checkAndPopArgs(SigCache.arr_iii);
						}
						Opcode.TABLE_INIT.code => {
							if (!checkExtensionP(Extension.BULK_MEMORY, opcode, b2)) return;
							var elem = parser.readElem().1;
							var dst = parser.readTable().1;
							if (dst == null || elem == null) return;
							if (!ValueTypes.isAssignable(dst.elemtype, elem.elemtype)) {
								err_atpc().ElementTypeMismatch(dst.elemtype, elem.elemtype);
							}
							checkAndPopArgs(SigCache.arr_iii);
						}
						Opcode.ELEM_DROP.code => {
							if (!checkExtensionP(Extension.BULK_MEMORY, opcode, b2)) return;
							var index = parser.readElemIndex();
						}
						Opcode.TABLE_COPY.code => {
							if (!checkExtensionP(Extension.BULK_MEMORY, opcode, b2)) return;
							var dst = parser.readTable().1;
							var src = parser.readTable().1;
							if (dst == null || src == null) return;
							if (!ValueTypes.isAssignable(dst.elemtype, src.elemtype)) {
								err_atpc().ElementTypeMismatch(dst.elemtype, src.elemtype);
							}
							checkAndPopArgs(SigCache.arr_iii);
						}
						Opcode.TABLE_GROW.code => {
							if (!checkExtensionP(Extension.REFERENCE_TYPES, opcode, b2)) return;
							var table = parser.readTable().1;
							if (table == null) return;
							popE(ValueType.I32);
							popE(table.elemtype);
							push(ValueType.I32);
						}
						Opcode.TABLE_SIZE.code => {
							if (!checkExtensionP(Extension.REFERENCE_TYPES, opcode, b2)) return;
							var index = parser.readTable().0;
							push(ValueType.I32);
						}
						Opcode.TABLE_FILL.code => {
							if (!checkExtensionP(Extension.REFERENCE_TYPES, opcode, b2)) return;
							var table = parser.readTable().1;
							if (table == null) return;
							popE(ValueType.I32);
							popE(table.elemtype);
							popE(ValueType.I32);
						}
						_ => err_atpc().InvalidOpcode(opcode, b2);
					}
				}
				_ => err_atpc().InvalidOpcode(opcode, parser.decoder.read_u8());
			}
			if (trace != null) traceStack(false);
		}
	}
	def checkSignature(sig: SigDecl) {
		var p = sig.params, r = sig.results;
		if (p.length > 0) checkAndPopArgs(p);
		if (r.length > 0) pushTypes(r);
	}
	def checkExtension(ext: Extension, opcode: byte) -> bool {
		if (extensions != (extensions | ext)) {
			err_atpc().OpcodeRequiresExtension(Opcodes.opcodes[opcode], ext);
			return false;
		}
		return true;
	}
	def checkExtensionP(ext: Extension, prefix: byte, opcode: byte) -> bool {
		if (extensions != (extensions | ext)) {
			err_atpc().OpcodeRequiresExtension(Opcodes.find(prefix, opcode), ext);
			return false;
		}
		return true;
	}
	def setUnreachable() {
		ctl_top.reachable = false;
		val_stack.top = ctl_top.val_stack_top;
	}
	def mergeArgTypes(labels: Array<u32>) -> Array<ValueType> {
		var args = SigCache.arr_v;
		var first = getControl(labels[0]);
		if (first == null) return args;
		args = labelArgs(first);
		args = Arrays.range(args, 0, args.length);
		for (i = 1; i < labels.length; i++) {
			var target = getControl(labels[i]);
			if (target == null) break;
			mergeArgTypesAt(i, args, labelArgs(target));
			if (err.error()) break;
		}
		return args;
	}
	def mergeArgTypesAt(i: int, args: Array<ValueType>, nargs: Array<ValueType>) {
		if (args.length != nargs.length) {
			err_atpc().BrTableArityMismatch(i, args.length, nargs.length);
			return;
		}
		for (j < args.length) {
			var e = args[j], g = nargs[j];
			var t = ValueTypes.leastUpperBound(e, g);
			if (!t.0) {
				var buf = StringBuilder.new();
				err_atpc().BrTableTypeMismatch(i, j, e, g);
				return;
			}
			args[j] = t.1;
		}
	}
	def checkAlignment(opcode: byte, max: u32) {
		var memarg = parser.readMemoryArg();
		var align = memarg.0;
		if (align > max) err_atpc().IllegalAlignment(max, align);
		var sig = Opcodes.signatures[opcode];
		checkAndPopArgs(sig.params);
		pushTypes(sig.results);
	}
	def traceOpcode() {
		trace.put2("  %x(+%d): ", opcode_pos, opcode_pos - ctlxfer.start_pos);
		var codeptr = parser.decoder;
		var prev = codeptr.pos;
		codeptr.pos = opcode_pos;
		trace.putInstr(module, codeptr);
		codeptr.pos = prev;
		trace.outln();
	}
	def checkArgs(p: Array<ValueType>) {
		if (p == null) return;
		for (i = p.length - 1; i >= 0; i--) popE(p[i]);
		val_stack.pushA(p);
	}
	def checkAndPopArgs(p: Array<ValueType>) {
		for (i = p.length - 1; i >= 0; i--) popE(p[i]);
	}
	def checkAndPopFields(p: Array<StorageType>) {
		for (i = p.length - 1; i >= 0; i--) popE(p[i].val_type);
	}
	def checkArgsAndTransfer() {
		var p = ctl_top.sig.results;
		var count = val_stack.top - ctl_top.val_stack_top;
		if (count > p.length || (ctl_top.reachable && count < p.length)) {
			err_atpc().ArityMismatchAtFallthru(p.length, count);
		}
		for (i = p.length - 1; i >= 0; i--) popE(p[i]);
		val_stack.top = ctl_top.val_stack_top;
		val_stack.pushA(p);
	}

	def push(v: ValueType) {
		val_stack.push(v);
	}
	def pop() -> ValueType {
		if (val_stack.top <= ctl_top.val_stack_top) {
			if (ctl_top.reachable) err_atpc().EmptyValueStack();
			return ValueType.I32;
		}
		return val_stack.pop();
	}
	def popE(expected: ValueType) {
		if (val_stack.top <= ctl_top.val_stack_top) {
			if (ctl_top.reachable) {
				err_atpc().EmptyValueStackExpecting(expected);
			}
			return; // unreachable or already signalled an error
		}
		var t = val_stack.pop();
		if (!ValueTypes.isAssignable(t, expected)) {
			err_atpc().ExpectedType(expected, t);
		}
	}
	def checkReturnSig(results: Array<ValueType>) {
		var expected = sig.results;
		if (results.length != expected.length) {
			err_atpc().ReturnArityMismatch(expected.length, results.length);
			return;
		}
		for (i < results.length) {
			var t = results[i], e = expected[i];
			if (!ValueTypes.isAssignable(t, e)) {
				err_atpc().ReturnSigMismatch(i, e, t);
			}
		}
	}
	def popAny() -> (ValueType, bool) {
		if (val_stack.top <= ctl_top.val_stack_top) {
			if (ctl_top.reachable) err_atpc().EmptyValueStack();
			return (ValueType.I32, false);
		}
		return (val_stack.pop(), true);
	}
	def popAnyFunc() -> (ValueType.RefFunc, bool) {
		if (val_stack.top <= ctl_top.val_stack_top) {
			if (ctl_top.reachable) err_atpc().EmptyValueStack();
			return (ValueType.RefFunc(false, null), false);
		}
		var t = val_stack.pop();
		if (ValueType.RefFunc.?(t)) return (ValueType.RefFunc.!(t), true);
		err_atpc().ExpectedFunctionTypeT(t);
		return (ValueType.RefFunc(false, null), false);
	}
	def pushTypes(r: Array<ValueType>) {
		val_stack.pushA(r);
	}
	def checkArgsAndPushControl(opcode: byte, sig: SigDecl) -> ControlEntry {
		checkArgs(sig.params);
		return pushControl(opcode, sig, val_stack.top - sig.params.length);
	}
	def pushControl(opcode: byte, sig: SigDecl,
			val_stack_top: int) -> ControlEntry {
		var ctl = ctl_stack.next();
		if (ctl != null) { // FAST: reuse previous ControlEntry object
			ctl_stack.top++;
		} else { // allocate and cache new ControlEntry object
			ctl = ControlEntry.new();
			ctl_stack.push(ctl);
		}
		ctl_top = ctl;
		ctl.start_pos = opcode_pos;
		ctl.start_opcode = opcode;
		ctl.sig = sig;
		ctl.val_stack_top = val_stack_top;
		ctl.reachable = true;
		ctl.ctl_refs.resize(0);
		return ctl;
	}
	def getControl(depth: u32) -> ControlEntry {
		if (depth >= ctl_stack.top) {
			err_atpc().OobLabel(depth, ctl_stack.top);
			return null;
		}
		var result = ctl_stack.elems[ctl_stack.top - int.!(depth) - 1];
		if (trace != null) {
			trace.put2("    label: depth=%d @+%d", depth, result.start_pos - ctlxfer.start_pos).outln();
		}
		return result;
	}
	def getLocalType(index: u32) -> ValueType {
		for (c = locals; c != null; (index -= u32.view(c.vec.length), c = c.parent)) {
			if (index < c.vec.length) return c.vec[int.view(index)];
		}
		err_atpc().OobLocalIndex(index, locals.vec.length); // TODO: wrong maximum
		return ValueType.I32;
	}
	def traceStack(before: bool) {
		if (before) trace.put1("    stack: %d| ", val_stack.top);
		else        trace.put1("       ==> %d| ", val_stack.top);

		var start = val_stack.top - 5;
		if (start > 0) trace.puts("... ");
		else start = 0;
		for (i = start; i < val_stack.top; i++) {
			var e = val_stack.elems[i];
			e.render(trace);
			trace.putc(' ');
		}
		trace.outln();
	}
}
def labelArgs(target: ControlEntry) -> Array<ValueType> {
	if (target.start_opcode == Opcode.LOOP.code) return target.sig.params;
	else return target.sig.results;
}
type CodeValidatorResult {
	case Ok {}
	case Error(error: WasmError, pc: int, msg: string) { }
}
// An entry in the control stack, exposed guts.
class ControlEntry {
	var start_pos: int;
	var start_opcode: byte;
	var sig: SigDecl;
	var reachable = true;
	var val_stack_top: int;
	def ctl_refs = Vector<int>.new();
}
// Responsible for building the mapping from pc -> ctlxfer.
class CtlXferBuilder(trace: TraceBuilder) {
	def entries = Vector<(u23, i23, u10, u23)>.new();
	var start_pos: int;
	def reset(start_pos: int) {
		this.start_pos = start_pos;
		entries.resize(0);
	}
	def refS(target: ControlEntry, pos: int, val_stack: Stack<ValueType>) {
		var valcount = u10.!(labelArgs(target).length);
		var popcount = val_stack.top - valcount - target.val_stack_top;
		refV(target, pos, valcount, u23.!(popcount));
	}
	def refV(target: ControlEntry, pos: int, valcount: u10, popcount: u23) {
		var pc = rel(pos);
		if (trace != null) {
			trace.put2("    refV(@+%d to +%d.label, ",
				int.!(pc), int.!(rel(target.start_pos)));
			trace.put2("valcount=%d, popcount=%d)",
				u32.!(valcount), u32.!(popcount));
			trace.outln();
		}
		var index = entries.length;
		entries.put(pc, 0, valcount, popcount);
		target.ctl_refs.put(index);
	}
	def bind(target: ControlEntry, pos: int) {
		var refs = target.ctl_refs, pc = rel(pos);
		for (i = refs.length - 1; i >= 0; i--) {
			var index = refs[i];
			var t = entries[index];
			var delta = i23.!(pc - int.!(t.0));
			entries[index] = (t.0, delta, t.2, t.3);
			if (trace != null) {
				trace.put2("    resolve(@+%d to +%d)",
					int.!(t.0), int.!(pc));
				trace.outln();
			}
		}
		refs.resize(0);
	}
	def rel(pos: int) -> u23 {
		return u23.!(pos - start_pos);
	}
	def extract() -> Array<(u23, i23, u10, u23)> {
		return if(entries.length > 0, entries.extract());
	}
}
class LocalsChunk(vec: Vector<ValueType>, parent: LocalsChunk) {
}