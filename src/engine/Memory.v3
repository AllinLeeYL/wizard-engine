// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An instantiated Wasm memory.
class Memory(decl: MemoryDecl) extends Exportable {
	var oom = false;  // set if allocation fails due to out-of-memory
	def size() -> u32; // size in pages
	def length() -> u64; // length in bytes
	def deallocate() {
		// default: do nothing
	}
	def grow(pages: u32) -> int {
		return -1; // default: growing always fails
	}
	def read1(offset: u32, index: u32) -> (TrapReason, u8);
	def read_u16(offset: u32, index: u32) -> (TrapReason, u16);
	def read_u32(offset: u32, index: u32) -> (TrapReason, u32);
	def read_u64(offset: u32, index: u32) -> (TrapReason, u64);
	def write_u8(offset: u32, index: u32, val: u8) -> TrapReason;
	def write_u16(offset: u32, index: u32, val: u16) -> TrapReason;
	def write_u32(offset: u32, index: u32, val: u32) -> TrapReason;
	def write_u64(offset: u32, index: u32, val: u64) -> TrapReason;
	def extract(offset: u32, len: u32) -> Array<byte>;
	def copyD(dst_offset: u32, ddecl: DataDecl, src_offset: u32, size: u32) -> TrapReason;
	def fill(dest: u32, val: u8, size: u32) -> TrapReason;
	def copyM(dst_offset: u32, src: Memory, src_offset: u32, size: u32) -> TrapReason;
	def boundsCheck(offset: u32, index: u32, len: u32) -> i64 {
		var i = i64.view(offset) + index;
		if ((i + len) > length()) return -1;
		return i;
	}
	def dumpR(offset: u32, size: u32) {
		var buf = TraceBuilder.new();
		buf.put1("@%d[", offset);
		for (i < size) {
			buf.putx_8(read1(offset, i).1);
		}
		buf.puts("]").outln();
	}
}

