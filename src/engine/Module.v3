// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Representation of a Wasm module, including its various index spaces of declarations.
// Keeps the original order of declarations in order to perform polymorphic
// import binding.
class Module(filename: string) {
	var name: string;		// can be manually set
	def decls = Vector<Decl>.new();  // all declarations
	def imports = Vector<Decl>.new(); // all imports

	def heaptypes = Vector<HeapTypeDecl>.new();
	def abstypes = Vector<AbsTypeDecl>.new();
	def functions = Vector<FuncDecl>.new();
	def tables = Vector<TableDecl>.new();
	def memories = Vector<MemoryDecl>.new();
	def globals = Vector<GlobalDecl>.new();
	def events = Vector<EventDecl>.new();
	def exports = Vector<(string, Decl)>.new();
	def elems = Vector<ElemDecl>.new();
	def data = Vector<DataDecl>.new();
	def custom_sections = Vector<CustomSection>.new();
	var probes: Array<Array<ProbeList>>;

	var start_function = -1;
	var explicit_data_count = -1;

	var names: NameSection;

	// Add a new declaration to this module. Automatically manages the various
	// index spaces and updates {d.decl_index} and any space-specific indexes.
	def addDecl(d: Decl) {
		d.decl_index = decls.length;
		decls.put(d);
		match (d) {
			x: SigDecl => { x.sig_index = heaptypes.length; heaptypes.put(x); }
			x: StructDecl => { x.struct_index = heaptypes.length; heaptypes.put(x); }
			x: ArrayDecl => { x.array_index = heaptypes.length; heaptypes.put(x); }
			x: AbsTypeDecl => { x.abstype_index = abstypes.length; abstypes.put(x); }
			x: FuncDecl => { x.func_index = functions.length; functions.put(x); }
			x: TableDecl => { x.table_index = tables.length; tables.put(x); }
			x: MemoryDecl => { x.memory_index = memories.length; memories.put(x); }
			x: GlobalDecl => { x.global_index = globals.length; globals.put(x); }
			x: EventDecl => { x.event_index = events.length; events.put(x); }
		}
	}
	// Add a new import declaration to this module. Adds this declaration to {imports} as well.
	def addImport(module_name: string, field_name: string, args: Array<Decl>, d: Decl) {
		if (d == null) return;
		if (args == null) args = Modules.NO_IMPORT_ARGS;
		d.imp = ImportInfo.new(module_name, field_name, imports.length, args);
		addDecl(d);
		imports.put(d);
	}
	// Returns {true} if this module contains any abstract type imports.
	def isAbstract() -> bool {
		return abstypes.length > 0;
	}
	// Get the reference type at the given index.
	def getRefType(nullable: bool, type_index: int) -> ValueType {
		return ValueTypes.Ref(nullable, heaptypes[type_index]); // XXX: inline?
	}
	def insertProbeAt(func_id: int, offset: int, p: Probe);
}

// For imported quantities, the module name, field name, index, and args.
class ImportInfo(module_name: string, field_name: string, import_index: int, args: Array<Decl>) {
}

// Superclass of all declared and importable/exportable declarations.
class Decl {
	var imp: ImportInfo;
	var decl_index = -1;
	def imported() -> bool { return imp != null; }
}

// Heap type declarations.
class HeapTypeDecl extends Decl {
	def render(buf: StringBuilder) -> StringBuilder;
}

// Packedness and mutability for fields and array elements. (ext:gc)
enum Packedness { UNPACKED, PACKED_I8, PACKED_I16 }
class StorageType(var valtype: ValueType, packing: Packedness, mutable: bool) { }

// Struct type declaration. (ext:gc)
class StructDecl(field_types: Array<StorageType>) extends HeapTypeDecl {
	var struct_index = -1;
	def defaultable = allHaveDefaultValues(field_types);
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.put1("struct #%d", struct_index);
	}
}

// Array type declaration. (ext:gc)
class ArrayDecl(elem_types: Array<StorageType>) extends HeapTypeDecl {
	var array_index = -1;
	def defaultable = allHaveDefaultValues(elem_types);
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.put1("array #%d", array_index);
	}
}

// Abstract type declaration. (ext:type-imports)
class AbsTypeDecl(has_default: bool, is_externref: bool, assignable: Array<ValueType>) extends Decl {
	var abstype_index = -1;
	def isAssignableTo(t: ValueType) -> bool {
		if (is_externref && t == ValueTypes.EXTERNREF) return true;
		match (t) {
			Abstract(it) => if (this == it) return true;
			_ => ;
		}
		for (s in assignable) {
			if (ValueTypes.isAssignable(s, t)) return true;
		}
		return false;
	}
}

// Function declaration, including signature and code.
class FuncDecl(sig: SigDecl) extends Decl {
	var func_index = -1;
	var code: Code;
	var reffed: bool;

	def render(names: NameSection, buf: StringBuilder) -> StringBuilder {
		var name = if (names != null, names.getFuncName(func_index));
		if (name != null) return buf.putsq(name);
		else return buf.put1("#%d", func_index);
	}
}

// Table declaration, including element type, limits.
class TableDecl(elemtype: ValueType, initial: u32, maximum: Max) extends Decl {
	var table_index = -1;
}

// Memory declaration, including limits and shared attribute.
class MemoryDecl(initial: u32, maximum: Max, shared: bool) extends Decl {
	var memory_index = -1;
}

// Global variable declaration, including type and mutability.
class GlobalDecl(valtype: ValueType, mutable: bool, init: InitExpr) extends Decl {
	var global_index = -1;
}

// Event declaration. (ext:exception-handling)
class EventDecl(fieldTypes: Array<ValueType>) extends Decl {
	var event_index = -1;
}

// Import command declaration. (ext:type-imports)
class ImportCommandDecl extends Decl {
}

// Signature of a function.
class SigDecl(params: Array<ValueType>, results: Array<ValueType>) extends HeapTypeDecl {
	var sig_index = -1;
	// Canonicalization state; do not use directly, use Canon.*
	var hash = -1;
	var canon_id = -1;

	def bindLeft(count: int) -> SigDecl {
		var p = params, np = Array<ValueType>.new(p.length - count);
		for (i < np.length) np[i] = p[i + count];
		return SigDecl.new(np, results);
	}
	def isAssignableSig(that: SigDecl) -> bool {
		if (that == null) return false;
		var fp = this.params, tp = that.params;
		if (fp.length != tp.length) return false;
		var fr = this.results, tr = that.results;
		if (fr.length != tr.length) return false;
		for (i < fp.length) {
			if (!ValueTypes.isAssignable(tp[i], fp[i])) return false; // contra-variant
		}
		for (i < fr.length) {
			if (!ValueTypes.isAssignable(fr[i], tr[i])) return false; // co-variant
		}
		return true;
	}
	def render(buf: StringBuilder) -> StringBuilder {
		return render2(null, buf);
	}
	def render2(seen: List<Decl>, buf: StringBuilder) -> StringBuilder {
		for (l = seen; l != null; l = l.tail) {
			if (l.head == this) return buf.put1("#%d", sig_index);
		}
		seen = List.new(this, seen);
		buf.puts("[");
		for (i < params.length) {
			if (i > 0) buf.puts(" ");
			ValueTypes.render(params[i], seen, buf);
		}
		buf.puts("] -> [");
		for (i < results.length) {
			if (i > 0) buf.puts(" ");
			ValueTypes.render(results[i], seen, buf);
		}
		buf.puts("]");
		return buf;
	}
	def dup() -> SigDecl {
		return SigDecl.new(params, results);
	}
}

// An element declaration that can occur in the elements section.
class ElemDecl(elemtype: ValueType, mode: SegmentMode, details: ElemDetails) {
}
type ElemDetails {
	case FuncRefs(vals: Array<int>);
	case Exprs(vals: Array<InitExpr>); /* ext:reference-types */
	def length() -> int {
		match (this) {
			FuncRefs(vals) => return vals.length;
			Exprs(vals) => return vals.length;
		}
	}
}
type SegmentMode {
	case Passive;
	case Active(index: int, offset: InitExpr);
	case Declarative;
}

// A data segment declaration that can occur in the data section.
class DataDecl(mode: SegmentMode, data: Array<byte>) {
}

// An uninterpreted custom section.
class CustomSection(name: string, payload: Array<byte>) {
}

// A special kind of expression that can be used in initialization.
type InitExpr {
	case I32(val: i32);
	case I64(val: i64);
	case F32(val: u32);
	case F64(val: u64);
	case FuncRefNull;
	case ExternRefNull;
	case Global(global_index: int, decl: GlobalDecl);
	case FuncRef(func_index: int, decl: FuncDecl);
	case Const(val: Value);
	case I31(val: InitExpr);
	case RttSub(val: InitExpr, rtt: HeapType.Rtt);
}

// Optional maximum for a table or memory.
type Max {
	case None;
	case Set(max: u32);

	def min(that: u32) -> u32 {
		match (this) {
			None => return that;
			Set(max) => return if(max < that, max, that);
		}
	}
	def check(val: u64) -> bool {
		match (this) {
			None => return true;
			Set(max) => return val <= max;
		}
	}
}

// Globals associated with modules.
component Modules {
	def NO_IMPORT_ARGS: Array<Decl> = [];
}

def allHaveDefaultValues(at: Array<StorageType>) -> bool {
	for (t in at) if (t != null && !ValueTypes.hasDefaultValue(t.valtype)) return false;
	return true;
}
