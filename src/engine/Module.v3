// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Mutable in-memory representation of a WebAssembly module.
class Module(filename: string) {
	def deftypes = Vector<DefType>.new();
	def types = Vector<ImportedType>.new();
	def imports = Vector<ImportDecl>.new();
	def functions = Vector<FuncDecl>.new();
	def tables = Vector<TableDecl>.new();
	def memories = Vector<MemoryDecl>.new();
	def globals = Vector<GlobalDecl>.new();
	def events = Vector<EventDecl>.new();
	def exports = Vector<ExportDecl>.new();
	var start_function = -1;
	var explicit_data_count = -1;
	def elems = Vector<ElemDecl>.new();
	def data = Vector<DataDecl>.new();
	def custom_sections = Vector<CustomSection>.new();
}

// Signature of a function.
class FuncSig(params: Array<ValueType>, results: Array<ValueType>) {
	def bindParam(index: u32) -> FuncSig {
		var p = params, np = Array<ValueType>.new(p.length-1);
		for (i < index) np[i] = p[i];
		for (i = index + 1; i < p.length; i++) np[i-1] = p[i];
		return FuncSig.new(np, results);
	}
	def isAssignableSig(that: FuncSig) -> bool {
		if (that == null) return false;
		var fp = this.params, tp = that.params;
		if (fp.length != tp.length) return false;
		var fr = this.results, tr = that.results;
		if (fr.length != tr.length) return false;
		for (i < fp.length) {
			if (!ValueTypes.isAssignable(tp[i], fp[i])) return false; // contra-variant
		}
		for (i < fr.length) {
			if (!ValueTypes.isAssignable(fr[i], tr[i])) return false; // co-variant
		}
		return true;
	}
	def render(buf: StringBuilder) -> StringBuilder {
		buf.puts("[");
		for (i < params.length) {
			if (i > 0) buf.puts(" ");
			params[i].render(buf);
		}
		buf.puts("] -> [");
		for (i < results.length) {
			if (i > 0) buf.puts(" ");
			results[i].render(buf);
		}
		buf.puts("]");
		return buf;
	}
}

// A type declaration that can occur in the types section.
type DefType {
	case Function(f: FuncSig);
	/* ext:gc case Struct() */
	/* ext:gc case Array() */
}

// Import declaration, including module name, element name, and details,
// including kind.
class ImportDecl(modname: string, name: string, details: ImportDetails) {
}

// The details for each of the different kinds of imports.
type ImportDetails {
	case Command;
	case Function(decl: FuncDecl);
	case Table(decl: TableDecl);
	case Memory(decl: MemoryDecl);
	case Global(decl: GlobalDecl);
	case Type(decl: ImportedType);
	/* ext:exception-handling Event() */
}
class ImportedType(import_index: int, type_index: int, assignable: Array<ValueType>) {
	def isAssignableTo(t: ValueType) -> bool {
		match (t) {
			Imported(it) => if (this == it) return true;
			EXTERNREF => return true;
			_ => ;
		}
		for (s in assignable) {
			if (ValueTypes.isAssignable(s, t)) return true;
		}
		return false;
	}
	def render(buf: StringBuilder) -> StringBuilder {
		buf.puts("(");
		buf.puts("import_index=");
		buf.putd(import_index);
		buf.puts(", type_index=");
		buf.putd(type_index);
		buf.puts(")");
		return buf;
	}
}

// A function declaration than can occur in the function section.
class FuncDecl(imported: bool, index: int, sig_index: int, var sig: FuncSig) {
	var code: FunctionCode;
	var reffed: bool;
}

// A table declaration that can occur in the tables section.
class TableDecl(index: int, elemtype: ValueType, initial: int, maximum: int) {
}

// A memory declaration that can occur in the memories section.
class MemoryDecl(index: int, initial: int, maximum: int, shared: bool) {
}

// A global declaration that can occur in the globals section.
class GlobalDecl(index: int, valtype: ValueType, mutable: bool, init: InitExpr) {
}

// An event declaration that can occur in the events section.
class EventDecl(attribute: int, evntype_index: int, evntype: FuncSig) {
}

// An export declaration for a module.
class ExportDecl(name: string, details: ExportDetails) {
}

// The details for each of the different kinds of exports.
type ExportDetails {
	case Function(index: int);
	case Table(index: int);
	case Memory(index: int);
	case Global(index: int);
	/* ext:type-imports case Type() */
	/* ext:exception-handling Event() */
}

// An element declaration that can occur in the elements section.
class ElemDecl(elemtype: ValueType, mode: SegmentMode, details: ElemDetails) {
}
type ElemDetails {
	case FuncRefs(vals: Array<int>);
	case Exprs(vals: Array<InitExpr>); /* ext:reference-types */
	def length() -> int {
		match (this) {
			FuncRefs(vals) => return vals.length;
			Exprs(vals) => return vals.length;
		}
	}
}
type SegmentMode {
	case Passive;
	case Active(index: int, offset: InitExpr);
	case Declarative;
}

// A data segment declaration that can occur in the data section.
class DataDecl(mode: SegmentMode, data: Array<byte>) {
}

// An uninterpreted custom section.
class CustomSection(name: string, payload: Array<byte>) {
}

// The names section is a special custom section that is interpreted by
// engines to aid in debugging.
class NamesSection extends CustomSection {
	new(data: Array<byte>) super("names", data) { }
}

// A special kind of expression that can be used in initialization.
type InitExpr {
	case I32(val: i32);
	case I64(val: i64);
	case F32(val: u32);
	case F64(val: u64);
	case FuncRefNull;
	case ExternRefNull;
	case Global(global_index: int, decl: GlobalDecl);
	case FuncRef(func_index: int, decl: FuncDecl);
}
