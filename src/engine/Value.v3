// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// WebAssembly program values.
type Value {
	case ExternRef(val: HostObject);
	case FuncRef(val: Function);
	case HeapRef(val: HeapObject);
	case Rtt(heaptype: HeapTypeDecl, supers: Array<Value.Rtt>);
	case I31(val: u31);
	case I32(val: u32);
	case I64(val: u64);
	case F32(bits: u32);
	case F64(bits: u64);

	def render(buf: StringBuilder) -> StringBuilder {
		match (this) {
			ExternRef(val) => {
				if (val == null) {
					buf.puts("<externref: null>");
				} else {
					val.render(buf);
				}
			}
			FuncRef(val) => {
				if (WasmFunction.?(val)) {
					var wf = WasmFunction.!(val);
					buf.put1("<funcref: #%d>", wf.decl.func_index);
				} else if (HostFunction.?(val)) {
					HostFunction.!(val).render(buf);
				} else {
					buf.puts("<funcref: null>");
				}
			}
			HeapRef(val) => {
				if (HeapStruct.?(val)) {
					buf.put1("<heapref: struct #%d>", HeapStruct.!(val).decl.struct_index);
				} else if (HeapArray.?(val)) {
					buf.put1("<heapref: array #%d>", HeapArray.!(val).decl.array_index);
				} else if (val == null) {
					buf.puts("<heapref: null>");
				} else {
					buf.puts("<heapref>");
				}
			}
			Rtt(heaptype, supers) => {
				if (heaptype != null) {
					buf.put2("<rtt %d %q>", if(supers != null, supers.length, -1), heaptype.render);
				} else {
					buf.puts("<rtt any>");
				}
			}
			I31(val) => buf.put1("i31:%d", u32.view(val));
			I32(val) => buf.put1("%d", val);
			I64(val) => buf.put1("%duL", val);
			F32(val) => buf.put1("f32:%x", val);
			F64(val) => buf.put1("f64:%x", val);
		}
		return buf;
	}
}
class HeapObject(vals: Array<Value>) {}
class HeapStruct extends HeapObject {
	def decl: StructDecl;  // XXX: combine rtt and decl field
	def rtt: Value.Rtt;
	new(decl, rtt, vals: Array<Value>) super(vals) { }
}
class HeapArray extends HeapObject {
	def decl: ArrayDecl;  // XXX: combine rtt and decl field
	def rtt: Value.Rtt;
	new(decl, rtt, vals: Array<Value>) super(vals) { }
}
// Reasons a WebAssembly execution has trapped.
enum TrapReason {
	NONE,
	UNREACHABLE,
	MEM_OUT_OF_BOUNDS,
	UNALIGNED_ACCESS,
	DIV_BY_ZERO,
	DIV_UNREPRESENTABLE,
	REM_BY_ZERO,
	FLOAT_UNREPRESENTABLE,
	FUNC_INVALID,
	FUNC_SIG_MISMATCH,
	DATA_SEGMENT_DROPPED,
	ELEM_SEGMENT_DROPPED,
	TABLE_OUT_OF_BOUNDS,
	TABLE_INDEX_OUT_OF_BOUNDS,
	STACK_OVERFLOW,
	NULL_DEREF,
	UNIMPLEMENTED,
	ARRAY_INDEX_OOB,
	OOM,
	ERROR
}
// Utilities associated with values.
component Values {
	def I32_1 = Value.I32(1);
	def I32_0 = Value.I32(0);
	def I64_0 = Value.I64(0);
	def F32_0 = Value.F32(0);
	def F64_0 = Value.F64(0);
	def F32_minus_0 = Value.F32(0x80000000);
	def F64_minus_0 = Value.F64(0x8000000000000000);
	def F32_nan = Value.F32(0x7fc00000);
	def F64_nan = Value.F64(0x7ff8000000000000);
	def F32_infinity = Value.F32(0x7f800000);
	def F64_infinity = Value.F64(0x7ff0000000000000);
	def F32_minus_infinity = Value.F32(0xff800000);
	def F64_minus_infinity = Value.F64(0xfff0000000000000);
	def FUNCREF_NULL = Value.FuncRef(null);
	def EXTERNREF_NULL = Value.ExternRef(null);
	def HEAPREF_NULL = Value.HeapRef(null);
	def NONE = Array<Value>.new(0);
	def NO_SUPERS = Array<Value.Rtt>.new(0);
	def RTT_ANYREF = Value.Rtt(null, NO_SUPERS);

	def renderVals(buf: StringBuilder, av: Array<Value>) {
		buf.putc('(');
		if (av != null) for (i < av.length) {
			if (i > 0) buf.puts(", ");
			av[i].render(buf);
		}
		buf.putc(')');
	}
	def isNull(v: Value) -> bool {
		return v == FUNCREF_NULL || v == HEAPREF_NULL || v == EXTERNREF_NULL;
	}
	def default(t: ValueType) -> Value {
		var v: Value;
		match (t) {
			I32 => v = I32_0;
			I64 => v = I64_0;
			F32 => v = F32_0;
			F64 => v = F64_0;
			VEC128 => v = I32_0;  // TODO: default value for SIMD
			FUNCREF => v = FUNCREF_NULL;
			ANYREF, // TODO: default value for any ref
			Host,
			Abstract, // TODO: default value for abstract type
			EXTERNREF,
			EXTERNREF_NULL => v = EXTERNREF_NULL;
			RefFunc => v = FUNCREF_NULL;
			I31REF,
			RefStruct,
			RefArray => v = HEAPREF_NULL;
			FwRef(nullable, id) => return HEAPREF_NULL; // TODO: default value for fw func ref
			Rtt => v = HEAPREF_NULL; // TODO: default value for rtt
		}
		return v;
	}
	def v_i(v: Value) -> i32 { return i32.view(Value.I32.!(v).val); }
	def v_u(v: Value) -> u32 { return Value.I32.!(v).val; }
	def v_f(v: Value) -> u32 { return Value.F32.!(v).bits; }
	def v_d(v: Value) -> u64 { return Value.F64.!(v).bits; }
	def v_l(v: Value) -> i64 { return i64.view(Value.I64.!(v).val); }
	def v_w(v: Value) -> u64 { return Value.I64.!(v).val; }

	def i_v(v: i32) -> Value { return Value.I32(u32.view(v)); }
	def u_v(v: u32) -> Value { return Value.I32(v); }
	def l_v(v: i64) -> Value { return Value.I64(u64.view(v)); }
	def w_v(v: u64) -> Value { return Value.I64(v); }

	def f32(sign: int, exp: int, mantissa: u32) -> Value.F32 {
		var bits = if(sign != 0, 0x80000000u);
		if (exp < -149) return Value.F32(bits);
		if (exp <= -127) {
			// subnormal; make implicit 1 explicit and shift right
			mantissa = 0x80000000u | mantissa >> 1;
			mantissa = mantissa >> u5.view(-127 - exp);
			exp = -127;
		} else if (exp >= 128) {
			// saturate large exponents to infinity
			return if (sign != 0, F32_minus_infinity, F32_infinity);
		}
		bits |= (u32.view(u8.view(exp + 127)) << 23);
		bits |= u32.view(mantissa >> 9);
		return Value.F32(bits);
	}
	def f64(sign: int, exp: int, mantissa: u64) -> Value.F64 {
		var bits = if(sign != 0, 0x8000000000000000ul);
		if (exp < -1076) return Value.F64(bits);
		if (exp <= -1023) {
			// subnormal; make implicit 1 explicit and shift right
			mantissa = 0x8000000000000000ul | mantissa >> 1;
			mantissa = mantissa >> u6.view(-1023 - exp);
			exp = -1023;
		} else if (exp >= 1024) {
			// saturate large exponents to infinity
			return if (sign != 0, F64_minus_infinity, F64_infinity);
		}
		bits |= (u64.view(u11.view(exp + 1023)) << 52);
		bits |= mantissa >> 12;
		return Value.F64(bits);
	}
	def f32nan(sign: int, mantissa: u32) -> Value.F32 {
		var bits = if(sign != 0, 0x80000000u);
		bits |= (u32.view(u8.view(255)) << 23);
		bits |= u32.view(mantissa >> 9);
		return Value.F32(bits);
	}
	def f64nan(sign: int, mantissa: u64) -> Value.F64 {
		var bits = if(sign != 0, 0x8000000000000000ul);
		bits |= (u64.view(u11.view(2047)) << 52);
		bits |= mantissa >> 12;
		return Value.F64(bits);
	}
}
