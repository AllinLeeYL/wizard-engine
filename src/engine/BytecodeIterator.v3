// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A simple iterator for bytecodes in a function.
class BytecodeIterator(func: FuncDecl) {
	private def codeptr = CodePtr.new(func.code.orig);
	private var pc: int;

	new() {
		// skip local declarations
		codeptr.skip_local_decls();
		pc = codeptr.pos;
	}

	// Reset the {codeptr} to just after the current bytecode.
	def immptr() -> DataReader {
		return codeptr.at(pc + 1);
	}
	// Return {true} if there are more bytecodes remaining.
	def more() -> bool {
		return pc < codeptr.limit;
	}
	// Return the current opcode.
	def current() -> Opcode {
		if (more()) {
			var b = codeptr.at(pc).read1();
			if (Opcodes.attributes[b].PREFIX) return Opcodes.find(b, codeptr.read_uleb32());
			else return Opcodes.opcodes[b];
		}
		return Opcode.NOP;
	}
	// Advance to the next opcode.
	def next() {
		if (more()) {
			var p = codeptr.at(pc);
			for (imm in current().imms) {
				match (imm) {
					ARRAY_TYPE_INDEX,
					BLOCK_TYPE,
					DATA_INDEX,
					ELEM_INDEX,
					EVENT_INDEX,
					FIELD_INDEX,
					FUNC_INDEX,
					GLOBAL_INDEX,
					TYPE_INDEX,
					LABEL,
					LOCAL_INDEX,
					MEMORY_INDEX,
					PARAM_INDEX,
					SIG_INDEX,
					STRUCT_TYPE_INDEX,
					SUPER_COUNT,
					TABLE_INDEX,
					U32 => p.read_uleb32();
					VALUE_TYPES => codeptr.read_value_types();
					LABELS => {
						var count = p.read_uleb32();
						for (i < count + 1) p.read_uleb32();
					}
					MEMARG => {
						p.read_uleb32();
						p.read_uleb32();
					}
					REF_NULL_TYPE,
					I32 => p.read_sleb32();
					I64 => p.read_sleb64();
					LANE_INDEX => p.skipN(1);
					F32 => p.skipN(4);
					F64 => p.skipN(8);
					V128 => p.skipN(16);
					LOCAL_DECL => p.skip_local_decls();
					ZERO_BYTE => p.read1();
				}
			}
			pc = p.pos;
		}
	}
}
