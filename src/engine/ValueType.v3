// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The allowable types of any value in WebAssembly.
type ValueType {
	case I32;
	case I64;
	case F32;
	case F64;
	case VEC128;
	case FUNCREF;
	case EXTERNREF;
	case RefFunc(sig: FuncSig);
	case RefNullFunc(sig: FuncSig);
	case Imported(it: ImportedType);
	case Host(host: HostType);
//	case Struct(fields: Array<ValueType>);
//	case Array(elem: ValueType);

	def render(buf: StringBuilder) -> StringBuilder {
		var s: string;
		match (this) {
			I32 => s = "i32";
			I64 => s = "i64";
			F32 => s = "f32";
			F64 => s = "f64";
			VEC128 => s = "v128";
			Host(host) => return host.render(buf);
			Imported(it) => return it.render(buf);
			FUNCREF => s = "funcref";
			EXTERNREF => s = "externref";
			RefFunc(sig) => {
				buf.puts("(ref ");
				if (sig != null) sig.render(buf);
				else buf.puts("<null>");
				return buf.puts(")");
			}
			RefNullFunc(sig) => {
				buf.puts("(ref null ");
				if (sig != null) sig.render(buf);
				else buf.puts("<null>");
				return buf.puts(")");
			}
		}
		return buf.puts(s);
	}
}
// Utility functions associated with value types.
component ValueTypes {
	def NONE = Array<ValueType>.new(0);
	def isNumeric(t: ValueType) -> bool {
		match (t) {
			I32, I64, F32, F64 => return true;
			_ => return false;
		}
	}
	def isRef(t: ValueType) -> bool {
		match (t) {
			FUNCREF, EXTERNREF, RefFunc, RefNullFunc, Host => return true;
			_ => return false;
		}
	}
	def isAssignable(from: ValueType, to: ValueType) -> bool {
		match (from) {
			RefFunc(fsig) => {
				match (to) {
					RefFunc(tsig) => return fsig.isAssignableSig(tsig);
					RefNullFunc(tsig) => return fsig.isAssignableSig(tsig);
					FUNCREF => return true;
					_ => return false;
				}
			}
			RefNullFunc(fsig) => {
				match (to) {
					RefNullFunc(tsig) => return fsig.isAssignableSig(tsig);
					FUNCREF => return true;
					_ => return false;
				}
			}
			Host(host) => {
				return host.isAssignableTo(to);
			}
			Imported(it) => {
				return it.isAssignableTo(to);
			}
			_ => return from == to;
		}
	}
	def leastUpperBound(t: ValueType, f: ValueType) -> (bool, ValueType) {
		if (t == f) return (true, t);
		return (false, t);
	}
}