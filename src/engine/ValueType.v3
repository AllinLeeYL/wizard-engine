// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Value types for all Wasm values. Note that they may be recursive
// mutating the definition of heap types like {StructDecl} and {ArrayDecl}.
type ValueType {
	case BOTTOM;						// Bottom type
	case I32;						// 32-bit integer
	case I64;						// 64-bit integer
	case F32;						// 32-bit float
	case F64;						// 64-bit float
	case V128;						// 128-bit vector
	case EXTERNREF_NULL;					// used internally
	case Abstract(it: AbsTypeDecl);				// imported abstract types
	case Host(host: HostType);				// host-defined types
	case Ref(nullable: bool, heap: HeapType);

	def render(buf: StringBuilder) -> StringBuilder {
		return ValueTypes.render(this, null, buf);
	}
}
type HeapType {
	case ANY;
	case EXTERN;
	case DATA;
	case EQ;
	case I31;
	case Func(sig: SigDecl);
	case Struct(sdecl: StructDecl);
	case Array(array: ArrayDecl);
	case Rtt(depth: int, hdecl: HeapTypeDecl);
	case FwRef(index: int);
}

// Utility functions associated with value types.
component ValueTypes {
	def ANYREF = ValueType.Ref(true, HeapType.ANY);
	def EXTERNREF = ValueType.Ref(true, HeapType.EXTERN);
	def EQREF = ValueType.Ref(true, HeapType.EQ);
	def DATAREF = ValueType.Ref(true, HeapType.DATA);
	def I31REF = ValueType.Ref(true, HeapType.I31);
	def FUNCREF = ValueType.Ref(true, HeapType.Func(null));

	def ANYREF_NONNULL = ValueType.Ref(false, HeapType.ANY);
	def EXTERNREF_NONNULL = ValueType.Ref(false, HeapType.EXTERN);
	def EQREF_NONNULL = ValueType.Ref(false, HeapType.EQ);
	def DATAREF_NONNULL = ValueType.Ref(false, HeapType.DATA);
	def I31REF_NONNULL = ValueType.Ref(false, HeapType.I31);
	def FUNCREF_NONNULL = ValueType.Ref(false, HeapType.Func(null));

	def NONE = Array<ValueType>.new(0);

	// Render a value type, careful not to recurse into any type in {seen}.
	def render(vt: ValueType, seen: List<Decl>, buf: StringBuilder) -> StringBuilder {
		var s: string;
		match (vt) {
			BOTTOM => s = "<bottom>";
			I32 => s = "i32";
			I64 => s = "i64";
			F32 => s = "f32";
			F64 => s = "f64";
			V128 => s = "v128";
			Host(host) => return host.render(buf);
			Abstract(it) => {
				buf.puts("(abstract ");
				if (it != null) buf.put1("#%d", it.abstype_index);
				else buf.puts("<null>");
				return buf.puts(")");
			}
			EXTERNREF_NULL => s = "externref null";
			Ref(nullable, heap) => {
				match (heap) {
					ANY => renderSimpleRef(buf, nullable, "any");
					EXTERN => renderSimpleRef(buf, nullable, "extern");
					DATA => renderSimpleRef(buf, nullable, "data");
					EQ => renderSimpleRef(buf, nullable, "eq");
					I31 => renderSimpleRef(buf, nullable, "i31");
					Func(sig) => {
						if (sig == null) renderSimpleRef(buf, nullable, "func");
						else sig.render2(seen, buf.puts("(ref ")).puts(")");
					}
					Struct(sdecl) => renderIndexedRef(buf, nullable, "struct", sdecl.struct_index);
					Array(array) => renderIndexedRef(buf, nullable, "array", array.array_index);
					Rtt(depth, hdecl) => {
						if (nullable) buf.puts("(ref null rtt");
						else buf.puts("(rtt ");
						if (depth >= 0) buf.putd(depth).sp();
						match (hdecl) {
							x: StructDecl => buf.put1("#%d", x.struct_index);
							x: ArrayDecl => buf.put1("#%d", x.array_index);
							x: SigDecl => buf.put1("#%d", x.sig_index);
							null => buf.puts("any");
						}
						buf.puts(")");
					}
					FwRef(index) => buf.put1("(ref #%d)", index);
				}
				return buf;
			}
		}
		return buf.puts(s);
	}
	def renderSimpleRef(buf: StringBuilder, nullable: bool, str: string) {
		if (nullable) buf.puts(str).puts("ref");
		else buf.puts("(ref ").puts(str).puts(")");
	}
	def renderIndexedRef(buf: StringBuilder, nullable: bool, str: string, index: int) {
		buf.puts("(ref ");
		if (nullable) buf.puts("null ");
		buf.put2("%s #%d)", str, index);
	}
	def isNumeric(t: ValueType) -> bool {
		match (t) {
			BOTTOM, I32, I64, F32, F64 => return true;
			_ => return false;
		}
	}
	def isRef(t: ValueType) -> bool {
		match (t) {
			BOTTOM, Ref, Host => return true;
			Abstract(abs) => return abs.is_externref;
			_ => return false;
		}
	}
	def isAssignable(from: ValueType, to: ValueType) -> bool {
		if (from == ValueType.BOTTOM) return true;
		var c = TypeComparator.new();
		var eq = c.compare(from, to);
		return eq == TypeEquiv.EQUAL || eq == TypeEquiv.SUB;
	}
	def isRttSubType(sub: HeapType.Rtt, sup: HeapType.Rtt) -> bool {
		if (sup.depth >= 0) return false;
		return isAssignableHeap(sub.hdecl, sup.hdecl);
	}
	def isAssignableHeap(from: HeapTypeDecl, to: HeapTypeDecl) -> bool {
		return isAssignable(Ref(false, from), Ref(false, to)); // XXX: make more efficient
	}
	def isEquivalent(x: ValueType, y: ValueType) -> bool {
		var c = TypeComparator.new();
		var eq = c.compare(x, y);
		return eq == TypeEquiv.EQUAL;
	}
	def isEquivalentArray(x: Array<ValueType>, y: Array<ValueType>) -> bool {
		if (x == y) return true;
		if (x.length != y.length) return false;
		for (i < x.length) if (!isEquivalent(x[i], y[i])) return false;
		return true;
	}
	def hasDefaultValue(t: ValueType) -> bool {
		match (t) {
			Ref(nullable, sig) => return nullable;
			Abstract(abs) => return abs.has_default;
			_ => return true;
		}
	}
	def Ref(nullable: bool, ht: HeapTypeDecl) -> ValueType.Ref {
		match (ht) {
			x: StructDecl => return ValueType.Ref(nullable, HeapType.Struct(x));
			x: ArrayDecl => return ValueType.Ref(nullable, HeapType.Array(x));
			x: SigDecl => return ValueType.Ref(nullable, HeapType.Func(x));
			_ => return ValueTypes.ANYREF; // should not happen
		}
	}
	def RefStruct(nullable: bool, x: StructDecl) -> ValueType.Ref {
		return ValueType.Ref(nullable, HeapType.Struct(x));
	}
	def RefArray(nullable: bool, x: ArrayDecl) -> ValueType.Ref {
		return ValueType.Ref(nullable, HeapType.Array(x));
	}
	def RefFunc(nullable: bool, x: SigDecl) -> ValueType.Ref {
		return ValueType.Ref(nullable, HeapType.Func(x));
	}
	def map(t: ValueType, f: ValueType -> (bool, ValueType)) -> (bool, ValueType) {
		var n = f(t);
		if (n.0) return n;
		match (t) {
			Abstract(it) => {
				var nassignable = mapArray(it.assignable, f);
				if (nassignable.0) {
					var nt = AbsTypeDecl.new(it.has_default, it.is_externref, nassignable.1);
					nt.imp = it.imp;
					nt.abstype_index = it.abstype_index;
					return (true, ValueType.Abstract(nt));
				}
			}
			Ref(nullable, heap) => {
				match (heap) {
					Func(sig) => {
						if (sig == null) return (false, t);
						var np = mapArray(sig.params, f);
						var nr = mapArray(sig.results, f);
						if (np.0 | nr.0) return (true, ValueType.Ref(nullable, HeapType.Func(SigDecl.new(np.1, nr.1))));
					}
					Struct(sdecl) => { // TODO
					}
					Array(array) => { // TODO
					}
					Rtt(depth, hdecl) => { // TODO
					}
					_ => ;
				}
			}
			_ => ;
		}
		return (false, t);
	}
	def mapArray(array: Array<ValueType>, f: ValueType -> (bool, ValueType)) -> (bool, Array<ValueType>) {
		for (i < array.length) {
			var r = map(array[i], f);
			if (r.0) {
				var narray = Arrays.dup(array);
				narray[i] = r.1;
				for (j = i + 1; j < array.length; j++) {
					narray[j] = map(array[j], f).1;
				}
				return (true, narray);
			}
		}
		return (false, array);
	}
}

// Implementation detail in comparing recursive types. Computes the relation between
// two types that may be mutually recursive, including subtyping between structs,
// arrays, and functions.
enum TypeEquiv {
	UNRELATED,
	SUPER,
	EQUAL,
	SUB
}
class TypeComparator {
	private var stack: List<(Decl, Decl)>;
	def compare(from: ValueType, to: ValueType) -> TypeEquiv {
		if (from == to) return TypeEquiv.EQUAL;
		match (from) {
			EXTERNREF_NULL => match (to) {
				Ref(nullable, heap) => match (heap) {
					EXTERN, ANY => return if(nullable, TypeEquiv.SUB, TypeEquiv.UNRELATED);
					_ => return TypeEquiv.UNRELATED;
				}
				Abstract(tabs) => {
					if (tabs.is_externref && tabs.has_default) return TypeEquiv.SUB;
					return TypeEquiv.UNRELATED;
				}
				_ => ;
			}
			Abstract(fabs) => match (to) {
				Abstract(tabs) => {
					if (fabs.isAssignableTo(to)) return TypeEquiv.SUB;
					if (tabs.isAssignableTo(from)) return TypeEquiv.SUPER;
					return TypeEquiv.UNRELATED;
				}
				EXTERNREF_NULL => if (fabs.is_externref && fabs.has_default) return TypeEquiv.SUPER;
				_ => if (fabs.isAssignableTo(to)) return TypeEquiv.SUB;
			}
			Host(fhost) => match (to) {
				Host(thost) => {
					if (fhost.isAssignableTo(to)) return TypeEquiv.SUB;
					if (thost.isAssignableTo(from)) return TypeEquiv.SUPER;
					return TypeEquiv.UNRELATED;
				}
				_ => return if(fhost != null && fhost.isAssignableTo(to), TypeEquiv.SUB, TypeEquiv.UNRELATED);
			}
			Ref(fnullable, fheap) => match (to) {
				Ref(tnullable, theap) => {
					var eq = compareNullable(fnullable, tnullable);
					return combineEq(eq, compareHeapTypes(fheap, theap));
				}
				EXTERNREF_NULL => {
					if (fnullable && (fheap == HeapType.EXTERN || fheap == HeapType.ANY)) return TypeEquiv.SUPER;
					else return TypeEquiv.UNRELATED;
				}
				_ => ;
			}
			_ => ;
		}
		// Left-hand side primitive, but right-hand side could still be abstract or host
		match (to) {
			Abstract(tabs) => if (tabs.isAssignableTo(from)) return TypeEquiv.SUPER;
			Host(thost) => if (thost.isAssignableTo(from)) return TypeEquiv.SUPER;
			_ => ;
		}
		return TypeEquiv.UNRELATED;
	}
	def compareTypes(eq: TypeEquiv, at: Array<ValueType>, bt: Array<ValueType>) -> TypeEquiv {
		if (at.length != bt.length) return TypeEquiv.UNRELATED;
		for (i < at.length) {
			if (eq == TypeEquiv.UNRELATED) break;
			var r = compare(at[i], bt[i]);
			eq = combineEq(eq, r);
		}
		return eq;
	}
	def compareStorageTypes(eq: TypeEquiv, at: Array<StorageType>, bt: Array<StorageType>) -> TypeEquiv {
		var length = at.length;
		if (length < bt.length) {
			eq = combineEq(eq, TypeEquiv.SUPER);
		} else if (length > bt.length) {
			eq = combineEq(eq, TypeEquiv.SUB);
			length = bt.length;
		}

		for (i < length) {
			if (eq == TypeEquiv.UNRELATED) break;
			var r = compare(at[i].valtype, bt[i].valtype);
			if (at[i].packing != bt[i].packing) return TypeEquiv.UNRELATED;
			if (at[i].mutable) {
				if (r != TypeEquiv.EQUAL) return TypeEquiv.UNRELATED;
				if (!bt[i].mutable) return TypeEquiv.UNRELATED;
			} else {
				if (bt[i].mutable) return TypeEquiv.UNRELATED;
				eq = combineEq(eq, r);
			}
		}
		return eq;
	}
	def compareHeapTypes(from: HeapType, to: HeapType) -> TypeEquiv {
		if (from == to) return TypeEquiv.EQUAL;
		match (from) {
			EQ,
			EXTERN => match (to) {
				ANY => return TypeEquiv.SUB;
				_ => ;
			}
			ANY => return TypeEquiv.SUPER;
			DATA => match (to) {
				EQ, ANY => return TypeEquiv.SUB;
				Struct, Array => return TypeEquiv.SUPER;
				_ => ;
			}
			I31 => match (to) {
				EQ, ANY => return TypeEquiv.SUB;
				_ => ;
			}
			Func(fsig) => match (to) {
				ANY => return TypeEquiv.SUB;
				Func(tsig) => {
					if (fsig == null) return TypeEquiv.SUPER;
					if (tsig == null) return TypeEquiv.SUB;
					var result = TypeEquiv.EQUAL;
					if (push(fsig, tsig)) {
						result = compareTypes(result, tsig.params, fsig.params);
						result = compareTypes(result, fsig.results, tsig.results);
						pop();
					}
					return result;
				}
				_ => return TypeEquiv.UNRELATED;
			}
			Struct(fstruct) => match (to) {
				DATA, EQ, ANY => return TypeEquiv.SUB;
				Struct(tstruct) => {
					var result = TypeEquiv.EQUAL;
					if (push(fstruct, tstruct)) {
						result = compareStorageTypes(result, fstruct.field_types, tstruct.field_types);
						pop();
					}
					return result;
				}
				_ => return TypeEquiv.UNRELATED;
			}
			Array(farray) => match (to) {
				DATA, EQ, ANY => return TypeEquiv.SUB;
				Array(tarray) => {
					var result = TypeEquiv.EQUAL;
					if (push(farray, tarray)) {
						result = compareStorageTypes(result, farray.elem_types,	tarray.elem_types);
						pop();
					}
					return result;
				}
				_ => return TypeEquiv.UNRELATED;
			}
			Rtt(fdepth, fheaptype) => match(to) {
				EQ, ANY => return TypeEquiv.SUB;
				Rtt(tdepth, theaptype) => {
					if (fheaptype != theaptype) return TypeEquiv.UNRELATED;
					if (tdepth < 0 && fdepth >= 0) return TypeEquiv.SUB;					
					if (fdepth < 0 && tdepth >= 0) return TypeEquiv.SUPER;					
				}
				_ => ;
			}
			_ => ;
		}
		return TypeEquiv.UNRELATED;
	}
	def compareNullable(f: bool, t: bool) -> TypeEquiv {
		return if(f,
			if(t, TypeEquiv.EQUAL, TypeEquiv.SUPER),
			if(t, TypeEquiv.SUB, TypeEquiv.EQUAL));
	}
	def combineEq(a: TypeEquiv, b: TypeEquiv) -> TypeEquiv {
		if (a == TypeEquiv.UNRELATED) return a;
		match (b) {
			UNRELATED => return TypeEquiv.UNRELATED;
			SUPER => return if(a == TypeEquiv.SUB, TypeEquiv.UNRELATED, TypeEquiv.SUPER);
			EQUAL => return a;
			SUB => return if(a == TypeEquiv.SUPER, TypeEquiv.UNRELATED, TypeEquiv.SUB);
		}
	}
	private def push(a: Decl, b: Decl) -> bool {
		if (a == b) return false;  // identity; no need to push on stack
		for (l = stack; l != null; l = l.tail) {
			var sa = l.head.0, sb = l.head.1;
			if (a == sa && b == sb) return false; // already on stack
		}
		stack = List.new((a, b), stack);
		return true; // pushed onto stack
	}
	private def pop() {
		if (stack != null) stack = stack.tail;
	}
}
