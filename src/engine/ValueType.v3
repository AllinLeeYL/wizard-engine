// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The allowable types of any value in WebAssembly.
type ValueType {
	case I32;
	case I64;
	case F32;
	case F64;
	case VEC128;
	case FUNCREF;
	case EXTERNREF;
	case Function(sig: FuncSig);
	case Extern(host: ExternType);
//	case Struct(fields: Array<ValueType>);
//	case Array(elem: ValueType);
}
// External types, such as type imports or host types. Extensible.
class ExternType {
	def isAssignableTo(t: ValueType) -> bool {
		match (t) {
			Extern(ext) => return this == ext;
			EXTERNREF => return true;
			_ => return false;
		}
	}
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("<externtype>");
	}
}
// Utility functions associated with value types.
component ValueTypes {
	def NONE = Array<ValueType>.new(0);
	def render(buf: StringBuilder, t: ValueType) -> StringBuilder {
		var s: string;
		match (t) {
			I32 => s = "i32";
			I64 => s = "i64";
			F32 => s = "f32";
			F64 => s = "f64";
			VEC128 => s = "v128";
			Extern(host) => return host.render(buf);
			FUNCREF => s = "funcref";
			EXTERNREF => s = "externref";
			Function(sig) => return sig.render(buf);
		}
		return buf.puts(s);
	}
	def isNumeric(t: ValueType) -> bool {
		match (t) {
			I32, I64, F32, F64 => return true;
			_ => return false;
		}
	}
	def isRef(t: ValueType) -> bool {
		match (t) {
			FUNCREF, EXTERNREF, Function, Extern => return true;
			_ => return false;
		}
	}
	def isAssignable(from: ValueType, to: ValueType) -> bool {
		match (from) {
			Function(fsig) => {
				match (to) {
					Function(tsig) => return fsig.isAssignableSig(tsig);
					FUNCREF => return true;
					_ => return false;
				}
			}
			Extern(host) => {
				return host.isAssignableTo(to);
			}
			_ => return from == to;
		}
	}
	def leastUpperBound(t: ValueType, f: ValueType) -> (bool, ValueType) {
		if (t == f) return (true, t);
		return (false, t);
	}
}