// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Value types for all Wasm values. Note that they may be recursive
// mutating the definition of heap types like {StructDecl} and {ArrayDecl}.
type ValueType {
	case BOTTOM;						// Bottom type
	case I32;						// 32-bit integer
	case I64;						// 64-bit integer
	case F32;						// 32-bit float
	case F64;						// 64-bit float
	case VEC128;						// 128-bit vector
	case ANYREF;						// supertype of all references
	case I31REF;						// i31 or reference
	case FUNCREF;						// supertype of all funcref types
	case EXTERNREF;						// supertype of all extern types
	case EXTERNREF_NULL;					// used internally
	case RefFunc(nullable: bool, sig: SigDecl);		// reference to a function
	case RefStruct(nullable: bool, sdecl: StructDecl);	// reference to a struct
	case RefArray(nullable: bool, array: ArrayDecl);	// reference to an array
	case FwRef(nullable: bool, index: u32);			// used in resolving cycles
	case Rtt(depth: int, heaptype: HeapTypeDecl);		// type of runtime type values
	case Abstract(it: AbsTypeDecl);				// imported abstract types
	case Host(host: HostType);				// host-defined types

	def render(buf: StringBuilder) -> StringBuilder {
		return ValueTypes.render(this, null, buf);
	}
}

// Utility functions associated with value types.
component ValueTypes {
	def NONE = Array<ValueType>.new(0);
	// Render a value type, careful not to recurse into any type in {seen}.
	def render(vt: ValueType, seen: List<Decl>, buf: StringBuilder) -> StringBuilder {
		var s: string;
		match (vt) {
			BOTTOM => s = "<bottom>";
			I32 => s = "i32";
			I64 => s = "i64";
			F32 => s = "f32";
			F64 => s = "f64";
			VEC128 => s = "v128";
			Host(host) => return host.render(buf);
			Abstract(it) => {
				buf.puts("(abstract ");
				if (it != null) buf.put1("#%d", it.abstype_index);
				else buf.puts("<null>");
				return buf.puts(")");
			}
			ANYREF => s = "(ref any)";
			I31REF => s = "(ref i31)";
			FUNCREF => s = "(ref func)";
			EXTERNREF => s = "(ref extern)";
			EXTERNREF_NULL => s = "externref null";
			RefFunc(nullable, sig) => {
				buf.puts("(ref ");
				if (nullable) buf.puts("null ");
				if (sig != null) sig.render2(seen, buf);
				else buf.puts("<null>");
				return buf.puts(")");
			}
			RefStruct(nullable, sdecl) => {
				buf.puts("(ref ");
				if (nullable) buf.puts("null ");
				buf.put1("struct #%d", sdecl.struct_index);
				return buf.puts(")");
			}
			RefArray(nullable, array) => {
				buf.puts("(ref ");
				if (nullable) buf.puts("null ");
				buf.put1("array #%d", array.array_index);
				return buf.puts(")");
			}
			Rtt(depth, heaptype) => {
				buf.puts("(rtt ");
				if (depth < 0) buf.puts("n ");
				else buf.putd(depth).sp();
				match (heaptype) {
					x: StructDecl => buf.put1("#%d", x.struct_index);
					x: ArrayDecl => buf.put1("#%d", x.array_index);
					x: SigDecl => buf.put1("#%d", x.sig_index);
					null => buf.puts("any");
				}
				return buf.puts(")");
			}
			FwRef(nullable, index) => {
				buf.puts("(ref ");
				if (nullable) buf.puts("null ");
				buf.put1("#%d)", index);
			}
		}
		return buf.puts(s);
	}
	def isNumeric(t: ValueType) -> bool {
		match (t) {
			BOTTOM, I32, I64, F32, F64 => return true;
			_ => return false;
		}
	}
	def isRef(t: ValueType) -> bool {
		match (t) {
			BOTTOM, FUNCREF, EXTERNREF, RefFunc, RefStruct, RefArray, Host => return true;
			Abstract(abs) => return abs.is_externref;
			_ => return false;
		}
	}
	def isAssignable(from: ValueType, to: ValueType) -> bool {
		if (from == ValueType.BOTTOM) return true;
		var c = TypeComparator.new();
		var eq = c.compare(from, to);
		return eq == TypeEquiv.EQUAL || eq == TypeEquiv.SUB;
	}
	def isAssignableHeap(from: HeapTypeDecl, to: HeapTypeDecl) -> bool {
		return isAssignable(ref(false, from), ref(false, to));
	}
	def isEquivalent(x: ValueType, y: ValueType) -> bool {
		var c = TypeComparator.new();
		var eq = c.compare(x, y);
		return eq == TypeEquiv.EQUAL;
	}
	def isEquivalentArray(x: Array<ValueType>, y: Array<ValueType>) -> bool {
		if (x == y) return true;
		if (x.length != y.length) return false;
		for (i < x.length) if (!isEquivalent(x[i], y[i])) return false;
		return true;
	}
	def hasDefaultValue(t: ValueType) -> bool {
		match (t) {
			RefFunc(nullable, sig) => return nullable;
			RefStruct(nullable, sdecl) => return nullable;
			RefArray(nullable, array) => return nullable;
			Abstract(abs) => return abs.has_default;
			_ => return true;
		}
	}
	def ref(nullable: bool, ht: HeapTypeDecl) -> ValueType {
		match (ht) {
			x: StructDecl => return ValueType.RefStruct(nullable, x);
			x: ArrayDecl => return ValueType.RefArray(nullable, x);
			x: SigDecl => return ValueType.RefFunc(nullable, x);
			_ => return ValueType.ANYREF; // should not happen
		}
	}
}

// Implementation detail in comparing recursive types. Computes the relation between
// two types that may be mutually recursive, including subtyping between structs,
// arrays, and functions.
enum TypeEquiv {
	UNRELATED,
	SUPER,
	EQUAL,
	SUB
}
class TypeComparator {
	private var stack: List<(Decl, Decl)>;
	def compare(from: ValueType, to: ValueType) -> TypeEquiv {
		if (from == to) return TypeEquiv.EQUAL;
		match (from) {
			EXTERNREF => match (to) {
				ANYREF => return TypeEquiv.SUB;
				EXTERNREF_NULL => return TypeEquiv.SUPER;
				_ => ;
			}
			EXTERNREF_NULL => match (to) {
				EXTERNREF, ANYREF => return TypeEquiv.SUB;
				Abstract(tabs) => {
					if (tabs.is_externref && tabs.has_default) return TypeEquiv.SUB;
					return TypeEquiv.UNRELATED;
				}
				_ => ;
			}
			FUNCREF => match (to) {
				ANYREF => return TypeEquiv.SUB;
				RefFunc => return TypeEquiv.SUPER;
				_ => ;
			}
			ANYREF => match (to) {
				EXTERNREF,
				EXTERNREF_NULL,
				FUNCREF,
				I31REF,
				RefFunc,
				RefStruct,
				RefArray,
				Rtt => return TypeEquiv.SUPER;
				_ => ;
			}
			I31REF => match (to) {
				ANYREF => return TypeEquiv.SUB;
				_ => ;
			}
			RefFunc(fnullable, fsig) => match (to) {
				ANYREF, FUNCREF => return TypeEquiv.SUB;
				RefFunc(tnullable, tsig) => {
					var result = compareNullable(fnullable, tnullable);
					if (push(fsig, tsig)) {
						result = compareTypes(result, tsig.params, fsig.params);
						result = compareTypes(result, fsig.results, tsig.results);
						pop();
					}
					return result;
				}
				_ => return TypeEquiv.UNRELATED;
			}
			RefStruct(fnullable, fstruct) => match (to) {
				ANYREF => return TypeEquiv.SUB;
				RefStruct(tnullable, tstruct) => {
					var result = compareNullable(fnullable, tnullable);
					if (push(fstruct, tstruct)) {
						result = compareStorageTypes(result, fstruct.field_types, tstruct.field_types);
						pop();
					}
					return result;
				}
				_ => return TypeEquiv.UNRELATED;
			}
			RefArray(fnullable, farray) => match (to) {
				ANYREF => return TypeEquiv.SUB;
				RefArray(tnullable, tarray) => {
					var result = compareNullable(fnullable, tnullable);
					if (push(farray, tarray)) {
						result = compareStorageTypes(result, farray.elem_types,	tarray.elem_types);
						pop();
					}
					return result;
				}
				_ => return TypeEquiv.UNRELATED;
			}
			Rtt(fdepth, fheaptype) => match(to) {
				ANYREF => return TypeEquiv.SUB;
				_ => ;
			}
			Abstract(fabs) => match (to) {
				Abstract(tabs) => {
					if (fabs.isAssignableTo(to)) return TypeEquiv.SUB;
					if (tabs.isAssignableTo(from)) return TypeEquiv.SUPER;
					return TypeEquiv.UNRELATED;
				}
				EXTERNREF_NULL => if (fabs.is_externref && fabs.has_default) return TypeEquiv.SUPER;
				_ => if (fabs.isAssignableTo(to)) return TypeEquiv.SUB;
			}
			Host(fhost) => match (to) {
				Host(thost) => {
					if (fhost.isAssignableTo(to)) return TypeEquiv.SUB;
					if (thost.isAssignableTo(from)) return TypeEquiv.SUPER;
					return TypeEquiv.UNRELATED;
				}
				_ => return if(fhost != null && fhost.isAssignableTo(to), TypeEquiv.SUB, TypeEquiv.UNRELATED);
			}
			_ => ;
		}
		// Left-hand side primitive, but right-hand side could still be abstract or host
		match (to) {
			Abstract(tabs) => if (tabs.isAssignableTo(from)) return TypeEquiv.SUPER;
			Host(thost) => if (thost.isAssignableTo(from)) return TypeEquiv.SUPER;
			_ => ;
		}
		return TypeEquiv.UNRELATED;
	}
	def compareTypes(eq: TypeEquiv, at: Array<ValueType>, bt: Array<ValueType>) -> TypeEquiv {
		if (at.length != bt.length) return TypeEquiv.UNRELATED;
		for (i < at.length) {
			if (eq == TypeEquiv.UNRELATED) break;
			var r = compare(at[i], bt[i]);
			eq = combineEq(eq, r);
		}
		return eq;
	}
	def compareStorageTypes(eq: TypeEquiv, at: Array<StorageType>, bt: Array<StorageType>) -> TypeEquiv {
		var length = at.length;
		if (length < bt.length) {
			eq = combineEq(eq, TypeEquiv.SUPER);
		} else if (length > bt.length) {
			eq = combineEq(eq, TypeEquiv.SUB);
			length = bt.length;
		}

		for (i < length) {
			if (eq == TypeEquiv.UNRELATED) break;
			var r = compare(at[i].valtype, bt[i].valtype);
			if (at[i].packing != bt[i].packing) return TypeEquiv.UNRELATED;
			if (at[i].mutable) {
				if (r != TypeEquiv.EQUAL) return TypeEquiv.UNRELATED;
				if (!bt[i].mutable) return TypeEquiv.UNRELATED;
			} else {
				if (bt[i].mutable) return TypeEquiv.UNRELATED;
				eq = combineEq(eq, r);
			}
		}
		return eq;
	}
	def compareNullable(f: bool, t: bool) -> TypeEquiv {
		return if(f,
			if(t, TypeEquiv.EQUAL, TypeEquiv.SUPER),
			if(t, TypeEquiv.SUB, TypeEquiv.EQUAL));
	}
	def combineEq(a: TypeEquiv, b: TypeEquiv) -> TypeEquiv {
		if (a == TypeEquiv.UNRELATED) return a;
		match (b) {
			UNRELATED => return TypeEquiv.UNRELATED;
			SUPER => return if(a == TypeEquiv.SUB, TypeEquiv.UNRELATED, TypeEquiv.SUPER);
			EQUAL => return a;
			SUB => return if(a == TypeEquiv.SUPER, TypeEquiv.UNRELATED, TypeEquiv.SUB);
		}
	}
	private def push(a: Decl, b: Decl) -> bool {
		if (a == b) return false;  // identity; no need to push on stack
		for (l = stack; l != null; l = l.tail) {
			var sa = l.head.0, sb = l.head.1;
			if (a == sa && b == sb) return false; // already on stack
		}
		stack = List.new((a, b), stack);
		return true; // pushed onto stack
	}
	private def pop() {
		if (stack != null) stack = stack.tail;
	}
}
