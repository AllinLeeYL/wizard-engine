// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An instantiated Wasm memory implemented using a Virgil byte array.
class V3Memory extends Memory {
	var data: Array<byte>;
	new(decl: MemoryDecl) super(decl) {
		var bytes = u64.!(decl.initial) * PAGE_SIZE;
		if (bytes > int.max || decl.initial > Target.limit_memory_pages) {
			oom = true;
		} else {
			data = Array<byte>.new(int.!(bytes));
		}
	}
	def size() -> u32 {
		return if(data != null, u32.!(data.length) / PAGE_SIZE);
	}
	def length() -> u64 {
		return if(data != null, u32.view(data.length));
	}
	def deallocate() {
		data = null;
	}
	def grow(pages: u32) -> int {
		var current = u64.!(size());
		if (pages == 0) return int.!(current);
		var nsize = current + pages;
		var limit = decl.maximum.min(Target.limit_memory_pages);
		if (nsize > limit) return -1;
		var ndata = Array<byte>.new(int.!(nsize * PAGE_SIZE));
		for (i < data.length) ndata[i] = data[i];
		data = ndata;
		return int.!(current);
	}
	def read1(offset: u32, index: u32) -> (TrapReason, u8) {
		var i = boundsCheckI(offset, index, 1);
		if (i < 0) return (TrapReason.MEM_OUT_OF_BOUNDS, 0);
		var val = data[i];
		return (TrapReason.NONE, val);
	}
	def read_u16(offset: u32, index: u32) -> (TrapReason, u16) {
		var i = boundsCheckI(offset, index, 2);
		if (i < 0) return (TrapReason.MEM_OUT_OF_BOUNDS, 0);
		var b0 = data[i], b1 = data[i+1];
		var val = u16.!(b1) << 8 | b0;
		return (TrapReason.NONE, val);
	}
	def read_u32(offset: u32, index: u32) -> (TrapReason, u32) {
		var i = boundsCheckI(offset, index, 4);
		if (i < 0) return (TrapReason.MEM_OUT_OF_BOUNDS, 0);
		var b0 = data[i], b1 = data[i+1], b2 = data[i+2], b3 = data[i+3];
		var val = (u32.!(b3) << 24) | (u32.!(b2) << 16) | (u32.!(b1) << 8) | b0;
		return (TrapReason.NONE, val);
	}
	def read_u64(offset: u32, index: u32) -> (TrapReason, u64) {
		var i = boundsCheckI(offset, index, 8);
		if (i < 0) return (TrapReason.MEM_OUT_OF_BOUNDS, 0);
		var b0 = data[i], b1 = data[i+1], b2 = data[i+2], b3 = data[i+3];
		var w0 = (u32.!(b3) << 24) | (u32.!(b2) << 16) | (u32.!(b1) << 8) | b0;
		var b4 = data[i+4], b5 = data[i+5], b6 = data[i+6], b7 = data[i+7];
		var w1 = (u32.!(b7) << 24) | (u32.!(b6) << 16) | (u32.!(b5) << 8) | u32.!(b4);
		var val = (u64.!(w1) << 32) | w0;
		return (TrapReason.NONE, val);
	}
	def write_u8(offset: u32, index: u32, val: u8) -> TrapReason {
		var i = boundsCheckI(offset, index, 8);
		if (i < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		data[i] = val;
		return TrapReason.NONE;
	}
	def write_u16(offset: u32, index: u32, val: u16) -> TrapReason {
		var i = boundsCheckI(offset, index, 2);
		if (i < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		data[i] = u8.view(val);
		data[i+1] = u8.view(val >> 8);
		return TrapReason.NONE;
	}
	def write_u32(offset: u32, index: u32, val: u32) -> TrapReason {
		var i = boundsCheckI(offset, index, 4);
		if (i < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		data[i] = u8.view(val);
		data[i+1] = u8.view(val >> 8);
		data[i+2] = u8.view(val >> 16);
		data[i+3] = u8.view(val >> 24);
		return TrapReason.NONE;
	}
	def write_u64(offset: u32, index: u32, val: u64) -> TrapReason {
		var i = boundsCheckI(offset, index, 8);
		if (i < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		data[i] = u8.view(val);
		data[i+1] = u8.view(val >> 8);
		data[i+2] = u8.view(val >> 16);
		data[i+3] = u8.view(val >> 24);
		data[i+4] = u8.view(val >> 32);
		data[i+5] = u8.view(val >> 40);
		data[i+6] = u8.view(val >> 48);
		data[i+7] = u8.view(val >> 56);
		return TrapReason.NONE;
	}
	def extract(offset: u32, len: u32) -> Array<byte> {
		var i = boundsCheckI(0, offset, len);
		if (i < 0) return null;
		return Arrays.range(data, i, i + int.!(len));
	}
	def copyIn(dst_offset: u32, src: Array<byte>, src_offset: u32, size: u32) -> TrapReason {
		var r = ArrayUtil.safeCopy(data, dst_offset, src, src_offset, size);
		return if(r, TrapReason.NONE, TrapReason.MEM_OUT_OF_BOUNDS);
	}
	def readIn(fd: int, dst_offset: u32, size: u32) -> int {
		var t = this.alias(dst_offset, size);
		if (t.0 == null) return -1;
		return System.fileReadK(fd, t.0, t.1, t.2);
	}
	def writeOut(fd: int, src_offset: u32, size: u32) -> int {
		var t = this.alias(src_offset, size);
		if (t.0 == null) return -1;
		System.fileWriteK(fd, t.0, t.1, t.2);
		return 0;
	}
	def alias(offset: u32, len: u32) -> (Array<byte>, int, int) {
		var i = boundsCheckI(0, offset, len);
		if (i < 0) return (null, 0, 0);
		return (data, i, int.!(len));
	}
	def boundsCheckI(offset: u32, index: u32, len: u32) -> i32 {
		var i = i64.view(offset) + index;
		if ((i + len) > length()) return -1;
		return i32.view(i);
	}
	def fill(dest: u32, val: u8, size: u32) -> TrapReason {
		var i = boundsCheckI(0, dest, size);
		if (i < 0) return TrapReason.MEM_OUT_OF_BOUNDS;
		for (j < int.!(size)) {
			data[i + j] = val;
		}
		return TrapReason.NONE;
	}
	def copyM(dst_offset: u32, src: Memory, src_offset: u32, size: u32) -> TrapReason {
		var r = ArrayUtil.safeCopy(data, dst_offset, V3Memory.!(src).data, src_offset, size);
		return if(r, TrapReason.NONE, TrapReason.MEM_OUT_OF_BOUNDS);
	}
}
def PAGE_SIZE = 65536u;
