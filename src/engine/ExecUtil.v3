// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Execution utilities for the interpreter.
component ExecUtil {
	def fwBoundCall(f: Function, args1: Array<Value>, args2: Array<Value>) -> HostResult {
		var al = args1.length, args = Array<Value>.new(al + args2.length);
		for (i < al) args[i] = args1[i];
		for (i < args2.length) args[i + al] = args2[i];
		return HostResult.TailCall(f, args);
	}
	def I32_CLZ(x: u32) -> u32 {
		var count = 0u;
		if (x == 0) return 32;
		while ((x & 0x80000000u) == 0) { count++; x <<= 1; }
		return count;
	}
	def I32_CTZ(x: u32) -> u32 {
		var count = 0u;
		if (x == 0) return 32;
		while ((x & 1u) == 0) { count++; x >>= 1; }
		return count;
	}
	def I32_POPCNT(x: u32) -> u32 {
		var count = 0u;
		for (i < 32) {
			if ((x & 1) == 1) count++;
			x >>= 1;
		}
		return count;
	}
	def I32_ROTL(x: u32, z: u32) -> u32 {
		var y = u5.view(z);
		if (y != 0) {
			var upper = x << y;
			var lower = x >> byte.view(32) - y;
			x = upper | lower;
		}
		return x;
	}
	def I32_ROTR(x: u32, z: u32) -> u32 {
		var y = u5.view(z);
		if (y != 0) {
			var upper = x << byte.view(32) - y;
			var lower = x >> y;
			x = upper | lower;
		}
		return x;
	}
	def I64_CLZ(x: u64) -> u64 {
		var count = 0u;
		if (x == 0) return 64;
		while ((x & 0x8000000000000000ul) == 0) { count++; x <<= 1; }
		return count;
	}
	def I64_CTZ(x: u64) -> u64 {
		var count = 0u;
		if (x == 0) return 64;
		while ((x & 1u) == 0) { count++; x >>= 1; }
		return count;
	}
	def I64_POPCNT(x: u64) -> u64 {
		var count = 0u;
		for (i < 64) {
			if ((x & 1) == 1) count++;
			x >>= 1;
		}
		return count;
	}
	def I64_ROTL(x: u64, z: u64) -> u64 {
		var y = u6.view(z);
		if (y != 0) {
			var upper = x << y;
			var lower = x >> byte.view(64) - y;
			x = upper | lower;
		}
		return x;
	}
	def I64_ROTR(x: u64, z: u64) -> u64 {
		var y = u6.view(z);
		if (y != 0) {
			var upper = x << byte.view(64) - y;
			var lower = x >> y;
			x = upper | lower;
		}
		return x;
	}
	def I32_SHL(x: i32, y: i32) -> i32 {
		return x << u5.view(y);
	}
	def I32_SHR_S(x: i32, y: i32) -> i32 {
		return x >> u5.view(y);
	}
	def I32_SHR_U(x: i32, y: i32) -> i32 {
		return x >>> u5.view(y);
	}
	def I64_SHL(x: u64, y: u64) -> u64 {
		return x << u6.view(y);
	}
	def I64_SHR_S(x: i64, y: i64) -> i64 {
		return x >> u6.view(y);
	}
	def I64_SHR_U(x: u64, y: u64) -> u64 {
		return x >> u6.view(y);
	}

	def fceil(a: float) -> float {
		return canonf(float.ceil(a));
	}
	def ffloor(a: float) -> float {
		return canonf(float.floor(a));
	}
	def fneg(a: float) -> float {
		return float.view(0x80000000u ^ u32.view(a));
	}
	def ftrunc(a: float) -> float {
		if (a < 0f) {
			if (a > -1f) return -0f;  // handle -0
			return 0f - float.floor(0f - a);
		}
		return canonf(float.floor(a));
	}
	def fmin(a: float, b: float) -> float {
		if (a < b) return a;
		if (a == b) return if(b.sign == 1, b, a); // handle -0
		if (b < a) return b;
		return float.nan;
	}
	def fmax(a: float, b: float) -> float {
		if (a > b) return a;
		if (a == b) return if(b.sign == 0, b, a); // handle -0
		if (b > a) return b;
		return float.nan;
	}
	def fcopysign(a: float, b: float) -> float {
		var aa = 0x7fffffffu & u32.view(a);
		var bb = 0x80000000u & u32.view(b);
		return float.view(aa | bb);
	}
	def canonf(a: float) -> float {
		return if(a == a, a, float.nan);
	}

	def dceil(a: double) -> double {
		return canond(double.ceil(a));
	}
	def dfloor(a: double) -> double {
		return canond(double.floor(a));
	}
	def dneg(a: double) -> double {
		return double.view(0x8000000000000000uL ^ u64.view(a));
	}
	def dtrunc(a: double) -> double {
		if (a < 0d) {
			if (a > -1d) return -0d;  // handle -0
			return 0d - double.floor(0d - a);
		}
		return canond(double.floor(a));
	}
	def dmin(a: double, b: double) -> double {
		if (a < b) return a;
		if (a == b) return if(b.sign == 1, b, a); // handle -0
		if (b < a) return b;
		return double.nan;
	}

	def dmax(a: double, b: double) -> double {
		if (a > b) return a;
		if (a == b) return if(b.sign == 0, b, a); // handle -0
		if (b > a) return b;
		return double.nan;
	}
	def dcopysign(a: double, b: double) -> double {
		var aa = 0x7fffffffffffffffuL & u64.view(a);
		var bb = 0x8000000000000000uL & u64.view(b);
		return double.view(aa | bb);
	}
	def canond(a: double) -> double {
		return if(a == a, a, double.nan);
	}
}
