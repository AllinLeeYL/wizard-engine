// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A probe can be inserted at a particular instruction (or all instructions) and fires when the
// instruction is executed.
class Probe {
	// Called when reaching a probe (e.g. before executing an instruction).
	def fire(dynamicLoc: DynamicLoc) -> Resumption { return Resumption.Continue; }
}

// Represents a dynamic location, e.g. the current point of execution during a probe callback.
type DynamicLoc(func: WasmFunction, pc: int, frame: TargetFrame) #unboxed { }

// A location in either Wasm code or a host function.
type WasmOrHostLoc {
	case WasmLoc(func: WasmFunction, pc: int, frame: TargetFrame);
	case HostLoc(func: HostFunction, frame: HostFrame);
	case None;
}
// Represents a host frame in a stacktrace.
class HostFrame {
	def caller() -> WasmOrHostLoc;
}

// An object which provides access to the state of an executing frame.
// A {FrameAccessor} is a stateful object that is materialized lazily by calling {TargetFrame.getAccessor()}
// and cached thereafter. It becomes obsolete after the frame is unwound, either because the function returned,
// or a trap or exception unwound the stack.
class FrameAccessor {
	// Returns the Wasm function in this frame.
	def func() -> WasmFunction;
	// Returns the current program counter.
	def pc() -> int;
	// Returns {true} if this frame has been unwound, either due to returning, or a trap or exception.
	// If this frame has been unwound, then
	def isUnwound() -> bool;
	// Returns the call depth of this frame within its segment, with the bottom frame being #0.
	def depth() -> int;
	// Get the caller frame, either a wasm or host function or none if called by the engine.
	def caller() -> WasmOrHostLoc;
	// Get the number of local variables in this frame.
	def numLocals() -> int;
	// Get the value of local variable {i}.
	def getLocal(i: int) -> Value;
	// Set the value of a local variable. (dynamically typechecked).
	def setLocal(i: int, v: Value);
	// Get the number of operand stack elements.
	def numOperands() -> int;
	// Get operand at depth {i}, with 0 being the top of the stack, -1 being one lower, etc.
	def getOperand(i: int) -> Value;
	// Set operand at depth {i}, with 0 being the top of the stack, -1 being one lower, etc. (dynamically typechecked).
	def setOperand(i: int, v: Value);
}

// Internal utility to manage a mutable list of probes. Probe lists are designed to support
// reentrant modifications by deferring changes and then applying them after iteration.
class ProbeList extends Probe {
	var elem: ProbeElem;
	private var last: ProbeElem;
	var onEnable: void -> void;	// callback when probe list becomes non-empty
	var onDisable: void -> void;	// callback when probe list becomes empty

	private var deferred: Vector<(bool, Probe)>;
	private var defer: bool;

	// Add a new probe to this list. Deferred if the list is currently executing {fire()}.
	def add(p: Probe) {
		if (defer) {
			if (deferred == null) deferred = Vector.new();
			deferred.put(false, p);
			return;
		}
		var n = ProbeElem.new(p);
		if (last != null) {
			last = last.next = n;
			return;
		}
		last = elem = n;
		if (onEnable != null) onEnable();
	}
	// Remove a probe from this list. Deferred if the list is currently executing {fire()}.
	def remove(p: Probe) {
		if (defer) {
			if (deferred == null) deferred = Vector.new();
			deferred.put(true, p);
			return;
		}
		var prev: ProbeElem;
		for (e = elem; e != null; (prev = e, e = e.next)) {
			if (e.probe == p) {
				if (prev != null) prev.next = e.next;
				else elem = e.next;
				if (e == last) last = prev;
				break;
			}
		}
		if (elem == null && onDisable != null) onDisable();
	}
	// Fire all probes in this list. Defers reentrant changes until after the last probe
	// has fired. If any probe traps, rather than continuing, the last trap is returned.
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		Metrics.probe_fires.val--;
		var prev = defer; // handle reentrant fire()
		defer = true;
		var result: Resumption = Resumption.Continue;
		for (e = elem; e != null; e = e.next) {
			Metrics.probe_fires.val++;
			var r = e.probe.fire(dynamicLoc);
			if (r != Resumption.Continue) result = r;
		}
		defer = prev;
		if (deferred != null && !defer) {
			for (i < deferred.length) {
				var t = deferred[i];
				if (t.0) remove(t.1);
				else add(t.1);
			}
		}
		if (deferred != null) deferred.resize(0);
		return result;
	}
	// Remove all probes.
	def clear() {
		last = elem = null; // TODO: defer clearing too?
		if (onDisable != null) onDisable();
	}
}
// Used internally for singly-linked list management.
private class ProbeElem(probe: Probe) {
	var next: ProbeElem;
}
