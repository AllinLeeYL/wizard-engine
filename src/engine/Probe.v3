// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A probe can be inserted at a particular instruction (or all instructions) and fires when the
// instruction is executed.
class Probe {
	def fire(func: WasmFunction, offset: int) -> Resumption { return Resumption.Continue; }
}

// Internal utility to manage a mutable list of probes. Probe lists are designed to support
// reentrant modifications by deferring changes and then applying them after iteration.
class ProbeList {
	var elem: ProbeElem;
	private var deferred: Vector<(bool, Probe)>;
	private var defer: bool;

	new(p: Probe) {
		elem = ProbeElem.new(p);
	}
	// Add a new probe to this list. Deferred if the list is currently fire()'ing.
	def add(p: Probe) {
		if (defer) {
			if (deferred == null) deferred = Vector.new();
			deferred.put(false, p);
			return;
		}
		var n = ProbeElem.new(p);
		n.next = elem;
		elem = n;
	}
	// Remove a probe from this list. Deferred if the list is currently fire()'ing.
	def remove(p: Probe) {
		if (defer) {
			if (deferred == null) deferred = Vector.new();
			deferred.put(true, p);
			return;
		}
		var prev: ProbeElem;
		for (e = elem; e != null; (prev = e, e = e.next)) {
			if (e.probe != p) continue;
			if (prev != null) prev.next = e.next;
			else elem = e.next;
		}
	}
	// Fire all probes in this list. Defers reentrant changes until after the last probe
	// has fired. If any probe traps, rather than continuing, the last trap is returned.
	def fire(func: WasmFunction, offset: int) -> Resumption {
		defer = true;
		var result: Resumption = Resumption.Continue;
		for (e = elem; e != null; e = e.next) {
			var r = e.probe.fire(func, offset);
			if (r != Resumption.Continue) result = r;			
		}
		defer = false;
		if (deferred != null) {
			for (i < deferred.length) {
				var t = deferred[i];
				if (t.0) remove(t.1);
				else add(t.1);
			}
		}
		if (deferred != null) deferred.resize(0);
		return result;
	}
}
// Used for singly-linked list management.
class ProbeElem(probe: Probe) {
	var next: ProbeElem;
}
// Utility class to implement timeouts
class TimeoutProbe(var count: int) extends Probe {
	def fire(func: WasmFunction, offset: int) -> Resumption {
		if (--count <= 0) return Resumption.Trap(TrapReason.TIMEOUT, true);
		return Resumption.Continue;
	}
}