// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Executes wasm code.
class Interpreter {
	def call_stack = ArrayStack<Frame>.new();  // TODO: move to V3Interpreter
	var frame: Frame;			// cached of top-of-stack frame, TODO: V3Interpreter
	var state: ExecState;			// current execution state
	var trap_reason: TrapReason;		// trap reason, if any
	var error_msg: string;			// error message associated with trap
	var step_count: int;			// total number of steps executed
	var limits = Limits.new();		// limits on execution/memory

	// Reset the interpreter state and run the function {f} on the arguments {args}.
	// Limits the execution to maximum {count} bytecodes. If {count < 0}, run
	// until exhausting, trap, or break.
	def run(count: int, f: Function, args: Array<Value>) -> Result;
	// Resume a stopped execution (e.g. after a breakpoint).
	def resume(count: int) -> Result;
	// Traces calls to host functions.
	def traceCallHostFunction(hf: HostFunction) {
		for (i < call_stack.top) Trace.OUT.sp();
		Trace.OUT.put2("callHost(\"%q\": %q)", hf.render, hf.sig.render).outln();
	}
}

// Internal execution states of the interpreter.
enum ExecState {
	STOPPED,	// execution has not yet begun
	RUNNING,	// currently running
	BREAKPOINT,	// stopped at (code) breakpoint
	FINISHED,	// execution completed bottom-most function
	TIMEOUT,	// execution timed out
	TRAPPED		// execution encountered a trap
}

// Reasons a WebAssembly execution has trapped.
enum TrapReason {
	NONE,
	UNREACHABLE,
	MEM_OUT_OF_BOUNDS,
	UNALIGNED_ACCESS,
	DIV_BY_ZERO,
	DIV_UNREPRESENTABLE,
	FLOAT_UNREPRESENTABLE,
	FUNC_INVALID,
	FUNC_SIG_MISMATCH,
	DATA_SEGMENT_DROPPED,
	ELEM_SEGMENT_DROPPED,
	TABLE_OUT_OF_BOUNDS,
	TABLE_INDEX_OUT_OF_BOUNDS,
	STACK_OVERFLOW,
	NULL_DEREF,
	UNIMPLEMENTED,
	ARRAY_INDEX_OOB,
	OOM,
	FAILED_CAST,
	INVALID_OPCODE,
	ERROR
}

type Result {
	case Break {}
	case Value(vals: Array<Value>) {}
	case Trap(reason: TrapReason) {}
	def equals(that: Result) -> bool {
		if (this == that) return true;
		if (Result.Value.?(this) && Result.Value.?(that)) {
			var a = Result.Value.!(this).vals;
			var b = Result.Value.!(that).vals;
			if (a == b) return true;
			if (a == null) return false;
			if (b == null) return false;
			if (a.length != b.length) return false;
			for (i < a.length) if (a[i] != b[i]) return false;
			return true;
		}
		return false;
	}
	def render(buf: StringBuilder) -> StringBuilder {
		match (this) {
			Break => buf.puts("break");
			Value(vals) => {
				if (vals == null) {
					buf.puts("<null>");
				} else if (vals.length == 1) {
					vals[0].render(buf);
				} else {
					Values.renderVals(buf, vals);
				}
			}
			Trap(reason) => buf.put1("trap %s", reason.name);
		}
		return buf;
	}
}

// Internal representation of execution frames.
class Frame { // TODO: move to V3Interpreter
	var func: WasmFunction;
	var fp: int;
	var pc: int;
	var xip: int;
}
