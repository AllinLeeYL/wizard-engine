// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Centralizes all the trace flags, even some components that are optional.
component Trace {
	var binparse = false;
	var validation = false;
	var interpreter = false;
	var test = false;
	var spectest = false;
	var fatal = false;
	var operands = false;
	var memory = false;
	var jawa = false;  // TODO: minor modularity breakage

	def STDOUT = System.fileWriteK(1, _, _, _);
	def STDERR = System.fileWriteK(2, _, _, _);

	// Parse command-line options to update trace flags. Return {true} if the
	// argument was matched as a trace flag.
	def parseOption(arg: string) -> bool {
		if (Strings.startsWith(arg, "--trace-")) {
			def isTraceOption = Strings.endsWithFrom(arg, 8, _);
			if (isTraceOption("int")) return interpreter = true;
			if (isTraceOption("binparse")) return binparse = true;
			if (isTraceOption("validation")) return validation = true;
			if (isTraceOption("test")) return test = true;
			if (isTraceOption("spectest")) return spectest = true;
			if (isTraceOption("operands")) return operands = true;
			if (isTraceOption("memory")) return memory = true;
			if (isTraceOption("jawa")) return jawa = true;
		} else if (Strings.equal(arg, "-fatal")) {
			return fatal = true;
		} else if (Strings.startsWith(arg, "-t")) {
			for (i = 2; i < arg.length; i++) {
				match(arg[i]) {
					'i' => interpreter = true;
					'b' => binparse = true;
					'v' => validation = true;
					't' => test = true;
					'o' => operands = true;
					's' => spectest = true;
					'm' => memory = true;
					'j' => jawa = true;
				}
			}
			return true;
		}
		return false;
	}
}

// A TraceBuilder is a {StringBuilder} which can also dump itself to stdout.
class TraceBuilder extends StringBuilder {
	def outln() -> this {
		ln().out(Trace.STDOUT).reset();
	}
}