// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An instantiated table.
class Table(elemtype: ValueType, decl: TableDecl) extends Exportable {
	var oom = false;
	var elems = Array<Value>.new(int.view(decl.initial));

	new() {
		match (elemtype) {  // handle initial value for function tables
			FUNCREF, RefFunc => {
				for (i < elems.length) elems[i] = Values.FUNCREF_NULL;
			}
			_ => ;
		}
	}

	// Grow this table by {more} elements.
	def grow(more: u32, val: Value) -> int {
		var prev = elems.length;
		var total = u64.view(prev) + more;
		if (total > GlobalLimits.limit_table_size) return -1;
		if (!decl.maximum.check(total)) return -1;
		elems = Arrays.growV(elems, int.!(total), val);
		return prev;
	}
	// Fill the given range of this table with the given value.
	def fill(dst_offset: u32, val: Value, size: u32) -> TrapReason {
		var i = boundsCheck(dst_offset, size);
		if (i < 0) return TrapReason.TABLE_OUT_OF_BOUNDS;
		for (k < int.!(size)) elems[i + k] = val;
		return TrapReason.NONE;
	}
	// Copy into this table from the given source table.
	def copyT(dst_offset: u32, src: Table, src_offset: u32, size: u32) -> TrapReason {
		var r = ArrayUtil.safeCopy(elems, dst_offset, src.elems, src_offset, size);
		return if(r, TrapReason.NONE, TrapReason.TABLE_OUT_OF_BOUNDS);
	}
	// Copy elements into this table.
	def copyE(instance: Instance, dst_offset: u32, elem: ElemDecl, src_offset: u32, size: u32) -> TrapReason {
		if (elem == null) {
			if (boundsCheck(dst_offset, size) < 0) return TrapReason.TABLE_OUT_OF_BOUNDS;
			if (ArrayUtil.boundsCheck<byte>(null, src_offset, 0, size) < 0) return TrapReason.TABLE_OUT_OF_BOUNDS;
			return TrapReason.NONE;
		}
		var r: bool;
		match (elem.details) {
			FuncRefs(vals) => {
				r = ArrayUtil.safeCopyF(elems, dst_offset, vals, src_offset, size, instance.getFunctionAsVal);
			}
			Exprs(vals) => {
				r = ArrayUtil.safeCopyF(elems, dst_offset, vals, src_offset, size, instance.evalInitExpr);
			}
		}
		return if(r, TrapReason.NONE, TrapReason.TABLE_OUT_OF_BOUNDS);
	}
	// Bounds check a range in this table.
	def boundsCheck(index: u32, size: u32) -> int {
		var length = u64.!(elems.length);
		var x = u64.!(index);
		return if(x + size > length, int.min, int.view(x));
	}
}
