// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

type MasmAddr(base: Reg, offset: int) #unboxed {
	def plus(delta: int) -> MasmAddr { return MasmAddr(base, offset + delta); }
}
class MasmLabel(create_pos: int) { }
// Abstract codegen interface. Used by all execution tiers (interpreter, single-pass compiler, optimizing compiler)
// as a portable assembler.
//
// Guide to suffixes (register classes):
//  i = register, 32-bit integer
//  l = register, 64-bit integer or ref
//  f = register, 32-bit float
//  d = register, 64-bit float
//  q = register, 128-bit vector
//  m = memory
//  s = slot in the value stack
class MacroAssembler(valuerep: Tagging, regAlloc: RegAlloc) {
	var unimplemented: void -> void;
	def regs = regAlloc.regConfig.regs;

	new() {
		unimplemented = fatalUnimplemented;
	}

	// Label operations
	def newLabel(create_pos: int) -> MasmLabel {
		return MasmLabel.new(create_pos);
	}
	def bindLabel(label: MasmLabel) {
	}
	// Abstract stack operations
	def slotAddr(slot: u32) -> MasmAddr {
		return MasmAddr(regs.vfp, int.view(slot) * valuerep.slot_size + valuerep.tag_size);
	}
	def tagAddr(slot: u32) -> MasmAddr {
		return MasmAddr(regs.vfp, int.view(slot) * valuerep.slot_size);
	}

	// XXX: remove emit_ prefix?
	def emit_mov_r_s(reg: Reg, kind: ValueKind, slot: u32) { // utility method
		emit_mov_r_m(reg, kind, slotAddr(slot));
	}

	def emit_mov_s_r(slot: u32, reg: Reg, kind: ValueKind) { // utility method
		emit_mov_m_r(slotAddr(slot), reg, kind);
	}
	def emit_mov_s_k(slot: u32, val: int, kind: ValueKind) {
		match (kind) {
			I32 => emit_mov_s_i(slot, val);
			I64 => emit_mov_s_l(slot, val);
			REF => emit_mov_s_l(slot, val); // TODO: ref size, assert 0?
			F32 => emit_mov_s_f(slot, u32.view(val));
			F64 => emit_mov_s_d(slot, u64.view(long.view(val))); // TODO: zero extend?
			V128 => emit_mov_s_q(slot, u64.view(long.view(val)), if(val < 0, u64.max, 0)); // TODO: zero extend?
		}
	}
	def emit_mov_s_i(slot: u32, val: int) { // utility method
		emit_mov_m_i(slotAddr(slot), val);
	}
	def emit_mov_s_l(slot: u32, val: long) { // utility method
		emit_mov_m_l(slotAddr(slot), val);
	}
	def emit_mov_s_f(slot: u32, bits: u32) { // utility method
		emit_mov_m_f(slotAddr(slot), bits);
	}
	def emit_mov_s_d(slot: u32, bits: u64) { // utility method
		emit_mov_m_d(slotAddr(slot), bits);
	}
	def emit_mov_s_q(slot: u32, low: u64, high: u64) {
		emit_mov_m_q(slotAddr(slot), low, high);
	}
	def emit_mov_s_s(dst_slot: u32, src_slot: u32, kind: ValueKind) { // utility method
		emit_mov_m_m(slotAddr(dst_slot), slotAddr(src_slot), kind);
	}

	def emit_add_r_l(reg: Reg, val: int) { // utility method
		if (val != 0) emit_binop_r_i(Opcode.I64_ADD, reg, val);
	}
	def emit_sub_r_l(reg: Reg, val: int) { // utility method
		if (val != 0) emit_binop_r_i(Opcode.I64_SUB, reg, val);
	}

	// Architecture-specific
	def emit_mov_r_r(reg: Reg, reg2: Reg);
	def emit_mov_r_m(reg: Reg, kind: ValueKind, addr: MasmAddr);
	def emit_mov_r_k(reg: Reg, kind: ValueKind, val: int) {
		match (kind) {
			I32 => emit_mov_r_i(reg, val);
			I64 => emit_mov_r_l(reg, val);
			REF => emit_mov_r_l(reg, val); // TODO: ref size, assert 0?
			F32 => emit_mov_r_f(reg, u32.view(val));
			F64 => emit_mov_r_d(reg, u64.view(long.view(val))); // TODO: zero extend?
			V128 => emit_mov_r_q(reg, u64.view(long.view(val)), if(val < 0, u64.max, 0)); // TODO: zero extend?
		}
	}
	def emit_mov_r_i(reg: Reg, val: int);
	def emit_mov_r_l(reg: Reg, val: long);
	def emit_mov_r_f(reg: Reg, bits: u32);
	def emit_mov_r_d(reg: Reg, bits: u64);
	def emit_mov_r_q(reg: Reg, low: u64, high: u64);

	def emit_mov_m_r(addr: MasmAddr, reg: Reg, kind: ValueKind);
	def emit_mov_m_i(addr: MasmAddr, val: int);
	def emit_mov_m_l(addr: MasmAddr, val: long);
	def emit_mov_m_f(addr: MasmAddr, bits: u32);
	def emit_mov_m_d(addr: MasmAddr, bits: u64);
	def emit_mov_m_q(addr: MasmAddr, low: u64, high: u64);
	def emit_mov_m_m(dst: MasmAddr, src: MasmAddr, kind: ValueKind);

	def emit_binop_r_r(op: Opcode, reg: Reg, reg2: Reg);
	def emit_binop_r_m(op: Opcode, reg: Reg, addr: MasmAddr);
	def emit_binop_r_i(op: Opcode, reg: Reg, val: int);

	def emit_ret();
	def emit_nop();

	def emit_br(label: MasmLabel);
	def emit_br_r(reg: Reg, nonzero: bool, label: MasmLabel);
	def emit_br_m(addr: MasmAddr, nonzero: bool, label: MasmLabel);

	def fatalUnimplemented();
}
