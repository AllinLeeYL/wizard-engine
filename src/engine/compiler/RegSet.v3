// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Architecture-independent representation of a register of any register class for use in
// the macro assembler and portable parts of compilers. Kept small to keep data structures small.
type Reg(index: byte) #unboxed { }

// Describes the set of registers for a target. There must be < 256.
// By convention, register #0 is reserved for indicating an unallocated register or no register.
class RegSet(regs: Array<Reg>, names: Array<string>) {
	def length = regs.length;

	def getName(r: Reg) -> string {
		var n = names[r.index];
		if (n == null) {
			if (r.index == 0) return "unalloc";
			return "unknown";
		}
		return n;
	}
}

// Specialized roles for some registers, either in the interpreter or compiled code.
enum RegRole(changes: bool) {
	NONE		(false),	// no special role
	FUNC_ARG	(false),	// incoming function argument
	DISPATCH	(true),		// (int) dispatch table register
	IP		(true),		// (int) instruction pointer
	EIP		(false),	// (int) end instruction pointer
	CIP		(true),		// (int) current instruction pointer
	STP		(true),		// (int) side-table pointer
	INSTANCE	(false),	// instance reference
	FUNC_DECL	(false),	// (int) function declaration
	MEM0_BASE	(false),	// memory #0 base address
	VSP		(true),		// (int) value stack pointer
	VFP		(false),	// value frame pointer
	SP		(false),	// stack pointer
	FP		(false),	// frame pointer
	SCRATCH		(false),	// scratch register
	RET_EXEC_STATE	(false),	// return of ExecState
	RET_TRAP_REASON	(false),	// return of TrapReason
	RUNTIME_ARG_0	(false),	// argument #1 to runtime
	RUNTIME_ARG_1	(false),	// argument #2 to runtime
	TLS		(false),	// thread local storage
}

// Describes the register configuration for a target in terms of architectural registers.
class RegConfig(regSet: RegSet, regs: RegRoles) {
	var spcFrameSize: int;

	var vsp_offset: int;
	var vfp_offset: int;
	var eip_offset: int;
	var stp_offset: int;
	var instance_offset: int;
	var func_decl_offset: int;
	var mem_offset: int;

	var numRegPools: int;
	def regToPool = Array<i8>.new(regSet.regs.length);
	def kindToPool = Array<byte>.new(ValueKind.REF.tag + 1);
}
// A utility giving easy access to registers for given roles.
class RegRoles(array: Array<Reg>) {
	def func_arg = array[RegRole.FUNC_ARG.tag];
	def dispatch = array[RegRole.DISPATCH.tag];
	def ip = array[RegRole.IP.tag];
	def eip = array[RegRole.EIP.tag];
	def stp = array[RegRole.STP.tag];
	def instance = array[RegRole.INSTANCE.tag];
	def func = array[RegRole.FUNC_DECL.tag];
	def mem0 = array[RegRole.MEM0_BASE.tag];
	def vsp = array[RegRole.VSP.tag];
	def vfp = array[RegRole.VFP.tag];
	def sp = array[RegRole.SP.tag];
	def fp = array[RegRole.FP.tag];
	def scratch = array[RegRole.SCRATCH.tag];
	def ret_ExecState = array[RegRole.RET_EXEC_STATE.tag];
	def ret_TrapReason = array[RegRole.RET_TRAP_REASON.tag];
	def runtime_arg_0 = array[RegRole.RUNTIME_ARG_0.tag];
	def runtime_arg_1 = array[RegRole.RUNTIME_ARG_1.tag];
	def tls = array[RegRole.TLS.tag];
}

// Allocates register from a pool in a fixed priority order, given by the order in {regs}.
// Handles a maximum of 32 registers.
class PriorityRegPool {
	def regs: Array<Reg>;
	private var map: Array<u5>;
	private var freebits = 0xFFFFFFFF;

	new(regs, prev: PriorityRegPool) {
		if (prev == null) {
			var max = int.min;
			for (r in regs) if (r.index > max) max = r.index;
			map = Array<u5>.new(max + 1);
			for (i < regs.length) map[regs[i].index] = u5.!(i);
		} else {
			this.map = prev.map;
			this.freebits = prev.freebits;
		}
	}

	def alloc() -> Reg {
		var f = freebits, i = 0;
		// XXX: use CTZ (count trailing zeroes) instruction
		if ((f & 0xFFFF) == 0) { i += 16; f >>= 16; }
		if ((f & 0xFF) == 0) { i += 8; f >>= 8; }
		if ((f & 0xF) == 0) { i += 4; f >>= 4; }
		if ((f & 0x3) == 0) { i += 2; f >>= 2; }
		if ((f & 0x1) == 0) { i += 1; f >>= 1; }
		if (i > regs.length) return Reg(0);
		freebits = freebits & ~(1 << u5.view(i));
		return regs[i];
	}
	def unfree(r: Reg) {
		var i = map[r.index];
		freebits = freebits & ~(1 << i);
	}
	def isFree(r: Reg) -> bool {
		var m = 1 << map[r.index];
		return (freebits & m) == m;
	}
	def free(r: Reg) {
		var i = map[r.index];
		freebits = freebits | (1 << i);
	}
	def copy() -> PriorityRegPool {
		return PriorityRegPool.new(this.regs, this);
	}
	def clear() -> this {
		freebits = 0xFFFFFFFF;
	}
	def unfreeAll() -> this {
		freebits = 0;
	}
}

// A register allocator that has different pools for different register classes.
// When initially allocated, a register configuration has empty priority register
// pools; they must be set with {setPool(i)}.
class RegAlloc {
	def regConfig: RegConfig;
	private var pools: Array<PriorityRegPool>;
	private var assign: Array<int>;

	new(regConfig, prev: RegAlloc) {
		if (prev == null) {
			pools = Array<PriorityRegPool>.new(regConfig.numRegPools);
			assign = Array<int>.new(regConfig.regSet.regs.length);
			for (i < assign.length) assign[i] = -1;
		} else {
			pools = Arrays.dup(prev.pools);
			for (i < pools.length) pools[i] = pools[i].copy();
			assign = Arrays.dup(prev.assign);
		}
	}
	def setPool(i: int, p: PriorityRegPool) {
		pools[i] = p;
	}
	def alloc(kind: ValueKind, assignment: int) -> Reg {
		var pool_index = regConfig.kindToPool[kind.tag];
		var r = pools[pool_index].alloc();
		if (r.index > 0) assign[r.index] = assignment;
		return r;
	}
	def get(reg: Reg) -> int {
		return assign[reg.index];
	}
	def free(reg: Reg) {
		var pool_index = regConfig.regToPool[reg.index];
		assign[reg.index] = -1;
		return pools[pool_index].free(reg);
	}
	def isFree(reg: Reg) -> bool {
		var pool_index = regConfig.regToPool[reg.index];
		return pools[pool_index].isFree(reg); // TODO: make {assign} robust
	}
	def unfree(reg: Reg, assignment: int) {
		var pool_index = regConfig.regToPool[reg.index];
		assign[reg.index] = assignment;
		return pools[pool_index].unfree(reg);
	}
	def clear() -> this {
		for (p in pools) p.clear(); // TODO: make {assign} robust
	}
	def copy() -> RegAlloc {
		return RegAlloc.new(regConfig, this);
	}
}
