// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Section codes.
enum BpSection(code: byte) {
	Unknown(0),
	Type(1),
	Import(2),
	Function(3),
	Table(4),
	Memory(5),
	Tag(13),	// ext:exception-handling
	Global(6),
	Export(7),
	Start(8),
	Element(9),
	DataCount(12),
	Code(10),
	Data(11),
}
// Import/export kind codes.
enum BpImportExportKind(code: byte) {
	Function(0),
	Table(1),
	Memory(2),
	Global(3),
	Tag(4),
	HeapType(5),
	AbsType(6),
	Command(7),
	Args(8)
}
// Type constructor codes.
enum BpTypeCode(code: byte, val: i7) {
	I32		(0x7F, -1),
	I64		(0x7E, -2),
	F32		(0x7D, -3),
	F64		(0x7C, -4),
	V128		(0x7B, -5), // ext:simd
	I8		(0x7A, -6), // ext:gc
	I16		(0x79, -7), // ext:gc
	FUNCREF		(0x70, -16),
	EXTERNREF	(0x6F, -17),
	ANYREF		(0x6E, -18), // ext:gc
	EQREF		(0x6D, -19), // ext:gc
	EmptyBlock	(0x40, -64), // XXX: move?
	REF_NULL	(0x6C, -20), // ext:gc
	REF		(0x6B, -21), // ext:gc
	I31REF		(0x6A, -22), // ext:gc
	DATAREF		(0x67, -25),
	ARRAYREF	(0x66, -26),
	NONEREF		(0x65, -27),
	ABS		(0x5A, -38)  // ext:type-imports
}
// Heap type codes.
enum BpHeapTypeCode(code: byte, val: i7) {
	FUNC		(0x70, -16),
	EXTERN		(0x6F, -17),
	ANY		(0x6E, -18),
	EQ		(0x6D, -19),
	I31		(0x6A, -22),
	DATA		(0x67, -25),
	ARRAY		(0x66, -26),
	NONE		(0x65, -27)
}
// Memory flag masks.
enum BpMemoryFlag(mask: byte) {
	HasMax(0x01),
	Shared(0x02)
}
// Table flag masks.
enum BpTableFlag(mask: byte) {
	HasMax(0x01),
}
// Global flag masks.
enum BpGlobalFlag(mask: byte) {
	Mutable(0x01)
}
// Abstract type flag masks.
enum BpAbsTypeFlag(mask: byte) {
	HasDefault(0x01),
	IsExternRef(0x02)
}
// Heap type declaration codes.
enum BpDefTypeCode(code: byte, val: i7) {
	Function	(0x60, -32),
	Struct		(0x5F, -33),
	Array		(0x5E, -34),
	SUB		(0x50, -48),
	REC		(0x4F, -49)
}

// Utilities associated with binary sections and other quantities.
component BpConstants {
	def WASM_MAGIC = 0x6d736100u;
	def WASM_VERSION = 0x01u;
	def MEMARG_INDEX_FLAG = 0x40u;
	def valid_section = Array<bool>.new(256);
	def enum_section = Array<BpSection>.new(256);
	new() {
		for (s in BpSection) {
			valid_section[s.code] = true;
			enum_section[s.code] = s;
		}
	}
	def renderSectionName(buf: StringBuilder, b: byte) -> StringBuilder {
		var s = "unknown";
		match (b) {
			BpSection.Type.code => s = "type";
			BpSection.Import.code => s = "import";
			BpSection.Function.code => s = "function";
			BpSection.Table.code => s = "table";
			BpSection.Memory.code => s = "memory";
			BpSection.Tag.code => s = "tag";
			BpSection.Global.code => s = "global";
			BpSection.Export.code => s = "export";
			BpSection.Start.code => s = "start";
			BpSection.Element.code => s = "element";
			BpSection.Code.code => s = "code";
			BpSection.Data.code => s = "data";
			BpSection.DataCount.code => s = "data count";
		}
		return buf.puts(s);
	}
	def renderImportKind(buf: StringBuilder, b: byte) -> StringBuilder {
		var s = "unknown";
		match (b) {
			BpImportExportKind.Function.code => s = "function";
			BpImportExportKind.Table.code => s = "table";
			BpImportExportKind.Memory.code => s = "memory";
			BpImportExportKind.Global.code => s = "global";
			BpImportExportKind.Tag.code => s = "tag";
			BpImportExportKind.HeapType.code => s = "type";
			BpImportExportKind.AbsType.code => s = "abstract type";
			BpImportExportKind.Command.code => s = "command";
			BpImportExportKind.Args.code => s = "args";
		}
		return buf.puts(s);
	}
	def renderTypecon(buf: StringBuilder, b: byte) -> StringBuilder {
		var s = "unknown";
		match (b) {
			BpTypeCode.I32.code => s = "i32";
			BpTypeCode.I64.code => s = "i64";
			BpTypeCode.F32.code => s = "f32";
			BpTypeCode.F64.code => s = "f64";
			BpTypeCode.V128.code => s = "v128";
			BpTypeCode.FUNCREF.code => s = "funcref";
			BpTypeCode.ANYREF.code => s = "anyref";
			BpTypeCode.DATAREF.code => s = "dataref";
			BpTypeCode.ARRAYREF.code => s = "arrayref";
			BpTypeCode.EXTERNREF.code => s = "externref";
			BpTypeCode.EmptyBlock.code => s = "empty";
			BpTypeCode.REF_NULL.code => s = "ref null";
			BpTypeCode.REF.code => s = "ref";
			BpTypeCode.I31REF.code => s = "i31ref";
		}
		return buf.puts(s);
	}
	def renderDefTypeCode(buf: StringBuilder, b: byte) -> StringBuilder {
		var s = "unknown";
		match (b) {
			BpDefTypeCode.Function.code => s = "func";
			BpDefTypeCode.Struct.code => s = "struct";
			BpDefTypeCode.Array.code => s = "array";
			BpDefTypeCode.REC.code => s = "rec";
			BpDefTypeCode.SUB.code => s = "sub";
		}
		return buf.puts(s);
	}
	def renderNone(buf: StringBuilder, b: byte) -> StringBuilder {
		return buf;
	}
	def renderMutability(buf: StringBuilder, b: byte) -> StringBuilder {
		if ((b & BpGlobalFlag.Mutable.mask) != 0) buf.puts("mutable");
		return buf;
	}
	def renderTableFlags(buf: StringBuilder, b: byte) -> StringBuilder {
		if ((b & BpMemoryFlag.HasMax.mask) != 0) buf.puts("has_max");
		return buf;
	}
	def renderMemoryFlags(buf: StringBuilder, b: byte) -> StringBuilder {
		if ((b & BpMemoryFlag.HasMax.mask) != 0) buf.puts("has_max");
		if ((b & BpMemoryFlag.Shared.mask) != 0) buf.puts(" shared");
		return buf;
	}
	def renderAbsTypeFlags(buf: StringBuilder, b: byte) -> StringBuilder {
		if ((b & BpAbsTypeFlag.HasDefault.mask) != 0) buf.puts("has_default");
		if ((b & BpAbsTypeFlag.IsExternRef.mask) != 0) buf.puts(" is_externref");
		return buf;
	}
}
