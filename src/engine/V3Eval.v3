// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The {V3Eval} component contains canonical Virgil-level implementations of many Wasm operations.
// These implementations are used in the implementation of the V3 interpreter as well as during
// constant-folding in the compiler(s).
// These operations are separated from the interpreter implementation so they can be wrapped and
// used in different ways.
component V3Eval {
	// ---- i32 comparisons ------------------------------------------------
	def I32_EQZ	= u32.==(0, _);
	def I32_EQ	= u32.==;
	def I32_NE	= u32.!=;
	def I32_LT_S	= i32.<;
	def I32_LT_U	= u32.<;
	def I32_GT_S	= i32.>;
	def I32_GT_U	= u32.>;
	def I32_LE_S	= i32.<=;
	def I32_LE_U	= u32.<=;
	def I32_GE_S	= i32.>=;
	def I32_GE_U	= u32.>=;

	// ---- i64 comparisons ------------------------------------------------
	def I64_EQZ	= u64.==(0, _);
	def I64_EQ	= u64.==;
	def I64_NE	= u64.!=;
	def I64_LT_S	= i64.<;
	def I64_LT_U	= u64.<;
	def I64_GT_S	= i64.>;
	def I64_GT_U	= u64.>;
	def I64_LE_S	= i64.<=;
	def I64_LE_U	= u64.<=;
	def I64_GE_S	= i64.>=;
	def I64_GE_U	= u64.>=;

	// ---- f32 comparisons ------------------------------------------------
	def F32_EQ	= float.==;
	def F32_NE	= float.!=;
	def F32_LT	= float.<;
	def F32_GT	= float.>;
	def F32_LE	= float.<=;
	def F32_GE	= float.>=;

	// ---- f64 comparisons ------------------------------------------------
	def F64_EQ	= double.==;
	def F64_NE	= double.!=;
	def F64_LT	= double.<;
	def F64_GT	= double.>;
	def F64_LE	= double.<=;
	def F64_GE	= double.>=;

	// ---- i32 arithmetic -------------------------------------------------
	def I32_CLZ(x: u32) -> u32 {
		var count = 0u;
		if (x == 0) return 32;
		while ((x & 0x80000000u) == 0) { count++; x <<= 1; }
		return count;
	}
	def I32_CTZ(x: u32) -> u32 {
		var count = 0u;
		if (x == 0) return 32;
		while ((x & 1u) == 0) { count++; x >>= 1; }
		return count;
	}
	def I32_POPCNT(x: u32) -> u32 {
		var count = 0u;
		for (i < 32) {
			if ((x & 1) == 1) count++;
			x >>= 1;
		}
		return count;
	}
	def I32_ADD	= u32.+;
	def I32_SUB	= u32.-;
	def I32_MUL	= u32.*;
	def I32_DIV_S(x: i32, y: i32) -> (i32, TrapReason) {
		if (y == 0) return (0, TrapReason.DIV_BY_ZERO);
		if (y == -1 && x == int.min) return (0, TrapReason.DIV_UNREPRESENTABLE);
		return (x / y, TrapReason.NONE);
	}
	def I32_DIV_U(x: u32, y: u32) -> (u32, TrapReason) {
		if (y == 0) return (0, TrapReason.DIV_BY_ZERO);
		return (x / y, TrapReason.NONE);
	}
	def I32_REM_S(x: i32, y: i32) -> (i32, TrapReason) {
		if (y == 0) return (0, TrapReason.DIV_BY_ZERO);
		return (if (y == -1, 0, x % y), TrapReason.NONE);
	}
	def I32_REM_U(x: u32, y: u32) -> (u32, TrapReason) {
		if (y == 0) return (0, TrapReason.DIV_BY_ZERO);
		return (if(y == 1, 0, x % y), TrapReason.NONE);
	}
	def I32_AND	= u32.&;
	def I32_OR	= u32.|;
	def I32_XOR	= u32.^;
	def I32_SHL(x: i32, y: i32) -> i32 {
		return x << u5.view(y);
	}
	def I32_SHR_S(x: i32, y: i32) -> i32 {
		return x >> u5.view(y);
	}
	def I32_SHR_U(x: i32, y: i32) -> i32 {
		return x >>> u5.view(y);
	}
	def I32_ROTL(x: u32, z: u32) -> u32 {
		var y = u5.view(z);
		if (y != 0) {
			var upper = x << y;
			var lower = x >> byte.view(32) - y;
			x = upper | lower;
		}
		return x;
	}
	def I32_ROTR(x: u32, z: u32) -> u32 {
		var y = u5.view(z);
		if (y != 0) {
			var upper = x << byte.view(32) - y;
			var lower = x >> y;
			x = upper | lower;
		}
		return x;
	}

	// ---- i64 arithmetic -------------------------------------------------
	def I64_CLZ(x: u64) -> u64 {
		var count = 0u;
		if (x == 0) return 64;
		while ((x & 0x8000000000000000ul) == 0) { count++; x <<= 1; }
		return count;
	}
	def I64_CTZ(x: u64) -> u64 {
		var count = 0u;
		if (x == 0) return 64;
		while ((x & 1u) == 0) { count++; x >>= 1; }
		return count;
	}
	def I64_POPCNT(x: u64) -> u64 {
		var count = 0u;
		for (i < 64) {
			if ((x & 1) == 1) count++;
			x >>= 1;
		}
		return count;
	}
	def I64_ADD	= u64.+;
	def I64_SUB	= u64.-;
	def I64_MUL	= u64.*;
	def I64_DIV_S(x: i64, y: i64) -> (i64, TrapReason) {
		if (y == 0) return (0, TrapReason.DIV_BY_ZERO);
		if (y == -1 && x == long.min) return (0, TrapReason.DIV_UNREPRESENTABLE);
		return (x / y, TrapReason.NONE);
	}
	def I64_DIV_U(x: u64, y: u64) -> (u64, TrapReason) {
		if (y == 0) return(0, TrapReason.DIV_BY_ZERO);
		return (x / y, TrapReason.NONE);
	}
	def I64_REM_S(x: i64, y: i64) -> (i64, TrapReason) {
		if (y == 0) return (0, TrapReason.DIV_BY_ZERO);
		return (if(y == -1, 0, x % y), TrapReason.NONE);
	}
	def I64_REM_U(x: u64, y: u64) -> (u64, TrapReason) {
		if (y == 0) return (0, TrapReason.DIV_BY_ZERO);
		return (if(y == 1, 0, x % y), TrapReason.NONE);
	}
	def I64_AND	= u64.&;
	def I64_OR	= u64.|;
	def I64_XOR	= u64.^;
	def I64_SHL(x: u64, y: u64) -> u64 {
		return x << u6.view(y);
	}
	def I64_SHR_S(x: i64, y: i64) -> i64 {
		return x >> u6.view(y);
	}
	def I64_SHR_U(x: u64, y: u64) -> u64 {
		return x >> u6.view(y);
	}
	def I64_ROTL(x: u64, z: u64) -> u64 {
		var y = u6.view(z);
		if (y != 0) {
			var upper = x << y;
			var lower = x >> byte.view(64) - y;
			x = upper | lower;
		}
		return x;
	}
	def I64_ROTR(x: u64, z: u64) -> u64 {
		var y = u6.view(z);
		if (y != 0) {
			var upper = x << byte.view(64) - y;
			var lower = x >> y;
			x = upper | lower;
		}
		return x;
	}

	// ---- f32 arithmetic -------------------------------------------------
	def F32_ABS	= float.abs;
	def F32_NEG(a: float) -> float {
		return float.view(0x80000000u ^ u32.view(a));
	}
	def F32_CEIL(a: float) -> float {
		return canonf(float.ceil(a));
	}
	def F32_FLOOR(a: float) -> float {
		return canonf(float.floor(a));
	}
	def F32_TRUNC(a: float) -> float {
		if (a < 0f) {
			if (a > -1f) return -0f;  // handle -0
			return 0f - float.floor(0f - a);
		}
		return canonf(float.floor(a));
	}
	def F32_NEAREST	= float.round;
	def F32_SQRT	= float.sqrt;
	def F32_ADD	= float.+;
	def F32_SUB	= float.-;
	def F32_MUL	= float.*;
	def F32_DIV	= float./;
	def F32_MIN(a: float, b: float) -> float {
		if (a < b) return a;
		if (a == b) return if(b.sign == 1, b, a); // handle -0
		if (b < a) return b;
		return float.nan;
	}
	def F32_MAX(a: float, b: float) -> float {
		if (a > b) return a;
		if (a == b) return if(b.sign == 0, b, a); // handle -0
		if (b > a) return b;
		return float.nan;
	}
	def F32_COPYSIGN(a: float, b: float) -> float {
		var aa = 0x7fffffffu & u32.view(a);
		var bb = 0x80000000u & u32.view(b);
		return float.view(aa | bb);
	}

	// ---- f64 arithmetic -------------------------------------------------
	def F64_ABS	= double.abs;
	def F64_NEG(a: double) -> double {
		return double.view(0x8000000000000000uL ^ u64.view(a));
	}
	def F64_CEIL(a: double) -> double {
		return canond(double.ceil(a));
	}
	def F64_FLOOR(a: double) -> double {
		return canond(double.floor(a));
	}
	def F64_TRUNC(a: double) -> double {
		if (a < 0d) {
			if (a > -1d) return -0d;  // handle -0
			return 0d - double.floor(0d - a);
		}
		return canond(double.floor(a));
	}
	def F64_NEAREST	= double.round;
	def F64_SQRT	= double.sqrt;
	def F64_ADD	= double.+;
	def F64_SUB	= double.-;
	def F64_MUL	= double.*;
	def F64_DIV	= double./;
	def F64_MIN(a: double, b: double) -> double {
		if (a < b) return a;
		if (a == b) return if(b.sign == 1, b, a); // handle -0
		if (b < a) return b;
		return double.nan;
	}
	def F64_MAX(a: double, b: double) -> double {
		if (a > b) return a;
		if (a == b) return if(b.sign == 0, b, a); // handle -0
		if (b > a) return b;
		return double.nan;
	}
	def F64_COPYSIGN(a: double, b: double) -> double {
		var aa = 0x7fffffffffffffffuL & u64.view(a);
		var bb = 0x8000000000000000uL & u64.view(b);
		return double.view(aa | bb);
	}

	// ---- rounding and conversion ----------------------------------------
	def I32_WRAP_I64	= u32.view<u64>;
	def I32_TRUNC_F32_S	= truncF32(-2.1474839E9f, 2147483648f, i32.truncf, _);
	def I32_TRUNC_F32_U	= truncF32(-1f, 4294967296f, u32.truncf, _);
	def I32_TRUNC_F64_S	= truncF64(-2147483649d, 2147483648f, i32.truncd, _);
	def I32_TRUNC_F64_U	= truncF64(-1d, 4294967296d, u32.truncd, _);
	def I64_EXTEND_I32_S	= i64.view<i32>;
	def I64_EXTEND_I32_U	= u64.view<u32>;
	def I64_TRUNC_F32_S	= truncF32(-9.223373e18f, 9223372036854775808f, i64.truncf, _);
	def I64_TRUNC_F32_U	= truncF32(-1f, 18446744073709551616f, u64.truncf, _);
	def I64_TRUNC_F64_S	= truncF64(-9.223372036854778E18d, 9223372036854775808d, i64.truncd, _);
	def I64_TRUNC_F64_U	= truncF64(-1d, 18446744073709551616d, u64.truncd, _);
	def F32_CONVERT_I32_S	= float.roundi<i32>;
	def F32_CONVERT_I32_U	= float.roundi<u32>;
	def F32_CONVERT_I64_S	= float.roundi<i64>;
	def F32_CONVERT_I64_U	= float.roundi<u64>;
	def F32_DEMOTE_F64	= float.roundd;
	def F64_CONVERT_I32_S	= double.roundi<i32>;
	def F64_CONVERT_I32_U	= double.roundi<u32>;
	def F64_CONVERT_I64_S	= double.roundi<i64>;
	def F64_CONVERT_I64_U	= double.roundi<u64>;
	def F64_PROMOTE_F32	= double.!<float>;
	def I32_REINTERPRET_F32	= u32.view<float>;
	def I64_REINTERPRET_F64	= u64.view<double>;
	def F32_REINTERPRET_I32	= float.view<u32>;
	def F64_REINTERPRET_I64	= double.view<u64>;

	def I32_EXTEND8_S(a: i32) -> i32 {
		return i8.view(a);
	}
	def I32_EXTEND16_S(a: i32) -> i32 {
		return i16.view(a);
	}
	def I64_EXTEND8_S(a: i64) -> i64 {
		return i8.view(a);
	}
	def I64_EXTEND16_S(a: i64) -> i64 {
		return i16.view(a);
	}
	def I64_EXTEND32_S(a: i64) -> i64 {
		return i32.view(a);
	}

	// ---- private utilities ----------------------------------------------
	def truncF32<T>(min: float, max: float, trunc: float -> T, a: float) -> (T, TrapReason) {
		var d: T;
		if (a >= max) return (d, TrapReason.FLOAT_UNREPRESENTABLE);
		if (a <= min) return (d, TrapReason.FLOAT_UNREPRESENTABLE);
		if (!(a == a)) return (d, TrapReason.FLOAT_UNREPRESENTABLE);
		return (trunc(a), TrapReason.NONE);
	}
	def truncF64<T>(min: double, max: double, trunc: double -> T, a: double) -> (T, TrapReason) {
		var d: T;
		if (a >= max) return (d, TrapReason.FLOAT_UNREPRESENTABLE);
		if (a <= min) return (d, TrapReason.FLOAT_UNREPRESENTABLE);
		if (!(a == a)) return (d, TrapReason.FLOAT_UNREPRESENTABLE);
		return (trunc(a), TrapReason.NONE);
	}
	private def canonf(a: float) -> float {
		return if(a == a, a, float.nan);
	}
	private def canond(a: double) -> double {
		return if(a == a, a, double.nan);
	}
}