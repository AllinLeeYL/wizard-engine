// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that prints all memory reads/writes.
def OUT = Trace.OUT;
class MemoryMonitor extends Monitor {
	var reads = Vector<u64>.new();
	var writes = Vector<u64>.new();
	var locations = true;
	var types = false;
	var prevFunc: WasmFunction = null;

	def onParse(module: Module) {
		var mm = ModuleMonitor.new(module);
		mm.beforeMemRead(beforeMemRead);
		mm.beforeMemWrite(beforeMemWrite);
		mm.beforeMemGrow(beforeMemGrow);
	}

	private def putMemIndexAndAddress(index: int, address: u64) {
		if (index > 0) OUT.putx(index).putc(',');
		OUT.putx(address);
	}
	private def putMemIndex(index: int) {
		if (index != 0) OUT.putx(index).putc(',');
	}
	private def putLocation(dynamicLoc: DynamicLoc) {
		if (dynamicLoc.func != prevFunc) {
			OUT.puts(Palette.FUNC);
			dynamicLoc.func.render(OUT);
			OUT.outln();
			prevFunc = dynamicLoc.func;
		}
		OUT.puts(Palette.LNO)
			.rjustify(' ', TraceUtil.renderedLength(OUT, TraceBuilder.put1(_, "+%x", dynamicLoc.pc)), 5);
	}
	private def beforeMemRead(dynamicLoc: DynamicLoc, mem: Memory, address: u64, size: u64) -> Resumption {
		if (locations) putLocation(dynamicLoc);
		OUT.puts(Palette.SOURCE)
		    .rjustify(' ', TraceUtil.renderedLength(OUT, TraceBuilder.puts(_, "read")), 7)
		    .putc(' ');
		putMemIndexAndAddress(mem.decl.memory_index, address);
		OUT.putc(' ').puts(Palette.DEFAULT);
		for (i < u32.!(size)) { // TODO: memory64
			var b = mem.read_u8(u32.!(address), i); // TODO: memory64
			if (!b.ok()) {
				OUT.putc('!');
				break;
			}
			OUT.putx_8(b.result);
		}
		OUT.rjustify(' ', 8, 10)
		    .outln();
		return Resumption.Continue;
	}
	private def beforeMemWrite(dynamicLoc: DynamicLoc, mem: Memory, address: u64, size: u64) -> Resumption {
		if (locations) putLocation(dynamicLoc);
		OUT.puts(Palette.TARGET)
		    .rjustify(' ', TraceUtil.renderedLength(OUT, TraceBuilder.puts(_, "write")), 7)
		    .putc(' ');
		putMemIndexAndAddress(mem.decl.memory_index, address);
		OUT.putc(' ').puts(Palette.DEFAULT);
		var val = dynamicLoc.frame.getFrameAccessor().getOperand(0);
		match (size) {
			1 => match (val) {
				I32(v) => OUT.putx_8(byte.view(v));
				I64(v) => OUT.putx_8(byte.view(v));
				_ => ; // TODO: error
			}
			2 => match (val) {
				I32(v) => OUT.putx_16(u16.view(v));
				I64(v) => OUT.putx_16(u16.view(v));
				_ => ; // TODO: error
			}
			4 => match (val) {
				I32(v) => OUT.putx_32(u32.view(v));
				I64(v) => OUT.putx_32(u32.view(v));
				F32(v) => OUT.putx_32(u32.view(v));
				_ => ; // TODO: error
			}
			8 =>  match (val) {
				I64(v) => OUT.putx_64(u64.view(v));
				F64(v) => OUT.putx_64(u64.view(v));
				_ => ; // TODO: error
			}
			_ => ; // TODO: other sizes
		}
		OUT.rjustify(' ', 8, 10)
		    .outln();
		return Resumption.Continue;
	}
	private def beforeMemGrow(dynamicLoc: DynamicLoc, mem: Memory, pages: u32) -> Resumption {
		if (locations) putLocation(dynamicLoc);
		OUT.puts(Palette.SUCCESS)
		    .rjustify(' ', TraceUtil.renderedLength(OUT, TraceBuilder.puts(_, "grow")), 7)
		    .putc(' ').puts(Palette.DEFAULT);
		putMemIndex(mem.decl.memory_index);
		OUT.putx_32(pages);
		OUT.putc(' ');
		// TODO: put result
		OUT.rjustify(' ', 9, 14)
		    .outln();
		return Resumption.Continue;
	}
}
