// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that prints all memory reads/writes.
def OUT = Trace.OUT;
class MemoryMonitor extends Monitor {
	var reads = Vector<u64>.new();
	var writes = Vector<u64>.new();
	var locations = true;
	var types = false;

	def onParse(module: Module) {
		var mm = ModuleMonitor.new(module);
		mm.beforeMemRead(beforeMemRead);
		mm.beforeMemWrite(beforeMemWrite);
		mm.beforeMemGrow(beforeMemGrow);
	}

	private def putMemIndexAndAddress(index: int, address: u64) {
		if (index > 0) OUT.putx(index).putc(',');
		OUT.putx(address);
	}
	private def putMemIndex(index: int) {
		if (index != 0) OUT.putx(index).putc(',');
	}
	private def putLocation(dynamicLoc: DynamicLoc) {
		OUT.putc('@');
		OUT.putx(dynamicLoc.func.decl.func_index);
		OUT.putc(',');
		OUT.putx(dynamicLoc.pc);
		OUT.outln();
	}
	private def beforeMemRead(dynamicLoc: DynamicLoc, mem: Memory, address: u64, size: u64) -> Resumption {
		if (locations) putLocation(dynamicLoc);
		OUT.putc('L');
		putMemIndexAndAddress(mem.decl.memory_index, address);
		OUT.putc('=');
		for (i < size) {
			var b = mem.read1w(address + i);
			if (b.0 != TrapReason.NONE) {
				OUT.putc('!');
				break;
			}
			OUT.putx_8(b.1);
		}
		OUT.outln();
		return Resumption.Continue;
	}
	private def beforeMemWrite(dynamicLoc: DynamicLoc, mem: Memory, address: u64, size: u64) -> Resumption {
		if (locations) putLocation(dynamicLoc);
		OUT.putc('S');
		putMemIndexAndAddress(mem.decl.memory_index, address);
		OUT.putc('=');
		var val = dynamicLoc.frame.getFrameAccessor().getOperand(0);
		match (size) {
			1 => match (val) {
				I32(v) => OUT.putx_8(byte.view(v));
				I64(v) => OUT.putx_8(byte.view(v));
				_ => ; // TODO: error
			}
			2 => match (val) {
				I32(v) => OUT.putx_16(u16.view(v));
				I64(v) => OUT.putx_16(u16.view(v));
				_ => ; // TODO: error
			}
			4 => match (val) {
				I32(v) => OUT.putx_32(u32.view(v));
				I64(v) => OUT.putx_32(u32.view(v));
				F32(v) => OUT.putx_32(u32.view(v));
				_ => ; // TODO: error
			}
			8 =>  match (val) {
				I64(v) => OUT.putx_64(u64.view(v));
				F64(v) => OUT.putx_64(u64.view(v));
				_ => ; // TODO: error
			}
			_ => ; // TODO: other sizes
		}
		OUT.outln();
		return Resumption.Continue;
	}
	private def beforeMemGrow(dynamicLoc: DynamicLoc, mem: Memory, pages: u32) -> Resumption {
		if (locations) putLocation(dynamicLoc);
		OUT.putc('G');
		putMemIndex(mem.decl.memory_index);
		OUT.putx_32(pages);
		OUT.putc('=');
		// TODO: put result
		OUT.outln();
		return Resumption.Continue;
	}
}
