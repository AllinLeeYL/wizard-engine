// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that prints all memory reads/writes.
class MemoryMonitor extends Monitor {
	var reads = Vector<u64>.new();
	var writes = Vector<u64>.new();

	def onParse(module: Module) {
		var mm = ModuleMonitor.new(module);
		mm.beforeMemRead(beforeMemRead);
		mm.beforeMemWrite(beforeMemWrite);
		mm.beforeMemGrow(beforeMemGrow);
	}

	private def beforeMemRead(dynamicLoc: DynamicLoc, mem: Memory, index: u64, size: u64) -> Resumption {
		Trace.OUT.put2("read  mem[%d] @ 0x%x", mem.decl.memory_index, index);
		Trace.OUT.put1("[size=%d]", size).outln();
		return Resumption.Continue;
	}
	private def beforeMemWrite(dynamicLoc: DynamicLoc, mem: Memory, index: u64, size: u64) -> Resumption {
		Trace.OUT.put2("write mem[%d] @ 0x%x", mem.decl.memory_index, index);
		Trace.OUT.put1("[size=%d]", size).outln();
		return Resumption.Continue;
	}
	private def beforeMemGrow(dynamicLoc: DynamicLoc, mem: Memory, pages: u32) -> Resumption {
		Trace.OUT.put2("grow  mem[%d] +%d", mem.decl.memory_index, pages).outln();
		return Resumption.Continue;
	}
}
