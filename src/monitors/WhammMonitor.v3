// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// This class implements a monitor that is implemented in WebAssembly, i.e. as a Whamm
// module. Such modules have exported functions whose names describe how to attach
// behavior to events.

// Event names supported:
//   wasm:opcode:<mnemonic>			Before matching opcodes execute

// TODO:
//  - thread error reporter through monitor
//  - report callbacks
//  - binding callbacks
//  - define frame accessor methods
//  - externref in Virgil
//   before:opcode:call(<func pattern>)		Upon static direct calls to func
//   before:call:<func pattern>
//   before:enter:<func pattern>			Entry of function(s)
//   before:return:<func pattern>
//   before:unwind:<func pattern>
//   before:throw
//   before:catch
//   before:parse					Upon module parse
//   before:instantiate
//   before:start
//   before:main
//   before:exit
class WhammMonitor(whamm: Module) extends Monitor {
	var onParseF: int = -1;
	var onInstantiateF: int = -1;
	var onStartF: int = -1;
	var onMainF: int = -1;
	var onInstanceF: int = -1;
	var onExitF: int = -1;
	var opcodePatterns: Array<List<(Opcode, Array<WhammParam>, FuncDecl)>>;
	var whammInstances: List<(Module, Instance, InstanceRef)>; // XXX: leaky

	new() {
		if (Trace.whamm) Trace.OUT.put1("parsing whamm monitor: %s", whamm.filename).ln();
		for (i < whamm.exports.length) {
			var e = whamm.exports[i], name = e.0, decl = e.1;
			if (!FuncDecl.?(decl)) continue;
			if (Trace.whamm) Trace.OUT.put2("  export %d: \"%s\" = ", i, name).ln();
			var func = FuncDecl.!(decl);
			var r = TextReader.new(whamm.filename, name);
			var t = Whamm.parseOpcodePattern(r), op = t.0, params = t.1;
			if (!r.ok) {
				// parse error
				Trace.OUT.put1("whamm warning: export[%d] function name is invalid opcode pattern", i).ln();
				r.renderCurrentLineWithCaret(Trace.OUT, r.error_column);
				Trace.OUT.sp().puts(r.error_msg);
				Trace.OUT.ln();
				if (Trace.fatal) System.error("MonitorError", "failed parsing whamm monitor");
			} else if (t.0 == Opcode.INVALID) {
				// no events matched
				if (Trace.whamm) Trace.OUT.puts("no events matched").ln();
			} else {
				// ok, add opcode pattern to table
				if (Trace.whamm) {
					Trace.OUT.put1("opcode %s", op.mnemonic);
					if (params.length > 0) Trace.OUT.putTuple(params, WhammParam.render).ln();
				}
				if (opcodePatterns == null) opcodePatterns = Array.new(Opcodes.count);
				opcodePatterns[op.tag] = List.new((op, params, func), opcodePatterns[op.tag]);
			}
		}
	}
	def onParse(module: Module, err: ErrorGen) {
		var wi = getWhammInstance(module).0;
		if (wi == null) return;
		if (onParseF >= 0) {
			def moduleRef = ModuleRef.new(module);
			Execute.call(wi.functions[onParseF], [Value.Ref(moduleRef)]); // TODO: report traps
		}
		if (opcodePatterns == null) return;
		var it = BytecodeIterator.new();
		for (i < module.functions.length) {
			var func = module.functions[i];
			if (func.imp != null) continue; // imported
			for (bi = it.reset(func); bi.more(); bi.next()) {
				var bp = opcodePatterns[bi.current().tag];
				for (l = bp; l != null; l = l.tail) {
					if (Trace.whamm) Trace.OUT.put3("  match func %q+%d: %s", func.render(module.names, _), bi.pc, bi.current().mnemonic).ln();
					var wf = WasmFunction.!(wi.functions[bp.head.2.func_index]);
					var args = bindParams(it, bp.head.1);
					Instrumentation.insertLocalProbe(module, func.func_index, bi.pc, WhammProbe.new(wf, args));
				}
			}
		}
	}
	def bindParams(it: BytecodeIterator, params: Array<WhammParam>) -> Array<WhammArg> {
		var result = Array<WhammArg>.new(params.length);
		for (i < result.length) {
			var arg: WhammArg;
			match (params[i]) {
				DynamicLoc => ;
				FrameAccessor => arg = WhammArg.FrameAccessor;
				Pc => arg = WhammArg.Val(Values.i_v(it.pc));
				Func => arg = WhammArg.Val(Values.i_v(it.func.func_index));
				Imm(orig, i) => ; // TODO
				Arg(orig, i) => ; // TODO
				Local(orig, i) => ;
				Call(target, params) => ;
			}
			result[i] = arg;
		}
		return result;
	}
	def onInstantiate(i: Instance) {
		if (onInstanceF < 0) return;
		var t = getWhammInstance(i.module), wi = t.0;
		if (wi == null) return;
		def instRef = InstanceRef.new(i);
		Execute.call(wi.functions[onInstanceF], [Value.Ref(instRef)]); // TODO: report traps
	}
	private def getWhammInstance(module: Module) -> (Instance, InstanceRef) {
		for (l = whammInstances; l != null; l = l.tail) {
			if (l.head.0 == module) return (l.head.1, l.head.2);
		}
		if (Trace.whamm) Trace.OUT.put2("Instantiating whamm module %s for %s", whamm.filename, module.filename).ln();
		var imports = Array<Exportable>.new(whamm.imports.length), err = ErrorGen.new(whamm.filename);
		var i = Instantiator.new(Extension.set.all, whamm, imports, err);
		i.processors.put(WizengModule.new());
		var instance = i.run();
		if (!err.ok()) return ErrorBuilder.new()
			.render(err.error_code, whamm.filename, err.section, err.error_index, err.error_pos, err.error_msg)
			.exit((null, null));
		var instRef = InstanceRef.new(instance);
		whammInstances = List.new((module, instance, instRef), whammInstances);
		return (instance, instRef);
	}
}
