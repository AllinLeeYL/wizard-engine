// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A general-purpose profiler.
def monitor_ = MonitorRegistry.add(
	"profile", "Reports execution time for entire calling context trees.",
	ProfileMonitor.new());
def depthOpt = monitor_.options.newIntOption("depth", -1, "limit the maximum call tree depth");
def filterOpt = monitor_.options.newDeclFilterOption("calls", "apply profiling to selected functions");

class ProfileMonitor extends Monitor {
	var tree: ProfileTree;
	var maxDepth: int = -1;
	var filter: DeclFilter;

	// format: --monitors=profile{depth=2,calls=*}
	def configure(args: string) -> string {
		maxDepth = depthOpt.val;
		filter = filterOpt.val;
		return null;
	}
	def onParse(module: Module) {
		var mm = ModuleInstrumenter.new(module);
		tree = ProfileTree.new();
		mm.forEachFuncFiltered(filter, ModuleInstrumenter.beforeFuncExecAndReturn(_, _, tree.enterFunc, tree.exitFunc));
	}
	def onFinish(i: Instance, r: Result) {
		tree.rootNode.render(out, 0, 0, maxDepth);
	}
}

private class ProfileTreeNode(parent: ProfileTreeNode, func: WasmFunction) {
	var children: List<ProfileTreeNode>;
	var totalTime: int;
	var curTime: int;
	var count: int;
	def thresholds = [75, 25, 10];

	def getOrCreateChild(func: WasmFunction) -> ProfileTreeNode {
		for (i = children; i != null; i = i.tail) {
			if (i.head.func == func) return i.head;
		}
		var childNode = ProfileTreeNode.new(this, func);
		children = List.new(childNode, children);
		return childNode;
	}
	def enter() {
		curTime = System.ticksUs();
		count++;
	}
	def exit() {
		totalTime += System.ticksUs() - curTime;
	}

	def render(out: TraceBuilder, depth: int, total: int, maxDepth: int) {
		var totalPercentTime = if(depth == 1, totalTime, total);
		var nestedTime: int = totalTime;
		var selfTime: int = totalTime;

		var childArray = Lists.toArray(children);
		childArray = Arrays.sort(childArray, 0, childArray.length, byTime);

		if (maxDepth == -1 || depth < maxDepth) {
			var childTotalTime = 0;
			for (i < childArray.length) {
				childTotalTime += childArray[i].totalTime;
			}
			selfTime = nestedTime - childTotalTime;
		} else {
			selfTime = -1;
		}

		if (func == null) {
			// Root node in ProfileTree
			renderHeader(out);
		} else {
			var l = out.length;
			var f = func.decl;
			for (i < depth) out.puts("  ");
			out.beginColor(Color.FUNC);
			out.puts("func ");
			f.render(func.instance.module.names, out);
			out.endColors();
			out.pad(' ', l + 50);
			out.rjustify(' ', TraceUtil.renderUs(out, nestedTime), 12);
			out.rjustify(' ', TraceUtil.renderUs(out, selfTime), 12);
			if (totalPercentTime == 0) {
				out.beginColor(Color.UNREACHABLE);
				out.rjustify(' ', TraceUtil.renderPercent(out, 0, 1, 3), 10);
			}
			else {
				var percenti = 100 * selfTime / totalPercentTime;
				if (percenti > thresholds[0]) out.beginColor(Palettes.spectrum[0]);
				else if (percenti > thresholds[1]) out.beginColor(Palettes.spectrum[1]);
				else if (percenti > thresholds[2]) out.beginColor(Palettes.spectrum[2]);
				out.rjustify(' ', TraceUtil.renderPercent(out, selfTime, totalPercentTime, 3), 10);
			}
			out.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.putd(_, count)), 10);
			out.endColors();
			out.ln();
		}

		if (maxDepth == -1 || depth < maxDepth) {
			for (child in childArray) {
				if (child != null) child.render(out, depth + 1, totalPercentTime, maxDepth);
			}
		}
	}
	private def byTime(a: ProfileTreeNode, b: ProfileTreeNode) -> bool {
		return b.totalTime < a.totalTime;
	}

	private def renderHeader(out: TraceBuilder) {
		var l = out.length;
		var padding = 50;
		if (Palettes.get().on) padding -= TermColors.WHITE.length;
		out.beginColor(Color.UNDERLINE);
		out.puts("  *");
		out.pad(' ', l + padding);
		out.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.puts(_, "nested")), 12);
		out.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.puts(_, "self")), 12);
		out.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.puts(_, "self %")), 10);
		out.rjustify(' ', TraceUtil.renderedLength(out, TraceBuilder.puts(_, "count")), 10);
		out.endColors();
		out.ln();
	}
}

private class ProfileTree {
	var rootNode: ProfileTreeNode;
	var curNode: ProfileTreeNode;

	new() {
		rootNode = ProfileTreeNode.new(null, null);
		curNode = rootNode;
	}
	def enterFunc(dynamicLoc: DynamicLoc) -> Resumption {
		curNode = curNode.getOrCreateChild(dynamicLoc.func);
		curNode.enter();
		return Resumption.Continue;
	}
	def exitFunc(dynamicLoc: DynamicLoc) -> Resumption {
		pop();
		return Resumption.Continue;
	}
	def pop() {
		curNode.exit();
		curNode = curNode.parent;
	}
}
