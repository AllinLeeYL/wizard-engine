// Copyright 2024 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def E_ = MonitorRegistry.add(
	"control", "annotates a control-flow-graph with dynamic counts.",
	ControlMonitor.new());

class ControlMonitor extends Monitor {
	def funcs = Vector<(Module, ControlInstrumentation)>.new();

	def onParse(module: Module) {
		var i = ControlInstrumenter.new();
		i.entry = true;
		i.brs = true;
		i.br_ifs = true;
		i.loops = true;
		i.ends = true;

		var mm = ModuleInstrumenter.new(module);
		mm.forEachFunc(MonitorUtil.isNotImport, instrument(module, _, i));
	}

	def instrument(module: Module, func: FuncDecl, i: ControlInstrumenter) {
		var ins = i.instrument(module, func);
		if (ins != null) funcs.put(module, ins);
	}

	def onFinish(i: Instance, r: Result) {
		print(funcs);
	}
}

def countPerEdge = true;
def print(funcs: Vector<(Module, ControlInstrumentation)>) {
	var out = Trace.OUT;
	var p = CfgPrinter.new();
	p.pad_fallthru = true;
	for (i < funcs.length) {
		var e = funcs[i], module = e.0, ins = e.1, func = ins.func;
		var c = ins.getEntryCount();
		if (c != null && c.count == 0) continue;
		out.puts(Palette.FUNC)
		   .put1("func %q:", func.render(module.names, _))
		   .puts(Palette.DEFAULT);
		if (c != null) putCount(c.count);
		out.outln();
			printCfgEntries(p, module, ins);
	}
}
def printCfgEntries(p: CfgPrinter, module: Module, ins: ControlInstrumentation) {
	var out = Trace.OUT;
	var entries = p.compute(module, ins.func);

	for (j = 0; j < entries.length; j++) {
		var e = entries[j];
		out.sp();
		e.render(p.lmax, p.rmax, out);

		var c = ins.getCount(e.pc);
		if (c != null) putCount(c.count);
		var taken = ins.getBrCounts(e.pc);
		if (taken != null) {
			var opcode = ins.func.orig_bytecode[e.pc];
			if (!countPerEdge) { // TODO: handle if/else with empty fallthru locations
				// per-edge count printing disabled; just print the array
				for (j < taken.length) {
					if (j > 0) out.csp();
					if (taken[j] > 0) out.puts(Palette.COUNT);
					else out.puts(Palette.DEFAULT).puts(Palette.INACTIVE);
					out.putd(taken[j]);
				}
				out.puts(Palette.DEFAULT);
			} else if (opcode == Opcode.BR_TABLE.code) {
				// br_table already has entries in the CFG lines; match them to their taken counts.
				for (k < taken.length) {
					out.outln();
					e = entries[++j];
					out.sp();
					e.render(p.lmax, p.rmax, out);
					putCount(taken[k]);
				}
			} else if (opcode == Opcode.IF.code) {
				// if has a fallthru for the true case
				out.outln();
				e = entries[++j];
				out.sp();
				e.render(p.lmax, p.rmax, out);
				putCount(taken[1]); // TODO: how to find taken count for the else?
			} else {
				// conditional branches have an empty line for the fallthru case
				putCount(taken[1]);
				out.outln();
				e = entries[++j];
				out.sp();
				e.render(p.lmax, p.rmax, out);
				putCount(taken[0]);
			}
		}
		out.outln();
	}
}

def putCount(count: u64) {
	Trace.OUT.puts(Palette.COUNT)
		.mark()
		.put1("x %d", count)
		.rjustify_mark(11)
		.puts(Palette.DEFAULT);
}