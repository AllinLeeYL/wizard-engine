// Copyright 2024 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def E_ = MonitorRegistry.add(
	"r3", "Generates an optimized set of events for wasm r3 replay module creation.",
	R3Monitor.new());

var ticks: void -> u64;
var filter: DeclFilter;
class R3Monitor extends Monitor {
	def onParse(module: Module) {
		var bi = BytecodeIterator.new();
		for (i < module.functions.length) {
			var f = module.functions[i];
			if (f.imp != null) continue;
			if (filter != null && !filter.matches(module, f)) continue;
			var prev_call = false;
			var enter = EnterProbe.new(module, f);
			var exit = ExitProbe.new(enter);
			var call = CallProbe.new(enter);
			var ret = ReturnProbe.new(enter);
			Instrumentation.insertFuncEntryProbe(module, f.func_index, enter);
			for (bi = BytecodeIterator.new().reset(f); bi.more(); bi.next()) {
				if (prev_call) {
					Instrumentation.insertLocalProbe(module, f.func_index, bi.pc, ret);
					prev_call = false;
				}
				match (bi.current()) {
					CALL, CALL_INDIRECT, CALL_REF => {
						Instrumentation.insertLocalProbe(module, f.func_index, bi.pc, call);
						prev_call = true;
					}
					RETURN, RETURN_CALL, RETURN_CALL_INDIRECT, RETURN_CALL_REF => {
						Instrumentation.insertLocalProbe(module, f.func_index, bi.pc, exit);
					}
					_ => ;
				}
			}
			Instrumentation.insertLocalProbe(module, f.func_index, f.cur_bytecode.length - 1, exit);
		}
	}
	def onFinish(i: Instance, r: Result) {
		
	}

	private def isFuncMonitored(module: Module, func: FuncDecl) -> bool {
		return !MonitorUtil.isImport(module, func) && (filter == null || filter.matches(module, func));
	}
}


private class EnterProbe() extends Probe {
	def fire(loc: DynamicLoc) -> Resumption {
		System.puts("EnterProbe: ");
        System.puti(func.func_index);
        System.puts("\n");
        return Resumption.Continue;
	}
}

private class ExitProbe() extends Probe {
	def fire(loc: DynamicLoc) -> Resumption {
		System.puts("ExitProbe: ");
        System.puti(p.func.func_index);
        System.puts("\n");
        return Resumption.Continue;
	}
}

private class CallProbe() extends Probe {
	def fire(loc: DynamicLoc) -> Resumption {
		System.puts("CallProbe: ");
        System.puti(p.func.func_index);
        System.puts("\n");
        return Resumption.Continue;
	}
}

private class ReturnProbe() extends Probe {
	def fire(loc: DynamicLoc) -> Resumption {
		System.puts("ReturnProbe: ");
        System.puti(p.func.func_index);
        System.puts("\n");
        return Resumption.Continue;
	}
}
