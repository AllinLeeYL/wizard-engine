// Copyright 2024 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def E_ = MonitorRegistry.add(
	"r3-be", "TBD",
	R3BackEndMonitor.new());

class R3BackEndMonitor extends Monitor {
    def var replay: HashMap<int, ReplayFunction>;

    def configure(args: string) -> string {
		def argMap = MonitorUtil.argMapFrom(args);
		if (argMap.has("trace_file")) {
			var trace_file = argMap["trace_file"];
            var input = System.fileLoad(trace_file);
            if (input == null) {
		        return "Trace file not found";
            }
            var parser = R3TraceParser.new(input);
            if (!parser.parse()) {
                return "Trace file cannot be parsed";
            }
            replay = parser.replay_map;
			return null;
		}
		def buf = StringBuilder.new();
		buf.put1("invalid argument(s) \"%s\"", args);
		return buf.toString();
	}

	def onParse(module: Module) {
        replay.apply(debugPrint);
        //var imported_module_builders = Strings.newMap<HostModuleBuilder>();
		//for (j < module.imports.length) {
        //    if (FuncDecl.?(module.imports[j])) {
        //        var decl = FuncDecl.!(module.imports[j]);
	    //	    var name = decl.imp.module_name;
        //        if (ModuleRegistry.get(name) == null) {
        //            var field_name = decl.imp.field_name;
        //            var sig = decl.sig;
        //            if (!imported_module_builders.has(name)) {
        //                imported_module_builders[name] = HostModuleBuilder.new(name);
        //            }
        //            var module_builder = imported_module_builders[name];
        //            module_builder.func(field_name, sig, customImportedFunction(_, sig.results));
        //        }
        //    }
	    //}
        //for (l = Maps.keyList(imported_module_builders); l != null; l = l.tail) {
        //    imported_module_builders[l.head].register(true);
        //}
	}

    def debugPrint(func_id: int, replay_func: ReplayFunction) {
        var sb = StringBuilder.new();
        sb.put2("Function %d has %d calls\n", func_id, replay_func.all_ctx.length);
        for (i < replay_func.all_ctx.length) {
            var ctx = replay_func.all_ctx[i];
            sb.put1("call %d\n", i);
            for (j < ctx.actions.length) {
                ctx.actions[j].render(sb);
            }
            var result_len = if (ctx.results == null, 0, ctx.results.length);
            sb.put1("return value count: %d\n", result_len);
        }
        System.puts(sb.toString());
    }
}

def customImportedFunction(params: Range<Value>, result_types: Array<ValueType>) -> HostResult {
    var result_values = Array<Value>.new(result_types.length);
    for (i < result_types.length) {
        var t = result_types[i];
        match (t) {
            I32 => result_values[i] = Values.I32_0;
            I64 => result_values[i] = Values.I64_0;
            F32 => result_values[i] = Values.F32_0;
            F64 => result_values[i] = Values.F64_0;
            V128 => result_values[i] = Values.V128_0;
            _ => result_values[i] = Values.FUNCREF_NULL;
        }
    }
    System.puts("This works\n");
    match (result_types.length) {
        0 => return HostResult.Value0;
        1 => return HostResult.Value1(result_values[0]);
        _ => return HostResult.ValueN(result_values);
    }
}
