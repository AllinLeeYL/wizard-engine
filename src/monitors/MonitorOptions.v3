// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses and updates monitor options based on arguments.
component MonitorOptions {
	var group = OptionsRegistry.newGroup("MONITOR", printHelp);
	def CSV = group.newBoolOption("csv", false, "Enable comma-separated value output for monitors.");
	def X_ = OptionsRegistry.addParseFunc(parse);
	
	private var monitors = Vector<Monitor>.new();

	// Parse a command-line argument, configuring and updating monitors. Return {true}
	// if the argument was matched and parsed successfully.
	def parse(arg: string) -> bool {
		if (!Strings.startsWith(arg, "--monitors=")) return false;
		var s = 11, pos = s;
		var inArg = false;
		while (pos < arg.length) {
			match (arg[pos]) {
				'{' => {
					var name = Arrays.range(arg, s, pos);
					var args_start = ++pos, args_end = arg.length;
					while (pos < arg.length) {
						var ch = arg[pos++];
						if (ch == '}') { args_end = pos-1; break; }
					}
					var args = Arrays.range(arg, args_start, args_end);
					addMonitor(name, args);
					s = pos;
				}
				',' => {
					var name = Arrays.range(arg, s, pos);
					addMonitor(name, null);
					s = ++pos;
				}
				_ => pos++;
			}
		}
		if (s < arg.length) addMonitor(Arrays.range(arg, s, arg.length), null);
		return true;
	}
	private def addMonitor(name: string, args: string) {
		if (Strings.endsWith(name, ".wasm")) {
			var result = Engine.new().loadWasmFile(name); // TODO: extensions, limits
			match (result) {
				Ok(m) => {
					monitors.put(WhammMonitor.new(m));
					return;
				}
				FileNotFound => return ErrorBuilder.new()
					.puts("wizeng: could not load monitor file ")
					.puts(name)
					.ln()
					.exit<void>();
				ParseError(code, path, section, error_index, error_pos, error_msg) => return ErrorBuilder.new()
					.render(code, path, section, error_index, error_pos, error_msg)
					.exit<void>();
			}
		}
		var m = MonitorRegistry.lookupName(name);
		if (m != null) {
			if (args != null) {
				var msg = m.configure(args);
				if (msg != null) Trace.OUT.put2("%s: %s", name, msg).ln();
			}
			monitors.put(m);
		}
	}
	// Get the monitors, if any, configured by the above.
	def getMonitors() -> Vector<Monitor> {
		return monitors;
	}
	def printHelp(out: TraceBuilder) {
		var H = out.putsln, L = out.ln;
		H("Wizard offers instrumentation and dynamic analyses of Wasm programs via monitors.");
		H("Multiple monitors can enabled simultaneously using the command-line flag.");
		L();
		H("   --monitors=<monitor>{<opts>}[,<monitor>{<opts>}]");
		L();
		H("Each monitor comes with its own set of optional arguments and their modifiers.");
		H("This build of the Wizard engine supports the following monitors:");
		L();

		MonitorRegistry.printHelp();

		L();
		H("Additional global monitor options include:");
		L();
		group.print(out);
		
		H("Example usage:");
		L();
		H("   --monitors=loops,coverage{code=instr}");
		out.ln();
	}
}
