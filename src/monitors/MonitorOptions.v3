// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses and updates monitor options based on arguments.
component MonitorOptions {
	private var monitors = Vector<Monitor>.new();

	// Parse a command-line argument, configuring and updating monitors. Return {true}
	// if the argument was matched and parsed successfully.
	def parse(arg: string) -> bool {
		if (!Strings.startsWith(arg, "--monitors=")) return false;
		var s = 11;
		var inArg = false;
		for (i = s; i < arg.length; i++) {
			// Allow commas between monitor arguments
			if (arg[i] == '{') inArg = true;
			if (arg[i] == '}') inArg = false;
			if (!inArg && arg[i] == ',') {
				addMonitor(arg, s, i);
				s = i + 1;
			}
		}
		if (s < arg.length) addMonitor(arg, s, arg.length);
		return true;
	}
	private def addMonitor(arg: string, start: int, end: int) {
		var name = Arrays.range(arg, start, end);
		var args: string;

		for (i < name.length) {
			if (name[i] == '{' && name[name.length - 1] == '}') {
				args = Arrays.range(name, i + 1, name.length - 1);
				name = Arrays.range(name, 0, i);
			}
		}
		var m = MonitorRegistry.lookupName(name);
		if (m != null) {
			if (args != null) {
				var msg = m.configure(args);
				if (msg != null) Trace.OUT.put2("%s: %s", name, msg).outln();
			}
			monitors.put(m);
		}
	}
	def insertMonitor(m: Monitor) {
		monitors.put(m);
	}
	// Get the monitors, if any, configured by the above.
	def getMonitors() -> Vector<Monitor> {
		return monitors;
	}
	// Parse monitor-specific args and return a string map.
	// e.g. --monitors=calls{code=ba*,xyz} will give the
	// string map {code=ba*,xyz}
	def parseMonitorArgs(args: string) -> HashMap<string, string> {
		def map = Strings.newMap<string>();
		var start = 0, i = 0;
		while (i < args.length) {
			if (args[i] == ',') {
				map[Arrays.range(args, start, i)] = null;
				start = ++i;
				continue;
			}
			if (args[i] == '=') {
				var j = i;
				while (j < args.length && args[j] != ',') j++;
				map[Arrays.range(args, start, i)] =  Arrays.range(args, i+1, j);
				i = j + 1;
				start = i;
				continue;
			}
			i++;
		}
		map[args] = null;
		return map;
	}
}
