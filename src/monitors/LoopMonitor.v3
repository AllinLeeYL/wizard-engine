// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that counts the number of iterations of each loop.
class LmEntry(module: Module, func: FuncDecl, depth: int, pc: int) {
	var endPc: int;
}

class LoopMonitor extends Monitor {
	def entries = Vector<LmEntry>.new();
	def counts = Vector<u64>.new();
	def it = BytecodeIterator.new();
	def var inCodeMode = false;

	def configure(args: string) -> string {
		if (Strings.equal(args, "code") || Strings.equal(args, "c")) {
			inCodeMode = true;
			return null;
		}
		def buf = StringBuilder.new();
		buf.put1("invalid argument(s) \"%s\"", args);
		return buf.toString();
	}

	def onParse(m: Module) {
		var mm = ModuleMonitor.new(m);
		mm.forEachFunc(MonitorUtil.isNotImport, monitorFunc(mm, _));
	}
	def onFinish(i: Instance) {
		if (inCodeMode) {
			if (entries.length == 0) return;
			var e = entries[0];
			def tracer = InstrTracer.new();
			var j = -1;
			while (j < entries.length) {
				var bi = BytecodeIterator.new().reset(e.func);
				var indent = 0;
				Trace.OUT.puts(TermColors.CYAN);
				Trace.OUT.put1("func %q:", e.func.render(e.module.names, _)).outln();
				Trace.OUT.puts(TermColors.DEFAULT);
				var loopDepth = 0;
				var midPoints = Vector<int>.new();
				while (bi.more()) {
					var op = bi.current();
					var t = Trace.OUT;
					if (op == Opcode.LOOP || (loopDepth > 0 && op == Opcode.END)) {
						if (op == Opcode.LOOP) {
							loopDepth++;
							e = entries[++j];
							midPoints.put((e.pc + e.endPc) / 2);
							indent = e.depth + 1; // FIXME: fails for loops at start of func
						}
						t.puts(TermColors.WHITE);
						t.put1("+%d\t", bi.pc);
						t.puts(TermColors.DEFAULT);
						for (k < indent - 1) t.puts("-\t\t");
						t.puts(TermColors.WHITE);
						if (op == Opcode.LOOP) t.puts("-->\t\t");
						else t.puts("<--\t\t");
						bi.traceOrig(t, e.module, tracer);
						t.puts(TermColors.DEFAULT);
						t.outln();
						if (op == Opcode.END) {
							indent = if(e.depth > 0, indent - 1, 0);
							loopDepth--;
							midPoints.resize(midPoints.length - 1);
						}
						bi.next();
						continue;
					}
					t.puts(TermColors.BROWN);
					t.put1("+%d\t", bi.pc);
					t.puts(TermColors.DEFAULT);
					for (k < indent) {
						if (midPoints.length > 0 && bi.pc == midPoints[k]) {
							t.puts(TermColors.WHITE);
							t.put1("(%d)\t\t", counts[j - e.depth + k]);
							t.puts(TermColors.DEFAULT);
						} else t.puts("-\t\t");
					}
					bi.traceOrig(t, e.module, tracer);
					t.outln();
					bi.next();
				}
				j++;
			}
		} else {
			var prev: FuncDecl;
			for (j < entries.length) {
				var e = entries[j];
				if (e.func != prev) {
					prev = e.func;
					Trace.OUT.puts(TermColors.CYAN);
					Trace.OUT.put1("func %q:", prev.render(e.module.names, _)).outln();
					Trace.OUT.puts(TermColors.DEFAULT);
				}
				for (k < e.depth) Trace.OUT.puts("  ");
				Trace.OUT.puts(TermColors.BROWN);
				Trace.OUT.put2("  +%d ... +%d ", e.pc, e.endPc);
				Trace.OUT.puts(TermColors.DEFAULT);
				Trace.OUT.puts("loop: ");
				Trace.OUT.puts(TermColors.WHITE);
				Trace.OUT.put1("%d", counts[j]).outln();
				Trace.OUT.puts(TermColors.DEFAULT);
			}
		}
	}

	private def monitorFunc(mm: ModuleMonitor, func: FuncDecl) {
		var loopDepth = 0;
		var controlStack = ArrayStack<(Opcode, LmEntry)>.new();

		for (bi = it.reset(func); bi.more(); bi.next()) {
			var op = bi.current();
			match (op) {
				BLOCK, IF => controlStack.push((op, null));
				LOOP => {
					var callback = loopHit(_, entries.length);
					mm.beforeInstrExec(func, bi.pc, callback);
					var lmEntry = LmEntry.new(mm.module, func, loopDepth, bi.pc);
					entries.put(lmEntry);
					controlStack.push((op, lmEntry));
					counts.put(0);
					loopDepth++;
				}
				// TODO: try and exception bytecodes 
				END => {
					if ((bi.pc + 1) < func.cur_bytecode.length) {
						var topControl = controlStack.pop();
						if (topControl.0 == Opcode.LOOP) {
							loopDepth--;
							topControl.1.endPc = bi.pc;
						}
					}
				}
				_ => ;
			}
		}
	}
	private def loopHit(dynamicLoc: DynamicLoc, entry: int) -> Resumption {
		counts[entry] = 1u + counts[entry];
		return Resumption.Continue;
	}
}
