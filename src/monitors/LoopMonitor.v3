// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that counts the number of iterations of each loop.
def monitor_ = MonitorRegistry.add(
	"loops", "Tallies counts of loops.",
	LoopMonitor.new());
def inCodeMode_ = monitor_ // TODO: return Option<bool>
	.addOption("code|c", "emit report with code");
def showZeroCounts_ = monitor_ // TODO: return Option<bool>
	.addOption("zero|z", "show zero counts");

var inCodeMode = false;
var showZeroCounts = false;
class LoopMonitor extends Monitor {
	def entries = Vector<LmEntry>.new();
	def it = BytecodeIterator.new();

	def configure(args: string) -> string {
		def argMap = MonitorUtil.argMapFrom(args);
		if (argMap.has("code") || argMap.has("c")) {
			inCodeMode = true;
			return null;
		}
		if (argMap.has("zero") || argMap.has("z")) {
			showZeroCounts = true;
			return null;
		}
		def buf = StringBuilder.new();
		buf.put1("invalid argument(s) \"%s\"", args);
		return buf.toString();
	}

	def onParse(m: Module) {
		ModuleInstrumenter.new(m).forEachFunc(instrument);
	}

	def onFinish(i: Instance, r: Result) {
		if (inCodeMode){
			reportCodeMode(entries);
		} 
		else if (MonitorOptions.csv){
			reportCsv(entries);
		}
		else report(entries);
	}

	private def instrument(mm: ModuleInstrumenter, func: FuncDecl) {
		var loopDepth = 0;
		var controlStack = ArrayStack<(Opcode, LmEntry)>.new();

		for (bi = it.reset(func); bi.more(); bi.next()) {
			var op = bi.current();
			match (op) {
				BLOCK, IF => controlStack.push((op, null));
				LOOP => {
					var lmEntry = LmEntry.new(mm.module, func, loopDepth, bi.pc);
					Instrumentation.insertLocalProbe(mm.module, func.func_index, bi.pc, lmEntry);
					entries.put(lmEntry);
					controlStack.push((op, lmEntry));
					loopDepth++;
				}
				// TODO: try and exception bytecodes 
				END => {
					if ((bi.pc + 1) < func.cur_bytecode.length) {
						var topControl = controlStack.pop();
						if (topControl.0 == Opcode.LOOP) {
							loopDepth--;
							topControl.1.endPc = bi.pc;
						}
					}
				}
				_ => ;
			}
		}
	}
	// Called when a loop is executed.
	private def beforeLoopExecute(dynamicLoc: DynamicLoc, entry: int) -> Resumption {
		entries[entry].count++;
		return Resumption.Continue;
	}
}
// An {LmEntry} is an entry that stores the execution count of each loop.
private class LmEntry(module: Module, func: FuncDecl, depth: int, pc: int) extends CountProbe {
	var endPc: int;
}

// Output monitor results to STDOUT
def OUT = Trace.OUT;
def reportCodeMode(entries: Vector<LmEntry>) {
	// XXX: In code mode, show a break from a BR, BR_IF, or BR_TABLE instead of END
	def tracer = InstrTracer.new();
	var bi = BytecodeIterator.new();
	var j = 0;
	while (j < entries.length) {
		var e = entries[j];
		bi = bi.reset(e.func);
		var indent = 0;
		OUT.beginColor(Color.FUNC)
			.put1("func %q:", e.func.render(e.module.names, _))
			.endColors()
			.ln();
		var controlStack = ArrayStack<Opcode>.new();
		var midPoints = Vector<int>.new();
		while (bi.more()) {
			var op = bi.current();
			match (op) {
				BLOCK, IF => controlStack.push(op);
				LOOP => {
					controlStack.push(op);
					e = entries[j++];
					midPoints.put((e.pc + e.endPc) / 2);
					indent = e.depth + 1;
					OUT.beginColor(Color.SOURCE)
						.mark()
						.put1("+%d", bi.pc)
						.rjustify_mark(5);

					for (k < indent - 1) OUT.puts("\t|");
					OUT.beginColor(Color.SOURCE).puts("\t-->\t");
					bi.traceOrig(OUT, e.module, tracer);
					OUT.endColors().ln();
					bi.next();
					continue;
				}
				END => {
					var topControl = controlStack.pop();
					if (topControl == Opcode.LOOP) {
						OUT.beginColor(Color.SOURCE)
							.mark()
							.put1("+%d", bi.pc)
							.rjustify_mark(5);
						for (k < indent - 1) OUT.puts("\t|");
						OUT.beginColor(Color.SOURCE).puts("\t<--\t");
						bi.traceOrig(OUT, e.module, tracer);
						OUT.endColors().ln();
						indent = if(e.depth > 0, indent - 1, 0);
						midPoints.resize(midPoints.length - 1);
						bi.next();
						continue;
					}
				}
				_ => ;
			}
			OUT.beginColor(Color.LINE)
				.mark()
				.put1("+%d", bi.pc)
				.rjustify_mark(5);
			for (k < indent) {
				if (midPoints.length > 0 && bi.pc == midPoints[k]) {
					var count = e.count;
					if (count == 0) OUT.beginColor(Color.UNREACHABLE);
					else OUT.beginColor(Color.COUNT);
					OUT.put1("\t(%d)", count).endColors();
				} else {
					OUT.beginColor(Color.SOURCE).puts("\t|").endColors();
				}
			}
			OUT.endColors().putc('\t');
			bi.traceOrig(OUT, e.module, tracer);
			OUT.ln();
			bi.next();
		}
	}
}
def report(entries: Vector<LmEntry>) {
	var prev: FuncDecl;
	for (j < entries.length) {
		var e = entries[j];
		if (e.count == 0 && !showZeroCounts) continue;
		if (e.func != prev) {
			prev = e.func;
			OUT.beginColor(Color.FUNC)
				.put1("func %q:", prev.render(e.module.names, _))
				.endColors().ln();
		}
		OUT.beginColor(Color.LINE)
			.mark()
			.put2(" +%d ... +%d ", e.pc, e.endPc)
			.rjustify_mark(14)
			.endColors();
		OUT.puts("loop: ")
			.beginColor(Color.COUNT)
			.putd_rjustified(5, e.count)
			.endColors()
			.ln();
	}

}
def reportCsv(entries: Vector<LmEntry>) {
	//calling function, starting pc, ending pc, number of times looped
	OUT.puts("loop,func,pc,end_pc,count\n");
	for (i < entries.length) {
		var e = entries[i];
		if (e.count == 0 && !showZeroCounts) continue;
		//add each line of data so the out buffer
		OUT.puts("loop,")
			.put1("%q", e.func.render(e.module.names, _))
			.putc(',')
			.putd(e.pc)
			.putc(',')
			.putd(e.endPc)
			.putc(',')
			.putd(e.count);
		if(i < entries.length - 2) 
			OUT.putc('\n');
	}
	OUT.ln();
}
