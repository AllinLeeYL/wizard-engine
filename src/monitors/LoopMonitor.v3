// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that counts the number of iterations of each loop.
class LoopMonitor extends Monitor {
	def entries = Vector<(Module, FuncDecl, int)>.new();
	def counts = Vector<u64>.new();

	def onParse(m: Module) {
		var it = BytecodeIterator.new();
		for (i < m.functions.length) {
			var f = m.functions[i];
			if (f.imp != null) continue; // skip imported functions
			for (bi = it.reset(f); bi.more(); bi.next()) {
				if (bi.current() == Opcode.LOOP) {
					var entry = entries.length;
					m.insertProbeAt(f.func_index, bi.pc, LoopMonitorCounter.new(this, entry));
					entries.put(m, f, bi.pc);
					counts.put(0);
				}
			}
		}
	}
	def onExit(code: int) {
		onFinish(null);
	}
	def onFinish(i: Instance) {
		var prev: FuncDecl;
		for (j < entries.length) {
			var e = entries[j];
			if (e.1 != prev) {
				prev = e.1;
				Trace.OUT.put1("func %q:", prev.render(e.0.names, _)).outln();
			}
			Trace.OUT.put2("  +%d loop: %d", e.2, counts[j]).outln();
		}
	}
}
class LoopMonitorCounter(m: LoopMonitor, entry: int) extends Probe {
	def fire(func: WasmFunction, offset: int, frame: TargetFrame) -> Resumption {
		m.counts[entry] = 1u + m.counts[entry];
		return Resumption.Continue;
	}
}