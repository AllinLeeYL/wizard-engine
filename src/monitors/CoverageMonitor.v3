// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that tracks code coverage.
def monitor_ = MonitorRegistry.add(
	"coverage", "Tallies instruction and basic block coverage.",
	CoverageMonitor.new());
def inCodeMode_ = monitor_ // TODO: return Option<int>
	.addOption("code[=i]|c[=i]", "emit report with [per-instruction] code");

class CoverageMonitor extends Monitor {
	def entries = Vector<CoverageMonitorProbe>.new();
	def isStartOfBlock = Vector<bool>.new();
	def executed = Vector<bool>.new();
	var inBasicBlockMode = false;
	var inCodeMode = false;

	def configure(args: string) -> string {
		def argMap = MonitorUtil.argMapFrom(args);
		if (argMap.has("code") || argMap.has("c")) {
			inCodeMode = true;
			inBasicBlockMode = true;
			var codeArg = if (argMap.has("code"), argMap["code"], argMap["c"]);
			if (codeArg == null) return null;
			if (Strings.equal(codeArg, "instr") || Strings.equal(codeArg, "i")) {
				inBasicBlockMode = false;
			}
			return null;
		}
		def buf = StringBuilder.new();
		buf.put1("invalid argument(s) \"%s\"", args);
		return buf.toString();
	}
	def onParse(m: Module) {
		for (i < m.functions.length) {
			var f = m.functions[i];
			if (f.imp != null) continue; // skip imported functions
			var offset = executed.length;
			var p = CoverageMonitorProbe.new(m, f, this, offset);
			entries.put(p);
			executed.putn(false, f.cur_bytecode.length);

			isStartOfBlock.putn(false, f.cur_bytecode.length);

			var addToNext = true;
			for (bi = BytecodeIterator.new().reset(f); bi.more(); bi.next()) {
				var op = bi.current();
				if (addToNext) {
					addToNext = false;
					isStartOfBlock[offset + bi.pc] = true;
					if (inBasicBlockMode) Instrumentation.insertLocalProbe(m, f.func_index, bi.pc, p);
				}
				if (!inBasicBlockMode) {
					Instrumentation.insertLocalProbe(m, f.func_index, bi.pc, p);
				}
				match (op) {
					BLOCK, LOOP, TRY, CATCH, CATCH_ALL => {
						isStartOfBlock[offset + bi.pc] = true;
						Instrumentation.insertLocalProbe(m, f.func_index, bi.pc, p);
					}
					BR, BR_IF, BR_TABLE, IF, ELSE, THROW, RETHROW, END => addToNext = true;
					_ => ;
				}
			}
		}
	}
	def onFinish(i: Instance, r: Result) {
		if (inCodeMode) reportCode(entries, isStartOfBlock, executed, inBasicBlockMode);
		else report(entries, isStartOfBlock, executed);
	}
}
private class CoverageMonitorProbe(module: Module, func: FuncDecl, monitor: CoverageMonitor, start: int) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		monitor.executed[dynamicLoc.pc + start] = true;
		Instrumentation.removeLocalProbe(module, dynamicLoc.func.decl.func_index, dynamicLoc.pc, this);
		return Resumption.Continue;
	}
}

// Output monitor results to STDOUT
def OUT = Trace.OUT;
def reportCode(entries: Vector<CoverageMonitorProbe>,
		isStartOfBlock: Vector<bool>,
		executed: Vector<bool>,
		inBasicBlockMode: bool) {
	var lowCoverageThreshold = 75; // in %, for highlighting low coverages
	var prev: FuncDecl;
	var tracer = InstrTracer.new(), d = DataReader.new([]);
	var blockCovered = false;
	var it = BytecodeIterator.new();

	for (j < entries.length) {
		var e = entries[j];
		OUT.beginColor(Color.FUNC).put1("func %q:", e.func.render(e.module.names, _)).endColors().outln();
		for (bi = it.reset(e.func); bi.more(); bi.next()) {
			bi.current();
			d.reset(e.func.orig_bytecode, bi.pc, e.func.orig_bytecode.length);
			if (inBasicBlockMode) {
				var isStart = isStartOfBlock[e.start + bi.pc];
				if (isStart) {
					blockCovered = executed[e.start + bi.pc];
					if (blockCovered) {
						OUT.beginColor(Color.LINE)
							.mark()
							.put1("+%d", bi.pc)
							.rjustify_mark(5)
							.beginColor(Color.COVERED)
							.puts(" -->")
							.endColors();
					} else {
						OUT.beginColor(Color.UNREACHABLE)
							.mark()
							.put1("+%d", bi.pc)
							.rjustify_mark(5);
					}
				} else {
					if (!blockCovered) OUT.beginColor(Color.UNREACHABLE);
					else OUT.endColors();
					OUT.puts("    -");
				}
				if (blockCovered) {
					OUT.beginColor(Color.COVERED).puts(if(isStart, "", "    "));
				} else {
					OUT.puts("    ");
				}
				OUT.endColors().puts("  ");
				if (!blockCovered) OUT.beginColor(Color.UNREACHABLE);
				else if (isStart) OUT.beginColor(Color.COVERED_FG).beginColor(Color.COVERED_BG);
				tracer.putInstr(OUT, e.module, d);
				OUT.endColors().outln();
			} else {
				var byteCovered = executed[e.start + bi.pc];
				if (byteCovered) OUT.beginColor(Color.LINE);
				else OUT.beginColor(Color.UNREACHABLE); 
				OUT.mark()
					.put1("+%d", bi.pc)
					.rjustify_mark(5);
				OUT.puts("  ");
				if (!byteCovered) OUT.puts("  ").beginColor(Color.UNREACHABLE);
				else OUT.beginColor(Color.COVERED).puts("* ").beginColor(Color.COVERED_FG).beginColor(Color.COVERED_BG);
				tracer.putInstr(OUT, e.module, d);
				OUT.endColors().outln();
			}
		}
	}
}
def report(entries: Vector<CoverageMonitorProbe>,
		isStartOfBlock: Vector<bool>,
		executed: Vector<bool>) {
	var lowCoverageThreshold = 75; // in %, for highlighting low coverages
	var prev: FuncDecl;
	var tracer = InstrTracer.new(), d = DataReader.new([]);
	var blockCovered = false;
	var it = BytecodeIterator.new();
	var instrsCovered = 0;
	var totalInstrs = 0;
	var blocksCovered = 0;
	var totalBlocks = 0;
	for (j < entries.length) {
		var e = entries[j];
		for (bi = it.reset(e.func); bi.more(); bi.next()) {
			bi.current();
			d.reset(e.func.orig_bytecode, bi.pc, e.func.orig_bytecode.length);
			if (isStartOfBlock[e.start + bi.pc]) {
				totalBlocks++;
				if (executed[e.start + bi.pc]) blocksCovered++;
			}
			totalInstrs++;
			if (executed[e.start + bi.pc]) instrsCovered++;
		}
	}
	var instrCovPercentage = 100 * instrsCovered / totalInstrs;
	var blockCovPercentage = 100 * blocksCovered / totalBlocks;
	OUT.puts("Instr coverage:\t")
		.beginColor(Color.ACTIVE)
		.putd(instrsCovered)
		.endColors()
		.put1(" / %d ", totalInstrs);
	OUT.puts("(").beginColor(Color.SUCCESS);
	if (instrCovPercentage < 100) OUT.beginColor(Color.WARN);
	if (instrCovPercentage < lowCoverageThreshold) OUT.beginColor(Color.DANGER);
	TraceUtil.renderPercent(OUT, instrsCovered, totalInstrs, 1);
	OUT.endColors().puts(")").outln()
		.puts("Block coverage:\t")
		.beginColor(Color.ACTIVE)
		.putd(blocksCovered)
		.endColors()
		.put1(" / %d ", totalBlocks);
	OUT.puts("(").beginColor(Color.SUCCESS);
	if (blockCovPercentage < 100) OUT.beginColor(Color.WARN);
	if (blockCovPercentage < lowCoverageThreshold) OUT.beginColor(Color.DANGER);
	TraceUtil.renderPercent(OUT, blocksCovered, totalBlocks, 1);
	OUT.endColors().puts(")").outln();
}
