// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that tracks code coverage.
class CoverageMonitor extends Monitor {
	def entries = Vector<CoverageMonitorProbe>.new();
	def isStartOfBlock = Vector<bool>.new();
	def executed = Vector<bool>.new();
	var inBasicBlockMode = true;

	def configure(args: string) -> string {
		if (Strings.equal(args, "instr")) inBasicBlockMode = false;
		return null;
	}

	def onParse(m: Module) {
		for (i < m.functions.length) {
			var f = m.functions[i];
			if (f.imp != null) continue; // skip imported functions
			var offset = executed.length;
			var p = CoverageMonitorProbe.new(m, f, this, offset);
			entries.put(p);
			executed.putn(false, f.cur_bytecode.length);

			if (inBasicBlockMode)
				isStartOfBlock.putn(false, f.cur_bytecode.length);

			var addToNext = true;
			for (bi = BytecodeIterator.new().reset(f); bi.more(); bi.next()) {
				var op = bi.current();
				if (inBasicBlockMode) {
					if (addToNext) {
						addToNext = false;
						isStartOfBlock[offset + bi.pc] = true;
						m.insertProbeAt(f.func_index, bi.pc, p);
					}
					match (op) {
						BLOCK, LOOP, ELSE, TRY, CATCH, CATCH_ALL => {
							isStartOfBlock[offset + bi.pc] = true;
							m.insertProbeAt(f.func_index, bi.pc, p);
						}
						BR, BR_IF, BR_TABLE, IF, THROW, RETHROW, END => addToNext = true;
						_ => ;
					}
				} else {
					m.insertProbeAt(f.func_index, bi.pc, p);
				}
			}
		}
	}
	def onExit(code: int) {
		onFinish(null);
	}
	def onFinish(i: Instance) {
		var prev: FuncDecl;
		var tracer = InstrTracer.new(), d = DataReader.new([]);
		var blockCovered = false;
		var it = BytecodeIterator.new();

		for (j < entries.length) {
			var e = entries[j];
			Trace.OUT.put1("func %q:", e.func.render(e.module.names, _)).outln();
			for (bi = it.reset(e.func); bi.more(); bi.next()) {
				bi.current();
				d.reset(e.func.orig_bytecode, bi.pc, e.func.orig_bytecode.length);

				if (inBasicBlockMode) {
					if (isStartOfBlock[e.start + bi.pc]) {
						blockCovered = executed[e.start + bi.pc];
						Trace.OUT.puts("->");
					} else {
						Trace.OUT.puts("  ");
					}
					Trace.OUT.puts(if(blockCovered, " * ", "   "));
				} else {
					Trace.OUT.puts(if(executed[e.start + bi.pc], " * ", "   "));
				}
				tracer.putInstr(Trace.OUT, e.module, d);
				Trace.OUT.outln();
			}
		}
	}
}
class CoverageMonitorProbe(module: Module, func: FuncDecl, monitor: CoverageMonitor, start: int) extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		monitor.executed[dynamicLoc.pc + start] = true;
		module.removeProbeAt(dynamicLoc.func.decl.func_index, dynamicLoc.pc, this);
		return Resumption.Continue;
	}
}