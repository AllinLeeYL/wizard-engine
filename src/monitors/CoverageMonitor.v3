// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that tracks code coverage.
class CoverageMonitor extends Monitor {
	def entries = Vector<CoverageMonitorProbe>.new();
	def executed = Vector<bool>.new();

	def onParse(m: Module) {
		for (i < m.functions.length) {
			var f = m.functions[i];
			if (f.imp != null) continue; // skip imported functions
			var p = CoverageMonitorProbe.new(m, f, this, executed.length);
			entries.put(p);
			executed.putn(false, f.code.code.length);
			for (bi = BytecodeIterator.new(f); bi.more(); bi.next()) {
				m.insertProbeAt(f.func_index, bi.pc, p);
			}
		}
	}
	def onExit(code: int) {
		onFinish(null);
	}
	def onFinish(i: Instance) {
		var prev: FuncDecl;
		var tracer = InstrTracer.new(), d = DataReader.new([]);
		for (j < entries.length) {
			var e = entries[j];
			Trace.OUT.put1("func %q:", e.func.render(e.module.names, _)).outln();
			for (bi = BytecodeIterator.new(e.func); bi.more(); bi.next()) {
				d.reset(e.func.code.orig, bi.pc, e.func.code.orig.length);
				if (executed[e.start + bi.pc]) {
					Trace.OUT.puts("   * ");
				} else {
					Trace.OUT.puts("     ");
				}
				tracer.putInstr(Trace.OUT, e.module, d);
				Trace.OUT.outln();
			}
		}
	}
}
class CoverageMonitorProbe(module: Module, func: FuncDecl, monitor: CoverageMonitor, start: int) extends Probe {
	def fire(func: WasmFunction, offset: int, frame: TargetFrame) -> Resumption {
		monitor.executed[offset + start] = true;
		module.removeProbeAt(func.decl.func_index, offset, this);
		return Resumption.Continue;
	}
}