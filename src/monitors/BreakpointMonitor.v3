// Copyright 2024 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def monitor_ = MonitorRegistry.add(
	"breakpoints", "Triggers an external debugger (e.g. gdb) at specified points.",
	BreakpointMonitor.new());
def pointList_ = monitor_
	.addOption("", "points in functions at which to break, given as <func-filter>:min_pc..max_pc");

var points: List<(DeclFilter, u32, u32)>;
def BREAKPOINT_PROBE = ExternalDebuggerBreakpointProbe.new();

class BreakpointMonitor extends Monitor {
	def configure(args: string) -> string {
		// XXX: factor out PointFilter to utility
		var p = TextReader.new("<option>", args);
		Trace.OUT.put1("args=%s", args).ln();
		while (p.pos < p.limit) {
			var pair = DeclFilters.parseMatcherPair(p);
			var min = 0u, max = u32.max;
			if (p.opt1(':') > 0) {
				var t = DeclFilters.parseSequence(p);
				min = t.0;
				max = t.1;
				if (min == max) max = min + 1;
			}
			var filter = DeclFilter.new("", List.new(pair, null));
			points = List.new((filter, min, max), points);
			Trace.OUT.put3("%q: min=%d, max=%d", filter.render, min, max).ln();
			p.opt1(',');
		}
		return null;
	}

	def onParse(module: Module) {
		var bi = BytecodeIterator.new();
		for (i < module.functions.length) {
			var func = module.functions[i];
			for (l = points; l != null; l = l.tail) {
				var f = l.head;
				if (!f.0.matches(module, func)) continue;
				for (it = bi.reset(func); it.more(); it.next()) {
					if (it.pc >= f.1 && it.pc < f.2) Instrumentation.insertLocalProbe(module, func.func_index, it.pc, BREAKPOINT_PROBE);
				}
			}
		}
	}
}
