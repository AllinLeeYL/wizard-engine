// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that prints each call as it happens and also keeps statistics.
class CallsMonitor extends Monitor {
	def entries = Vector<(Module, FuncDecl)>.new();
	def counts = Vector<u64>.new();
	var depth = 0;
	var filter: DeclFilter;

	def configure(args: string) -> string {
		filter = DeclFilter.new(args);
		return null;
	}
	def onParse(module: Module) {
		var mm = ModuleMonitor.new(module);
		mm.forEachFunc(isFuncMonitored, mm.beforeFuncExecAndReturn(_, beforeFuncExec, beforeFuncReturn));
	}

	private def isFuncMonitored(module: Module, func: FuncDecl) -> bool {
		if (filter != null && !filter.matches(module, func)) return false;
		if (MonitorUtil.isImport(module, func)) return false;
		return true;
	}
	private def beforeFuncExec(dynamicLoc: DynamicLoc) -> Resumption {
		for (i < depth) Trace.OUT.puts("  ");
		depth++;
		dynamicLoc.func.render(Trace.OUT);
		Trace.OUT.outln();
		return Resumption.Continue;
	}
	private def beforeFuncReturn(dynamicLoc: DynamicLoc) -> Resumption {
		depth--;
		return Resumption.Continue;
	}
}
