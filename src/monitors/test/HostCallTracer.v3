// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def unused = MonitorRegister.register("test:hostCall", HostCallTracer.new());

class HostCallTracer extends Monitor {
	def onParse(module: Module) {
		var mm = ModuleInstrumenter.new(module);
		mm.beforeAllFuncExec(traceCall);
	}
	private def traceCall(dynamicLoc: DynamicLoc) -> Resumption {
		dynamicLoc.func.render(Trace.OUT);
		Trace.OUT.puts(" - callers: ");
		var accessor = dynamicLoc.frame.getFrameAccessor();
		var caller = accessor.caller();
		while (true) {
			match (caller) {
				None => break;
				Wasm(func, pc, frame) => {
					Trace.OUT.puts(" ");
					func.render(Trace.OUT);
					accessor = frame.getFrameAccessor();
					caller = accessor.caller();
				}
				Host(func, frame) => {
					Trace.OUT.puts(" ");
					func.render(Trace.OUT);
					caller = frame.caller();
				}
			}
		}
		Trace.OUT.ln();
		return Resumption.Continue;
	}
}
