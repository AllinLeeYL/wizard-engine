// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def unused = MonitorRegister.register("test:postInstr", PostInstrTracer.new());

// Implements a test for after-instruction functionality provided by {ModuleInstrumenter}.
class PostInstrTracer extends Monitor {
	def onParse(module: Module) {
		var mm = ModuleInstrumenter.new(module);
		mm.forEachFunc(probeEveryInstr(mm, _));
	}
	private def probeEveryInstr(mm: ModuleInstrumenter, func: FuncDecl) {
		var bi = BytecodeIterator.new();

		for (it = bi.reset(func); it.more(); it.next()) {
			it.current();
			mm.afterInstrExec(func, it.pc, afterInstrFn(func, it.pc, _));
		}
	}
	private def afterInstrFn(beforeFunc: FuncDecl, beforePc: int, loc: DynamicLoc) -> Resumption {
		Trace.OUT.put2("#%d+%d", beforeFunc.func_index, beforePc);
		Trace.OUT.put2("-->#%d+%d", loc.func.decl.func_index, loc.pc).ln();
		return Resumption.Continue;
	}
	private def isNotImport(module: Module, func: FuncDecl) -> bool {
		return func.imp == null;
	}
}
