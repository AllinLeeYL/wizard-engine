// Copyright 2024 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def E_ = MonitorRegistry.register(
	"icount", "Tallies instruction counts per function.",
	InstrCountMonitor.new());

def countEveryInstr = false; // if true, use a probe on every single instruction

class InstrCountMonitor extends Monitor {
	def entries = Vector<(FuncDecl, int, CountProbe)>.new();

	def onParse(module: Module) {
		var ins = InstrCountInstrumenter.new(module);
		for (i < module.functions.length) {
			var func = module.functions[i];
			if (func.imp != null) continue;
			ins.run(func);
			entries.put(func, ins.instrs, ins.probe);
		}
	}
	def onFinish(i: Instance) {
		var maxlen = 20;
		var names = i.module.names;
		var out = Trace.OUT;
		for (i < entries.length) { // compute maximum function name length for formatting
			var e = entries[i], func = e.0, count = e.2.count;
			if (count == 0) continue;
			out.reset();
			func.render(names, out);
			if (out.length > maxlen) maxlen = out.length;
		}
		out.reset();
		out.mark().puts(" Function ").ljustify_mark(maxlen + 3);
		out.puts("static  dynamic ");
		var len = out.length;
		out.ln();
		for (i < len) out.putc('-');
		out.outln();

		var array = entries.copy();
		var sorted = Arrays.sort(array, 0, array.length, compareEntries);
		for (e in sorted) {
			var func = e.0, instrs = e.1, count = e.2.count;
			var color = if(count == 0, Palette.UNREACHABLE, Palette.COVERED);
			Trace.OUT.puts(color)
				.mark()
				.put1(" %q ", func.render(names, _))
				.ljustify_mark(maxlen + 2)
				.puts(Palette.COUNT)
				.mark()
				.put1("%d", instrs)
				.rjustify_mark(7)
				.mark()
				.put1("%d", count)
				.rjustify_mark(9)
				.puts(Palette.DEFAULT)
				.outln();
		}
	}
}

def compareEntries(a: (FuncDecl, int, CountProbe), b: (FuncDecl, int, CountProbe)) -> bool {
	return a.2.count > b.2.count;
}

class InstrCountInstrumenter(module: Module) extends BytecodeVisitor {
	def bi = BytecodeIterator.new();
	var func: FuncDecl;
	var probe: CountProbe;
	var last_pc: int;
	var count: u32;
	var instrs: int;

	def run(f: FuncDecl) {
		instrs = 0;
		func = f;
		bi.reset(func);
		probe = CountProbe.new();
		while (bi.more()) {
			bi.dispatch(this);
			last_pc = bi.pc;
			bi.next();
			instrs++;
		}
	}

	def visitControl(op: Opcode) {
		if (countEveryInstr) return visitOp(op);
		if (op == Opcode.LOOP || op == Opcode.END) { // target of a label
			if (count > 0) Instrumentation.insertLocalProbe(module, func.func_index, last_pc, CountMoreProbe.new(probe, count));
			Instrumentation.insertLocalProbe(module, func.func_index, bi.pc, probe);
		} else {
			count++;
			Instrumentation.insertLocalProbe(module, func.func_index, bi.pc, if(count > 1, CountMoreProbe.new(probe, count), probe));
		}
		count = 0;
	}

	def visitOp(op: Opcode) {
		if (countEveryInstr) Instrumentation.insertLocalProbe(module, func.func_index, bi.pc, probe);
		else count++;
	}
}