// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def monitor_ = MonitorRegistry.add(
	"globals", "Tallies reads and writes to Wasm globals.",
	GlobalsMonitor.new());

def OUT = Trace.OUT;

// Implements a simple monitor that prints global reads/writes.
class GlobalsMonitor extends Monitor {
	var reads = Vector<u64>.new();
	var writes = Vector<u64>.new();

	def onParse(module: Module) {
		var mm = ModuleInstrumenter.new(module);
		for (i < module.globals.length) {
			var global = module.globals[i];
			var index = u31.!(global.global_index);
			reads.put(0);
			writes.put(0);
			mm.beforeGlobalRead(globalReadFn(_, index), index);
			mm.beforeGlobalWrite(globalWriteFn(_, index), index);
		}
	}
	def onFinish(i: Instance, r: Result) {
		OUT.beginColor(Color.UNDERLINE).rjustify(' ', TraceUtil.renderedLength(OUT, TraceBuilder.puts(_, "#R")), 20);
		OUT.beginColor(Color.UNDERLINE).rjustify(' ', TraceUtil.renderedLength(OUT, TraceBuilder.puts(_, "#W")), 10)
			.endColors().outln();
		for (j < reads.length) {
			OUT.rjustify(' ', TraceUtil.renderedLength(OUT, TraceBuilder.put1(_, "global[%d]  ", j)), 13)
				.beginColor(if(reads[j] > 0, Color.SOURCE, Color.UNREACHABLE))
				.rjustify(' ', TraceUtil.renderedLength(OUT, TraceBuilder.put1(_, "%d ", reads[j])), 8)
				.beginColor(if(writes[j] > 0, Color.TARGET, Color.UNREACHABLE))
				.rjustify(' ', TraceUtil.renderedLength(OUT, TraceBuilder.put1(_, "%d ", writes[j])), 10)
				.endColors()
				.outln();
		}
	}

	private def globalReadFn(dynamicLoc: DynamicLoc, global_index: u31) -> Resumption {
		reads[global_index]++;
		return Resumption.Continue;
	}
	private def globalWriteFn(dynamicLoc: DynamicLoc, global_index: u31) -> Resumption {
		writes[global_index]++;
		return Resumption.Continue;
	}
}
