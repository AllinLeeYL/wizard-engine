// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def OUT = Trace.OUT;

// Implements a monitor that computes various measures of hotness of the program.
class HotnessMonitor extends Monitor {
	var hotness: HotnessData;
	var inCodeMode = false;

	def configure(args: string) -> string {
		def argMap = MonitorOptions.parseMonitorArgs(args);
		if (argMap.has("code") || argMap.has("c")) {
			inCodeMode = true;
			return null;
		}
		def buf = StringBuilder.new();
		buf.put1("invalid argument(s) \"%s\"", args);
		return buf.toString();
	}

	def onParse(m: Module) {
		hotness = HotnessData.new(m);
		var it = BytecodeIterator.new();

		for (i < m.functions.length) {
			var f = m.functions[i];
			if (f.imp != null) continue; // skip imported functions

			for (bi = it.reset(f); bi.more(); bi.next()) {
				def p = hotness.newProbe(f, bi.current(), bi.pc);
				m.insertProbeAt(f.func_index, bi.pc, p);
			}
		}
	}
	def onExit(code: int) {
		onFinish(null);
	}
	def onFinish(i: Instance) {
		if (inCodeMode) hotness.reportCode();
		else hotness.report();
	}
}

private class HotnessData(m: Module) {
	def counters = Vector<LocCounter>.new();
	var thresholds = [0.5d, 0.75d, 0.9d, 0.95d, 0.99d, 1d];
	var spectrum = [
		Palette.VERY_HIGH, 
		Palette.HIGH, 
		Palette.MEDIUM, 
		Palette.ACTIVE, 
		Palette.LOW, 
		Palette.VERY_LOW, 
		Palette.UNREACHABLE
	];

	def newProbe(f: FuncDecl, op: Opcode, pc: int) -> LocCounter {
		var p = LocCounter.new(f, pc, op, 0, 0);
		counters.put(p);
		return p;
	}

	// initialize report
	def initialize(sort: bool) -> Array<LocCounter> {
		var result = if(sort, counters.extract(), counters.copy());
		result = Arrays.sort(result, 0, result.length, LocCounter.compare);
		var total = 0uL;
		for (r in result) total += r.count;
		var sum = 0uL;
		var t = 0;
		var threshold = u64.truncd(thresholds[t] * double.roundi(total));

		for (i < result.length) {
			var r = result[i];
			r.group = t;
			sum += r.count;
			if (sum >= threshold) {
				t++;
				if (t >= thresholds.length) threshold = u64.max;
				else threshold = u64.truncd(thresholds[t] * double.roundi(total));
			}
		}

		return result;
	}

	def report() {
		var result = initialize(true);

		for (i < result.length) {
			var r = result[i];

			if (i > 0 && r.group > result[i-1].group) {
				var t = result[i-1].group;
				OUT.puts(spectrum[t])
					.put2("--- (%d instrs)\treach %d%", i, u64.truncd(100*thresholds[t]))
					.puts(Palette.DEFAULT)
					.outln();
			}
			
			var funcColor = if(r.count > 0, Palette.FUNC, Palette.UNREACHABLE);
			var lineColor = if(r.count > 0, Palette.LNO, Palette.UNREACHABLE);

			OUT.puts(funcColor)
				.puts("func ");
			r.func.render(m.names, OUT);
			OUT.puts(lineColor)
				.put1(" +%d", r.pc)
				.puts(Palette.DEFAULT)
				.puts(":\t")
				.puts(spectrum[r.group])
				.putd(r.count)
				.puts(Palette.DEFAULT)
				.outln();
		}

	}

	def reportCode() {
		initialize(false);
		
		var prev: FuncDecl;
		var bi = BytecodeIterator.new();
		var it = InstrTracer.new();
		var controlStack = ArrayStack<Opcode>.new();
		for (i < counters.length) {
			var e = counters[i];
			if (e.func != prev) {
				bi.reset(e.func);
				prev = e.func;
				OUT.puts(Palette.FUNC)
					.put1("func %q:", prev.render(m.names, _))
					.outln();
			}
			bi.skipToPc(e.pc);
			OUT.puts(Palette.LNO).put1("+%d ", e.pc)
			    .puts(spectrum[e.group])
			    .put1("\t%d\t", e.count);
			match(e.op) {
				BLOCK, LOOP, IF =>  {
					for(i < controlStack.top) OUT.putc('\t');
					bi.traceOrig(OUT, m, it);
					OUT.outln();
					controlStack.push(e.op);
					continue;
				}
				END => controlStack.pop();
				_ => ;
			}
			if (e.op == Opcode.ELSE) for(i < controlStack.top - 1) OUT.putc('\t');
			else for(i < controlStack.top) OUT.putc('\t');
			bi.traceOrig(OUT, m, it);
			OUT.outln();
		}
	}
}

private class LocCounter(func: FuncDecl, pc: int, op: Opcode, var count: u64, var group: int) extends Probe {
	def compare(that: LocCounter) -> bool {
		if (this.count > that.count) return true;
		if (this.count < that.count) return false;
		if (this.func.func_index < that.func.func_index) return true;
		if (this.func.func_index > that.func.func_index) return false;
		if (this.pc < that.pc) return true;
		return false;
	}
	def fire(loc: DynamicLoc) -> Resumption {
		count++;
		return Resumption.Continue;
	}
}
