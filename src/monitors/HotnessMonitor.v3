// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a monitor that computes various measures of hotness of the program.
class HotnessMonitor extends Monitor {
	var hotness: HotnessData;
	def onParse(m: Module) {
		hotness = HotnessData.new(m);
		var it = BytecodeIterator.new();

		for (i < m.functions.length) {
			var f = m.functions[i];
			if (f.imp != null) continue; // skip imported functions

			for (bi = it.reset(f); bi.more(); bi.next()) {
				bi.current();
				def p = hotness.newProbe(f, bi.pc);
				m.insertProbeAt(f.func_index, bi.pc, p);
			}
		}
	}
	def onExit(code: int) {
		onFinish(null);
	}
	def onFinish(i: Instance) {
		hotness.report();
	}
}

private class HotnessData(m: Module) {
	def counters = Vector<LocCounter>.new();
	
	def newProbe(f: FuncDecl, pc: int) -> LocCounter {
		var p = LocCounter.new(f, pc, 0);
		counters.put(p);
		return p;
	}
	def report() {
		// report the hottest paths in the program
		var result = counters.extract();
		result = Arrays.sort(result, 0, result.length, LocCounter.compare);
		var total = 0uL;
		for (r in result) total += r.count;
		var sum = 0uL;
		
		var thresholds = [0.5d, 0.75d, 0.9d, 0.95d, 0.99d], t = 0;
		var threshold = u64.truncd(thresholds[t] * double.roundi(total));
		
		for (i < result.length) {
			var r = result[i];
			r.func.render(m.names, Trace.OUT);
			Trace.OUT.put2(" +%d: %d", r.pc, r.count);
			Trace.OUT.outln();
			sum += r.count;
			if (sum >= threshold) {
				Trace.OUT.put2("--- (%d instrs) reach %d%", i, u64.truncd(100*thresholds[t])).outln();
				t++;
				if (t >= thresholds.length) threshold = u64.max;
				else threshold = u64.truncd(thresholds[t] * double.roundi(total));
			}
		}
	}
}
private class LocCounter(func: FuncDecl, pc: int, var count: u64) extends Probe {
	def compare(that: LocCounter) -> bool {
		if (this.count > that.count) return true;
		if (this.count < that.count) return false;
		if (this.func.func_index < that.func.func_index) return true;
		if (this.func.func_index > that.func.func_index) return false;
		if (this.pc < that.pc) return true;
		return false;
	}
	def fire(loc: DynamicLoc) -> Resumption {
		count++;
		return Resumption.Continue;
	}
}
