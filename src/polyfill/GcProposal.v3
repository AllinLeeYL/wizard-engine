// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Demonstrates that the GC proposal can be poly-filled using the MetaLanguage capabilities.
// ----- Opcodes -------------------------------------------------------------------------
enum GcPfFuncOpcode(prefix: byte, code: byte, mnemonic: string) {
	STRUCT_NEW			(0xFB, 0x00, "struct.new"),//, ImmSigs.STRUCTT, sig.none),
	STRUCT_NEW_WITH_RTT		(0xFB, 0x01, "struct.new_with_rtt"),//, ImmSigs.STRUCTT, sig.none),
	STRUCT_NEW_DEFAULT_WITH_RTT	(0xFB, 0x02, "struct.new_default_with_rtt"),//, ImmSigs.STRUCTT, sig.none),
	STRUCT_GET			(0xFB, 0x03, "struct.get"),//, ImmSigs.STRUCTT_FIELD, sig.none),
	STRUCT_GET_S			(0xFB, 0x04, "struct.get_s"),//, ImmSigs.STRUCTT_FIELD, sig.none),
	STRUCT_GET_U			(0xFB, 0x05, "struct.get_u"),//, ImmSigs.STRUCTT_FIELD, sig.none),
	STRUCT_SET			(0xFB, 0x06, "struct.set"),//, ImmSigs.STRUCTT_FIELD, sig.none),
	ARRAY_NEW			(0xFB, 0x10, "array.new"),//, ImmSigs.ARRAYT, sig.none),
	ARRAY_NEW_WITH_RTT		(0xFB, 0x11, "array.new_with_rtt"),//, ImmSigs.ARRAYT, sig.none),
	ARRAY_NEW_DEFAULT_WITH_RTT	(0xFB, 0x12, "array.new_default_with_rtt"),//, ImmSigs.ARRAYT, sig.none),
	ARRAY_GET			(0xFB, 0x13, "array.get"),//, ImmSigs.ARRAYT, sig.none),
	ARRAY_GET_S			(0xFB, 0x14, "array.get_s"),//, ImmSigs.ARRAYT, sig.none),
	ARRAY_GET_U			(0xFB, 0x15, "array.get_u"),//, ImmSigs.ARRAYT, sig.none),
	ARRAY_SET			(0xFB, 0x16, "array.set"),//, ImmSigs.ARRAYT, sig.none),
	ARRAY_LEN			(0xFB, 0x17, "array.len"),//, ImmSigs.ARRAYT, sig.none),
	I31_NEW				(0xFB, 0x20, "i31.new"),//, ImmSigs.NONE, sig.none),
	I31_GET_S			(0xFB, 0x21, "i31.get_s"),//, ImmSigs.NONE, sig.none),
	I31_GET_U			(0xFB, 0x22, "i31.get_u"),//, ImmSigs.NONE, sig.none),
	RTT_CANON			(0xFB, 0x30, "rtt.canon"),//, ImmSigs.HEAPT, sig.none),
	RTT_SUB				(0xFB, 0x31, "rtt.sub"),//, ImmSigs.SUPER_HEAPT_HEAPT, sig.none),
	REF_TEST			(0xFB, 0x40, "ref.test"),//, ImmSigs.HEAPT_HEAPT, sig.none),
	REF_CAST			(0xFB, 0x41, "ref.cast"),//, ImmSigs.HEAPT_HEAPT, sig.none),
	TRY_CAST			(0xFB, 0x42, "ref.try_cast"),//, ImmSigs.LABEL_HEAPT_HEAPT, sig.none),
}

// ----- Types -------------------------------------------------------------------------
enum GcPfTypeOpcode(code: byte) {
	DECL_STRUCT(0x5f),
	DECL_ARRAY(0x5e),
	I31REF(0x6a),
	DECL_RTT(0x69),
	REF_NONNULL(0x6B)
}
enum GcPfPackedness { UNPACKED, PACKED_I8, PACKED_I16 }
class GcPfFieldType(valueType: ValueType, packed: GcPfPackedness, mutable: bool) {
	var index: int;
}
class GcPfDataType extends HostType {
	def rttType(depth: int) -> GcPfRttType {
		var rtt = GcPfRttType.new();
		rtt.decl = this;
		rtt.depth = depth;
		return rtt;
	}
}
class GcPfStructType extends GcPfDataType {
	var fields: Array<GcPfFieldType>;
	var boilerplate: Array<Value>; // TODO: compute boilerplate
	def isAssignableTo(t: ValueType) -> bool {
		match (t) {
			ANYREF, EXTERNREF => return true;
			Host(host) => match (host) {
				that: GcPfStructType => {
					if (this == that) return true;
					if (this.fields.length < that.fields.length) return false;
					// TODO: structural comparison
					return false;
				}
				_ => return false;
			}
			_ => return false;
		}
	}
}
class GcPfArrayType extends GcPfDataType {
	var elems: Array<GcPfFieldType>;
	var value: Value; // TODO: compute default value
	def isAssignableTo(t: ValueType) -> bool {
		match (t) {
			ANYREF, EXTERNREF => return true;
			Host(host) => match (host) {
				that: GcPfArrayType => {
					if (this == that) return true;
					// TODO: element comparison
					return false;
				}
				_ => return false;
			}
			_ => return false;
		}
	}
}
class GcPfRttType extends GcPfDataType {
	var decl: GcPfDataType;
	var depth: int;
}
class GcPfI31RefType extends GcPfDataType {
}
def I31_TYPE = GcPfI31RefType.new();

// ----- Object representation ----------------------------------------------------------
class GcPfObject(rtt: GcPfRttObject, vals: Array<Value>) extends HostObject {
}
class GcPfStructObject extends GcPfObject {
	def decl: GcPfStructType;  // XXX: combine rtt and decl field
	new(decl, rtt: GcPfRttObject, vals: Array<Value>) super(rtt, vals) { }
}
class GcPfArrayObject extends GcPfObject {
	def decl: GcPfArrayType;  // XXX: combine rtt and decl field
	new(decl, rtt: GcPfRttObject, vals: Array<Value>) super(rtt, vals) { }
}
class GcPfRttObject extends HostObject {
	def host: GcPfDataType;
	def var supers: Array<GcPfRttObject>;
	new(host, prefix: Array<GcPfRttObject>) {
		supers = Arrays.grow(prefix, prefix.length + 1);
		supers[supers.length - 1] = this;
	}
}
class GcPfI31(val: u31) extends HostObject {
}

// ----- Operations ---------------------------------------------------------------------
def NULL_DEREF = HostResult.Trap(TrapReason.NULL_DEREF);
def ARRAY_INDEX_OOB = HostResult.Trap(TrapReason.ARRAY_INDEX_OOB);
def FAILED_CAST = HostResult.Trap(TrapReason.FAILED_CAST);
def OOM = HostResult.Trap(TrapReason.OOM);
def VOID = HostResult.Value0;
def ZERO = HostResult.Value1(Values.I32_0);
def ONE = HostResult.Value1(Values.I32_1);
def MAX_ARRAY_LENGTH = 1000000; // TODO: make configurable

def sx8(val: Value) -> Value { return Value.I32(u32.view(i8.view(Value.I32.!(val).val))); }
def sx16(val: Value) -> Value { return Value.I32(u32.view(i16.view(Value.I32.!(val).val))); }
def zx8(val: Value) -> Value { return Value.I32(u32.view(u8.view(Value.I32.!(val).val))); }
def zx16(val: Value) -> Value { return Value.I32(u32.view(u16.view(Value.I32.!(val).val))); }

//-----------------------------------------------------------------------------
def eval_STRUCT_NEW(st: GcPfStructType, args: Array<Value>) -> HostResult {
	var obj = GcPfStructObject.new(st, null, Arrays.dup(args));
	return HostResult.Value1(Value.Ref(obj));
}
//-----------------------------------------------------------------------------
def eval_STRUCT_NEW_WITH_RTT(st: GcPfStructType, args: Array<Value>) -> HostResult {
	var rtt = GcPfRttObject.!(Value.Ref.!(args[args.length - 1]).val);
	var obj = GcPfStructObject.new(st, rtt, Arrays.range(args, 0, args.length - 1));
	return HostResult.Value1(Value.Ref(obj));
}
//-----------------------------------------------------------------------------
def eval_STRUCT_NEW_DEFAULT_WITH_RTT(st: GcPfStructType, r: Value) -> HostResult {
	var rtt = GcPfRttObject.!(Value.Ref.!(r).val);
	var obj = GcPfStructObject.new(st, rtt, Arrays.dup(st.boilerplate));
	return HostResult.Value1(Value.Ref(obj));
}
//-----------------------------------------------------------------------------
def eval_STRUCT_GET(index: int, a: Value) -> HostResult {
	var obj = GcPfStructObject.!(Value.Ref.!(a).val);
	if (obj == null) return NULL_DEREF;
	return HostResult.Value1(obj.vals[index]);
}
//-----------------------------------------------------------------------------
def eval_STRUCT_GET_X(index: int, extend: Value -> Value, a: Value) -> HostResult {
	var obj = GcPfStructObject.!(Value.Ref.!(a).val);
	if (obj == null) return NULL_DEREF;
	return HostResult.Value1(extend(obj.vals[index]));
}
//-----------------------------------------------------------------------------
def eval_STRUCT_SET(index: int, a: Value, v: Value) -> HostResult {
	var obj = GcPfStructObject.!(Value.Ref.!(a).val);
	if (obj == null) return NULL_DEREF;
	obj.vals[index] = v;
	return VOID;
}
//-----------------------------------------------------------------------------
def eval_ARRAY_NEW(at: GcPfArrayType, v: Value, l: Value) -> HostResult {
	var len = Values.v_u(l);
	if (len > MAX_ARRAY_LENGTH) return OOM;
	var elems = Array<Value>.new(int.view(len));
	var obj = GcPfArrayObject.new(at, null, elems);
	for (i < elems.length) elems[i] = v;
	return HostResult.Value1(Value.Ref(obj));
}
//-----------------------------------------------------------------------------
def eval_ARRAY_NEW_WITH_RTT(at: GcPfArrayType, v: Value, l: Value, r: Value) -> HostResult {
	var rtt = GcPfRttObject.!(Value.Ref.!(r).val);
	var len = Values.v_u(l);
	if (len > MAX_ARRAY_LENGTH) return OOM;
	var elems = Array<Value>.new(int.view(len));
	var obj = GcPfArrayObject.new(at, rtt, elems);
	for (i < elems.length) elems[i] = v;
	return HostResult.Value1(Value.Ref(obj));
}
//-----------------------------------------------------------------------------
def eval_ARRAY_NEW_DEFAULT_WITH_RTT(at: GcPfArrayType, l: Value, r: Value) -> HostResult {
	var rtt = GcPfRttObject.!(Value.Ref.!(r).val);
	var len = Values.v_u(l);
	if (len > MAX_ARRAY_LENGTH) return OOM;
	var elems = Array<Value>.new(int.view(len));
	var obj = GcPfArrayObject.new(at, rtt, elems);
	for (i < elems.length) elems[i] = at.value;
	return HostResult.Value1(Value.Ref(obj));
}
//-----------------------------------------------------------------------------
def eval_ARRAY_GET(a: Value, i: Value) -> HostResult {
	var obj = GcPfArrayObject.!(Value.Ref.!(a).val);
	if (obj == null) return NULL_DEREF;
	var index = Values.v_u(i);
	if (index >= obj.vals.length) return ARRAY_INDEX_OOB;
	return HostResult.Value1(obj.vals[index]);
}
//-----------------------------------------------------------------------------
def eval_ARRAY_GET_X(extend: Value -> Value, a: Value, i: Value) -> HostResult {
	var obj = GcPfArrayObject.!(Value.Ref.!(a).val);
	if (obj == null) return NULL_DEREF;
	var index = Values.v_u(i);
	if (index >= obj.vals.length) return ARRAY_INDEX_OOB;
	return HostResult.Value1(extend(obj.vals[index]));
}
//-----------------------------------------------------------------------------
def eval_ARRAY_SET(a: Value, i: Value, v: Value) -> HostResult {
	var obj = GcPfArrayObject.!(Value.Ref.!(a).val);
	if (obj == null) return NULL_DEREF;
	var index = Values.v_u(i);
	if (index >= obj.vals.length) return ARRAY_INDEX_OOB;
	obj.vals[index] = v;
	return VOID;
}
//-----------------------------------------------------------------------------
def eval_ARRAY_LEN(a: Value) -> HostResult {
	var obj = GcPfArrayObject.!(Value.Ref.!(a).val);
	if (obj == null) return NULL_DEREF;
	return HostResult.Value1(Value.I32(u32.view(obj.vals.length)));
}
//-----------------------------------------------------------------------------
def eval_I31_NEW(a: Value) -> HostResult {
	var val = u31.view(Values.v_u(a));
	return HostResult.Value1(Value.Ref(GcPfI31.new(val)));
}
//-----------------------------------------------------------------------------
def eval_I31_GET_S(a: Value) -> HostResult {
	var obj = GcPfI31.!(Value.Ref.!(a).val);
	if (obj == null) return ZERO;
	var val = Values.i_v(i31.view(obj.val));
	return HostResult.Value1(val);
}
//-----------------------------------------------------------------------------
def eval_I31_GET_U(a: Value) -> HostResult {
	var obj = GcPfI31.!(Value.Ref.!(a).val);
	if (obj == null) return ZERO;
	return HostResult.Value1(Values.u_v(obj.val));
}
//-----------------------------------------------------------------------------
def eval_RTT_CANON(ht: GcPfDataType, v: void) -> HostResult; // TODO
//-----------------------------------------------------------------------------
def eval_RTT_SUB(depth: int, ht: GcPfDataType, r: Value) -> HostResult {
	var rtt = GcPfRttObject.!(Value.Ref.!(r).val);
	var nrtt = GcPfRttObject.new(ht, rtt.supers); // TODO: allocate up to depth
	return HostResult.Value1(Value.Ref(nrtt));
}
//-----------------------------------------------------------------------------
def eval_REF_TEST(depth: int, a: Value, r: Value) -> HostResult {
	var rtt = GcPfRttObject.!(Value.Ref.!(r).val);
	var obj = GcPfObject.!(Value.Ref.!(a).val);
	if (obj == null) return ZERO;
	if (obj.rtt == null) return ZERO;
	if (obj.rtt.supers.length < depth) return ZERO;
	return if(obj.rtt.supers[depth] == rtt, ONE, ZERO);
}
//-----------------------------------------------------------------------------
def eval_REF_CAST(depth: int, a: Value, r: Value) -> HostResult {
	var rtt = GcPfRttObject.!(Value.Ref.!(r).val);
	var obj = GcPfObject.!(Value.Ref.!(a).val);
	if (obj == null) return ZERO;
	if (obj.rtt == null) return ZERO;
	if (obj.rtt.supers.length < depth) return ZERO;
	return if(obj.rtt.supers[depth] == rtt, HostResult.Value1(a), FAILED_CAST);
}
//-----------------------------------------------------------------------------
def eval_TRY_CAST(depth: int, a: Value, r: Value) -> HostResult {
	var rtt = GcPfRttObject.!(Value.Ref.!(a).val);
	var obj = GcPfObject.!(Value.Ref.!(a).val);
	if (obj == null) return ZERO;
	if (obj.rtt == null) return ZERO;
	if (obj.rtt.supers.length < depth) return ZERO;
	var ok = obj.rtt.supers[depth] == rtt;
	return if (ok,
		HostResult.ValueN([a, Values.I32_1]),
		HostResult.ValueN([Values.REF_NULL, Values.I32_0]));
}

// ----- Decoding / import processing ---------------------------------------------------
class GcPfProcessor(error: ErrorGen) extends ImportProcessor("wasm-gc-polyfill") {
	def decoder = DataReader.new(null, error);
	var gctypes = Vector<GcPfDataType>.new();
	var import_args: Array<Exportable>;
	var import_arg_index: int;
	var import_pos = -1;

	def preprocess(module: Module) {
		gctypes.resize(module.abstypes.length);
		for (i < module.imports.length) {
			var decl = module.imports[i];
			if (!Strings.equals("wasm-gc-polyfill", decl.imp.module_name)) continue;
			match (decl) {
				x: AbsTypeDecl => {
					var name = decl.imp.field_name;
					setImportArgDecls(name, decl.imp.args);
					var t = preprocessAbsType(name);
					gctypes[x.abstype_index] = t;
				}
			}
		}
	}

	// Tracing and error handling helpers
	def setImportArgDecls(name: string, args: Array<Decl>) {
		this.import_args = Array.new(args.length);
		this.import_arg_index = 0;
		this.import_pos++;
		for (i < args.length) {
			match (args[i]) {
				x: AbsTypeDecl => {
					var t: GcPfDataType;
					if (x.abstype_index <= gctypes.length) t = gctypes[x.abstype_index];
					import_args[i] = ExportedValueType.new(t, ValueType.Abstract(x));
				}
			}
		}
	}
	def preprocessAbsType(name: string) -> GcPfDataType {
		if (name.length < 1) return err1("import of empty type", ());
		decoder.reset(name, 1, name.length - 1);
		var opcode = name[0];
		match (opcode) {
			GcPfTypeOpcode.DECL_STRUCT.code => return null;
			GcPfTypeOpcode.DECL_ARRAY.code => return null;
			GcPfTypeOpcode.DECL_RTT.code => {
				var rtt = GcPfRttType.new();
				rtt.depth = read_int();
				rtt.decl = read_data_type();
				return rtt;
			}
			GcPfTypeOpcode.I31REF.code => return I31_TYPE;
			GcPfTypeOpcode.REF_NONNULL.code => {
				var decl = read_data_type();
				// TODO;
			}
		}
		return null;
	}

	def processFunction(name: string, args: Array<Exportable>, decl: FuncDecl) -> Exportable {
		if (name.length < 1) return err1("import of empty type", ());
		decoder.reset(name, 1, name.length - 1);
		var opcode = name[0];
		match (opcode) {
			GcPfFuncOpcode.STRUCT_NEW.code => {
				var struct = read_struct_type();
				if (struct == null) return null;
				var sig: SigDecl; // TODO
				return HostFunctionN.new(GcPfFuncOpcode.STRUCT_NEW.name,
					sig, eval_STRUCT_NEW(struct, _));
			}
			GcPfFuncOpcode.STRUCT_NEW_WITH_RTT.code	=> {
				var struct = read_struct_type();
				if (struct == null) return null;
				var sig: SigDecl; // TODO
				return HostFunctionN.new(GcPfFuncOpcode.STRUCT_NEW_WITH_RTT.name,
					sig, eval_STRUCT_NEW_WITH_RTT(struct, _));
			}
			GcPfFuncOpcode.STRUCT_NEW_DEFAULT_WITH_RTT.code	=> {
				var struct = read_struct_type(), rtt = struct.rttType(-1);
				if (struct == null) return null;
				var sig = SigDecl.new(hta(rtt), hta(struct));
				return HostFunction1.new(GcPfFuncOpcode.STRUCT_NEW_DEFAULT_WITH_RTT.name,
					sig, eval_STRUCT_NEW_DEFAULT_WITH_RTT(struct, _));
			}
			GcPfFuncOpcode.STRUCT_GET.code => {
				var struct = read_struct_type(), field = read_field(struct);
				if (field == null) return null;
				var sig = SigDecl.new(hta(struct), [field.valueType]);
				return HostFunction1.new(GcPfFuncOpcode.STRUCT_GET.name,
					sig, eval_STRUCT_GET(field.index, _));
			}
			GcPfFuncOpcode.STRUCT_GET_S.code => {
				var struct = read_struct_type(), field = read_field(struct);
				if (field == null) return null;
				// TODO: check packedness
				var sig = SigDecl.new(hta(struct), [field.valueType]);
				var extend: Value -> Value; // TODO
				return HostFunction1.new(GcPfFuncOpcode.STRUCT_GET_S.name,
					sig, eval_STRUCT_GET_X(field.index, extend, _));
			}
			GcPfFuncOpcode.STRUCT_GET_U.code => {
				var struct = read_struct_type(), field = read_field(struct);
				if (field == null) return null;
				// TODO: check packedness, proper extension func
				var sig = SigDecl.new(hta(struct), [field.valueType]);
				var extend: Value -> Value; // TODO
				return HostFunction1.new(GcPfFuncOpcode.STRUCT_GET_U.name,
					sig, eval_STRUCT_GET_X(field.index, extend, _));
			}
			GcPfFuncOpcode.STRUCT_SET.code => {
				var struct = read_struct_type(), field = read_field(struct);
				if (field == null) return null;
				var sig = SigDecl.new(hta(struct), [field.valueType]);
				return HostFunction2.new(GcPfFuncOpcode.STRUCT_SET.name,
					sig, eval_STRUCT_SET(field.index, _, _));
			}
			GcPfFuncOpcode.ARRAY_NEW.code => {
				var array = read_array_type();
				if (array == null) return null;
			}
			GcPfFuncOpcode.ARRAY_NEW_WITH_RTT.code => {
				var array = read_array_type();
				if (array == null) return null;
			}
			GcPfFuncOpcode.ARRAY_NEW_DEFAULT_WITH_RTT.code => {
				var array = read_array_type();
				if (array == null) return null;
			}
			GcPfFuncOpcode.ARRAY_GET.code => {
				var array = read_array_type();
				if (array == null) return null;
				var sig = SigDecl.new([ValueType.Host(array), ValueType.I32],
					[array.elems[0].valueType]);
				return HostFunction2.new(GcPfFuncOpcode.ARRAY_GET_S.name,
					sig, eval_ARRAY_GET);
			}
			GcPfFuncOpcode.ARRAY_GET_S.code => {
				var array = read_array_type();
				if (array == null) return null;
				var sig = SigDecl.new([ValueType.Host(array), ValueType.I32],
					[array.elems[0].valueType]);
				var extend: Value -> Value; // TODO
				return HostFunction2.new(GcPfFuncOpcode.ARRAY_GET_S.name,
					sig, eval_ARRAY_GET_X(extend, _, _));
			}
			GcPfFuncOpcode.ARRAY_GET_U.code => {
				var array = read_array_type();
				if (array == null) return null;
				var sig = SigDecl.new([ValueType.Host(array), ValueType.I32],
					[array.elems[0].valueType]);
				var extend: Value -> Value; // TODO
				return HostFunction2.new(GcPfFuncOpcode.ARRAY_GET_U.name,
					sig, eval_ARRAY_GET_X(extend, _, _));
			}
			GcPfFuncOpcode.ARRAY_SET.code => {
				var array = read_array_type();
				if (array == null) return null;
				var sig = SigDecl.new([ValueType.Host(array), ValueType.I32,
					array.elems[0].valueType], SigCache.arr_v);
				return HostFunction3.new(GcPfFuncOpcode.ARRAY_SET.name,
					sig, eval_ARRAY_SET);
			}
			GcPfFuncOpcode.ARRAY_LEN.code => {
				var array = read_array_type();
				var sig = SigDecl.new(hta(array), SigCache.arr_i);
				return HostFunction1.new(GcPfFuncOpcode.ARRAY_LEN.name,
					sig, eval_ARRAY_LEN);
			}
			GcPfFuncOpcode.I31_NEW.code => {
				var sig = SigDecl.new(SigCache.arr_i, hta(I31_TYPE));
				return HostFunction1.new(GcPfFuncOpcode.I31_NEW.name,
					sig, eval_I31_NEW);
			}
			GcPfFuncOpcode.I31_GET_S.code => {
				var sig = SigDecl.new(hta(I31_TYPE), SigCache.arr_i);
				return HostFunction1.new(GcPfFuncOpcode.I31_GET_S.name,
					sig, eval_I31_GET_S);
			}
			GcPfFuncOpcode.I31_GET_U.code => {
				var sig = SigDecl.new(hta(I31_TYPE), SigCache.arr_i);
				return HostFunction1.new(GcPfFuncOpcode.I31_GET_U.name,
					sig, eval_I31_GET_U);
			}
			GcPfFuncOpcode.RTT_CANON.code => {
				var rtt = read_rtt_type();
				var sig = SigDecl.new(SigCache.arr_v, hta(rtt));
				return HostFunction0.new(GcPfFuncOpcode.RTT_CANON.name,
					sig, eval_RTT_CANON(rtt, _));
			}
			GcPfFuncOpcode.RTT_SUB.code => {
				var rtt1 = read_rtt_type(), rtt2 = read_rtt_type();
				var sig = SigDecl.new(hta(rtt1), hta(rtt2));
				return HostFunction1.new(GcPfFuncOpcode.RTT_SUB.name,
					sig, eval_RTT_SUB(rtt2.depth, rtt2, _));
			}
			GcPfFuncOpcode.REF_TEST.code => {
				var data = read_data_type();
				var rtt = read_rtt_type();
				var sig = SigDecl.new(hta(data), SigCache.arr_i);
				return HostFunction2.new(GcPfFuncOpcode.REF_TEST.name,
					sig, eval_REF_TEST(rtt.depth, _, _));
			}
			GcPfFuncOpcode.REF_CAST.code => {
				var data = read_data_type();
				var rtt = read_rtt_type();
				var sig = SigDecl.new(hta(data), hta(rtt.decl));
				return HostFunction2.new(GcPfFuncOpcode.REF_CAST.name,
					sig, eval_REF_CAST(rtt.depth, _, _));
			}
			GcPfFuncOpcode.TRY_CAST.code => {
				var data = read_data_type();
				var rtt = read_rtt_type();
				var sig = SigDecl.new(hta(data), [ValueType.Host(rtt.decl), ValueType.I32]);
				return HostFunction2.new(GcPfFuncOpcode.TRY_CAST.name,
					sig, eval_TRY_CAST(rtt.depth, _, _));
			}
		}
		return null;
	}
	def hta(ht: HostType) -> Array<ValueType> {
		return [ValueType.Host(ht)];
	}
	def read_data_type() -> GcPfDataType; // TODO
	def read_struct_type() -> GcPfStructType; // TODO
	def read_array_type() -> GcPfArrayType; // TODO
	def read_rtt_type() -> GcPfRttType; // TODO
	def read_field(t: GcPfStructType) -> GcPfFieldType; // TODO
	def read_int() -> int; // TODO
	def processAbsType(name: string, args: Array<Exportable>, decl: AbsTypeDecl) -> Exportable {
		return gctypes[decl.abstype_index];
	}
	def err1<T, R>(s: string, p: T) -> R {
		error.abs(import_pos).set(Strings.format1(s, p));
		var d: R;
		return d;
	}
}
