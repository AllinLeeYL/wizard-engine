// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Enumeration of the exported functions
enum WaveExports(sig: SigDecl, invoke: (WaveInstance, Array<Value>) -> HostResult) {
	arg_len(SigCache.i_i, WaveInstance.arg_len),
	arg_copy(SigCache.iii_i, WaveInstance.arg_copy),
	fs_size(SigCache.ii_i, WaveInstance.fs_size),
	fs_chmod(SigCache.iii_i, WaveInstance.fs_chmod),
	fs_open(SigCache.iii_i, WaveInstance.fs_open),
	fs_read(SigCache.iii_i, WaveInstance.fs_read),
	fs_write(SigCache.iii_i, WaveInstance.fs_write),
	fs_avail(SigCache.i_i, WaveInstance.fs_avail),
	fs_close(SigCache.i_v, WaveInstance.fs_close),
	ticks_ms(SigCache.v_i, WaveInstance.ticks_ms),
	ticks_us(SigCache.v_i, WaveInstance.ticks_us),
	ticks_ns(SigCache.v_i, WaveInstance.ticks_ns),
	throw_ex(SigCache.iiii_v, WaveInstance.throw_ex)
}

def traceWrapFunc(name: string, hf: Array<Value> -> HostResult, args: Array<Value>) -> HostResult {
	var buf = TRACE_BUILDER;
	buf.reset();
	buf.puts(name);
	Values.renderVals(buf, args);
	buf.puts(" = ");
	var r = hf(args);
	match (r) {
		Value0 => {
		}
		Value1(val) => {
			val.render(buf);
		}
		ValueN(vals) => {
			if (vals.length == 1) {
				vals[0].render(buf);
			} else {
				Values.renderVals(buf, vals);
			}
		}
		Trap(reason) => buf.put1("trap %s", reason.name);
		Error(msg) => buf.put1("error %s", msg);
		TailCall(func, args) => buf.puts("<tailcall>");
	}
	buf.outln();
	return r;
}

// State for an instance that has imported the wave module.
class WaveInstance(var cmdline_args: Array<string>, trace: bool) {
	private def fds = Array<int>.new(MAX_FDS);
	private var lastfd: int;
	private def oob = HostResult.Trap(TrapReason.MEM_OUT_OF_BOUNDS);
	var memory: Memory;
	var main: Function;
	new() {
		for (i < fds.length) fds[i] = -1;
		fds[0] = 0;
		fds[1] = 1;
		fds[2] = 2;
		lastfd = 3;
	}
	def provideImports(module: Module, result: Array<Exportable>) {
		var imports = module.imports;
		for (j < imports.length) {
			var i = imports[j];
			if (!Strings.equal("wave", i.imp.module_name)) continue;
			if (!FuncDecl.?(i)) continue;
			var impf = FuncDecl.!(i);
			for (ex in WaveExports) {
				if (Strings.equal(ex.name, i.imp.field_name)) {
					var func = ex.invoke(this, _);
					if (trace) func = traceWrapFunc(ex.name, func, _);
					result[j] = HostFunctionN.new(ex.name, ex.sig, func);
					break;
				}
			}
		}
	}
	def extractMemoryExport(instance: Instance) -> bool {
		// Find memory and save internally
		var module = instance.module;
		var exports = module.exports;
		for (j < exports.length) {
			var mex = module.exports[j], iex = instance.exports[j];
			if (Strings.equal("mem", mex.0) && Memory.?(iex)) {
				memory = Memory.!(iex);
				return true;
			}
		}
		return false;
	}
	def extractMainExport(instance: Instance) -> Function {
		var module = instance.module;
		var exports = module.exports;
		var found: Function;
		var count = 0;
		for (j < exports.length) {
			var mex = module.exports[j], iex = instance.exports[j];
			if (!Function.?(iex)) continue;
			found = Function.!(iex);
			if (Strings.equal("main", mex.0)) return found; // explicit name match
			count++;
		}
		return if(count == 1, found); // if only one exported function, assume it is main
	}

	// ==={Provided functions}============================================
	def arg_len(args: Array<Value>) -> HostResult {
		var arg = Values.v_u(args[0]);
		if (arg >= cmdline_args.length) return MINUS_1;
		return i(cmdline_args[arg].length);
	}
	def arg_copy(args: Array<Value>) -> HostResult {
		if (memory == null) return oob;
		var arg = Values.v_u(args[0]);
		var ptr = Values.v_u(args[1]);
		var len = Values.v_u(args[2]);
		if (arg >= cmdline_args.length) return MINUS_1;
		var data = cmdline_args[arg];
		if (len > data.length) len = u32.!(data.length);
		var i = memory.boundsCheck(0, ptr, len);
		if (i < 0) return oob;
		ArrayUtil.copyInto(V3Memory.!(memory).data, int.!(ptr), data, 0, int.!(len));
		return this.i(int.!(len));
	}

	def fs_size(args: Array<Value>) -> HostResult {
		if (memory == null) return oob;
		var ptr = Values.v_u(args[0]);
		var len = Values.v_u(args[1]);
		var path = memory.extract(ptr, len);
		if (path == null) return oob;
		var fd = System.fileOpen(path, true);
		if (fd < 0) return i(0);
		var size = System.fileLeft(fd);
		System.fileClose(fd);
		return i(size);
	}
	def fs_chmod(args: Array<Value>) -> HostResult {
		if (memory == null) return oob;
		var ptr = Values.v_u(args[0]);
		var len = Values.v_u(args[1]);
		var perm = Values.v_u(args[2]);
		var path = memory.extract(ptr, len);
		if (path == null) return MINUS_1;
		System.chmod(path, int.view(perm));
		return i(0);
	}
	def fs_open(args: Array<Value>) -> HostResult {
		if (memory == null) return oob;
		var ptr = Values.v_u(args[0]);
		var len = Values.v_u(args[1]);
		var mode = Values.v_u(args[2]);
		var path = memory.extract(ptr, len);
		if (path == null) return MINUS_1;
		var fd = allocfd();
		if (fd < 0) return MINUS_1; // out of file descriptors
		var s = System.fileOpen(path, mode == 0);
		if (s < 0) return i(s);
		fds[fd] = s;
		return i(fd);
	}
	def fs_read(args: Array<Value>) -> HostResult {
		if (memory == null) return oob;
		var fd = Values.v_i(args[0]);
		var buf = Values.v_u(args[1]);
		var len = Values.v_u(args[2]);
		var s = sysfd(fd);
		if (s < 0) return MINUS_1;
		var t = V3Memory.!(memory).alias(buf, len);
		if (t.0 == null) return MINUS_1;
		var r = System.fileReadK(s, t.0, t.1, t.2);
		return i(r);
	}
	def fs_write(args: Array<Value>) -> HostResult {
		if (memory == null) return oob;
		var fd = Values.v_i(args[0]);
		var buf = Values.v_u(args[1]);
		var len = Values.v_u(args[2]);
		var s = sysfd(fd);
		if (s < 0) return MINUS_1;
		var t = V3Memory.!(memory).alias(buf, len);
		if (t.0 == null) return MINUS_1;
		System.fileWriteK(s, t.0, t.1, t.2);
		return i(0);
	}
	def fs_avail(args: Array<Value>) -> HostResult {
		var fd = Values.v_i(args[0]);
		var s = sysfd(fd);
		if (s < 0) return MINUS_1;
		var r = System.fileLeft(s);
		return i(r);
	}
	def fs_close(args: Array<Value>) -> HostResult {
		var fd = Values.v_i(args[0]);
		var s = sysfd(fd);
		if (s < 0) return MINUS_1;
		System.fileClose(s);
		fds[fd] = -1;
		return NONE;
	}
	def ticks_ms(args: Array<Value>) -> HostResult {
		return i(System.ticksMs());
	}
	def ticks_us(args: Array<Value>) -> HostResult {
		return i(System.ticksUs());
	}
	def ticks_ns(args: Array<Value>) -> HostResult {
		return i(System.ticksNs());
	}
	def throw_ex(args: Array<Value>) -> HostResult {
		if (memory == null) return oob;
		var ex = Values.v_u(args[0]);
		var ex_len = Values.v_u(args[1]);
		var msg = Values.v_u(args[2]);
		var msg_len = Values.v_u(args[3]);
		var errstr = memory.extract(ex, ex_len);
		var msgstr = memory.extract(msg, msg_len);
		System.error(errstr, msgstr);  // TODO: print wasm-level stack trace.
		return NONE;
	}
	// ===================================================================

	private def i(v: int) -> HostResult {
		return HostResult.Value1(Value.I32(u32.view(v)));
	}
	private def sysfd(fd: int) -> int {
		return if(fd < 0 || fd >= fds.length, -1, fds[fd]);
	}
	private def allocfd() -> int {
		for (i = lastfd; i < fds.length; i++) {
			if (fds[i] < 0) {
				lastfd = (i + 1) % fds.length;
				return i;
			}
		}
		for (i < lastfd) {
			lastfd = (i + 1) % fds.length;
			return i;
		}
		return -1;
	}
}
def MINUS_1 = HostResult.Value1(Value.I32(0xFFFFFFFFu));
def NONE = HostResult.Value0;
def MAX_FDS = 256;
def TRACE_BUILDER = TraceBuilder.new();
